
FreeRTOS_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d778  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  0801d8b8  0801d8b8  0002d8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e790  0801e790  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  0801e790  0801e790  0002e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e798  0801e798  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e798  0801e798  0002e798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e79c  0801e79c  0002e79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0801e7a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043d8  20000118  0801e8b8  00030118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f0  0801e8b8  000344f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049ae8  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ae9c  00000000  00000000  00079c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003800  00000000  00000000  00084ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033a8  00000000  00000000  000882c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae51  00000000  00000000  0008b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000462d5  00000000  00000000  000b64c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d538d  00000000  00000000  000fc796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d1b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e678  00000000  00000000  001d1b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d8a0 	.word	0x0801d8a0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0801d8a0 	.word	0x0801d8a0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2uiz>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	d20e      	bcs.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30b      	bcc.n	8000b46 <__aeabi_f2uiz+0x22>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d409      	bmi.n	8000b4c <__aeabi_f2uiz+0x28>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	fa23 f002 	lsr.w	r0, r3, r2
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2uiz+0x32>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d102      	bne.n	8000b5c <__aeabi_f2uiz+0x38>
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14d      	bne.n	8000c40 <__udivmoddi4+0xac>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d968      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b152      	cbz	r2, 8000bc6 <__udivmoddi4+0x32>
 8000bb0:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb4:	f1c2 0120 	rsb	r1, r2, #32
 8000bb8:	fa20 f101 	lsr.w	r1, r0, r1
 8000bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc0:	ea41 0803 	orr.w	r8, r1, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000bca:	0c21      	lsrs	r1, r4, #16
 8000bcc:	fbb8 fef5 	udiv	lr, r8, r5
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	fb05 831e 	mls	r3, r5, lr, r8
 8000bd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bdc:	fb0e f107 	mul.w	r1, lr, r7
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x68>
 8000be4:	eb1c 0303 	adds.w	r3, ip, r3
 8000be8:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000bec:	f080 811e 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	f240 811b 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c04:	fb05 3310 	mls	r3, r5, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 f707 	mul.w	r7, r0, r7
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x96>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1c:	f080 8108 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	f240 8105 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c30:	2100      	movs	r1, #0
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa8>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	f000 80ee 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c50:	4608      	mov	r0, r1
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	42ab      	cmp	r3, r5
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e2      	beq.n	8000c3c <__udivmoddi4+0xa8>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8091 	bne.w	8000dac <__udivmoddi4+0x218>
 8000c8a:	eba1 050c 	sub.w	r5, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb5 f3f7 	udiv	r3, r5, r7
 8000c9c:	fb07 5013 	mls	r0, r7, r3, r5
 8000ca0:	0c25      	lsrs	r5, r4, #16
 8000ca2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	42a8      	cmp	r0, r5
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0505 	adds.w	r5, ip, r5
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	42a8      	cmp	r0, r5
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a2d      	subs	r5, r5, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cc8:	fb07 5510 	mls	r5, r7, r0, r5
 8000ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79e      	b.n	8000c32 <__udivmoddi4+0x9e>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa05 f301 	lsl.w	r3, r5, r1
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f301 	lsl.w	r3, r0, r1
 8000d16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 5518 	mls	r5, r9, r8, r5
 8000d24:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0505 	adds.w	r5, ip, r5
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4465      	add	r5, ip
 8000d4c:	1a2d      	subs	r5, r5, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d54:	fb09 5510 	mls	r5, r9, r0, r5
 8000d58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45ae      	cmp	lr, r5
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0505 	adds.w	r5, ip, r5
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	45ae      	cmp	lr, r5
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4465      	add	r5, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba5 050e 	sub.w	r5, r5, lr
 8000d82:	42a5      	cmp	r5, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15e      	cbz	r6, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb65 050e 	sbc.w	r5, r5, lr
 8000d96:	fa05 f707 	lsl.w	r7, r5, r7
 8000d9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9e:	40cd      	lsrs	r5, r1
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c6 7500 	strd	r7, r5, [r6]
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa25 f303 	lsr.w	r3, r5, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	430d      	orrs	r5, r1
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dcc:	fb07 3011 	mls	r0, r7, r1, r3
 8000dd0:	0c2b      	lsrs	r3, r5, #16
 8000dd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000dd6:	fb01 f00e 	mul.w	r0, r1, lr
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3902      	subs	r1, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	b2ad      	uxth	r5, r5
 8000df8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dfc:	fb07 3310 	mls	r3, r7, r0, r3
 8000e00:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e04:	fb00 f30e 	mul.w	r3, r0, lr
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e10:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4465      	add	r5, ip
 8000e1e:	1aed      	subs	r5, r5, r3
 8000e20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e707      	b.n	8000c3c <__udivmoddi4+0xa8>
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	e6e5      	b.n	8000bfc <__udivmoddi4+0x68>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6fa      	b.n	8000c2a <__udivmoddi4+0x96>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4465      	add	r5, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	4013      	ands	r3, r2
 8000eb0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <MX_ADC_Init+0x98>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ec8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC_Init+0x94>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_ADC_Init+0x94>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_ADC_Init+0x94>)
 8000f3e:	f001 ff49 	bl	8002dd4 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 fab0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000134 	.word	0x20000134
 8000f54:	40012400 	.word	0x40012400

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_ADC_MspInit+0x24>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d103      	bne.n	8000f72 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f7ff ff7b 	bl	8000e68 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012400 	.word	0x40012400

08000f80 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_ADC_MspDeInit+0x24>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d103      	bne.n	8000f9a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f7ff ff7f 	bl	8000e98 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <SYS_InitMeasurement+0x14>)
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <SYS_InitMeasurement+0x18>)
 8000fb0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000134 	.word	0x20000134
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fd2:	f000 f871 	bl	80010b8 <SYS_GetBatteryLevel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fda:	4830      	ldr	r0, [pc, #192]	; (800109c <SYS_GetTemperatureLevel+0xd8>)
 8000fdc:	f000 f8a0 	bl	8001120 <ADC_ReadChannels>
 8000fe0:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d026      	beq.n	800103c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d01c      	beq.n	8001034 <SYS_GetTemperatureLevel+0x70>
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <SYS_GetTemperatureLevel+0xe4>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	461a      	mov	r2, r3
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2264      	movs	r2, #100	; 0x64
 8001016:	fb03 f202 	mul.w	r2, r3, r2
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SYS_GetTemperatureLevel+0xdc>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SYS_GetTemperatureLevel+0xe0>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	fb92 f3f3 	sdiv	r3, r2, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	331e      	adds	r3, #30
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	e001      	b.n	8001038 <SYS_GetTemperatureLevel+0x74>
 8001034:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e01c      	b.n	8001076 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <SYS_GetTemperatureLevel+0xe8>)
 8001046:	fba3 1302 	umull	r1, r3, r3, r2
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	0852      	lsrs	r2, r2, #1
 800104e:	4413      	add	r3, r2
 8001050:	0adb      	lsrs	r3, r3, #11
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800105e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <SYS_GetTemperatureLevel+0xec>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1292      	asrs	r2, r2, #10
 800106a:	17db      	asrs	r3, r3, #31
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	331e      	adds	r3, #30
 8001072:	b29b      	uxth	r3, r3
 8001074:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <SYS_GetTemperatureLevel+0xf0>)
 800107e:	2201      	movs	r2, #1
 8001080:	2100      	movs	r1, #0
 8001082:	2001      	movs	r0, #1
 8001084:	f01b f82a 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	b0001000 	.word	0xb0001000
 80010a0:	1fff75c8 	.word	0x1fff75c8
 80010a4:	1fff75a8 	.word	0x1fff75a8
 80010a8:	09ee009f 	.word	0x09ee009f
 80010ac:	00100101 	.word	0x00100101
 80010b0:	68db8bad 	.word	0x68db8bad
 80010b4:	0801d8b8 	.word	0x0801d8b8

080010b8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <SYS_GetBatteryLevel+0x5c>)
 80010c8:	f000 f82a 	bl	8001120 <ADC_ReadChannels>
 80010cc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	e016      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00b      	beq.n	80010fe <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SYS_GetBatteryLevel+0x60>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010f0:	fb03 f202 	mul.w	r2, r3, r2
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e004      	b.n	8001108 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SYS_GetBatteryLevel+0x64>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001108:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	b4002000 	.word	0xb4002000
 8001118:	1fff75aa 	.word	0x1fff75aa
 800111c:	004c08d8 	.word	0x004c08d8

08001120 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001138:	f7ff fec0 	bl	8000ebc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <ADC_ReadChannels+0x88>)
 800113e:	f002 fc2f 	bl	80039a0 <HAL_ADCEx_Calibration_Start>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001148:	f000 f9b0 	bl	80014ac <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001160:	f002 f996 	bl	8003490 <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800116a:	f000 f99f 	bl	80014ac <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001170:	f002 f872 	bl	8003258 <HAL_ADC_Start>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800117a:	f000 f997 	bl	80014ac <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800117e:	f04f 31ff 	mov.w	r1, #4294967295
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001184:	f002 f8e0 	bl	8003348 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <ADC_ReadChannels+0x88>)
 800118a:	f002 f8ab 	bl	80032e4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001190:	f002 f971 	bl	8003476 <HAL_ADC_GetValue>
 8001194:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <ADC_ReadChannels+0x88>)
 8001198:	f001 ffe2 	bl	8003160 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800119c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000134 	.word	0x20000134

080011ac <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <PreSleepProcessing+0x34>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	099b      	lsrs	r3, r3, #6
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <PreSleepProcessing+0x38>)
 80011cc:	f003 fd20 	bl	8004c10 <HAL_LPTIM_Counter_Start_IT>
  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);

  /*Enter Low Power Mode*/
  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);

  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80011d0:	2101      	movs	r1, #1
 80011d2:	2000      	movs	r0, #0
 80011d4:	f004 f8b4 	bl	8005340 <HAL_PWR_EnterSLEEPMode>

   //ulExpectedIdleTime = 0;
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	10624dd3 	.word	0x10624dd3
 80011e4:	200009ec 	.word	0x200009ec

080011e8 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <PostSleepProcessing+0x1c>)
 80011f2:	f003 fdaf 	bl	8004d54 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 80011f6:	f000 f89d 	bl	8001334 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200009ec 	.word	0x200009ec

08001208 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <vApplicationGetIdleTaskMemory+0x2c>)
 8001218:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <vApplicationGetIdleTaskMemory+0x30>)
 800121e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000198 	.word	0x20000198
 8001238:	200001ec 	.word	0x200001ec

0800123c <LL_AHB1_GRP1_EnableClock>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001260:	68fb      	ldr	r3, [r7, #12]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001270:	2004      	movs	r0, #4
 8001272:	f7ff ffe3 	bl	800123c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff ffe0 	bl	800123c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2102      	movs	r1, #2
 8001280:	200f      	movs	r0, #15
 8001282:	f002 fcde 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001286:	200f      	movs	r0, #15
 8001288:	f002 fcf7 	bl	8003c7a <HAL_NVIC_EnableIRQ>

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a0:	f023 0218 	bic.w	r2, r3, #24
 80012a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_AHB2_GRP1_EnableClock>:
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f2:	f001 fb99 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f6:	f000 f81d 	bl	8001334 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80012fa:	f000 f8a5 	bl	8001448 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80012fe:	f000 f877 	bl	80013f0 <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <main+0x40>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f009 f8eb 	bl	800a4f4 <osThreadCreate>
 800131e:	4603      	mov	r3, r0
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <main+0x44>)
 8001322:	6013      	str	r3, [r2, #0]
 // osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 // LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);

  osKernelStart();
 8001324:	f009 f8df 	bl	800a4e6 <osKernelStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001328:	e7fe      	b.n	8001328 <main+0x3c>
 800132a:	bf00      	nop
 800132c:	0801d8d4 	.word	0x0801d8d4
 8001330:	20000a28 	.word	0x20000a28

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09a      	sub	sp, #104	; 0x68
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2248      	movs	r2, #72	; 0x48
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f01c fa22 	bl	801d78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800135a:	f003 ffe3 	bl	8005324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff ff96 	bl	8001290 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <SystemClock_Config+0xb8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800136c:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <SystemClock_Config+0xb8>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <SystemClock_Config+0xb8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 8001380:	232c      	movs	r3, #44	; 0x2c
 8001382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001384:	2381      	movs	r3, #129	; 0x81
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800138c:	2300      	movs	r3, #0
 800138e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001390:	23b0      	movs	r3, #176	; 0xb0
 8001392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fb09 	bl	80059bc <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013b0:	f000 f87c 	bl	80014ac <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80013b4:	234f      	movs	r3, #79	; 0x4f
 80013b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fe8e 	bl	80060f4 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013de:	f000 f865 	bl	80014ac <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3768      	adds	r7, #104	; 0x68
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	58000400 	.word	0x58000400

080013f0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_LPTIM1_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_LPTIM1_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_LPTIM1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_LPTIM1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_LPTIM1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_LPTIM1_Init+0x50>)
 800142e:	f003 fb27 	bl	8004a80 <HAL_LPTIM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 f838 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200009ec 	.word	0x200009ec
 8001444:	40007c00 	.word	0x40007c00

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	2002      	movs	r0, #2
 800145e:	f7ff ff2c 	bl	80012ba <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <MX_GPIO_Init+0x48>)
 8001468:	f003 fa68 	bl	800493c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800146c:	2320      	movs	r3, #32
 800146e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_GPIO_Init+0x48>)
 8001482:	f003 f82d 	bl	80044e0 <HAL_GPIO_Init>

}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	48000400 	.word	0x48000400

08001494 <StartLoRaWANTask>:
}
/* USER CODE END 4 */
/* USER CODE BEGIN 4 */

void StartLoRaWANTask(void const * argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 800149c:	f008 fc8a 	bl	8009db4 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_LoRaWAN_Process();
 80014a0:	f008 fc90 	bl	8009dc4 <MX_LoRaWAN_Process>
    osDelay(50);
 80014a4:	2032      	movs	r0, #50	; 0x32
 80014a6:	f009 f871 	bl	800a58c <osDelay>
	MX_LoRaWAN_Process();
 80014aa:	e7f9      	b.n	80014a0 <StartLoRaWANTask+0xc>

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>

080014b6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <LL_APB1_GRP1_EnableClock>:
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
	...

08001508 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	222c      	movs	r2, #44	; 0x2c
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f01c f939 	bl	801d78c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_RTC_Init+0x9c>)
 800151c:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <MX_RTC_Init+0xa0>)
 800151e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001522:	221f      	movs	r2, #31
 8001524:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_RTC_Init+0x9c>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_RTC_Init+0x9c>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001550:	f005 fa92 	bl	8006a78 <HAL_RTC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800155a:	f7ff ffa7 	bl	80014ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_RTC_Init+0x9c>)
 8001560:	f005 fd80 	bl	8007064 <HAL_RTCEx_SetSSRU_IT>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800156a:	f7ff ff9f 	bl	80014ac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800157a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800157e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_RTC_Init+0x9c>)
 800158e:	f005 faed 	bl	8006b6c <HAL_RTC_SetAlarm_IT>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001598:	f7ff ff88 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3730      	adds	r7, #48	; 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000a2c 	.word	0x20000a2c
 80015a8:	40002800 	.word	0x40002800

080015ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b090      	sub	sp, #64	; 0x40
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f01c f8e5 	bl	801d78c <memset>
  if(rtcHandle->Instance==RTC)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_RTC_MspInit+0x74>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d125      	bne.n	8001618 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 f92b 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80015e8:	f7ff ff60 	bl	80014ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ec:	f7ff ff63 	bl	80014b6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80015f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015f4:	f7ff ff6f 	bl	80014d6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2002      	movs	r0, #2
 80015fe:	f002 fb20 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001602:	2002      	movs	r0, #2
 8001604:	f002 fb39 	bl	8003c7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	202a      	movs	r0, #42	; 0x2a
 800160e:	f002 fb18 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001612:	202a      	movs	r0, #42	; 0x2a
 8001614:	f002 fb31 	bl	8003c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3740      	adds	r7, #64	; 0x40
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40002800 	.word	0x40002800

08001624 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800162a:	2201      	movs	r2, #1
 800162c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	58000400 	.word	0x58000400

0800163c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001658:	f001 fa18 	bl	8002a8c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800165c:	f7ff ffe2 	bl	8001624 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001660:	2001      	movs	r0, #1
 8001662:	f003 fef1 	bl	8005448 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}

0800166a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800166e:	f001 fa1b 	bl	8002aa8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001672:	f000 ffc5 	bl	8002600 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800167e:	f001 fa05 	bl	8002a8c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001682:	2101      	movs	r1, #1
 8001684:	2000      	movs	r0, #0
 8001686:	f003 fe5b 	bl	8005340 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}

0800168e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8001692:	f001 fa09 	bl	8002aa8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}

0800169a <LL_APB1_GRP1_EnableClock>:
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	210f      	movs	r1, #15
 80016d2:	f06f 0001 	mvn.w	r0, #1
 80016d6:	f002 fab4 	bl	8003c42 <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2238      	movs	r2, #56	; 0x38
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f01c f84b 	bl	801d78c <memset>
  if(hlptim->Instance==LPTIM1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <HAL_LPTIM_MspInit+0x60>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d11a      	bne.n	8001736 <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001704:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_LPTIM_MspInit+0x64>)
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f005 f892 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800171a:	f7ff fec7 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800171e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001722:	f7ff ffba 	bl	800169a <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2027      	movs	r0, #39	; 0x27
 800172c:	f002 fa89 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001730:	2027      	movs	r0, #39	; 0x27
 8001732:	f002 faa2 	bl	8003c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3740      	adds	r7, #64	; 0x40
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40007c00 	.word	0x40007c00
 8001744:	000c0004 	.word	0x000c0004

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f001 f977 	bl	8002a68 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800177a:	f009 fd39 	bl	800b1f0 <xTaskGetSchedulerState>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d001      	beq.n	8001788 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001784:	f009 ff28 	bl	800b5d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001792:	f005 fca3 	bl	80070dc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a2c 	.word	0x20000a2c

080017a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a8:	f003 f8e0 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Channel5_IRQHandler+0x10>)
 80017b6:	f002 fcf7 	bl	80041a8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000b08 	.word	0x20000b08

080017c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART1_IRQHandler+0x10>)
 80017ca:	f006 fae7 	bl	8007d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000a78 	.word	0x20000a78

080017d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART2_IRQHandler+0x10>)
 80017de:	f006 fadd 	bl	8007d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000b68 	.word	0x20000b68

080017ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <RTC_Alarm_IRQHandler+0x10>)
 80017f2:	f005 fb23 	bl	8006e3c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000a2c 	.word	0x20000a2c

08001800 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001806:	f005 ffd1 	bl	80077ac <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000a64 	.word	0x20000a64

08001814 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <LPTIM1_IRQHandler+0x10>)
 800181a:	f003 fb01 	bl	8004e20 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200009ec 	.word	0x200009ec

08001828 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001834:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SUBGHZ_Init+0x20>)
 800185e:	2208      	movs	r2, #8
 8001860:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_SUBGHZ_Init+0x20>)
 8001864:	f005 fd26 	bl	80072b4 <HAL_SUBGHZ_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800186e:	f7ff fe1d 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000a64 	.word	0x20000a64

0800187c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ffcf 	bl	8001828 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2032      	movs	r0, #50	; 0x32
 8001890:	f002 f9d7 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001894:	2032      	movs	r0, #50	; 0x32
 8001896:	f002 f9f0 	bl	8003c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80018b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <LL_FLASH_GetUDN+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	1fff7580 	.word	0x1fff7580

080018dc <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <LL_FLASH_GetDeviceID+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	1fff7584 	.word	0x1fff7584

080018f4 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_FLASH_GetSTCompanyID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0a1b      	lsrs	r3, r3, #8
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	1fff7584 	.word	0x1fff7584

0800190c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ffc6 	bl	80018a2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001916:	f01b fa0d 	bl	801cd34 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800191a:	f000 f97d 	bl	8001c18 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800191e:	f01a fbaf 	bl	801c080 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <SystemApp_Init+0x44>)
 8001924:	f01a fc5a 	bl	801c1dc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001928:	2002      	movs	r0, #2
 800192a:	f01a fc65 	bl	801c1f8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800192e:	f7ff fb3b 	bl	8000fa8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001932:	f000 f9a3 	bl	8001c7c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001936:	f01a fe49 	bl	801c5cc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800193a:	2101      	movs	r1, #1
 800193c:	2001      	movs	r0, #1
 800193e:	f01a fe85 	bl	801c64c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001942:	2101      	movs	r1, #1
 8001944:	2001      	movs	r0, #1
 8001946:	f01a fe51 	bl	801c5ec <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	08001b29 	.word	0x08001b29

08001954 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001958:	f01a fea8 	bl	801c6ac <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800196a:	f7ff fba5 	bl	80010b8 <SYS_GetBatteryLevel>
 800196e:	4603      	mov	r3, r0
 8001970:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001978:	4293      	cmp	r3, r2
 800197a:	d902      	bls.n	8001982 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 800197c:	23fe      	movs	r3, #254	; 0xfe
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	e014      	b.n	80019ac <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001988:	d202      	bcs.n	8001990 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	e00d      	b.n	80019ac <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001996:	461a      	mov	r2, r3
 8001998:	4613      	mov	r3, r2
 800199a:	01db      	lsls	r3, r3, #7
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <GetBatteryLevel+0x68>)
 80019a4:	fba3 2302 	umull	r2, r3, r3, r2
 80019a8:	09db      	lsrs	r3, r3, #7
 80019aa:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <GetBatteryLevel+0x6c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	2100      	movs	r1, #0
 80019b6:	2002      	movs	r0, #2
 80019b8:	f01a fb90 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019bc:	79fb      	ldrb	r3, [r7, #7]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	1b4e81b5 	.word	0x1b4e81b5
 80019cc:	0801d8f0 	.word	0x0801d8f0

080019d0 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80019da:	f7ff faf3 	bl	8000fc4 <SYS_GetTemperatureLevel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da00      	bge.n	80019e6 <GetTemperatureLevel+0x16>
 80019e4:	33ff      	adds	r3, #255	; 0xff
 80019e6:	121b      	asrs	r3, r3, #8
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019ec:	88fb      	ldrh	r3, [r7, #6]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80019f6:	b590      	push	{r4, r7, lr}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a02:	f7ff ff61 	bl	80018c8 <LL_FLASH_GetUDN>
 8001a06:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0e:	d138      	bne.n	8001a82 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a10:	f001 f858 	bl	8002ac4 <HAL_GetUIDw0>
 8001a14:	4604      	mov	r4, r0
 8001a16:	f001 f869 	bl	8002aec <HAL_GetUIDw2>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4423      	add	r3, r4
 8001a1e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a20:	f001 f85a 	bl	8002ad8 <HAL_GetUIDw1>
 8001a24:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	0e1a      	lsrs	r2, r3, #24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	0c1a      	lsrs	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3306      	adds	r3, #6
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	0a1a      	lsrs	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3305      	adds	r3, #5
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0e1a      	lsrs	r2, r3, #24
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0c1a      	lsrs	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3302      	adds	r3, #2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	0a1a      	lsrs	r2, r3, #8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a80:	e031      	b.n	8001ae6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3307      	adds	r3, #7
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	0a1a      	lsrs	r2, r3, #8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3306      	adds	r3, #6
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	0c1a      	lsrs	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3305      	adds	r3, #5
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	0e1a      	lsrs	r2, r3, #24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ab0:	f7ff ff14 	bl	80018dc <LL_FLASH_GetDeviceID>
 8001ab4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3303      	adds	r3, #3
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ac0:	f7ff ff18 	bl	80018f4 <LL_FLASH_GetSTCompanyID>
 8001ac4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0a1a      	lsrs	r2, r3, #8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001af8:	f7ff fee6 	bl	80018c8 <LL_FLASH_GetUDN>
 8001afc:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d10b      	bne.n	8001b1e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b06:	f000 ffdd 	bl	8002ac4 <HAL_GetUIDw0>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	f000 ffe4 	bl	8002ad8 <HAL_GetUIDw1>
 8001b10:	4603      	mov	r3, r0
 8001b12:	405c      	eors	r4, r3
 8001b14:	f000 ffea 	bl	8002aec <HAL_GetUIDw2>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4063      	eors	r3, r4
 8001b1c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b1e:	687b      	ldr	r3, [r7, #4]

}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}

08001b28 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f01b f83e 	bl	801cbb8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <TimestampNow+0x3c>)
 8001b46:	2110      	movs	r1, #16
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f81d 	bl	8001b88 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fb16 	bl	8000180 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0801d8fc 	.word	0x0801d8fc

08001b68 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f01a fd3c 	bl	801c5ec <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f01a fd34 	bl	801c5ec <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b88:	b40c      	push	{r2, r3}
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f01b fc6b 	bl	801d47c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001bcc:	f000 f91e 	bl	8001e0c <TIMER_IF_GetTimerValue>
 8001bd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 f99a 	bl	8001f1a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LL_EXTI_EnableIT_32_63+0x24>)
 8001bfa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001bfe:	4905      	ldr	r1, [pc, #20]	; (8001c14 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	58000800 	.word	0x58000800

08001c18 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001c1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c20:	f7ff ffe6 	bl	8001bf0 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <EnvSensors_Read+0x40>)
 8001c32:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <EnvSensors_Read+0x44>)
 8001c36:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <EnvSensors_Read+0x48>)
 8001c3a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <EnvSensors_Read+0x4c>)
 8001c52:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <EnvSensors_Read+0x50>)
 8001c58:	611a      	str	r2, [r3, #16]

  return 0;
 8001c5a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	42480000 	.word	0x42480000
 8001c6c:	41900000 	.word	0x41900000
 8001c70:	447a0000 	.word	0x447a0000
 8001c74:	003e090d 	.word	0x003e090d
 8001c78:	000503ab 	.word	0x000503ab

08001c7c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001c80:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <TIMER_IF_Init+0x5c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <TIMER_IF_Init+0x60>)
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001ccc:	f7ff fc1c 	bl	8001508 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001cd0:	f000 f856 	bl	8001d80 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <TIMER_IF_Init+0x60>)
 8001cda:	f005 f853 	bl	8006d84 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <TIMER_IF_Init+0x60>)
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <TIMER_IF_Init+0x60>)
 8001ce8:	f005 f98a 	bl	8007000 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 f9d3 	bl	8002098 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001cf2:	f000 f85f 	bl	8001db4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <TIMER_IF_Init+0x5c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000a70 	.word	0x20000a70
 8001d0c:	20000a2c 	.word	0x20000a2c

08001d10 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	222c      	movs	r2, #44	; 0x2c
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f01b fd30 	bl	801d78c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001d2c:	f000 f828 	bl	8001d80 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <TIMER_IF_StartTimer+0x68>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001d48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d4c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <TIMER_IF_StartTimer+0x6c>)
 8001d5e:	f004 ff05 	bl	8006b6c <HAL_RTC_SetAlarm_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001d68:	f7ff fba0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000a74 	.word	0x20000a74
 8001d7c:	20000a2c 	.word	0x20000a2c

08001d80 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <TIMER_IF_StopTimer+0x2c>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d94:	4806      	ldr	r0, [pc, #24]	; (8001db0 <TIMER_IF_StopTimer+0x30>)
 8001d96:	f004 fff5 	bl	8006d84 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <TIMER_IF_StopTimer+0x30>)
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40002800 	.word	0x40002800
 8001db0:	20000a2c 	.word	0x20000a2c

08001db4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001db8:	f000 f98e 	bl	80020d8 <GetTimerTicks>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a03      	ldr	r2, [pc, #12]	; (8001dcc <TIMER_IF_SetTimerContext+0x18>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001dc2:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <TIMER_IF_SetTimerContext+0x18>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000a74 	.word	0x20000a74

08001dd0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <TIMER_IF_GetTimerContext+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000a74 	.word	0x20000a74

08001de4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001dee:	f000 f973 	bl	80020d8 <GetTimerTicks>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000a74 	.word	0x20000a74

08001e0c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <TIMER_IF_GetTimerValue+0x24>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e1e:	f000 f95b 	bl	80020d8 <GetTimerTicks>
 8001e22:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000a70 	.word	0x20000a70

08001e34 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001e3e:	2303      	movs	r3, #3
 8001e40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001e4e:	b5b0      	push	{r4, r5, r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e56:	2100      	movs	r1, #0
 8001e58:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	460a      	mov	r2, r1
 8001e60:	4603      	mov	r3, r0
 8001e62:	0d95      	lsrs	r5, r2, #22
 8001e64:	0294      	lsls	r4, r2, #10
 8001e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fe77 	bl	8000b64 <__aeabi_uldivmod>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}

08001e88 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001e88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e92:	2100      	movs	r1, #0
 8001e94:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	2000      	movs	r0, #0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f04f 0a00 	mov.w	sl, #0
 8001ea6:	f04f 0b00 	mov.w	fp, #0
 8001eaa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001eae:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001eb2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001eb6:	4650      	mov	r0, sl
 8001eb8:	4659      	mov	r1, fp
 8001eba:	1b02      	subs	r2, r0, r4
 8001ebc:	eb61 0305 	sbc.w	r3, r1, r5
 8001ec0:	f04f 0000 	mov.w	r0, #0
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	0099      	lsls	r1, r3, #2
 8001eca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001ece:	0090      	lsls	r0, r2, #2
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	eb12 0804 	adds.w	r8, r2, r4
 8001ed8:	eb43 0905 	adc.w	r9, r3, r5
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	4640      	mov	r0, r8
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	0a82      	lsrs	r2, r0, #10
 8001f02:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f06:	0a8b      	lsrs	r3, r1, #10
 8001f08:	4613      	mov	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f18:	4770      	bx	lr

08001f1a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff93 	bl	8001e4e <TIMER_IF_Convert_ms2Tick>
 8001f28:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001f2a:	f000 f8d5 	bl	80020d8 <GetTimerTicks>
 8001f2e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f30:	e000      	b.n	8001f34 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001f32:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f34:	f000 f8d0 	bl	80020d8 <GetTimerTicks>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f6      	bhi.n	8001f32 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f56:	f01b f83b 	bl	801cfd0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f6a:	f000 f8a5 	bl	80020b8 <TIMER_IF_BkUp_Read_MSBticks>
 8001f6e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3301      	adds	r3, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f88f 	bl	8002098 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001f82:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001f90:	f000 f8a2 	bl	80020d8 <GetTimerTicks>
 8001f94:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001f96:	f000 f88f 	bl	80020b8 <TIMER_IF_BkUp_Read_MSBticks>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	60fa      	str	r2, [r7, #12]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	000b      	movs	r3, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	4605      	mov	r5, r0
 8001fba:	eb12 0804 	adds.w	r8, r2, r4
 8001fbe:	eb43 0905 	adc.w	r9, r3, r5
 8001fc2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	0a82      	lsrs	r2, r0, #10
 8001fd4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001fd8:	0a8b      	lsrs	r3, r1, #10
 8001fda:	4613      	mov	r3, r2
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001fec:	f04f 0b00 	mov.w	fp, #0
 8001ff0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff46 	bl	8001e88 <TIMER_IF_Convert_Tick2ms>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002006:	4618      	mov	r0, r3
 8002008:	3730      	adds	r7, #48	; 0x30
 800200a:	46bd      	mov	sp, r7
 800200c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002010 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	2100      	movs	r1, #0
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800201e:	f005 f881 	bl	8007124 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000a2c 	.word	0x20000a2c

08002030 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	2101      	movs	r1, #1
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800203e:	f005 f871 	bl	8007124 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000a2c 	.word	0x20000a2c

08002050 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800205a:	2100      	movs	r1, #0
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800205e:	f005 f879 	bl	8007154 <HAL_RTCEx_BKUPRead>
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000a2c 	.word	0x20000a2c

08002074 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800207e:	2101      	movs	r1, #1
 8002080:	4804      	ldr	r0, [pc, #16]	; (8002094 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002082:	f005 f867 	bl	8007154 <HAL_RTCEx_BKUPRead>
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000a2c 	.word	0x20000a2c

08002098 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	2102      	movs	r1, #2
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80020a6:	f005 f83d 	bl	8007124 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000a2c 	.word	0x20000a2c

080020b8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80020be:	2102      	movs	r1, #2
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80020c2:	f005 f847 	bl	8007154 <HAL_RTCEx_BKUPRead>
 80020c6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80020c8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000a2c 	.word	0x20000a2c

080020d8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <GetTimerTicks+0x14>)
 80020de:	f7ff fdda 	bl	8001c96 <LL_RTC_TIME_GetSubSecond>
 80020e2:	4603      	mov	r3, r0
 80020e4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40002800 	.word	0x40002800

080020f0 <LL_AHB2_GRP1_EnableClock>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <LL_APB1_GRP1_EnableClock>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <LL_APB1_GRP1_DisableClock>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	43db      	mvns	r3, r3
 8002162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002166:	4013      	ands	r3, r2
 8002168:	658b      	str	r3, [r1, #88]	; 0x58
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <LL_APB2_GRP1_EnableClock>:
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002198:	68fb      	ldr	r3, [r7, #12]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_APB2_GRP1_DisableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ba:	4013      	ands	r3, r2
 80021bc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021ce:	4a23      	ldr	r2, [pc, #140]	; (800225c <MX_USART1_UART_Init+0x94>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <MX_USART1_UART_Init+0x90>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MX_USART1_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002210:	4811      	ldr	r0, [pc, #68]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002212:	f005 fc8a 	bl	8007b2a <HAL_UART_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800221c:	f7ff f946 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002220:	2100      	movs	r1, #0
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002224:	f007 fcdb 	bl	8009bde <HAL_UARTEx_SetTxFifoThreshold>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800222e:	f7ff f93d 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	4808      	ldr	r0, [pc, #32]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002236:	f007 fd10 	bl	8009c5a <HAL_UARTEx_SetRxFifoThreshold>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002240:	f7ff f934 	bl	80014ac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_USART1_UART_Init+0x90>)
 8002246:	f007 fc8f 	bl	8009b68 <HAL_UARTEx_EnableFifoMode>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002250:	f7ff f92c 	bl	80014ac <Error_Handler>
  }

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000a78 	.word	0x20000a78
 800225c:	40013800 	.word	0x40013800

08002260 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2238      	movs	r2, #56	; 0x38
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f01b fa83 	bl	801d78c <memset>
  if(uartHandle->Instance==USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_UART_MspInit+0x1a0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d156      	bne.n	800233e <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002290:	2301      	movs	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002294:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_UART_MspInit+0x1a4>)
 8002296:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4618      	mov	r0, r3
 800229e:	f004 facb 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a8:	f7ff f900 	bl	80014ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022b0:	f7ff ff60 	bl	8002174 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	2002      	movs	r0, #2
 80022b6:	f7ff ff1b 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 80022ba:	23c0      	movs	r3, #192	; 0xc0
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ca:	2307      	movs	r3, #7
 80022cc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022d2:	4619      	mov	r1, r3
 80022d4:	484c      	ldr	r0, [pc, #304]	; (8002408 <HAL_UART_MspInit+0x1a8>)
 80022d6:	f002 f903 	bl	80044e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80022da:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_UART_MspInit+0x1b0>)
 80022de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022e2:	2212      	movs	r2, #18
 80022e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022e8:	2210      	movs	r2, #16
 80022ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f2:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <HAL_UART_MspInit+0x1ac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_UART_MspInit+0x1ac>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_UART_MspInit+0x1ac>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_UART_MspInit+0x1ac>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002310:	483e      	ldr	r0, [pc, #248]	; (800240c <HAL_UART_MspInit+0x1ac>)
 8002312:	f001 fccf 	bl	8003cb4 <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800231c:	f7ff f8c6 	bl	80014ac <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <HAL_UART_MspInit+0x1ac>)
 8002324:	679a      	str	r2, [r3, #120]	; 0x78
 8002326:	4a39      	ldr	r2, [pc, #228]	; (800240c <HAL_UART_MspInit+0x1ac>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2102      	movs	r1, #2
 8002330:	2024      	movs	r0, #36	; 0x24
 8002332:	f001 fc86 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002336:	2024      	movs	r0, #36	; 0x24
 8002338:	f001 fc9f 	bl	8003c7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800233c:	e05b      	b.n	80023f6 <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_UART_MspInit+0x1b4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d156      	bne.n	80023f6 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002348:	2302      	movs	r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <HAL_UART_MspInit+0x1b8>)
 800234e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f004 fa6f 	bl	8006838 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002360:	f7ff f8a4 	bl	80014ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002364:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002368:	f7ff feda 	bl	8002120 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236c:	2001      	movs	r0, #1
 800236e:	f7ff febf 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8002372:	230c      	movs	r3, #12
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002382:	2307      	movs	r3, #7
 8002384:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f002 f8a6 	bl	80044e0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_UART_MspInit+0x1bc>)
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_UART_MspInit+0x1b0>)
 8002398:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_UART_MspInit+0x1bc>)
 800239c:	2214      	movs	r2, #20
 800239e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023a2:	2210      	movs	r2, #16
 80023a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023ca:	4814      	ldr	r0, [pc, #80]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023cc:	f001 fc72 	bl	8003cb4 <HAL_DMA_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80023d6:	f7ff f869 	bl	80014ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023de:	679a      	str	r2, [r3, #120]	; 0x78
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_UART_MspInit+0x1bc>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2102      	movs	r1, #2
 80023ea:	2025      	movs	r0, #37	; 0x25
 80023ec:	f001 fc29 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023f0:	2025      	movs	r0, #37	; 0x25
 80023f2:	f001 fc42 	bl	8003c7a <HAL_NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3758      	adds	r7, #88	; 0x58
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40013800 	.word	0x40013800
 8002404:	00030001 	.word	0x00030001
 8002408:	48000400 	.word	0x48000400
 800240c:	20000b08 	.word	0x20000b08
 8002410:	40020058 	.word	0x40020058
 8002414:	40004400 	.word	0x40004400
 8002418:	000c0004 	.word	0x000c0004
 800241c:	20000bf8 	.word	0x20000bf8

08002420 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_UART_MspDeInit+0x68>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d110      	bne.n	8002454 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002432:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002436:	f7ff feb5 	bl	80021a4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 800243a:	21c0      	movs	r1, #192	; 0xc0
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <HAL_UART_MspDeInit+0x6c>)
 800243e:	f002 f9af 	bl	80047a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fcdc 	bl	8003e04 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800244c:	2024      	movs	r0, #36	; 0x24
 800244e:	f001 fc22 	bl	8003c96 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002452:	e015      	b.n	8002480 <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <HAL_UART_MspDeInit+0x70>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d110      	bne.n	8002480 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 800245e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002462:	f7ff fe75 	bl	8002150 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 8002466:	210c      	movs	r1, #12
 8002468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246c:	f002 f998 	bl	80047a0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fcc5 	bl	8003e04 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800247a:	2025      	movs	r0, #37	; 0x25
 800247c:	f001 fc0b 	bl	8003c96 <HAL_NVIC_DisableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40013800 	.word	0x40013800
 800248c:	48000400 	.word	0x48000400
 8002490:	40004400 	.word	0x40004400

08002494 <LL_APB2_GRP1_ForceReset>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_APB2_GRP1_ReleaseReset>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024cc:	4013      	ands	r3, r2
 80024ce:	640b      	str	r3, [r1, #64]	; 0x40
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <LL_EXTI_EnableIT_0_31>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <LL_EXTI_EnableIT_0_31+0x24>)
 80024e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80024ea:	4905      	ldr	r1, [pc, #20]	; (8002500 <LL_EXTI_EnableIT_0_31+0x24>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58000800 	.word	0x58000800

08002504 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <vcom_Init+0x28>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002512:	f7fe feab 	bl	800126c <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 8002516:	f7ff fe57 	bl	80021c8 <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800251a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800251e:	f7ff ffdd 	bl	80024dc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002522:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000c5c 	.word	0x20000c5c

08002530 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002534:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002538:	f7ff ffac 	bl	8002494 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800253c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002540:	f7ff ffb9 	bl	80024b6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002544:	4804      	ldr	r0, [pc, #16]	; (8002558 <vcom_DeInit+0x28>)
 8002546:	f7ff ff6b 	bl	8002420 <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800254a:	200f      	movs	r0, #15
 800254c:	f001 fba3 	bl	8003c96 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002550:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000a78 	.word	0x20000a78

0800255c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	461a      	mov	r2, r3
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4804      	ldr	r0, [pc, #16]	; (8002580 <vcom_Trace_DMA+0x24>)
 8002570:	f005 fb82 	bl	8007c78 <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 8002574:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000a78 	.word	0x20000a78

08002584 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800258c:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <vcom_ReceiveInit+0x70>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002592:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002596:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002598:	f107 0308 	add.w	r3, r7, #8
 800259c:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025a0:	4815      	ldr	r0, [pc, #84]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025a2:	f007 fa54 	bl	8009a4e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80025a6:	bf00      	nop
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b6:	d0f7      	beq.n	80025a8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80025b8:	bf00      	nop
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c8:	d1f7      	bne.n	80025ba <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025d8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80025da:	4807      	ldr	r0, [pc, #28]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025dc:	f007 fa92 	bl	8009b04 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80025e0:	2201      	movs	r2, #1
 80025e2:	4906      	ldr	r1, [pc, #24]	; (80025fc <vcom_ReceiveInit+0x78>)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <vcom_ReceiveInit+0x74>)
 80025e6:	f005 faf1 	bl	8007bcc <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 80025ea:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000c60 	.word	0x20000c60
 80025f8:	20000a78 	.word	0x20000a78
 80025fc:	20000c58 	.word	0x20000c58

08002600 <vcom_Resume>:

void vcom_Resume(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
#ifdef USE_USB_SERIAL
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <vcom_Resume+0x28>)
 8002606:	f005 fa90 	bl	8007b2a <HAL_UART_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <vcom_Resume+0x14>
  {
	Error_Handler();
 8002610:	f7fe ff4c 	bl	80014ac <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <vcom_Resume+0x2c>)
 8002616:	f001 fb4d 	bl	8003cb4 <HAL_DMA_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <vcom_Resume+0x24>
  {
	Error_Handler();
 8002620:	f7fe ff44 	bl	80014ac <Error_Handler>
  }
#endif
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000a78 	.word	0x20000a78
 800262c:	20000b08 	.word	0x20000b08

08002630 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_UART_TxCpltCallback+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2000      	movs	r0, #0
 800263e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000c5c 	.word	0x20000c5c

0800264c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_UART_RxCpltCallback+0x38>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_UART_RxCpltCallback+0x26>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_UART_RxCpltCallback+0x38>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	2101      	movs	r1, #1
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <HAL_UART_RxCpltCallback+0x3c>)
 8002670:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002672:	2201      	movs	r2, #1
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <HAL_UART_RxCpltCallback+0x3c>)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f005 faa8 	bl	8007bcc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000c60 	.word	0x20000c60
 8002688:	20000c58 	.word	0x20000c58

0800268c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800268c:	480d      	ldr	r0, [pc, #52]	; (80026c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002690:	f7ff fafb 	bl	8001c8a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	; (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ba:	f01b f835 	bl	801d728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026be:	f7fe fe15 	bl	80012ec <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   r0, =_estack
 80026c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80026d0:	0801e7a0 	.word	0x0801e7a0
  ldr r2, =_sbss
 80026d4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80026d8:	200044f0 	.word	0x200044f0

080026dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC_IRQHandler>

080026de <LL_AHB2_GRP1_EnableClock>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800272a:	2002      	movs	r0, #2
 800272c:	f7ff ffd7 	bl	80026de <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002730:	2320      	movs	r3, #32
 8002732:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <BSP_LED_Init+0x60>)
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	f107 020c 	add.w	r2, r7, #12
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fec6 	bl	80044e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <BSP_LED_Init+0x60>)
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	2120      	movs	r1, #32
 800275e:	2201      	movs	r2, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f002 f8eb 	bl	800493c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000004 	.word	0x20000004

08002774 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <BSP_LED_On+0x28>)
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	2120      	movs	r1, #32
 8002788:	2200      	movs	r2, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f002 f8d6 	bl	800493c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004

080027a0 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <BSP_LED_Off+0x28>)
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	2120      	movs	r1, #32
 80027b4:	2201      	movs	r2, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f8c0 	bl	800493c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004

080027cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	71fb      	strb	r3, [r7, #7]
 80027d8:	4613      	mov	r3, r2
 80027da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80027ec:	2002      	movs	r0, #2
 80027ee:	f7ff ff76 	bl	80026de <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <BSP_PB_Init+0xc4>)
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	f107 020c 	add.w	r2, r7, #12
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fe61 	bl	80044e0 <HAL_GPIO_Init>
 800281e:	e031      	b.n	8002884 <BSP_PB_Init+0xb8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002824:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <BSP_PB_Init+0xc4>)
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	f107 020c 	add.w	r2, r7, #12
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fe53 	bl	80044e0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4a15      	ldr	r2, [pc, #84]	; (8002894 <BSP_PB_Init+0xc8>)
 8002840:	441a      	add	r2, r3
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4914      	ldr	r1, [pc, #80]	; (8002898 <BSP_PB_Init+0xcc>)
 8002846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f001 fe34 	bl	80044ba <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <BSP_PB_Init+0xc8>)
 8002858:	1898      	adds	r0, r3, r2
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <BSP_PB_Init+0xd0>)
 800285e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002862:	461a      	mov	r2, r3
 8002864:	2100      	movs	r1, #0
 8002866:	f001 fe0f 	bl	8004488 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800286a:	2029      	movs	r0, #41	; 0x29
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <BSP_PB_Init+0xd4>)
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	f001 f9e3 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800287c:	2329      	movs	r3, #41	; 0x29
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9fb 	bl	8003c7a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008
 8002894:	20000c64 	.word	0x20000c64
 8002898:	0801e250 	.word	0x0801e250
 800289c:	2000000c 	.word	0x2000000c
 80028a0:	20000010 	.word	0x20000010

080028a4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fff1 	bl	80028a4 <BSP_PB_Callback>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <LL_AHB2_GRP1_EnableClock>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4313      	orrs	r3, r2
 80028dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 800290a:	2001      	movs	r0, #1
 800290c:	f7ff ffdb 	bl	80028c6 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002910:	2310      	movs	r3, #16
 8002912:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002928:	f001 fdda 	bl	80044e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800292c:	2320      	movs	r3, #32
 800292e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002938:	f001 fdd2 	bl	80044e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800293c:	2200      	movs	r2, #0
 800293e:	2120      	movs	r1, #32
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f001 fffa 	bl	800493c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002948:	2200      	movs	r2, #0
 800294a:	2110      	movs	r1, #16
 800294c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002950:	f001 fff4 	bl	800493c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d83f      	bhi.n	80029f0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	08002989 	.word	0x08002989
 800297c:	080029a3 	.word	0x080029a3
 8002980:	080029bd 	.word	0x080029bd
 8002984:	080029d7 	.word	0x080029d7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	2110      	movs	r1, #16
 800298c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002990:	f001 ffd4 	bl	800493c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	2120      	movs	r1, #32
 8002998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299c:	f001 ffce 	bl	800493c <HAL_GPIO_WritePin>
      break;      
 80029a0:	e027      	b.n	80029f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029a2:	2201      	movs	r2, #1
 80029a4:	2110      	movs	r1, #16
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f001 ffc7 	bl	800493c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029ae:	2200      	movs	r2, #0
 80029b0:	2120      	movs	r1, #32
 80029b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b6:	f001 ffc1 	bl	800493c <HAL_GPIO_WritePin>
      break;
 80029ba:	e01a      	b.n	80029f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80029bc:	2201      	movs	r2, #1
 80029be:	2110      	movs	r1, #16
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c4:	f001 ffba 	bl	800493c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029c8:	2201      	movs	r2, #1
 80029ca:	2120      	movs	r1, #32
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f001 ffb4 	bl	800493c <HAL_GPIO_WritePin>
      break;
 80029d4:	e00d      	b.n	80029f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029d6:	2200      	movs	r2, #0
 80029d8:	2110      	movs	r1, #16
 80029da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029de:	f001 ffad 	bl	800493c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80029e2:	2201      	movs	r2, #1
 80029e4:	2120      	movs	r1, #32
 80029e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ea:	f001 ffa7 	bl	800493c <HAL_GPIO_WritePin>
      break;
 80029ee:	e000      	b.n	80029f2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80029f0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002a00:	2302      	movs	r3, #2
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a32:	2003      	movs	r0, #3
 8002a34:	f001 f8fa 	bl	8003c2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a38:	f003 fd20 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_Init+0x3c>)
 8002a40:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a42:	200f      	movs	r0, #15
 8002a44:	f7ff f8b6 	bl	8001bb4 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	e001      	b.n	8002a58 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a54:	f7fe fe39 	bl	80016ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x1c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_IncTick+0x20>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_IncTick+0x20>)
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000018 	.word	0x20000018
 8002a88:	20000c6c 	.word	0x20000c6c

08002a8c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_SuspendTick+0x18>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <HAL_SuspendTick+0x18>)
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e010 	.word	0xe000e010

08002aa8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_ResumeTick+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <HAL_ResumeTick+0x18>)
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	e000e010 	.word	0xe000e010

08002ac4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <HAL_GetUIDw0+0x10>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	1fff7590 	.word	0x1fff7590

08002ad8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_GetUIDw1+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	1fff7594 	.word	0x1fff7594

08002aec <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_GetUIDw2+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	1fff7598 	.word	0x1fff7598

08002b00 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2107      	movs	r1, #7
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	210f      	movs	r1, #15
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 010f 	and.w	r1, r3, #15
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	401a      	ands	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0219      	lsls	r1, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	400b      	ands	r3, r1
 8002c4a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c72:	f023 0317 	bic.w	r3, r3, #23
 8002c76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c98:	f023 0317 	bic.w	r3, r3, #23
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6093      	str	r3, [r2, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cbe:	d101      	bne.n	8002cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	f023 0317 	bic.w	r3, r3, #23
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d06:	f023 0317 	bic.w	r3, r3, #23
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <LL_ADC_IsEnabled+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_ADC_IsEnabled+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d101      	bne.n	8002d58 <LL_ADC_IsDisableOngoing+0x18>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_ADC_IsDisableOngoing+0x1a>
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d74:	f023 0317 	bic.w	r3, r3, #23
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	f023 0317 	bic.w	r3, r3, #23
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d101      	bne.n	8002dc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1ae      	b.n	8003154 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fe f8a7 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff44 	bl	8002caa <LL_ADC_IsInternalRegulatorEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d115      	bne.n	8002e54 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff18 	bl	8002c62 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e32:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <HAL_ADC_Init+0x2cc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	4a9a      	ldr	r2, [pc, #616]	; (80030a4 <HAL_ADC_Init+0x2d0>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e46:	e002      	b.n	8002e4e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff26 	bl	8002caa <LL_ADC_IsInternalRegulatorEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f043 0210 	orr.w	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff93 	bl	8002db0 <LL_ADC_REG_IsConversionOngoing>
 8002e8a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 8154 	bne.w	8003142 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8150 	bne.w	8003142 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff30 	bl	8002d1c <LL_ADC_IsEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d14f      	bne.n	8002f62 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 0118 	bic.w	r1, r3, #24
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d111      	bne.n	8002f1a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f02:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f08:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f0e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_ADC_Init+0x2d4>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	6979      	ldr	r1, [r7, #20]
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f36:	d014      	beq.n	8002f62 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d00f      	beq.n	8002f62 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4a:	d00a      	beq.n	8002f62 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <HAL_ADC_Init+0x2d8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f5c:	4953      	ldr	r1, [pc, #332]	; (80030ac <HAL_ADC_Init+0x2d8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7e1b      	ldrb	r3, [r3, #24]
 8002f66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7e5b      	ldrb	r3, [r3, #25]
 8002f6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7e9b      	ldrb	r3, [r3, #26]
 8002f74:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f76:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_ADC_Init+0x1b2>
 8002f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f84:	e000      	b.n	8002f88 <HAL_ADC_Init+0x1b4>
 8002f86:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f8e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da04      	bge.n	8002fa2 <HAL_ADC_Init+0x1ce>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa0:	e001      	b.n	8002fa6 <HAL_ADC_Init+0x1d2>
 8002fa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002fa6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fae:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fb0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d114      	bne.n	8002fec <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7e9b      	ldrb	r3, [r3, #26]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e00b      	b.n	8002fec <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003000:	4313      	orrs	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003012:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	430b      	orrs	r3, r1
 800301e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_ADC_Init+0x2dc>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	430b      	orrs	r3, r1
 8003032:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	461a      	mov	r2, r3
 800303e:	2100      	movs	r1, #0
 8003040:	f7ff fd7d 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	461a      	mov	r2, r3
 800304e:	4919      	ldr	r1, [pc, #100]	; (80030b4 <HAL_ADC_Init+0x2e0>)
 8003050:	f7ff fd75 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f062 020f 	orn	r2, r2, #15
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
 800306c:	e044      	b.n	80030f8 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003076:	d13f      	bne.n	80030f8 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e00c      	b.n	8003098 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d012      	beq.n	80030b8 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3301      	adds	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b07      	cmp	r3, #7
 800309c:	d9ef      	bls.n	800307e <HAL_ADC_Init+0x2aa>
 800309e:	e00c      	b.n	80030ba <HAL_ADC_Init+0x2e6>
 80030a0:	20000000 	.word	0x20000000
 80030a4:	053e2d63 	.word	0x053e2d63
 80030a8:	1ffffc02 	.word	0x1ffffc02
 80030ac:	40012708 	.word	0x40012708
 80030b0:	dffffc02 	.word	0xdffffc02
 80030b4:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80030b8:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d108      	bne.n	80030d2 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f062 020f 	orn	r2, r2, #15
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	e012      	b.n	80030f8 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	3b01      	subs	r3, #1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f003 031c 	and.w	r3, r3, #28
 80030e4:	f06f 020f 	mvn.w	r2, #15
 80030e8:	fa02 f103 	lsl.w	r1, r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_ADC_Init+0x388>)
 8003100:	4013      	ands	r3, r2
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800311e:	e018      	b.n	8003152 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f023 0312 	bic.w	r3, r3, #18
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003140:	e007      	b.n	8003152 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003152:	7ffb      	ldrb	r3, [r7, #31]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	833fffe7 	.word	0x833fffe7

08003160 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06a      	b.n	8003248 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fabe 	bl	8003700 <ADC_ConversionStop>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fb82 	bl	8003898 <ADC_Disable>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fd6d 	bl	8002c88 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f240 329f 	movw	r2, #927	; 0x39f
 80031ca:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_ADC_DeInit+0xf0>)
 80031d8:	400b      	ands	r3, r1
 80031da:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80031ea:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0207 	bic.w	r2, r2, #7
 80031fa:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a1a      	ldr	r2, [r3, #32]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800320a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_ADC_DeInit+0xf4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_ADC_DeInit+0xf4>)
 8003220:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003224:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd feaa 	bl	8000f80 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	833e0200 	.word	0x833e0200
 8003254:	40012708 	.word	0x40012708

08003258 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fda3 	bl	8002db0 <LL_ADC_REG_IsConversionOngoing>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d132      	bne.n	80032d6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_Start+0x26>
 800327a:	2302      	movs	r3, #2
 800327c:	e02e      	b.n	80032dc <HAL_ADC_Start+0x84>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa80 	bl	800378c <ADC_Enable>
 800328c:	4603      	mov	r3, r0
 800328e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11a      	bne.n	80032cc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	221c      	movs	r2, #28
 80032b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd4d 	bl	8002d64 <LL_ADC_REG_StartConversion>
 80032ca:	e006      	b.n	80032da <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80032d4:	e001      	b.n	80032da <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
 80032d8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Stop+0x16>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e022      	b.n	8003340 <HAL_ADC_Stop+0x5c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9fc 	bl	8003700 <ADC_ConversionStop>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d111      	bne.n	8003336 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fac0 	bl	8003898 <ADC_Disable>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d102      	bne.n	8003360 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800335a:	2308      	movs	r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e010      	b.n	8003382 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e077      	b.n	800346e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800337e:	2304      	movs	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003382:	f7fe fc21 	bl	8001bc8 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003388:	e021      	b.n	80033ce <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d01d      	beq.n	80033ce <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003392:	f7fe fc19 	bl	8001bc8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <HAL_ADC_PollForConversion+0x60>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d112      	bne.n	80033ce <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e04f      	b.n	800346e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0d6      	beq.n	800338a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fbc4 	bl	8002b7a <LL_ADC_REG_IsTriggerSourceSWStart>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d031      	beq.n	800345c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e9b      	ldrb	r3, [r3, #26]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12d      	bne.n	800345c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d126      	bne.n	800345c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fccc 	bl	8002db0 <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 020c 	bic.w	r2, r2, #12
 800342c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	659a      	str	r2, [r3, #88]	; 0x58
 8003442:	e00b      	b.n	800345c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7e1b      	ldrb	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	220c      	movs	r2, #12
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
	...

08003490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x28>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e110      	b.n	80036da <HAL_ADC_ConfigChannel+0x24a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc73 	bl	8002db0 <LL_ADC_REG_IsConversionOngoing>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 80f7 	bne.w	80036c0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	f000 80b1 	beq.w	800363e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_ADC_ConfigChannel+0x254>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7ff fb70 	bl	8002be0 <LL_ADC_REG_SetSequencerChAdd>
 8003500:	e041      	b.n	8003586 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	210f      	movs	r1, #15
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0xa0>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e011      	b.n	8003554 <HAL_ADC_ConfigChannel+0xc4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	6849      	ldr	r1, [r1, #4]
 8003558:	f001 011f 	and.w	r1, r1, #31
 800355c:	408b      	lsls	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	d808      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	f7ff fb0c 	bl	8002b9e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	461a      	mov	r2, r3
 8003594:	f7ff fb49 	bl	8002c2a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f280 8097 	bge.w	80036d0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a2:	4851      	ldr	r0, [pc, #324]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80035a4:	f7ff fabe 	bl	8002b24 <LL_ADC_GetCommonPathInternalCh>
 80035a8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_ADC_ConfigChannel+0x25c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d120      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c4:	4619      	mov	r1, r3
 80035c6:	4848      	ldr	r0, [pc, #288]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80035c8:	f7ff fa9a 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035cc:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <HAL_ADC_ConfigChannel+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	4a48      	ldr	r2, [pc, #288]	; (80036f4 <HAL_ADC_ConfigChannel+0x264>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035e6:	e002      	b.n	80035ee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035f4:	e06c      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a3f      	ldr	r2, [pc, #252]	; (80036f8 <HAL_ADC_ConfigChannel+0x268>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <HAL_ADC_ConfigChannel+0x18a>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d107      	bne.n	800361a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003610:	4619      	mov	r1, r3
 8003612:	4835      	ldr	r0, [pc, #212]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003614:	f7ff fa74 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
 8003618:	e05a      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a37      	ldr	r2, [pc, #220]	; (80036fc <HAL_ADC_ConfigChannel+0x26c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d155      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d150      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003634:	4619      	mov	r1, r3
 8003636:	482c      	ldr	r0, [pc, #176]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	f7ff fa62 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
 800363c:	e048      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003646:	d004      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <HAL_ADC_ConfigChannel+0x254>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d107      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7ff fad1 	bl	8002c04 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da32      	bge.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366a:	481f      	ldr	r0, [pc, #124]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 800366c:	f7ff fa5a 	bl	8002b24 <LL_ADC_GetCommonPathInternalCh>
 8003670:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_ADC_ConfigChannel+0x25c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d107      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003682:	4619      	mov	r1, r3
 8003684:	4818      	ldr	r0, [pc, #96]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003686:	f7ff fa3b 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
 800368a:	e021      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_ADC_ConfigChannel+0x268>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369c:	4619      	mov	r1, r3
 800369e:	4812      	ldr	r0, [pc, #72]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80036a0:	f7ff fa2e 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
 80036a4:	e014      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_ADC_ConfigChannel+0x26c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10f      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036b6:	4619      	mov	r1, r3
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80036ba:	f7ff fa21 	bl	8002b00 <LL_ADC_SetCommonPathInternalCh>
 80036be:	e007      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	80000004 	.word	0x80000004
 80036e8:	40012708 	.word	0x40012708
 80036ec:	b0001000 	.word	0xb0001000
 80036f0:	20000000 	.word	0x20000000
 80036f4:	053e2d63 	.word	0x053e2d63
 80036f8:	b8004000 	.word	0xb8004000
 80036fc:	b4002000 	.word	0xb4002000

08003700 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fb4f 	bl	8002db0 <LL_ADC_REG_IsConversionOngoing>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d033      	beq.n	8003780 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fb0f 	bl	8002d40 <LL_ADC_IsDisableOngoing>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fb2c 	bl	8002d8a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003732:	f7fe fa49 	bl	8001bc8 <HAL_GetTick>
 8003736:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003738:	e01b      	b.n	8003772 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800373a:	f7fe fa45 	bl	8001bc8 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d914      	bls.n	8003772 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1dc      	bne.n	800373a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fabd 	bl	8002d1c <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d169      	bne.n	800387c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <ADC_Enable+0xfc>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e055      	b.n	800387e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fa7a 	bl	8002cd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037dc:	482b      	ldr	r0, [pc, #172]	; (800388c <ADC_Enable+0x100>)
 80037de:	f7ff f9a1 	bl	8002b24 <LL_ADC_GetCommonPathInternalCh>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00f      	beq.n	800380c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <ADC_Enable+0x104>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	4a28      	ldr	r2, [pc, #160]	; (8003894 <ADC_Enable+0x108>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	3301      	adds	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037fe:	e002      	b.n	8003806 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f9      	bne.n	8003800 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e5b      	ldrb	r3, [r3, #25]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d033      	beq.n	800387c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003814:	f7fe f9d8 	bl	8001bc8 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381a:	e028      	b.n	800386e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fa7b 	bl	8002d1c <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fa4d 	bl	8002cd0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003836:	f7fe f9c7 	bl	8001bc8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d914      	bls.n	800386e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d00d      	beq.n	800386e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f043 0210 	orr.w	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e007      	b.n	800387e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d1cf      	bne.n	800381c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	80000017 	.word	0x80000017
 800388c:	40012708 	.word	0x40012708
 8003890:	20000000 	.word	0x20000000
 8003894:	053e2d63 	.word	0x053e2d63

08003898 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fa4b 	bl	8002d40 <LL_ADC_IsDisableOngoing>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fa33 	bl	8002d1c <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d047      	beq.n	800394c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d144      	bne.n	800394c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0305 	and.w	r3, r3, #5
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fa0e 	bl	8002cf6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2203      	movs	r2, #3
 80038e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e2:	f7fe f971 	bl	8001bc8 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038e8:	e029      	b.n	800393e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e023      	b.n	800394e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003906:	f7fe f95f 	bl	8001bc8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d914      	bls.n	800393e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1dc      	bne.n	8003906 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <LL_ADC_IsEnabled>:
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <LL_ADC_IsEnabled+0x18>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_IsEnabled+0x1a>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <LL_ADC_IsCalibrationOnGoing>:
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800398a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398e:	d101      	bne.n	8003994 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_ADCEx_Calibration_Start+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e068      	b.n	8003a8c <HAL_ADCEx_Calibration_Start+0xec>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff68 	bl	8003898 <ADC_Disable>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ffc0 	bl	8003956 <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d14c      	bne.n	8003a76 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039e4:	f043 0202 	orr.w	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0203 	bic.w	r2, r2, #3
 8003a06:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a16:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a18:	e014      	b.n	8003a44 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003a26:	d30d      	bcc.n	8003a44 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f023 0312 	bic.w	r3, r3, #18
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e023      	b.n	8003a8c <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff96 	bl	800397a <LL_ADC_IsCalibrationOnGoing>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e2      	bne.n	8003a1a <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68d9      	ldr	r1, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
 8003a74:	e005      	b.n	8003a82 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	f043 0210 	orr.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4906      	ldr	r1, [pc, #24]	; (8003b2c <__NVIC_EnableIRQ+0x34>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	e000e100 	.word	0xe000e100

08003b30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	db12      	blt.n	8003b68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	f003 021f 	and.w	r2, r3, #31
 8003b48:	490a      	ldr	r1, [pc, #40]	; (8003b74 <__NVIC_DisableIRQ+0x44>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2001      	movs	r0, #1
 8003b52:	fa00 f202 	lsl.w	r2, r0, r2
 8003b56:	3320      	adds	r3, #32
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5c:	f3bf 8f4f 	dsb	sy
}
 8003b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b62:	f3bf 8f6f 	isb	sy
}
 8003b66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  volatile uint32_t PreemptPriorityBits;
  volatile uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	1e5a      	subs	r2, r3, #1
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	1e59      	subs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff2d 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c50:	f7ff ff44 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c54:	4603      	mov	r3, r0
 8003c56:	617b      	str	r3, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffb4 	bl	8003bcc <NVIC_EncodePriority>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff83 	bl	8003b78 <__NVIC_SetPriority>
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff35 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff43 	bl	8003b30 <__NVIC_DisableIRQ>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08e      	b.n	8003de4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_DMA_Init+0x138>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d80f      	bhi.n	8003cf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <HAL_DMA_Init+0x13c>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a45      	ldr	r2, [pc, #276]	; (8003df4 <HAL_DMA_Init+0x140>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	009a      	lsls	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_DMA_Init+0x144>)
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
 8003cf0:	e00e      	b.n	8003d10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <HAL_DMA_Init+0x148>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a3d      	ldr	r2, [pc, #244]	; (8003df4 <HAL_DMA_Init+0x140>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <HAL_DMA_Init+0x14c>)
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fb24 	bl	80043b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d8e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_DMA_Init+0x106>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d80c      	bhi.n	8003dba <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fb4d 	bl	8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	e008      	b.n	8003dcc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40020407 	.word	0x40020407
 8003df0:	bffdfff8 	.word	0xbffdfff8
 8003df4:	cccccccd 	.word	0xcccccccd
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	bffdfbf8 	.word	0xbffdfbf8
 8003e00:	40020400 	.word	0x40020400

08003e04 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07b      	b.n	8003f0e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_DMA_DeInit+0x114>)
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d80f      	bhi.n	8003e52 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_DMA_DeInit+0x118>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <HAL_DMA_DeInit+0x11c>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	009a      	lsls	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a35      	ldr	r2, [pc, #212]	; (8003f24 <HAL_DMA_DeInit+0x120>)
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e50:	e00e      	b.n	8003e70 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <HAL_DMA_DeInit+0x124>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a30      	ldr	r2, [pc, #192]	; (8003f20 <HAL_DMA_DeInit+0x11c>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <HAL_DMA_DeInit+0x128>)
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f003 021c 	and.w	r2, r3, #28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa8f 	bl	80043b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00f      	beq.n	8003ecc <HAL_DMA_DeInit+0xc8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d80b      	bhi.n	8003ecc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fac3 	bl	8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eca:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020407 	.word	0x40020407
 8003f1c:	bffdfff8 	.word	0xbffdfff8
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	40020000 	.word	0x40020000
 8003f28:	bffdfbf8 	.word	0xbffdfbf8
 8003f2c:	40020400 	.word	0x40020400

08003f30 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_Start_IT+0x20>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e069      	b.n	8004024 <HAL_DMA_Start_IT+0xf4>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d155      	bne.n	8004010 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f9d3 	bl	8004334 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 020e 	orr.w	r2, r2, #14
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00f      	b.n	8003fc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 020a 	orr.w	r2, r2, #10
 8003fc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e008      	b.n	8004022 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e04f      	b.n	80040de <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d008      	beq.n	800405c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e040      	b.n	80040de <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 020e 	bic.w	r2, r2, #14
 800406a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800407a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f003 021c 	and.w	r2, r3, #28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2101      	movs	r1, #1
 800409a:	fa01 f202 	lsl.w	r2, r1, r2
 800409e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d005      	beq.n	800410c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e047      	b.n	800419c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 020e 	bic.w	r2, r2, #14
 800411a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	f003 021c 	and.w	r2, r3, #28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f202 	lsl.w	r2, r1, r2
 800414e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004158:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800417a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
    }
  }
  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	f003 031c 	and.w	r3, r3, #28
 80041c8:	2204      	movs	r2, #4
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d027      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7c>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d022      	beq.n	8004224 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	f003 021c 	and.w	r2, r3, #28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	2104      	movs	r1, #4
 800420a:	fa01 f202 	lsl.w	r2, r1, r2
 800420e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8081 	beq.w	800431c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004222:	e07b      	b.n	800431c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f003 031c 	and.w	r3, r3, #28
 800422c:	2202      	movs	r2, #2
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03d      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x10c>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d038      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020a 	bic.w	r2, r2, #10
 800425e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_DMA_IRQHandler+0x180>)
 8004270:	429a      	cmp	r2, r3
 8004272:	d909      	bls.n	8004288 <HAL_DMA_IRQHandler+0xe0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	f003 031c 	and.w	r3, r3, #28
 800427c:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_DMA_IRQHandler+0x184>)
 800427e:	2102      	movs	r1, #2
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	e008      	b.n	800429a <HAL_DMA_IRQHandler+0xf2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f003 031c 	and.w	r3, r3, #28
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_DMA_IRQHandler+0x188>)
 8004292:	2102      	movs	r1, #2
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d038      	beq.n	800431c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80042b2:	e033      	b.n	800431c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f003 031c 	and.w	r3, r3, #28
 80042bc:	2208      	movs	r2, #8
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02a      	beq.n	800431e <HAL_DMA_IRQHandler+0x176>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d025      	beq.n	800431e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 020e 	bic.w	r2, r2, #14
 80042e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f003 021c 	and.w	r2, r3, #28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f202 	lsl.w	r2, r1, r2
 80042f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800431c:	bf00      	nop
 800431e:	bf00      	nop
}
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40020080 	.word	0x40020080
 800432c:	40020400 	.word	0x40020400
 8004330:	40020000 	.word	0x40020000

08004334 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800434a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800435c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f003 021c 	and.w	r2, r3, #28
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b10      	cmp	r3, #16
 8004380:	d108      	bne.n	8004394 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004392:	e007      	b.n	80043a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
	...

080043b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d813      	bhi.n	80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043d0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3b08      	subs	r3, #8
 80043e0:	4a14      	ldr	r2, [pc, #80]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e011      	b.n	8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	4b10      	ldr	r3, [pc, #64]	; (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3b08      	subs	r3, #8
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	3307      	adds	r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004414:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2201      	movs	r2, #1
 800441e:	409a      	lsls	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40020407 	.word	0x40020407
 8004434:	cccccccd 	.word	0xcccccccd
 8004438:	4002081c 	.word	0x4002081c
 800443c:	40020880 	.word	0x40020880

08004440 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004464:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	1000823f 	.word	0x1000823f
 8004484:	40020940 	.word	0x40020940

08004488 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	460b      	mov	r3, r1
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	bf00      	nop
  }

  return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e003      	b.n	80044d6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ee:	e140      	b.n	8004772 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8132 	beq.w	800476c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d005      	beq.n	8004520 <HAL_GPIO_Init+0x40>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d130      	bne.n	8004582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2203      	movs	r2, #3
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004556:	2201      	movs	r2, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0201 	and.w	r2, r3, #1
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b03      	cmp	r3, #3
 800458c:	d017      	beq.n	80045be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2203      	movs	r2, #3
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d123      	bne.n	8004612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 808c 	beq.w	800476c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004654:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	3302      	adds	r3, #2
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	2207      	movs	r2, #7
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800467e:	d00d      	beq.n	800469c <HAL_GPIO_Init+0x1bc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a44      	ldr	r2, [pc, #272]	; (8004794 <HAL_GPIO_Init+0x2b4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <HAL_GPIO_Init+0x1b8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a43      	ldr	r2, [pc, #268]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_GPIO_Init+0x1b4>
 8004690:	2302      	movs	r3, #2
 8004692:	e004      	b.n	800469e <HAL_GPIO_Init+0x1be>
 8004694:	2307      	movs	r3, #7
 8004696:	e002      	b.n	800469e <HAL_GPIO_Init+0x1be>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_GPIO_Init+0x1be>
 800469c:	2300      	movs	r3, #0
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	f002 0203 	and.w	r2, r2, #3
 80046a4:	0092      	lsls	r2, r2, #2
 80046a6:	4093      	lsls	r3, r2
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ae:	4938      	ldr	r1, [pc, #224]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	3302      	adds	r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80046bc:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_GPIO_Init+0x2bc>)
 80046be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80046e2:	4a2e      	ldr	r2, [pc, #184]	; (800479c <HAL_GPIO_Init+0x2bc>)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_GPIO_Init+0x2bc>)
 80046ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <HAL_GPIO_Init+0x2bc>)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_GPIO_Init+0x2bc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800473c:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_GPIO_Init+0x2bc>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_GPIO_Init+0x2bc>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004766:	4a0d      	ldr	r2, [pc, #52]	; (800479c <HAL_GPIO_Init+0x2bc>)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f aeb7 	bne.w	80044f0 <HAL_GPIO_Init+0x10>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	48000400 	.word	0x48000400
 8004798:	48000800 	.word	0x48000800
 800479c:	58000800 	.word	0x58000800

080047a0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047ae:	e0af      	b.n	8004910 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047b0:	2201      	movs	r2, #1
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a2 	beq.w	800490a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047c6:	4a59      	ldr	r2, [pc, #356]	; (800492c <HAL_GPIO_DeInit+0x18c>)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	2207      	movs	r2, #7
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ee:	d00d      	beq.n	800480c <HAL_GPIO_DeInit+0x6c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a4f      	ldr	r2, [pc, #316]	; (8004930 <HAL_GPIO_DeInit+0x190>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <HAL_GPIO_DeInit+0x68>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a4e      	ldr	r2, [pc, #312]	; (8004934 <HAL_GPIO_DeInit+0x194>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_GPIO_DeInit+0x64>
 8004800:	2302      	movs	r3, #2
 8004802:	e004      	b.n	800480e <HAL_GPIO_DeInit+0x6e>
 8004804:	2307      	movs	r3, #7
 8004806:	e002      	b.n	800480e <HAL_GPIO_DeInit+0x6e>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_GPIO_DeInit+0x6e>
 800480c:	2300      	movs	r3, #0
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	f002 0203 	and.w	r2, r2, #3
 8004814:	0092      	lsls	r2, r2, #2
 8004816:	4093      	lsls	r3, r2
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	d136      	bne.n	800488c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800481e:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 8004820:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	43db      	mvns	r3, r3
 8004828:	4943      	ldr	r1, [pc, #268]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 800482a:	4013      	ands	r3, r2
 800482c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004830:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 8004832:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	493f      	ldr	r1, [pc, #252]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 800483c:	4013      	ands	r3, r2
 800483e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	43db      	mvns	r3, r3
 800484a:	493b      	ldr	r1, [pc, #236]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 800484c:	4013      	ands	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	4937      	ldr	r1, [pc, #220]	; (8004938 <HAL_GPIO_DeInit+0x198>)
 800485a:	4013      	ands	r3, r2
 800485c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	2207      	movs	r2, #7
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800486e:	4a2f      	ldr	r2, [pc, #188]	; (800492c <HAL_GPIO_DeInit+0x18c>)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3302      	adds	r3, #2
 8004876:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	43da      	mvns	r2, r3
 800487e:	482b      	ldr	r0, [pc, #172]	; (800492c <HAL_GPIO_DeInit+0x18c>)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	400a      	ands	r2, r1
 8004886:	3302      	adds	r3, #2
 8004888:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2103      	movs	r1, #3
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	08da      	lsrs	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3208      	adds	r2, #8
 80048a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	08d2      	lsrs	r2, r2, #3
 80048c0:	4019      	ands	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3208      	adds	r2, #8
 80048c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2103      	movs	r1, #3
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	2101      	movs	r1, #1
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2103      	movs	r1, #3
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	401a      	ands	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]
    }

    position++;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3301      	adds	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	f47f af49 	bne.w	80047b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	48000400 	.word	0x48000400
 8004934:	48000800 	.word	0x48000800
 8004938:	58000800 	.word	0x58000800

0800493c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
 8004948:	4613      	mov	r3, r2
 800494a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800494c:	787b      	ldrb	r3, [r7, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004958:	e002      	b.n	8004960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
	...

0800496c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	4618      	mov	r0, r3
 800498c:	f005 faa2 	bl	8009ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	58000800 	.word	0x58000800

0800499c <LL_RCC_SetLPTIMClockSource>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	43db      	mvns	r3, r3
 80049b4:	401a      	ands	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <LL_RCC_GetLPTIMClockSource>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4013      	ands	r3, r2
 80049e2:	0c1a      	lsrs	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4313      	orrs	r3, r2
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <LL_APB1_GRP1_ForceReset>:
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <LL_APB1_GRP2_ForceReset>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <LL_APB1_GRP1_ReleaseReset>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <LL_APB1_GRP2_ReleaseReset>:
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a70:	4013      	ands	r3, r2
 8004a72:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0b6      	b.n	8004c00 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fc fe17 	bl	80016e0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fac2 	bl	800506c <LPTIM_WaitForFlag>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d101      	bne.n	8004af2 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e086      	b.n	8004c00 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 faea 	bl	80050cc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 faaa 	bl	8005052 <HAL_LPTIM_GetState>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d101      	bne.n	8004b08 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e07b      	b.n	8004c00 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d004      	beq.n	8004b22 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b20:	d103      	bne.n	8004b2a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 031e 	bic.w	r3, r3, #30
 8004b28:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d005      	beq.n	8004b42 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <HAL_LPTIM_Init+0x188>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b52:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004b58:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004b5e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004b64:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d004      	beq.n	8004b96 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b94:	d107      	bne.n	8004ba6 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004bba:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004bc0:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <HAL_LPTIM_Init+0x18c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	621a      	str	r2, [r3, #32]
 8004bea:	e004      	b.n	8004bf6 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bf4:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	ff19f1fe 	.word	0xff19f1fe
 8004c0c:	40007c00 	.word	0x40007c00

08004c10 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a48      	ldr	r2, [pc, #288]	; (8004d48 <HAL_LPTIM_Counter_Start_IT+0x138>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <HAL_LPTIM_Counter_Start_IT+0x2e>
 8004c2c:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c32:	4a46      	ldr	r2, [pc, #280]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c3c:	e015      	b.n	8004c6a <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a43      	ldr	r2, [pc, #268]	; (8004d50 <HAL_LPTIM_Counter_Start_IT+0x140>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <HAL_LPTIM_Counter_Start_IT+0x4a>
 8004c48:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c58:	e007      	b.n	8004c6a <HAL_LPTIM_Counter_Start_IT+0x5a>
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c60:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8004c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d00c      	beq.n	8004c8c <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8004c76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7a:	d107      	bne.n	8004c8c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004c8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004cac:	2110      	movs	r1, #16
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9dc 	bl	800506c <LPTIM_WaitForFlag>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d101      	bne.n	8004cbe <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e03f      	b.n	8004d3e <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa04 	bl	80050cc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f9c4 	bl	8005052 <HAL_LPTIM_GetState>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d101      	bne.n	8004cd4 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e034      	b.n	8004d3e <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0210 	orr.w	r2, r2, #16
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0202 	orr.w	r2, r2, #2
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d02:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d12:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0204 	orr.w	r2, r2, #4
 8004d32:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40007c00 	.word	0x40007c00
 8004d4c:	58000800 	.word	0x58000800
 8004d50:	40009400 	.word	0x40009400

08004d54 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8004d6e:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d74:	4a28      	ldr	r2, [pc, #160]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004d76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d7e:	e015      	b.n	8004dac <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d108      	bne.n	8004d9c <HAL_LPTIM_Counter_Stop_IT+0x48>
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004d92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d9a:	e007      	b.n	8004dac <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da2:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f98d 	bl	80050cc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f94d 	bl	8005052 <HAL_LPTIM_GetState>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d101      	bne.n	8004dc2 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e024      	b.n	8004e0c <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0210 	bic.w	r2, r2, #16
 8004dd0:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0202 	bic.w	r2, r2, #2
 8004de0:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df0:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e00:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40007c00 	.word	0x40007c00
 8004e18:	58000800 	.word	0x58000800
 8004e1c:	40009400 	.word	0x40009400

08004e20 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d10d      	bne.n	8004e52 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d106      	bne.n	8004e52 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f8af 	bl	8004fb0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d10d      	bne.n	8004e7c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d106      	bne.n	8004e7c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8a3 	bl	8004fc2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d10d      	bne.n	8004ea6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d106      	bne.n	8004ea6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f897 	bl	8004fd4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d106      	bne.n	8004ed0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f88b 	bl	8004fe6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d10d      	bne.n	8004efa <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d106      	bne.n	8004efa <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f87f 	bl	8004ff8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d10d      	bne.n	8004f24 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d106      	bne.n	8004f24 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f873 	bl	800500a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d10d      	bne.n	8004f4e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d106      	bne.n	8004f4e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f867 	bl	800501c <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d10d      	bne.n	8004f78 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d106      	bne.n	8004f78 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f85b 	bl	800502e <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f86:	d10f      	bne.n	8004fa8 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d107      	bne.n	8004fa8 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa0:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f84c 	bl	8005040 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005060:	b2db      	uxtb	r3, r3
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <LPTIM_WaitForFlag+0x58>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <LPTIM_WaitForFlag+0x5c>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	0b9b      	lsrs	r3, r3, #14
 8005086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	3b01      	subs	r3, #1
 8005094:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d002      	beq.n	80050b6 <LPTIM_WaitForFlag+0x4a>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ec      	bne.n	8005090 <LPTIM_WaitForFlag+0x24>

  return result;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000
 80050c8:	d1b71759 	.word	0xd1b71759

080050cc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80050d8:	b672      	cpsid	i
}
 80050da:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a8d      	ldr	r2, [pc, #564]	; (8005318 <LPTIM_Disable+0x24c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d015      	beq.n	8005112 <LPTIM_Disable+0x46>
 80050e6:	4a8c      	ldr	r2, [pc, #560]	; (8005318 <LPTIM_Disable+0x24c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d818      	bhi.n	800511e <LPTIM_Disable+0x52>
 80050ec:	4a8b      	ldr	r2, [pc, #556]	; (800531c <LPTIM_Disable+0x250>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <LPTIM_Disable+0x2e>
 80050f2:	4a8b      	ldr	r2, [pc, #556]	; (8005320 <LPTIM_Disable+0x254>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d006      	beq.n	8005106 <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 80050f8:	e011      	b.n	800511e <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80050fa:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80050fe:	f7ff fc66 	bl	80049ce <LL_RCC_GetLPTIMClockSource>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005104:	e00c      	b.n	8005120 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005106:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800510a:	f7ff fc60 	bl	80049ce <LL_RCC_GetLPTIMClockSource>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005110:	e006      	b.n	8005120 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005112:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005116:	f7ff fc5a 	bl	80049ce <LL_RCC_GetLPTIMClockSource>
 800511a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800511c:	e000      	b.n	8005120 <LPTIM_Disable+0x54>
      break;
 800511e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a70      	ldr	r2, [pc, #448]	; (8005318 <LPTIM_Disable+0x24c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d019      	beq.n	800518e <LPTIM_Disable+0xc2>
 800515a:	4a6f      	ldr	r2, [pc, #444]	; (8005318 <LPTIM_Disable+0x24c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d81d      	bhi.n	800519c <LPTIM_Disable+0xd0>
 8005160:	4a6e      	ldr	r2, [pc, #440]	; (800531c <LPTIM_Disable+0x250>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <LPTIM_Disable+0xa2>
 8005166:	4a6e      	ldr	r2, [pc, #440]	; (8005320 <LPTIM_Disable+0x254>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 800516c:	e016      	b.n	800519c <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800516e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005172:	f7ff fc3e 	bl	80049f2 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005176:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800517a:	f7ff fc5c 	bl	8004a36 <LL_APB1_GRP1_ReleaseReset>
      break;
 800517e:	e00e      	b.n	800519e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005180:	2020      	movs	r0, #32
 8005182:	f7ff fc47 	bl	8004a14 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005186:	2020      	movs	r0, #32
 8005188:	f7ff fc67 	bl	8004a5a <LL_APB1_GRP2_ReleaseReset>
      break;
 800518c:	e007      	b.n	800519e <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800518e:	2040      	movs	r0, #64	; 0x40
 8005190:	f7ff fc40 	bl	8004a14 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005194:	2040      	movs	r0, #64	; 0x40
 8005196:	f7ff fc60 	bl	8004a5a <LL_APB1_GRP2_ReleaseReset>
      break;
 800519a:	e000      	b.n	800519e <LPTIM_Disable+0xd2>
      break;
 800519c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <LPTIM_Disable+0xe6>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <LPTIM_Disable+0xe6>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8096 	beq.w	80052de <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a58      	ldr	r2, [pc, #352]	; (8005318 <LPTIM_Disable+0x24c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <LPTIM_Disable+0x118>
 80051bc:	4a56      	ldr	r2, [pc, #344]	; (8005318 <LPTIM_Disable+0x24c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d815      	bhi.n	80051ee <LPTIM_Disable+0x122>
 80051c2:	4a56      	ldr	r2, [pc, #344]	; (800531c <LPTIM_Disable+0x250>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <LPTIM_Disable+0x104>
 80051c8:	4a55      	ldr	r2, [pc, #340]	; (8005320 <LPTIM_Disable+0x254>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d005      	beq.n	80051da <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80051ce:	e00e      	b.n	80051ee <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80051d0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80051d4:	f7ff fbe2 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80051d8:	e00a      	b.n	80051f0 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80051da:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80051de:	f7ff fbdd 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80051e2:	e005      	b.n	80051f0 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80051e4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80051e8:	f7ff fbd8 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80051ec:	e000      	b.n	80051f0 <LPTIM_Disable+0x124>
        break;
 80051ee:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01a      	beq.n	800522c <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800520e:	2108      	movs	r1, #8
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff2b 	bl	800506c <LPTIM_WaitForFlag>
 8005216:	4603      	mov	r3, r0
 8005218:	2b03      	cmp	r3, #3
 800521a:	d103      	bne.n	8005224 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2203      	movs	r2, #3
 8005220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d01a      	beq.n	8005268 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800524a:	2110      	movs	r1, #16
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff0d 	bl	800506c <LPTIM_WaitForFlag>
 8005252:	4603      	mov	r3, r0
 8005254:	2b03      	cmp	r3, #3
 8005256:	d103      	bne.n	8005260 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2203      	movs	r2, #3
 800525c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2210      	movs	r2, #16
 8005266:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01c      	beq.n	80052a8 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff feee 	bl	800506c <LPTIM_WaitForFlag>
 8005290:	4603      	mov	r3, r0
 8005292:	2b03      	cmp	r3, #3
 8005294:	d103      	bne.n	800529e <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2203      	movs	r2, #3
 800529a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052a6:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <LPTIM_Disable+0x24c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d011      	beq.n	80052d6 <LPTIM_Disable+0x20a>
 80052b2:	4a19      	ldr	r2, [pc, #100]	; (8005318 <LPTIM_Disable+0x24c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d814      	bhi.n	80052e2 <LPTIM_Disable+0x216>
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <LPTIM_Disable+0x250>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <LPTIM_Disable+0x1fa>
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <LPTIM_Disable+0x254>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80052c4:	e00d      	b.n	80052e2 <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80052c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c8:	f7ff fb68 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80052cc:	e00a      	b.n	80052e4 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80052ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d0:	f7ff fb64 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80052d4:	e006      	b.n	80052e4 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80052d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d8:	f7ff fb60 	bl	800499c <LL_RCC_SetLPTIMClockSource>
        break;
 80052dc:	e002      	b.n	80052e4 <LPTIM_Disable+0x218>
    }
  }
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <LPTIM_Disable+0x218>
        break;
 80052e2:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 800530c:	b662      	cpsie	i
}
 800530e:	bf00      	nop

  __enable_irq();
}
 8005310:	bf00      	nop
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40009800 	.word	0x40009800
 800531c:	40007c00 	.word	0x40007c00
 8005320:	40009400 	.word	0x40009400

08005324 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <HAL_PWR_EnableBkUpAccess+0x18>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_PWR_EnableBkUpAccess+0x18>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	58000400 	.word	0x58000400

08005340 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535e:	d10d      	bne.n	800537c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005360:	f000 f83c 	bl	80053dc <HAL_PWREx_DisableLowPowerRunMode>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800536a:	e015      	b.n	8005398 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005378:	f000 f822 	bl	80053c0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <HAL_PWR_EnterSLEEPMode+0x64>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005382:	f023 0304 	bic.w	r3, r3, #4
 8005386:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800538e:	bf30      	wfi
 8005390:	e002      	b.n	8005398 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005392:	bf40      	sev
    __WFE();
 8005394:	bf20      	wfe
    __WFE();
 8005396:	bf20      	wfe
  }
}
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	58000400 	.word	0x58000400
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_PWREx_GetVoltageRange+0x14>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	58000400 	.word	0x58000400

080053c0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a03      	ldr	r2, [pc, #12]	; (80053d8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80053ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	58000400 	.word	0x58000400

080053dc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2232      	movs	r2, #50	; 0x32
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0c9b      	lsrs	r3, r3, #18
 8005400:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005402:	e002      	b.n	800540a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d102      	bne.n	800541e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f2      	bne.n	8005404 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542a:	d101      	bne.n	8005430 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e000      	b.n	8005432 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	58000400 	.word	0x58000400
 8005440:	20000000 	.word	0x20000000
 8005444:	431bde83 	.word	0x431bde83

08005448 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005474:	bf30      	wfi
 8005476:	e002      	b.n	800547e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005478:	bf40      	sev
    __WFE();
 800547a:	bf20      	wfe
    __WFE();
 800547c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	6113      	str	r3, [r2, #16]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	58000400 	.word	0x58000400
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <LL_PWR_IsEnabledBkUpAccess>:
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d101      	bne.n	80054b2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	58000400 	.word	0x58000400

080054c0 <LL_RCC_HSE_EnableTcxo>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <LL_RCC_HSE_DisableTcxo>:
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ee:	6013      	str	r3, [r2, #0]
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d101      	bne.n	8005510 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_HSE_Enable>:
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <LL_RCC_HSE_Disable>:
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <LL_RCC_HSE_IsReady>:
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005564:	d101      	bne.n	800556a <LL_RCC_HSE_IsReady+0x18>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <LL_RCC_HSE_IsReady+0x1a>
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <LL_RCC_HSI_Enable>:
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <LL_RCC_HSI_Disable>:
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <LL_RCC_HSI_IsReady>:
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055be:	d101      	bne.n	80055c4 <LL_RCC_HSI_IsReady+0x18>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <LL_RCC_HSI_IsReady+0x1a>
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <LL_RCC_HSI_SetCalibTrimming>:
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_LSE_IsReady>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d101      	bne.n	800560e <LL_RCC_LSE_IsReady+0x18>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <LL_RCC_LSE_IsReady+0x1a>
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <LL_RCC_LSI_Enable>:
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <LL_RCC_LSI_Disable>:
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <LL_RCC_LSI_IsReady>:
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d101      	bne.n	8005670 <LL_RCC_LSI_IsReady+0x18>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <LL_RCC_LSI_IsReady+0x1a>
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <LL_RCC_MSI_Enable>:
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6013      	str	r3, [r2, #0]
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <LL_RCC_MSI_Disable>:
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_MSI_IsReady>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d101      	bne.n	80056c8 <LL_RCC_MSI_IsReady+0x16>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <LL_RCC_MSI_IsReady+0x18>
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d101      	bne.n	80056e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <LL_RCC_MSI_GetRange>:
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <LL_RCC_SetSysClkSource>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <LL_RCC_GetSysClkSource>:
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 030c 	and.w	r3, r3, #12
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <LL_RCC_SetAHBPrescaler>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800578c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_SetAHB3Prescaler>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057ba:	f023 020f 	bic.w	r2, r3, #15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_SetAPB1Prescaler>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_SetAPB2Prescaler>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <LL_RCC_GetAHBPrescaler>:
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <LL_RCC_GetAHB3Prescaler>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <LL_RCC_GetAPB1Prescaler>:
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <LL_RCC_GetAPB2Prescaler>:
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ac:	6013      	str	r3, [r2, #0]
}
 80058ae:	bf00      	nop
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c8:	d101      	bne.n	80058ce <LL_RCC_PLL_IsReady+0x18>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <LL_RCC_PLL_IsReady+0x1a>
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0303 	and.w	r3, r3, #3
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005944:	d101      	bne.n	800594a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005968:	d101      	bne.n	800596e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800598a:	d101      	bne.n	8005990 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ac:	d101      	bne.n	80059b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e38b      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ce:	f7ff fece 	bl	800576e <LL_RCC_GetSysClkSource>
 80059d2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d4:	f7ff ffa2 	bl	800591c <LL_RCC_PLL_GetMainSource>
 80059d8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80c9 	beq.w	8005b7a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_RCC_OscConfig+0x3e>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d17b      	bne.n	8005aec <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d178      	bne.n	8005aec <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059fa:	f7ff fe5a 	bl	80056b2 <LL_RCC_MSI_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_OscConfig+0x54>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e36a      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_RCC_OscConfig+0x72>
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2c:	e006      	b.n	8005a3c <HAL_RCC_OscConfig+0x80>
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d222      	bcs.n	8005a86 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fd51 	bl	80064ec <RCC_SetFlashLatencyFromMSIRange>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e348      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	f043 0308 	orr.w	r3, r3, #8
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fe4e 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>
 8005a84:	e021      	b.n	8005aca <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fe35 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fd16 	bl	80064ec <RCC_SetFlashLatencyFromMSIRange>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e30d      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005aca:	f000 fcd7 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4aa1      	ldr	r2, [pc, #644]	; (8005d58 <HAL_RCC_OscConfig+0x39c>)
 8005ad2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ad4:	4ba1      	ldr	r3, [pc, #644]	; (8005d5c <HAL_RCC_OscConfig+0x3a0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc f86b 	bl	8001bb4 <HAL_InitTick>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d047      	beq.n	8005b78 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	e2fc      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02c      	beq.n	8005b4e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005af4:	f7ff fdc1 	bl	800567a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005af8:	f7fc f866 	bl	8001bc8 <HAL_GetTick>
 8005afc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b00:	f7fc f862 	bl	8001bc8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e2e9      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b12:	f7ff fdce 	bl	80056b2 <LL_RCC_MSI_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f1      	beq.n	8005b00 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b26:	f043 0308 	orr.w	r3, r3, #8
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fdea 	bl	8005720 <LL_RCC_MSI_SetCalibTrimming>
 8005b4c:	e015      	b.n	8005b7a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b4e:	f7ff fda2 	bl	8005696 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b52:	f7fc f839 	bl	8001bc8 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b5a:	f7fc f835 	bl	8001bc8 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e2bc      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b6c:	f7ff fda1 	bl	80056b2 <LL_RCC_MSI_IsReady>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f1      	bne.n	8005b5a <HAL_RCC_OscConfig+0x19e>
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b78:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d05f      	beq.n	8005c46 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCC_OscConfig+0x1dc>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b0c      	cmp	r3, #12
 8005b90:	d10d      	bne.n	8005bae <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d10a      	bne.n	8005bae <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	f7ff fcdb 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d050      	beq.n	8005c44 <HAL_RCC_OscConfig+0x288>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d14c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e29b      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x218>
 8005bce:	f7ff fca4 	bl	800551a <LL_RCC_HSE_Enable>
 8005bd2:	e00d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x234>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005bdc:	d104      	bne.n	8005be8 <HAL_RCC_OscConfig+0x22c>
 8005bde:	f7ff fc6f 	bl	80054c0 <LL_RCC_HSE_EnableTcxo>
 8005be2:	f7ff fc9a 	bl	800551a <LL_RCC_HSE_Enable>
 8005be6:	e003      	b.n	8005bf0 <HAL_RCC_OscConfig+0x234>
 8005be8:	f7ff fca5 	bl	8005536 <LL_RCC_HSE_Disable>
 8005bec:	f7ff fc76 	bl	80054dc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fb ffe6 	bl	8001bc8 <HAL_GetTick>
 8005bfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fb ffe2 	bl	8001bc8 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	; 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e269      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c12:	f7ff fc9e 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f1      	beq.n	8005c00 <HAL_RCC_OscConfig+0x244>
 8005c1c:	e013      	b.n	8005c46 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fb ffd3 	bl	8001bc8 <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c26:	f7fb ffcf 	bl	8001bc8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b64      	cmp	r3, #100	; 0x64
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e256      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c38:	f7ff fc8b 	bl	8005552 <LL_RCC_HSE_IsReady>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <HAL_RCC_OscConfig+0x26a>
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04b      	beq.n	8005cea <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2a8>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d113      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d110      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c64:	f7ff fca2 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2be>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e235      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fca5 	bl	80055ce <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c84:	e031      	b.n	8005cea <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d019      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8e:	f7ff fc71 	bl	8005574 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fb ff99 	bl	8001bc8 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7fb ff95 	bl	8001bc8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e21c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cac:	f7ff fc7e 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f1      	beq.n	8005c9a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fc87 	bl	80055ce <LL_RCC_HSI_SetCalibTrimming>
 8005cc0:	e013      	b.n	8005cea <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc2:	f7ff fc65 	bl	8005590 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fb ff7f 	bl	8001bc8 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cce:	f7fb ff7b 	bl	8001bc8 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e202      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ce0:	f7ff fc64 	bl	80055ac <LL_RCC_HSI_IsReady>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f1      	bne.n	8005cce <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d06f      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d057      	beq.n	8005dae <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d06:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d036      	beq.n	8005d84 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1db      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005d38:	f7ff fc7e 	bl	8005638 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d3c:	f7fb ff44 	bl	8001bc8 <HAL_GetTick>
 8005d40:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d42:	e00d      	b.n	8005d60 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fb ff40 	bl	8001bc8 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b11      	cmp	r3, #17
 8005d50:	d906      	bls.n	8005d60 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e1c7      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
 8005d56:	bf00      	nop
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 8005d60:	f7ff fc7a 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ec      	bne.n	8005d44 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d84:	f7ff fc48 	bl	8005618 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fb ff1e 	bl	8001bc8 <HAL_GetTick>
 8005d8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d90:	f7fb ff1a 	bl	8001bc8 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b11      	cmp	r3, #17
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1a1      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005da2:	f7ff fc59 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f1      	beq.n	8005d90 <HAL_RCC_OscConfig+0x3d4>
 8005dac:	e013      	b.n	8005dd6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dae:	f7ff fc43 	bl	8005638 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db2:	f7fb ff09 	bl	8001bc8 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dba:	f7fb ff05 	bl	8001bc8 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b11      	cmp	r3, #17
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e18c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005dcc:	f7ff fc44 	bl	8005658 <LL_RCC_LSI_IsReady>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f1      	bne.n	8005dba <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80d8 	beq.w	8005f94 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005de4:	f7ff fb5a 	bl	800549c <LL_PWR_IsEnabledBkUpAccess>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d113      	bne.n	8005e16 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005dee:	f7ff fa99 	bl	8005324 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df2:	f7fb fee9 	bl	8001bc8 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fb fee5 	bl	8001bc8 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e16c      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005e0c:	f7ff fb46 	bl	800549c <LL_PWR_IsEnabledBkUpAccess>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f1      	beq.n	8005dfa <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d07b      	beq.n	8005f16 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b85      	cmp	r3, #133	; 0x85
 8005e24:	d003      	beq.n	8005e2e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d109      	bne.n	8005e42 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f043 0304 	orr.w	r3, r3, #4
 8005e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e42:	f7fb fec1 	bl	8001bc8 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fb feb3 	bl	8001bc8 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e138      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e74:	f7ff fbbf 	bl	80055f6 <LL_RCC_LSE_IsReady>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b81      	cmp	r3, #129	; 0x81
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b85      	cmp	r3, #133	; 0x85
 8005e8c:	d121      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fe9b 	bl	8001bc8 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fb fe8d 	bl	8001bc8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e112      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ec      	beq.n	8005eaa <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ed0:	e060      	b.n	8005f94 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fb fe79 	bl	8001bc8 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eec:	e00a      	b.n	8005f04 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eee:	f7fb fe6b 	bl	8001bc8 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0f0      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ec      	bne.n	8005eee <HAL_RCC_OscConfig+0x532>
 8005f14:	e03e      	b.n	8005f94 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f16:	f7fb fe57 	bl	8001bc8 <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fb fe49 	bl	8001bc8 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e0ce      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ec      	bne.n	8005f32 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fb fe36 	bl	8001bc8 <HAL_GetTick>
 8005f5c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fb fe28 	bl	8001bc8 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0ad      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f8a:	f7ff fb34 	bl	80055f6 <LL_RCC_LSE_IsReady>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ef      	bne.n	8005f74 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a3 	beq.w	80060e4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d076      	beq.n	8006092 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d14b      	bne.n	8006044 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	f7ff fc75 	bl	800589a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fb fe0a 	bl	8001bc8 <HAL_GetTick>
 8005fb4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fb fe06 	bl	8001bc8 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b0a      	cmp	r3, #10
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e08d      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fca:	f7ff fc74 	bl	80058b6 <LL_RCC_PLL_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f1      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <HAL_RCC_OscConfig+0x734>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fec:	0212      	lsls	r2, r2, #8
 8005fee:	4311      	orrs	r1, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ff4:	4311      	orrs	r1, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006000:	430a      	orrs	r2, r1
 8006002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006006:	4313      	orrs	r3, r2
 8006008:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600a:	f7ff fc38 	bl	800587e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601e:	f7fb fdd3 	bl	8001bc8 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006026:	f7fb fdcf 	bl	8001bc8 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b0a      	cmp	r3, #10
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e056      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006038:	f7ff fc3d 	bl	80058b6 <LL_RCC_PLL_IsReady>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f1      	beq.n	8006026 <HAL_RCC_OscConfig+0x66a>
 8006042:	e04f      	b.n	80060e4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006044:	f7ff fc29 	bl	800589a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006062:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb fdac 	bl	8001bc8 <HAL_GetTick>
 8006070:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fb fda8 	bl	8001bc8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b0a      	cmp	r3, #10
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e02f      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006086:	f7ff fc16 	bl	80058b6 <LL_RCC_PLL_IsReady>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f1      	bne.n	8006074 <HAL_RCC_OscConfig+0x6b8>
 8006090:	e028      	b.n	80060e4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e023      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0203 	and.w	r2, r3, #3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d115      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	429a      	cmp	r2, r3
 80060c0:	d10e      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	11c1808c 	.word	0x11c1808c

080060f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e10f      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006108:	4b89      	ldr	r3, [pc, #548]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d91b      	bls.n	800614e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b86      	ldr	r3, [pc, #536]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 0207 	bic.w	r2, r3, #7
 800611e:	4984      	ldr	r1, [pc, #528]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	4313      	orrs	r3, r2
 8006124:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006126:	f7fb fd4f 	bl	8001bc8 <HAL_GetTick>
 800612a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612c:	e008      	b.n	8006140 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800612e:	f7fb fd4b 	bl	8001bc8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0f3      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006140:	4b7b      	ldr	r3, [pc, #492]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d1ef      	bne.n	800612e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fb10 	bl	8005784 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006164:	f7fb fd30 	bl	8001bc8 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800616c:	f7fb fd2c 	bl	8001bc8 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e0d4      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800617e:	f7ff fbd8 	bl	8005932 <LL_RCC_IsActiveFlag_HPRE>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d016      	beq.n	80061c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fb06 	bl	80057aa <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800619e:	f7fb fd13 	bl	8001bc8 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061a6:	f7fb fd0f 	bl	8001bc8 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e0b7      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80061b8:	f7ff fbcc 	bl	8005954 <LL_RCC_IsActiveFlag_SHDHPRE>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f1      	beq.n	80061a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff faff 	bl	80057d6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061d8:	f7fb fcf6 	bl	8001bc8 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061e0:	f7fb fcf2 	bl	8001bc8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e09a      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061f2:	f7ff fbc1 	bl	8005978 <LL_RCC_IsActiveFlag_PPRE1>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f1      	beq.n	80061e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff faf4 	bl	80057fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006214:	f7fb fcd8 	bl	8001bc8 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800621c:	f7fb fcd4 	bl	8001bc8 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e07c      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800622e:	f7ff fbb4 	bl	800599a <LL_RCC_IsActiveFlag_PPRE2>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f1      	beq.n	800621c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d043      	beq.n	80062cc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d106      	bne.n	800625a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800624c:	f7ff f981 	bl	8005552 <LL_RCC_HSE_IsReady>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11e      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e066      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b03      	cmp	r3, #3
 8006260:	d106      	bne.n	8006270 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006262:	f7ff fb28 	bl	80058b6 <LL_RCC_PLL_IsReady>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d113      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e05b      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006278:	f7ff fa1b 	bl	80056b2 <LL_RCC_MSI_IsReady>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e050      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006286:	f7ff f991 	bl	80055ac <LL_RCC_HSI_IsReady>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e049      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fa55 	bl	8005748 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fb fc93 	bl	8001bc8 <HAL_GetTick>
 80062a2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a4:	e00a      	b.n	80062bc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a6:	f7fb fc8f 	bl	8001bc8 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e035      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062bc:	f7ff fa57 	bl	800576e <LL_RCC_GetSysClkSource>
 80062c0:	4602      	mov	r2, r0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1ec      	bne.n	80062a6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d21b      	bcs.n	8006312 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4913      	ldr	r1, [pc, #76]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ea:	f7fb fc6d 	bl	8001bc8 <HAL_GetTick>
 80062ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062f2:	f7fb fc69 	bl	8001bc8 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e011      	b.n	8006328 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006304:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <HAL_RCC_ClockConfig+0x23c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d1ef      	bne.n	80062f2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006312:	f000 f8b3 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8006316:	4603      	mov	r3, r0
 8006318:	4a06      	ldr	r2, [pc, #24]	; (8006334 <HAL_RCC_ClockConfig+0x240>)
 800631a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <HAL_RCC_ClockConfig+0x244>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fb fc47 	bl	8001bb4 <HAL_InitTick>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	58004000 	.word	0x58004000
 8006334:	20000000 	.word	0x20000000
 8006338:	20000014 	.word	0x20000014

0800633c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800634a:	f7ff fa10 	bl	800576e <LL_RCC_GetSysClkSource>
 800634e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006350:	f7ff fae4 	bl	800591c <LL_RCC_PLL_GetMainSource>
 8006354:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d139      	bne.n	80063d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d136      	bne.n	80063d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006368:	f7ff f9b3 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d115      	bne.n	800639e <HAL_RCC_GetSysClockFreq+0x62>
 8006372:	f7ff f9ae 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d106      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x4e>
 800637c:	f7ff f9b9 	bl	80056f2 <LL_RCC_MSI_GetRange>
 8006380:	4603      	mov	r3, r0
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	e005      	b.n	8006396 <HAL_RCC_GetSysClockFreq+0x5a>
 800638a:	f7ff f9bd 	bl	8005708 <LL_RCC_MSI_GetRangeAfterStandby>
 800638e:	4603      	mov	r3, r0
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_RCC_GetSysClockFreq+0x134>)
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	e014      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800639e:	f7ff f998 	bl	80056d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80063a8:	f7ff f9a3 	bl	80056f2 <LL_RCC_MSI_GetRange>
 80063ac:	4603      	mov	r3, r0
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	e005      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0x86>
 80063b6:	f7ff f9a7 	bl	8005708 <LL_RCC_MSI_GetRangeAfterStandby>
 80063ba:	4603      	mov	r3, r0
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	4a2b      	ldr	r2, [pc, #172]	; (8006470 <HAL_RCC_GetSysClockFreq+0x134>)
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d115      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80063d4:	e012      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d102      	bne.n	80063e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e00c      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d109      	bne.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80063e8:	f7ff f886 	bl	80054f8 <LL_RCC_HSE_IsEnabledDiv2>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d102      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e001      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80063f8:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fc:	f7ff f9b7 	bl	800576e <LL_RCC_GetSysClkSource>
 8006400:	4603      	mov	r3, r0
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d12f      	bne.n	8006466 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006406:	f7ff fa89 	bl	800591c <LL_RCC_PLL_GetMainSource>
 800640a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d003      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0xde>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0xe4>
 8006418:	e00d      	b.n	8006436 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800641a:	4b16      	ldr	r3, [pc, #88]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 800641c:	60fb      	str	r3, [r7, #12]
        break;
 800641e:	e00d      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006420:	f7ff f86a 	bl	80054f8 <LL_RCC_HSE_IsEnabledDiv2>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d102      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800642a:	4b12      	ldr	r3, [pc, #72]	; (8006474 <HAL_RCC_GetSysClockFreq+0x138>)
 800642c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800642e:	e005      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006430:	4b11      	ldr	r3, [pc, #68]	; (8006478 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006432:	60fb      	str	r3, [r7, #12]
        break;
 8006434:	e002      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	60fb      	str	r3, [r7, #12]
        break;
 800643a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800643c:	f7ff fa4c 	bl	80058d8 <LL_RCC_PLL_GetN>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	fb03 f402 	mul.w	r4, r3, r2
 8006448:	f7ff fa5d 	bl	8005906 <LL_RCC_PLL_GetDivider>
 800644c:	4603      	mov	r3, r0
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	3301      	adds	r3, #1
 8006452:	fbb4 f4f3 	udiv	r4, r4, r3
 8006456:	f7ff fa4b 	bl	80058f0 <LL_RCC_PLL_GetR>
 800645a:	4603      	mov	r3, r0
 800645c:	0f5b      	lsrs	r3, r3, #29
 800645e:	3301      	adds	r3, #1
 8006460:	fbb4 f3f3 	udiv	r3, r4, r3
 8006464:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}
 8006470:	0801e1c0 	.word	0x0801e1c0
 8006474:	00f42400 	.word	0x00f42400
 8006478:	01e84800 	.word	0x01e84800

0800647c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800647c:	b598      	push	{r3, r4, r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006480:	f7ff ff5c 	bl	800633c <HAL_RCC_GetSysClockFreq>
 8006484:	4604      	mov	r4, r0
 8006486:	f7ff f9cc 	bl	8005822 <LL_RCC_GetAHBPrescaler>
 800648a:	4603      	mov	r3, r0
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	4a03      	ldr	r2, [pc, #12]	; (80064a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd98      	pop	{r3, r4, r7, pc}
 80064a0:	0801e160 	.word	0x0801e160

080064a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a4:	b598      	push	{r3, r4, r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064a8:	f7ff ffe8 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064ac:	4604      	mov	r4, r0
 80064ae:	f7ff f9d0 	bl	8005852 <LL_RCC_GetAPB1Prescaler>
 80064b2:	4603      	mov	r3, r0
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	4a03      	ldr	r2, [pc, #12]	; (80064c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd98      	pop	{r3, r4, r7, pc}
 80064c4:	0801e1a0 	.word	0x0801e1a0

080064c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c8:	b598      	push	{r3, r4, r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80064cc:	f7ff ffd6 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064d0:	4604      	mov	r4, r0
 80064d2:	f7ff f9c9 	bl	8005868 <LL_RCC_GetAPB2Prescaler>
 80064d6:	4603      	mov	r3, r0
 80064d8:	0adb      	lsrs	r3, r3, #11
 80064da:	4a03      	ldr	r2, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd98      	pop	{r3, r4, r7, pc}
 80064e8:	0801e1a0 	.word	0x0801e1a0

080064ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	4a10      	ldr	r2, [pc, #64]	; (8006540 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006504:	f7ff f998 	bl	8005838 <LL_RCC_GetAHB3Prescaler>
 8006508:	4603      	mov	r3, r0
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a09      	ldr	r2, [pc, #36]	; (8006548 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0c9c      	lsrs	r4, r3, #18
 8006528:	f7fe ff3e 	bl	80053a8 <HAL_PWREx_GetVoltageRange>
 800652c:	4603      	mov	r3, r0
 800652e:	4619      	mov	r1, r3
 8006530:	4620      	mov	r0, r4
 8006532:	f000 f80b 	bl	800654c <RCC_SetFlashLatency>
 8006536:	4603      	mov	r3, r0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bd90      	pop	{r4, r7, pc}
 8006540:	0801e1c0 	.word	0x0801e1c0
 8006544:	0801e160 	.word	0x0801e160
 8006548:	431bde83 	.word	0x431bde83

0800654c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006556:	4a3a      	ldr	r2, [pc, #232]	; (8006640 <RCC_SetFlashLatency+0xf4>)
 8006558:	f107 0320 	add.w	r3, r7, #32
 800655c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006560:	6018      	str	r0, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006566:	4a37      	ldr	r2, [pc, #220]	; (8006644 <RCC_SetFlashLatency+0xf8>)
 8006568:	f107 0318 	add.w	r3, r7, #24
 800656c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	3304      	adds	r3, #4
 8006574:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <RCC_SetFlashLatency+0xfc>)
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	ca07      	ldmia	r2, {r0, r1, r2}
 800657e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006582:	2300      	movs	r3, #0
 8006584:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d11b      	bne.n	80065c6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800658e:	2300      	movs	r3, #0
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
 8006592:	e014      	b.n	80065be <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	443b      	add	r3, r7
 800659c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d807      	bhi.n	80065b8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3338      	adds	r3, #56	; 0x38
 80065ae:	443b      	add	r3, r7
 80065b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065b6:	e021      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	3301      	adds	r3, #1
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d9e7      	bls.n	8006594 <RCC_SetFlashLatency+0x48>
 80065c4:	e01a      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ca:	e014      	b.n	80065f6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	3338      	adds	r3, #56	; 0x38
 80065d2:	443b      	add	r3, r7
 80065d4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d807      	bhi.n	80065f0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3338      	adds	r3, #56	; 0x38
 80065e6:	443b      	add	r3, r7
 80065e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ee:	e005      	b.n	80065fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	3301      	adds	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d9e7      	bls.n	80065cc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065fc:	4b13      	ldr	r3, [pc, #76]	; (800664c <RCC_SetFlashLatency+0x100>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 0207 	bic.w	r2, r3, #7
 8006604:	4911      	ldr	r1, [pc, #68]	; (800664c <RCC_SetFlashLatency+0x100>)
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	4313      	orrs	r3, r2
 800660a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660c:	f7fb fadc 	bl	8001bc8 <HAL_GetTick>
 8006610:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006612:	e008      	b.n	8006626 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006614:	f7fb fad8 	bl	8001bc8 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e007      	b.n	8006636 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <RCC_SetFlashLatency+0x100>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006630:	429a      	cmp	r2, r3
 8006632:	d1ef      	bne.n	8006614 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3738      	adds	r7, #56	; 0x38
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	0801d908 	.word	0x0801d908
 8006644:	0801d910 	.word	0x0801d910
 8006648:	0801d918 	.word	0x0801d918
 800664c:	58004000 	.word	0x58004000

08006650 <LL_RCC_LSE_IsReady>:
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d101      	bne.n	8006668 <LL_RCC_LSE_IsReady+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <LL_RCC_LSE_IsReady+0x1a>
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <LL_RCC_SetUSARTClockSource>:
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800667a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	43db      	mvns	r3, r3
 8006688:	401a      	ands	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <LL_RCC_SetI2SClockSource>:
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80066aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <LL_RCC_SetLPUARTClockSource>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <LL_RCC_SetI2CClockSource>:
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800670e:	43db      	mvns	r3, r3
 8006710:	401a      	ands	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800671a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <LL_RCC_SetLPTIMClockSource>:
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006750:	4313      	orrs	r3, r2
 8006752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <LL_RCC_SetRNGClockSource>:
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <LL_RCC_SetADCClockSource>:
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800679e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <LL_RCC_SetRTCClockSource>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <LL_RCC_GetRTCClockSource>:
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80067e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <LL_RCC_ForceBackupDomainReset>:
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80067fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006816:	b480      	push	{r7}
 8006818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800681a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
	...

08006838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status*/
  #define RCC_PERIPHCLK_RTC              0x00010000U  /*!< RTC Peripheral Clock Selection         */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	volatile uint32_t tmpregister = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;
  volatile HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
  volatile HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006848:	2300      	movs	r3, #0
 800684a:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05c      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xda>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006858:	f7fe fd64 	bl	8005324 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685c:	f7fb f9b4 	bl	8001bc8 <HAL_GetTick>
 8006860:	6178      	str	r0, [r7, #20]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006862:	e009      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fb f9b0 	bl	8001bc8 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d902      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	73fb      	strb	r3, [r7, #15]
        break;
 8006876:	e006      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006878:	4b7e      	ldr	r3, [pc, #504]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006884:	d1ee      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d13e      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800688e:	f7ff ffa6 	bl	80067de <LL_RCC_GetRTCClockSource>
 8006892:	4602      	mov	r2, r0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	429a      	cmp	r2, r3
 800689a:	d00f      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a8:	613b      	str	r3, [r7, #16]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068aa:	f7ff ffa4 	bl	80067f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ae:	f7ff ffb2 	bl	8006816 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d114      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fb f97f 	bl	8001bc8 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80068cc:	e00b      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fb f97b 	bl	8001bc8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d902      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
          {
            ret = HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	73fb      	strb	r3, [r7, #15]
            break;
 80068e4:	e004      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        while (LL_RCC_LSE_IsReady() != 1U)
 80068e6:	f7ff feb3 	bl	8006650 <LL_RCC_LSE_IsReady>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d1ee      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x96>
          }
        }
      }

      if (ret == HAL_OK)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff59 	bl	80067b4 <LL_RCC_SetRTCClockSource>
 8006902:	e006      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	73bb      	strb	r3, [r7, #14]
 800690a:	e002      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	73bb      	strb	r3, [r7, #14]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fea5 	bl	8006672 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fe9a 	bl	8006672 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff febc 	bl	80066cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fee2 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fed7 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fecc 	bl	800672e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d004      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fea5 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fe9a 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fe8f 	bl	80066f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d011      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fe5a 	bl	80066a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f6:	d107      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d010      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fea1 	bl	8006760 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d107      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d011      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fe9f 	bl	800678a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a54:	d107      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x22e>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a64:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	b2db      	uxtb	r3, r3
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	58000400 	.word	0x58000400

08006a78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d068      	beq.n	8006b5c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fd84 	bl	80015ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aac:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006aae:	22ca      	movs	r2, #202	; 0xca
 8006ab0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006ab4:	2253      	movs	r2, #83	; 0x53
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fa0f 	bl	8006edc <RTC_EnterInitMode>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d13f      	bne.n	8006b48 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006ac8:	4b27      	ldr	r3, [pc, #156]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006ace:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006ad8:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4319      	orrs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	430b      	orrs	r3, r1
 8006aec:	491e      	ldr	r1, [pc, #120]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	491a      	ldr	r1, [pc, #104]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006b02:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	430b      	orrs	r3, r1
 8006b14:	4914      	ldr	r1, [pc, #80]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa12 	bl	8006f44 <RTC_ExitInitMode>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10e      	bne.n	8006b48 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a19      	ldr	r1, [r3, #32]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	4319      	orrs	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	430b      	orrs	r3, r1
 8006b42:	4909      	ldr	r1, [pc, #36]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <HAL_RTC_Init+0xf0>)
 8006b4a:	22ff      	movs	r2, #255	; 0xff
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40002800 	.word	0x40002800

08006b6c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_RTC_SetAlarm_IT+0x1e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0f3      	b.n	8006d72 <HAL_RTC_SetAlarm_IT+0x206>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b9a:	4b78      	ldr	r3, [pc, #480]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006baa:	d06a      	beq.n	8006c82 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d13a      	bne.n	8006c28 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bb2:	4b72      	ldr	r3, [pc, #456]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f9f5 	bl	8006fc0 <RTC_ByteToBcd2>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f9ee 	bl	8006fc0 <RTC_ByteToBcd2>
 8006be4:	4603      	mov	r3, r0
 8006be6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006be8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	789b      	ldrb	r3, [r3, #2]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f9e6 	bl	8006fc0 <RTC_ByteToBcd2>
 8006bf4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bf6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	78db      	ldrb	r3, [r3, #3]
 8006bfe:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c00:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f9d8 	bl	8006fc0 <RTC_ByteToBcd2>
 8006c10:	4603      	mov	r3, r0
 8006c12:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c14:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c1c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e02c      	b.n	8006c82 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006c30:	d00d      	beq.n	8006c4e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c3a:	d008      	beq.n	8006c4e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c3c:	4b4f      	ldr	r3, [pc, #316]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c5a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c60:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	78db      	ldrb	r3, [r3, #3]
 8006c66:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c68:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c70:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c72:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c78:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c82:	4b3e      	ldr	r3, [pc, #248]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c84:	22ca      	movs	r2, #202	; 0xca
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
 8006c88:	4b3c      	ldr	r3, [pc, #240]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c8a:	2253      	movs	r2, #83	; 0x53
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c96:	d12c      	bne.n	8006cf2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c98:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4a37      	ldr	r2, [pc, #220]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ca2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ca4:	4b35      	ldr	r3, [pc, #212]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	4930      	ldr	r1, [pc, #192]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	644b      	str	r3, [r1, #68]	; 0x44
 8006cc0:	e006      	b.n	8006cd0 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006cc2:	4a2e      	ldr	r2, [pc, #184]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006cc8:	4a2c      	ldr	r2, [pc, #176]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f043 0201 	orr.w	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ce4:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cea:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006cee:	6193      	str	r3, [r2, #24]
 8006cf0:	e02b      	b.n	8006d4a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cf2:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cf8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006cfc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d00:	2202      	movs	r2, #2
 8006d02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d107      	bne.n	8006d1c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	4919      	ldr	r1, [pc, #100]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d1a:	e006      	b.n	8006d2a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006d1c:	4a17      	ldr	r2, [pc, #92]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006d22:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006d2a:	4a14      	ldr	r2, [pc, #80]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	f043 0202 	orr.w	r2, r3, #2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	4a0e      	ldr	r2, [pc, #56]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d44:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006d48:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d50:	4a0b      	ldr	r2, [pc, #44]	; (8006d80 <HAL_RTC_SetAlarm_IT+0x214>)
 8006d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5a:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd90      	pop	{r4, r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40002800 	.word	0x40002800
 8006d80:	58000800 	.word	0x58000800

08006d84 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_RTC_DeactivateAlarm+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e048      	b.n	8006e2e <HAL_RTC_DeactivateAlarm+0xaa>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dac:	4b22      	ldr	r3, [pc, #136]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dae:	22ca      	movs	r2, #202	; 0xca
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24
 8006db2:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db4:	2253      	movs	r2, #83	; 0x53
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	d115      	bne.n	8006dec <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dca:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	f023 0201 	bic.w	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006de4:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dea:	e014      	b.n	8006e16 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dec:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006df2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006df6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfc:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	f023 0202 	bic.w	r2, r3, #2
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e10:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e12:	2202      	movs	r2, #2
 8006e14:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr
 8006e38:	40002800 	.word	0x40002800

08006e3c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e44:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fb f874 	bl	8001f4e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006e72:	2202      	movs	r2, #2
 8006e74:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f94a 	bl	8007110 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40002800 	.word	0x40002800

08006e90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4a0e      	ldr	r2, [pc, #56]	; (8006ed8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e9e:	f023 0320 	bic.w	r3, r3, #32
 8006ea2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006ea4:	f7fa fe90 	bl	8001bc8 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006eaa:	e009      	b.n	8006ec0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006eac:	f7fa fe8c 	bl	8001bc8 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eba:	d901      	bls.n	8006ec0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RTC_WaitForSynchro+0x48>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ef      	beq.n	8006eac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40002800 	.word	0x40002800

08006edc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <RTC_EnterInitMode+0x64>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d120      	bne.n	8006f36 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <RTC_EnterInitMode+0x64>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a11      	ldr	r2, [pc, #68]	; (8006f40 <RTC_EnterInitMode+0x64>)
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006f00:	f7fa fe62 	bl	8001bc8 <HAL_GetTick>
 8006f04:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f06:	e00d      	b.n	8006f24 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f08:	f7fa fe5e 	bl	8001bc8 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f16:	d905      	bls.n	8006f24 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <RTC_EnterInitMode+0x64>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <RTC_EnterInitMode+0x5a>
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d1e8      	bne.n	8006f08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40002800 	.word	0x40002800

08006f44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f50:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f5c:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10c      	bne.n	8006f82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff91 	bl	8006e90 <HAL_RTC_WaitForSynchro>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01e      	beq.n	8006fb2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2203      	movs	r2, #3
 8006f78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	e017      	b.n	8006fb2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f82:	4b0e      	ldr	r3, [pc, #56]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006f88:	f023 0320 	bic.w	r3, r3, #32
 8006f8c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff7e 	bl	8006e90 <HAL_RTC_WaitForSynchro>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <RTC_ExitInitMode+0x78>)
 8006fac:	f043 0320 	orr.w	r3, r3, #32
 8006fb0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40002800 	.word	0x40002800

08006fc0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006fd2:	e005      	b.n	8006fe0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	3b0a      	subs	r3, #10
 8006fde:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d8f6      	bhi.n	8006fd4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b2db      	uxtb	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
	...

08007000 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007012:	2302      	movs	r3, #2
 8007014:	e01f      	b.n	8007056 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007028:	22ca      	movs	r2, #202	; 0xca
 800702a:	625a      	str	r2, [r3, #36]	; 0x24
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800702e:	2253      	movs	r2, #83	; 0x53
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	4a0a      	ldr	r2, [pc, #40]	; (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007038:	f043 0320 	orr.w	r3, r3, #32
 800703c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703e:	4b08      	ldr	r3, [pc, #32]	; (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	40002800 	.word	0x40002800

08007064 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_RTCEx_SetSSRU_IT+0x16>
 8007076:	2302      	movs	r3, #2
 8007078:	e027      	b.n	80070ca <HAL_RTCEx_SetSSRU_IT+0x66>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800708a:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800708c:	22ca      	movs	r2, #202	; 0xca
 800708e:	625a      	str	r2, [r3, #36]	; 0x24
 8007090:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007092:	2253      	movs	r2, #83	; 0x53
 8007094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	4a0e      	ldr	r2, [pc, #56]	; (80070d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80070aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr
 80070d4:	40002800 	.word	0x40002800
 80070d8:	58000800 	.word	0x58000800

080070dc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fa ff33 	bl	8001f62 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40002800 	.word	0x40002800

08007110 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
	...

08007124 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007132:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	4413      	add	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	4000b100 	.word	0x4000b100

08007154 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800715e:	4b07      	ldr	r3, [pc, #28]	; (800717c <HAL_RTCEx_BKUPRead+0x28>)
 8007160:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	4000b100 	.word	0x4000b100

08007180 <LL_PWR_SetRadioBusyTrigger>:
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007190:	4904      	ldr	r1, [pc, #16]	; (80071a4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4313      	orrs	r3, r2
 8007196:	608b      	str	r3, [r1, #8]
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	58000400 	.word	0x58000400

080071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80071b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071bc:	bf00      	nop
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr
 80071c4:	58000400 	.word	0x58000400

080071c8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d2:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80071d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	58000400 	.word	0x58000400

080071e8 <LL_PWR_ClearFlag_RFBUSY>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80071ec:	4b03      	ldr	r3, [pc, #12]	; (80071fc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80071ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071f2:	619a      	str	r2, [r3, #24]
}
 80071f4:	bf00      	nop
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	58000400 	.word	0x58000400

08007200 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b02      	cmp	r3, #2
 800720e:	d101      	bne.n	8007214 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007210:	2301      	movs	r3, #1
 8007212:	e000      	b.n	8007216 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	58000400 	.word	0x58000400

08007224 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b04      	cmp	r3, #4
 8007232:	d101      	bne.n	8007238 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	58000400 	.word	0x58000400

08007248 <LL_RCC_RF_DisableReset>:
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800724c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007258:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800725c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <LL_RCC_IsRFUnderReset>:
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800727c:	d101      	bne.n	8007282 <LL_RCC_IsRFUnderReset+0x1a>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <LL_RCC_IsRFUnderReset+0x1c>
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <LL_EXTI_EnableIT_32_63>:
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8007296:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800729a:	4905      	ldr	r1, [pc, #20]	; (80072b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	58000800 	.word	0x58000800

080072b4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
    return status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	e04b      	b.n	8007362 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	799b      	ldrb	r3, [r3, #6]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fa facc 	bl	800187c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80072ea:	f7ff ffad 	bl	8007248 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <HAL_SUBGHZ_Init+0xb8>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4613      	mov	r3, r2
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	0cdb      	lsrs	r3, r3, #19
 80072fc:	2264      	movs	r2, #100	; 0x64
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
 8007302:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	609a      	str	r2, [r3, #8]
      break;
 8007314:	e007      	b.n	8007326 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	3b01      	subs	r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800731c:	f7ff ffa4 	bl	8007268 <LL_RCC_IsRFUnderReset>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ee      	bne.n	8007304 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007326:	f7ff ff3f 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800732a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800732e:	f7ff ffad 	bl	800728c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007332:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007336:	f7ff ff23 	bl	8007180 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800733a:	f7ff ff55 	bl	80071e8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 faad 	bl	80078a8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	719a      	strb	r2, [r3, #6]

  return status;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000000 	.word	0x20000000

08007370 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	461a      	mov	r2, r3
 800737c:	460b      	mov	r3, r1
 800737e:	817b      	strh	r3, [r7, #10]
 8007380:	4613      	mov	r3, r2
 8007382:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	799b      	ldrb	r3, [r3, #6]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d14a      	bne.n	8007424 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	795b      	ldrb	r3, [r3, #5]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007396:	2302      	movs	r3, #2
 8007398:	e045      	b.n	8007426 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2202      	movs	r2, #2
 80073a4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fb4c 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073ac:	f7ff ff0c 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80073b0:	210d      	movs	r1, #13
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fa98 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80073b8:	897b      	ldrh	r3, [r7, #10]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	b29b      	uxth	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fa90 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80073c8:	897b      	ldrh	r3, [r7, #10]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fa8a 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	82bb      	strh	r3, [r7, #20]
 80073d8:	e00a      	b.n	80073f0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80073da:	8abb      	ldrh	r3, [r7, #20]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	4413      	add	r3, r2
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa7f 	bl	80078e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80073ea:	8abb      	ldrh	r3, [r7, #20]
 80073ec:	3301      	adds	r3, #1
 80073ee:	82bb      	strh	r3, [r7, #20]
 80073f0:	8aba      	ldrh	r2, [r7, #20]
 80073f2:	893b      	ldrh	r3, [r7, #8]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d3f0      	bcc.n	80073da <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073f8:	f7ff fed6 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fb45 	bl	8007a8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
 800740e:	e001      	b.n	8007414 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	715a      	strb	r2, [r3, #5]

    return status;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	e000      	b.n	8007426 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b088      	sub	sp, #32
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	461a      	mov	r2, r3
 800743a:	460b      	mov	r3, r1
 800743c:	817b      	strh	r3, [r7, #10]
 800743e:	4613      	mov	r3, r2
 8007440:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	799b      	ldrb	r3, [r3, #6]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d14a      	bne.n	80074e6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	795b      	ldrb	r3, [r3, #5]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007458:	2302      	movs	r3, #2
 800745a:	e045      	b.n	80074e8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 faee 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007468:	f7ff feae 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800746c:	211d      	movs	r1, #29
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fa3a 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007474:	897b      	ldrh	r3, [r7, #10]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	b29b      	uxth	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fa32 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007484:	897b      	ldrh	r3, [r7, #10]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4619      	mov	r1, r3
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fa2c 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007490:	2100      	movs	r1, #0
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fa28 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007498:	2300      	movs	r3, #0
 800749a:	82fb      	strh	r3, [r7, #22]
 800749c:	e009      	b.n	80074b2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800749e:	69b9      	ldr	r1, [r7, #24]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fa77 	bl	8007994 <SUBGHZSPI_Receive>
      pData++;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80074ac:	8afb      	ldrh	r3, [r7, #22]
 80074ae:	3301      	adds	r3, #1
 80074b0:	82fb      	strh	r3, [r7, #22]
 80074b2:	8afa      	ldrh	r2, [r7, #22]
 80074b4:	893b      	ldrh	r3, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d3f1      	bcc.n	800749e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074ba:	f7ff fe75 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fae4 	bl	8007a8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e001      	b.n	80074d6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	715a      	strb	r2, [r3, #5]

    return status;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	e000      	b.n	80074e8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	461a      	mov	r2, r3
 80074fc:	460b      	mov	r3, r1
 80074fe:	72fb      	strb	r3, [r7, #11]
 8007500:	4613      	mov	r3, r2
 8007502:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	799b      	ldrb	r3, [r3, #6]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d14a      	bne.n	80075a4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	795b      	ldrb	r3, [r3, #5]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007516:	2302      	movs	r3, #2
 8007518:	e045      	b.n	80075a6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fa8f 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007526:	7afb      	ldrb	r3, [r7, #11]
 8007528:	2b84      	cmp	r3, #132	; 0x84
 800752a:	d002      	beq.n	8007532 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	2b94      	cmp	r3, #148	; 0x94
 8007530:	d103      	bne.n	800753a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	711a      	strb	r2, [r3, #4]
 8007538:	e002      	b.n	8007540 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007540:	f7ff fe42 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f9cd 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800754e:	2300      	movs	r3, #0
 8007550:	82bb      	strh	r3, [r7, #20]
 8007552:	e00a      	b.n	800756a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007554:	8abb      	ldrh	r3, [r7, #20]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f9c2 	bl	80078e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007564:	8abb      	ldrh	r3, [r7, #20]
 8007566:	3301      	adds	r3, #1
 8007568:	82bb      	strh	r3, [r7, #20]
 800756a:	8aba      	ldrh	r2, [r7, #20]
 800756c:	893b      	ldrh	r3, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	d3f0      	bcc.n	8007554 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007572:	f7ff fe19 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	2b84      	cmp	r3, #132	; 0x84
 800757a:	d002      	beq.n	8007582 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fa85 	bl	8007a8c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	75fb      	strb	r3, [r7, #23]
 800758e:	e001      	b.n	8007594 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2201      	movs	r2, #1
 8007598:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	715a      	strb	r2, [r3, #5]

    return status;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	e000      	b.n	80075a6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80075a4:	2302      	movs	r3, #2
  }
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	461a      	mov	r2, r3
 80075ba:	460b      	mov	r3, r1
 80075bc:	72fb      	strb	r3, [r7, #11]
 80075be:	4613      	mov	r3, r2
 80075c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	799b      	ldrb	r3, [r3, #6]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d13d      	bne.n	800764c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	795b      	ldrb	r3, [r3, #5]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80075d8:	2302      	movs	r3, #2
 80075da:	e038      	b.n	800764e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fa2e 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075e8:	f7ff fdee 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	4619      	mov	r1, r3
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f979 	bl	80078e8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80075f6:	2100      	movs	r1, #0
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f975 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075fe:	2300      	movs	r3, #0
 8007600:	82fb      	strh	r3, [r7, #22]
 8007602:	e009      	b.n	8007618 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f9c4 	bl	8007994 <SUBGHZSPI_Receive>
      pData++;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	3301      	adds	r3, #1
 8007610:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007612:	8afb      	ldrh	r3, [r7, #22]
 8007614:	3301      	adds	r3, #1
 8007616:	82fb      	strh	r3, [r7, #22]
 8007618:	8afa      	ldrh	r2, [r7, #22]
 800761a:	893b      	ldrh	r3, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	d3f1      	bcc.n	8007604 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007620:	f7ff fdc2 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fa31 	bl	8007a8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e001      	b.n	800763c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	715a      	strb	r2, [r3, #5]

    return status;
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	e000      	b.n	800764e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	461a      	mov	r2, r3
 8007662:	460b      	mov	r3, r1
 8007664:	72fb      	strb	r3, [r7, #11]
 8007666:	4613      	mov	r3, r2
 8007668:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	799b      	ldrb	r3, [r3, #6]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d13e      	bne.n	80076f2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	795b      	ldrb	r3, [r3, #5]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800767c:	2302      	movs	r3, #2
 800767e:	e039      	b.n	80076f4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f9dc 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800768c:	f7ff fd9c 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007690:	210e      	movs	r1, #14
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f928 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f923 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	82bb      	strh	r3, [r7, #20]
 80076a6:	e00a      	b.n	80076be <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076a8:	8abb      	ldrh	r3, [r7, #20]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f918 	bl	80078e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076b8:	8abb      	ldrh	r3, [r7, #20]
 80076ba:	3301      	adds	r3, #1
 80076bc:	82bb      	strh	r3, [r7, #20]
 80076be:	8aba      	ldrh	r2, [r7, #20]
 80076c0:	893b      	ldrh	r3, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3f0      	bcc.n	80076a8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076c6:	f7ff fd6f 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f9de 	bl	8007a8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
 80076dc:	e001      	b.n	80076e2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	715a      	strb	r2, [r3, #5]

    return status;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	e000      	b.n	80076f4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	461a      	mov	r2, r3
 8007708:	460b      	mov	r3, r1
 800770a:	72fb      	strb	r3, [r7, #11]
 800770c:	4613      	mov	r3, r2
 800770e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	799b      	ldrb	r3, [r3, #6]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d141      	bne.n	80077a2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007726:	2302      	movs	r3, #2
 8007728:	e03c      	b.n	80077a4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f987 	bl	8007a44 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007736:	f7ff fd47 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800773a:	211e      	movs	r1, #30
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f8d3 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8ce 	bl	80078e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f8ca 	bl	80078e8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007754:	2300      	movs	r3, #0
 8007756:	82fb      	strh	r3, [r7, #22]
 8007758:	e009      	b.n	800776e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800775a:	69b9      	ldr	r1, [r7, #24]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f919 	bl	8007994 <SUBGHZSPI_Receive>
      pData++;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	3301      	adds	r3, #1
 8007766:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007768:	8afb      	ldrh	r3, [r7, #22]
 800776a:	3301      	adds	r3, #1
 800776c:	82fb      	strh	r3, [r7, #22]
 800776e:	8afa      	ldrh	r2, [r7, #22]
 8007770:	893b      	ldrh	r3, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d3f1      	bcc.n	800775a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007776:	f7ff fd17 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f986 	bl	8007a8c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e001      	b.n	8007792 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	715a      	strb	r2, [r3, #5]

    return status;
 800779e:	7ffb      	ldrb	r3, [r7, #31]
 80077a0:	e000      	b.n	80077a4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80077b4:	2300      	movs	r3, #0
 80077b6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80077b8:	f107 020c 	add.w	r2, r7, #12
 80077bc:	2302      	movs	r3, #2
 80077be:	2112      	movs	r1, #18
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fef4 	bl	80075ae <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80077c6:	7b3b      	ldrb	r3, [r7, #12]
 80077c8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80077ca:	89fb      	ldrh	r3, [r7, #14]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	b21a      	sxth	r2, r3
 80077d0:	7b7b      	ldrb	r3, [r7, #13]
 80077d2:	b21b      	sxth	r3, r3
 80077d4:	4313      	orrs	r3, r2
 80077d6:	b21b      	sxth	r3, r3
 80077d8:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80077da:	89fb      	ldrh	r3, [r7, #14]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f014 fa7f 	bl	801bce8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80077ea:	89fb      	ldrh	r3, [r7, #14]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f014 fa84 	bl	801bd04 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80077fc:	89fb      	ldrh	r3, [r7, #14]
 80077fe:	089b      	lsrs	r3, r3, #2
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f014 fad3 	bl	801bdb4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800780e:	89fb      	ldrh	r3, [r7, #14]
 8007810:	08db      	lsrs	r3, r3, #3
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f014 fad8 	bl	801bdd0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f014 fadd 	bl	801bdec <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007832:	89fb      	ldrh	r3, [r7, #14]
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f014 faaa 	bl	801bd98 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007844:	89fb      	ldrh	r3, [r7, #14]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f014 fa65 	bl	801bd20 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007856:	89fb      	ldrh	r3, [r7, #14]
 8007858:	09db      	lsrs	r3, r3, #7
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007862:	89fb      	ldrh	r3, [r7, #14]
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d004      	beq.n	8007878 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800786e:	2101      	movs	r1, #1
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f014 fa63 	bl	801bd3c <HAL_SUBGHZ_CADStatusCallback>
 8007876:	e003      	b.n	8007880 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f014 fa5e 	bl	801bd3c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	0a5b      	lsrs	r3, r3, #9
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f014 fa73 	bl	801bd78 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007892:	f107 020c 	add.w	r2, r7, #12
 8007896:	2302      	movs	r3, #2
 8007898:	2102      	movs	r1, #2
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fe28 	bl	80074f0 <HAL_SUBGHZ_ExecSetCmd>
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ba:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80078bc:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80078c4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078c8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80078cc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <SUBGHZSPI_Init+0x3c>)
 80078d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d8:	6013      	str	r3, [r2, #0]
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr
 80078e4:	58010000 	.word	0x58010000

080078e8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078f8:	4b23      	ldr	r3, [pc, #140]	; (8007988 <SUBGHZSPI_Transmit+0xa0>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4613      	mov	r3, r2
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	0cdb      	lsrs	r3, r3, #19
 8007906:	2264      	movs	r2, #100	; 0x64
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	609a      	str	r2, [r3, #8]
      break;
 800791e:	e008      	b.n	8007932 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3b01      	subs	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007926:	4b19      	ldr	r3, [pc, #100]	; (800798c <SUBGHZSPI_Transmit+0xa4>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d1ed      	bne.n	800790e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <SUBGHZSPI_Transmit+0xa8>)
 8007934:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800793c:	4b12      	ldr	r3, [pc, #72]	; (8007988 <SUBGHZSPI_Transmit+0xa0>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	0cdb      	lsrs	r3, r3, #19
 800794a:	2264      	movs	r2, #100	; 0x64
 800794c:	fb02 f303 	mul.w	r3, r2, r3
 8007950:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d105      	bne.n	8007964 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	609a      	str	r2, [r3, #8]
      break;
 8007962:	e008      	b.n	8007976 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3b01      	subs	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <SUBGHZSPI_Transmit+0xa4>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d1ed      	bne.n	8007952 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <SUBGHZSPI_Transmit+0xa4>)
 8007978:	68db      	ldr	r3, [r3, #12]

  return status;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000000 	.word	0x20000000
 800798c:	58010000 	.word	0x58010000
 8007990:	5801000c 	.word	0x5801000c

08007994 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079a2:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <SUBGHZSPI_Receive+0xa4>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	0cdb      	lsrs	r3, r3, #19
 80079b0:	2264      	movs	r2, #100	; 0x64
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	609a      	str	r2, [r3, #8]
      break;
 80079c8:	e008      	b.n	80079dc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <SUBGHZSPI_Receive+0xa8>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d1ed      	bne.n	80079b8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80079dc:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <SUBGHZSPI_Receive+0xac>)
 80079de:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	22ff      	movs	r2, #255	; 0xff
 80079e4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <SUBGHZSPI_Receive+0xa4>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	0cdb      	lsrs	r3, r3, #19
 80079f4:	2264      	movs	r2, #100	; 0x64
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	609a      	str	r2, [r3, #8]
      break;
 8007a0c:	e008      	b.n	8007a20 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007a14:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <SUBGHZSPI_Receive+0xa8>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d1ed      	bne.n	80079fc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a20:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <SUBGHZSPI_Receive+0xa8>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	701a      	strb	r2, [r3, #0]

  return status;
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000000 	.word	0x20000000
 8007a3c:	58010000 	.word	0x58010000
 8007a40:	5801000c 	.word	0x5801000c

08007a44 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	791b      	ldrb	r3, [r3, #4]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d111      	bne.n	8007a78 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <SUBGHZ_CheckDeviceReady+0x44>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a64:	f7ff fbb0 	bl	80071c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f9      	bne.n	8007a68 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a74:	f7ff fb98 	bl	80071a8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f807 	bl	8007a8c <SUBGHZ_WaitOnBusy>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000000 	.word	0x20000000

08007a8c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007a98:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <SUBGHZ_WaitOnBusy+0x58>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	0d1b      	lsrs	r3, r3, #20
 8007aa6:	2264      	movs	r2, #100	; 0x64
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007aae:	f7ff fbb9 	bl	8007224 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007ab2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	609a      	str	r2, [r3, #8]
      break;
 8007ac4:	e009      	b.n	8007ada <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007acc:	f7ff fb98 	bl	8007200 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d0e9      	beq.n	8007aae <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000000 	.word	0x20000000

08007ae8 <LL_RCC_GetUSARTClockSource>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	401a      	ands	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	4313      	orrs	r3, r2
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr

08007b0c <LL_RCC_GetLPUARTClockSource>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4013      	ands	r3, r2
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr

08007b2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e042      	b.n	8007bc2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fa fb86 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	; 0x24
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0201 	bic.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fc4b 	bl	8008408 <UART_SetConfig>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e022      	b.n	8007bc2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 feb3 	bl	80088f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0201 	orr.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 ff39 	bl	8008a32 <UART_CheckIdleState>
 8007bc0:	4603      	mov	r3, r0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	; 0x28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d142      	bne.n	8007c6a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_UART_Receive_IT+0x24>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e03b      	b.n	8007c6c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Receive_IT+0x36>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e034      	b.n	8007c6c <HAL_UART_Receive_IT+0xa0>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a17      	ldr	r2, [pc, #92]	; (8007c74 <HAL_UART_Receive_IT+0xa8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01f      	beq.n	8007c5a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d018      	beq.n	8007c5a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	613b      	str	r3, [r7, #16]
   return(result);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	69f9      	ldr	r1, [r7, #28]
 8007c4c:	6a3a      	ldr	r2, [r7, #32]
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fff9 	bl	8008c58 <UART_Start_Receive_IT>
 8007c66:	4603      	mov	r3, r0
 8007c68:	e000      	b.n	8007c6c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3728      	adds	r7, #40	; 0x28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40008000 	.word	0x40008000

08007c78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d17a      	bne.n	8007d86 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_UART_Transmit_DMA+0x24>
 8007c96:	88fb      	ldrh	r3, [r7, #6]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e073      	b.n	8007d88 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Transmit_DMA+0x36>
 8007caa:	2302      	movs	r3, #2
 8007cac:	e06c      	b.n	8007d88 <HAL_UART_Transmit_DMA+0x110>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2221      	movs	r2, #33	; 0x21
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02c      	beq.n	8007d3e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce8:	4a29      	ldr	r2, [pc, #164]	; (8007d90 <HAL_UART_Transmit_DMA+0x118>)
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf0:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <HAL_UART_Transmit_DMA+0x11c>)
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf8:	4a27      	ldr	r2, [pc, #156]	; (8007d98 <HAL_UART_Transmit_DMA+0x120>)
 8007cfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d00:	2200      	movs	r2, #0
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fc f90a 	bl	8003f30 <HAL_DMA_Start_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00d      	beq.n	8007d3e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2210      	movs	r2, #16
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e024      	b.n	8007d88 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	623a      	str	r2, [r7, #32]
 8007d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	69f9      	ldr	r1, [r7, #28]
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e5      	bne.n	8007d4e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e000      	b.n	8007d88 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
  }
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3728      	adds	r7, #40	; 0x28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08008fa7 	.word	0x08008fa7
 8007d94:	08009041 	.word	0x08009041
 8007d98:	0800905d 	.word	0x0800905d

08007d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b0ba      	sub	sp, #232	; 0xe8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007dc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dca:	4013      	ands	r3, r2
 8007dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11b      	bne.n	8007e10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ddc:	f003 0320 	and.w	r3, r3, #32
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d015      	beq.n	8007e10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d009      	beq.n	8007e10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 82d6 	beq.w	80083b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
      }
      return;
 8007e0e:	e2d0      	b.n	80083b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 811f 	beq.w	8008058 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e1e:	4b8b      	ldr	r3, [pc, #556]	; (800804c <HAL_UART_IRQHandler+0x2b0>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e2a:	4b89      	ldr	r3, [pc, #548]	; (8008050 <HAL_UART_IRQHandler+0x2b4>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 8112 	beq.w	8008058 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <HAL_UART_IRQHandler+0xc8>
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2201      	movs	r2, #1
 8007e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d011      	beq.n	8007e94 <HAL_UART_IRQHandler+0xf8>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2202      	movs	r2, #2
 8007e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8a:	f043 0204 	orr.w	r2, r3, #4
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d011      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x128>
 8007ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eba:	f043 0202 	orr.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d017      	beq.n	8007f00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007edc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ee0:	4b5a      	ldr	r3, [pc, #360]	; (800804c <HAL_UART_IRQHandler+0x2b0>)
 8007ee2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2208      	movs	r2, #8
 8007eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef6:	f043 0208 	orr.w	r2, r3, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d012      	beq.n	8007f32 <HAL_UART_IRQHandler+0x196>
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00c      	beq.n	8007f32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 823c 	beq.w	80083b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d013      	beq.n	8007f72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d005      	beq.n	8007f96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d04f      	beq.n	8008036 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 ffa0 	bl	8008edc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d141      	bne.n	800802e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1d9      	bne.n	8007faa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008002:	4a14      	ldr	r2, [pc, #80]	; (8008054 <HAL_UART_IRQHandler+0x2b8>)
 8008004:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800a:	4618      	mov	r0, r3
 800800c:	f7fc f86c 	bl	80040e8 <HAL_DMA_Abort_IT>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	e00f      	b.n	8008046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9d9 	bl	80083de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802c:	e00b      	b.n	8008046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f9d5 	bl	80083de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008034:	e007      	b.n	8008046 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f9d1 	bl	80083de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008044:	e1b7      	b.n	80083b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008046:	bf00      	nop
    return;
 8008048:	e1b5      	b.n	80083b6 <HAL_UART_IRQHandler+0x61a>
 800804a:	bf00      	nop
 800804c:	10000001 	.word	0x10000001
 8008050:	04000120 	.word	0x04000120
 8008054:	080090dd 	.word	0x080090dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805c:	2b01      	cmp	r3, #1
 800805e:	f040 814a 	bne.w	80082f6 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008066:	f003 0310 	and.w	r3, r3, #16
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8143 	beq.w	80082f6 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 813c 	beq.w	80082f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2210      	movs	r2, #16
 8008084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	f040 80b5 	bne.w	8008200 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80080a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 8187 	beq.w	80083ba <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f080 817f 	bcs.w	80083ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 8086 	bne.w	80081e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008106:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800810e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800811a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1da      	bne.n	80080d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008134:	f023 0301 	bic.w	r3, r3, #1
 8008138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800814a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800814e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e1      	bne.n	8008122 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800816e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3308      	adds	r3, #8
 800817e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e3      	bne.n	800815e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	f023 0310 	bic.w	r3, r3, #16
 80081b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e4      	bne.n	80081a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fb ff24 	bl	800402c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f8f9 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081fe:	e0dc      	b.n	80083ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800820c:	b29b      	uxth	r3, r3
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80ce 	beq.w	80083be <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 80c9 	beq.w	80083be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800824e:	647b      	str	r3, [r7, #68]	; 0x44
 8008250:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e4      	bne.n	800822c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	623b      	str	r3, [r7, #32]
   return(result);
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800828a:	633a      	str	r2, [r7, #48]	; 0x30
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e1      	bne.n	8008262 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0310 	bic.w	r3, r3, #16
 80082c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082d4:	61fb      	str	r3, [r7, #28]
 80082d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	617b      	str	r3, [r7, #20]
   return(result);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e4      	bne.n	80082b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f87e 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80082f4:	e063      	b.n	80083be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00e      	beq.n	8008320 <HAL_UART_IRQHandler+0x584>
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008316:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fb7d 	bl	8009a18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800831e:	e051      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008328:	2b00      	cmp	r3, #0
 800832a:	d014      	beq.n	8008356 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008348:	2b00      	cmp	r3, #0
 800834a:	d03a      	beq.n	80083c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
    }
    return;
 8008354:	e035      	b.n	80083c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_UART_IRQHandler+0x5da>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 feca 	bl	8009108 <UART_EndTransmit_IT>
    return;
 8008374:	e026      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <HAL_UART_IRQHandler+0x5fa>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008386:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fb54 	bl	8009a3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008394:	e016      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d010      	beq.n	80083c4 <HAL_UART_IRQHandler+0x628>
 80083a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da0c      	bge.n	80083c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 fb3d 	bl	8009a2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083b0:	e008      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
      return;
 80083b2:	bf00      	nop
 80083b4:	e006      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
    return;
 80083b6:	bf00      	nop
 80083b8:	e004      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
      return;
 80083ba:	bf00      	nop
 80083bc:	e002      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
      return;
 80083be:	bf00      	nop
 80083c0:	e000      	b.n	80083c4 <HAL_UART_IRQHandler+0x628>
    return;
 80083c2:	bf00      	nop
  }
}
 80083c4:	37e8      	adds	r7, #232	; 0xe8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop

080083cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr
	...

08008408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800840c:	b08c      	sub	sp, #48	; 0x30
 800840e:	af00      	add	r7, sp, #0
 8008410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	431a      	orrs	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	431a      	orrs	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	4313      	orrs	r3, r2
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b94      	ldr	r3, [pc, #592]	; (8008688 <UART_SetConfig+0x280>)
 8008438:	4013      	ands	r3, r2
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008440:	430b      	orrs	r3, r1
 8008442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a89      	ldr	r2, [pc, #548]	; (800868c <UART_SetConfig+0x284>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d004      	beq.n	8008474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008470:	4313      	orrs	r3, r2
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800847e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008488:	430b      	orrs	r3, r1
 800848a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	f023 010f 	bic.w	r1, r3, #15
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7a      	ldr	r2, [pc, #488]	; (8008690 <UART_SetConfig+0x288>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d127      	bne.n	80084fc <UART_SetConfig+0xf4>
 80084ac:	2003      	movs	r0, #3
 80084ae:	f7ff fb1b 	bl	8007ae8 <LL_RCC_GetUSARTClockSource>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d81b      	bhi.n	80084f4 <UART_SetConfig+0xec>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <UART_SetConfig+0xbc>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	080084d5 	.word	0x080084d5
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084dd 	.word	0x080084dd
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084da:	e080      	b.n	80085de <UART_SetConfig+0x1d6>
 80084dc:	2302      	movs	r3, #2
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e2:	e07c      	b.n	80085de <UART_SetConfig+0x1d6>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ea:	e078      	b.n	80085de <UART_SetConfig+0x1d6>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084f2:	e074      	b.n	80085de <UART_SetConfig+0x1d6>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084fa:	e070      	b.n	80085de <UART_SetConfig+0x1d6>
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a64      	ldr	r2, [pc, #400]	; (8008694 <UART_SetConfig+0x28c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d138      	bne.n	8008578 <UART_SetConfig+0x170>
 8008506:	200c      	movs	r0, #12
 8008508:	f7ff faee 	bl	8007ae8 <LL_RCC_GetUSARTClockSource>
 800850c:	4603      	mov	r3, r0
 800850e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008512:	2b0c      	cmp	r3, #12
 8008514:	d82c      	bhi.n	8008570 <UART_SetConfig+0x168>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <UART_SetConfig+0x114>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008551 	.word	0x08008551
 8008520:	08008571 	.word	0x08008571
 8008524:	08008571 	.word	0x08008571
 8008528:	08008571 	.word	0x08008571
 800852c:	08008561 	.word	0x08008561
 8008530:	08008571 	.word	0x08008571
 8008534:	08008571 	.word	0x08008571
 8008538:	08008571 	.word	0x08008571
 800853c:	08008559 	.word	0x08008559
 8008540:	08008571 	.word	0x08008571
 8008544:	08008571 	.word	0x08008571
 8008548:	08008571 	.word	0x08008571
 800854c:	08008569 	.word	0x08008569
 8008550:	2300      	movs	r3, #0
 8008552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008556:	e042      	b.n	80085de <UART_SetConfig+0x1d6>
 8008558:	2302      	movs	r3, #2
 800855a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855e:	e03e      	b.n	80085de <UART_SetConfig+0x1d6>
 8008560:	2304      	movs	r3, #4
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008566:	e03a      	b.n	80085de <UART_SetConfig+0x1d6>
 8008568:	2308      	movs	r3, #8
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e036      	b.n	80085de <UART_SetConfig+0x1d6>
 8008570:	2310      	movs	r3, #16
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e032      	b.n	80085de <UART_SetConfig+0x1d6>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a43      	ldr	r2, [pc, #268]	; (800868c <UART_SetConfig+0x284>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d12a      	bne.n	80085d8 <UART_SetConfig+0x1d0>
 8008582:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008586:	f7ff fac1 	bl	8007b0c <LL_RCC_GetLPUARTClockSource>
 800858a:	4603      	mov	r3, r0
 800858c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008590:	d01a      	beq.n	80085c8 <UART_SetConfig+0x1c0>
 8008592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008596:	d81b      	bhi.n	80085d0 <UART_SetConfig+0x1c8>
 8008598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800859c:	d00c      	beq.n	80085b8 <UART_SetConfig+0x1b0>
 800859e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a2:	d815      	bhi.n	80085d0 <UART_SetConfig+0x1c8>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <UART_SetConfig+0x1a8>
 80085a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ac:	d008      	beq.n	80085c0 <UART_SetConfig+0x1b8>
 80085ae:	e00f      	b.n	80085d0 <UART_SetConfig+0x1c8>
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e012      	b.n	80085de <UART_SetConfig+0x1d6>
 80085b8:	2302      	movs	r3, #2
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085be:	e00e      	b.n	80085de <UART_SetConfig+0x1d6>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c6:	e00a      	b.n	80085de <UART_SetConfig+0x1d6>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e006      	b.n	80085de <UART_SetConfig+0x1d6>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e002      	b.n	80085de <UART_SetConfig+0x1d6>
 80085d8:	2310      	movs	r3, #16
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a2a      	ldr	r2, [pc, #168]	; (800868c <UART_SetConfig+0x284>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f040 80a4 	bne.w	8008732 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d823      	bhi.n	800863a <UART_SetConfig+0x232>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <UART_SetConfig+0x1f0>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800863b 	.word	0x0800863b
 8008600:	08008625 	.word	0x08008625
 8008604:	0800863b 	.word	0x0800863b
 8008608:	0800862b 	.word	0x0800862b
 800860c:	0800863b 	.word	0x0800863b
 8008610:	0800863b 	.word	0x0800863b
 8008614:	0800863b 	.word	0x0800863b
 8008618:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800861c:	f7fd ff42 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008622:	e010      	b.n	8008646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <UART_SetConfig+0x290>)
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008628:	e00d      	b.n	8008646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fd fe87 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800862e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008630:	e009      	b.n	8008646 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008638:	e005      	b.n	8008646 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8137 	beq.w	80088bc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	4a12      	ldr	r2, [pc, #72]	; (800869c <UART_SetConfig+0x294>)
 8008654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008658:	461a      	mov	r2, r3
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008660:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	429a      	cmp	r2, r3
 8008670:	d305      	bcc.n	800867e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	429a      	cmp	r2, r3
 800867c:	d910      	bls.n	80086a0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008684:	e11a      	b.n	80088bc <UART_SetConfig+0x4b4>
 8008686:	bf00      	nop
 8008688:	cfff69f3 	.word	0xcfff69f3
 800868c:	40008000 	.word	0x40008000
 8008690:	40013800 	.word	0x40013800
 8008694:	40004400 	.word	0x40004400
 8008698:	00f42400 	.word	0x00f42400
 800869c:	0801e254 	.word	0x0801e254
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	2200      	movs	r2, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	60fa      	str	r2, [r7, #12]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	4a8e      	ldr	r2, [pc, #568]	; (80088e8 <UART_SetConfig+0x4e0>)
 80086ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2200      	movs	r2, #0
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086c2:	f7f8 fa4f 	bl	8000b64 <__aeabi_uldivmod>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	020b      	lsls	r3, r1, #8
 80086d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086dc:	0202      	lsls	r2, r0, #8
 80086de:	6979      	ldr	r1, [r7, #20]
 80086e0:	6849      	ldr	r1, [r1, #4]
 80086e2:	0849      	lsrs	r1, r1, #1
 80086e4:	2000      	movs	r0, #0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4605      	mov	r5, r0
 80086ea:	eb12 0804 	adds.w	r8, r2, r4
 80086ee:	eb43 0905 	adc.w	r9, r3, r5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	469a      	mov	sl, r3
 80086fa:	4693      	mov	fp, r2
 80086fc:	4652      	mov	r2, sl
 80086fe:	465b      	mov	r3, fp
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f8 fa2e 	bl	8000b64 <__aeabi_uldivmod>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4613      	mov	r3, r2
 800870e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008716:	d308      	bcc.n	800872a <UART_SetConfig+0x322>
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800871e:	d204      	bcs.n	800872a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6a3a      	ldr	r2, [r7, #32]
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e0c8      	b.n	80088bc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008730:	e0c4      	b.n	80088bc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873a:	d168      	bne.n	800880e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800873c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008740:	2b08      	cmp	r3, #8
 8008742:	d828      	bhi.n	8008796 <UART_SetConfig+0x38e>
 8008744:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x344>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	08008771 	.word	0x08008771
 8008750:	08008779 	.word	0x08008779
 8008754:	08008781 	.word	0x08008781
 8008758:	08008797 	.word	0x08008797
 800875c:	08008787 	.word	0x08008787
 8008760:	08008797 	.word	0x08008797
 8008764:	08008797 	.word	0x08008797
 8008768:	08008797 	.word	0x08008797
 800876c:	0800878f 	.word	0x0800878f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008770:	f7fd fe98 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008776:	e014      	b.n	80087a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008778:	f7fd fea6 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 800877c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800877e:	e010      	b.n	80087a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008780:	4b5a      	ldr	r3, [pc, #360]	; (80088ec <UART_SetConfig+0x4e4>)
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008784:	e00d      	b.n	80087a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008786:	f7fd fdd9 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878c:	e009      	b.n	80087a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008794:	e005      	b.n	80087a2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 8089 	beq.w	80088bc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	4a4e      	ldr	r2, [pc, #312]	; (80088e8 <UART_SetConfig+0x4e0>)
 80087b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087bc:	005a      	lsls	r2, r3, #1
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	441a      	add	r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2b0f      	cmp	r3, #15
 80087d6:	d916      	bls.n	8008806 <UART_SetConfig+0x3fe>
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087de:	d212      	bcs.n	8008806 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f023 030f 	bic.w	r3, r3, #15
 80087e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	085b      	lsrs	r3, r3, #1
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	8bfb      	ldrh	r3, [r7, #30]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	8bfa      	ldrh	r2, [r7, #30]
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	e05a      	b.n	80088bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800880c:	e056      	b.n	80088bc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800880e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008812:	2b08      	cmp	r3, #8
 8008814:	d827      	bhi.n	8008866 <UART_SetConfig+0x45e>
 8008816:	a201      	add	r2, pc, #4	; (adr r2, 800881c <UART_SetConfig+0x414>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008841 	.word	0x08008841
 8008820:	08008849 	.word	0x08008849
 8008824:	08008851 	.word	0x08008851
 8008828:	08008867 	.word	0x08008867
 800882c:	08008857 	.word	0x08008857
 8008830:	08008867 	.word	0x08008867
 8008834:	08008867 	.word	0x08008867
 8008838:	08008867 	.word	0x08008867
 800883c:	0800885f 	.word	0x0800885f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008840:	f7fd fe30 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 8008844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008846:	e014      	b.n	8008872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008848:	f7fd fe3e 	bl	80064c8 <HAL_RCC_GetPCLK2Freq>
 800884c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800884e:	e010      	b.n	8008872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008850:	4b26      	ldr	r3, [pc, #152]	; (80088ec <UART_SetConfig+0x4e4>)
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008854:	e00d      	b.n	8008872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008856:	f7fd fd71 	bl	800633c <HAL_RCC_GetSysClockFreq>
 800885a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800885c:	e009      	b.n	8008872 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800885e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008864:	e005      	b.n	8008872 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008870:	bf00      	nop
    }

    if (pclk != 0U)
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	d021      	beq.n	80088bc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	4a1a      	ldr	r2, [pc, #104]	; (80088e8 <UART_SetConfig+0x4e0>)
 800887e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008882:	461a      	mov	r2, r3
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	fbb3 f2f2 	udiv	r2, r3, r2
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	441a      	add	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	b29b      	uxth	r3, r3
 800889c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	2b0f      	cmp	r3, #15
 80088a2:	d908      	bls.n	80088b6 <UART_SetConfig+0x4ae>
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088aa:	d204      	bcs.n	80088b6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	60da      	str	r2, [r3, #12]
 80088b4:	e002      	b.n	80088bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3730      	adds	r7, #48	; 0x30
 80088e0:	46bd      	mov	sp, r7
 80088e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088e6:	bf00      	nop
 80088e8:	0801e254 	.word	0x0801e254
 80088ec:	00f42400 	.word	0x00f42400

080088f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00a      	beq.n	800895e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01a      	beq.n	8008a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ee:	d10a      	bne.n	8008a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	430a      	orrs	r2, r1
 8008a26:	605a      	str	r2, [r3, #4]
  }
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr

08008a32 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af02      	add	r7, sp, #8
 8008a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a42:	f7f9 f8c1 	bl	8001bc8 <HAL_GetTick>
 8008a46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d10e      	bne.n	8008a74 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f82f 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e025      	b.n	8008ac0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d10e      	bne.n	8008aa0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f819 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e00f      	b.n	8008ac0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b09c      	sub	sp, #112	; 0x70
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad8:	e0a9      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	f000 80a5 	beq.w	8008c2e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae4:	f7f9 f870 	bl	8001bc8 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d302      	bcc.n	8008afa <UART_WaitOnFlagUntilTimeout+0x32>
 8008af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d140      	bne.n	8008b7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e6      	bne.n	8008afa <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f023 0301 	bic.w	r3, r3, #1
 8008b42:	663b      	str	r3, [r7, #96]	; 0x60
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e069      	b.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d051      	beq.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b98:	d149      	bne.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ba2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e6      	bne.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	613b      	str	r3, [r7, #16]
   return(result);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bf6:	623a      	str	r2, [r7, #32]
 8008bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	69f9      	ldr	r1, [r7, #28]
 8008bfc:	6a3a      	ldr	r2, [r7, #32]
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e010      	b.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	f43f af46 	beq.w	8008ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3770      	adds	r7, #112	; 0x70
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b09d      	sub	sp, #116	; 0x74
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	88fa      	ldrh	r2, [r7, #6]
 8008c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8a:	d10e      	bne.n	8008caa <UART_Start_Receive_IT+0x52>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <UART_Start_Receive_IT+0x48>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c9e:	e02d      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	22ff      	movs	r2, #255	; 0xff
 8008ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca8:	e028      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10d      	bne.n	8008cce <UART_Start_Receive_IT+0x76>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <UART_Start_Receive_IT+0x6c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	22ff      	movs	r2, #255	; 0xff
 8008cbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc2:	e01b      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	227f      	movs	r2, #127	; 0x7f
 8008cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ccc:	e016      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cd6:	d10d      	bne.n	8008cf4 <UART_Start_Receive_IT+0x9c>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <UART_Start_Receive_IT+0x92>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	227f      	movs	r2, #127	; 0x7f
 8008ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ce8:	e008      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	223f      	movs	r2, #63	; 0x3f
 8008cee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cf2:	e003      	b.n	8008cfc <UART_Start_Receive_IT+0xa4>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2222      	movs	r2, #34	; 0x22
 8008d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3308      	adds	r3, #8
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008d2e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e5      	bne.n	8008d0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d48:	d14d      	bne.n	8008de6 <UART_Start_Receive_IT+0x18e>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d347      	bcc.n	8008de6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5e:	d107      	bne.n	8008d70 <UART_Start_Receive_IT+0x118>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a38      	ldr	r2, [pc, #224]	; (8008e4c <UART_Start_Receive_IT+0x1f4>)
 8008d6c:	671a      	str	r2, [r3, #112]	; 0x70
 8008d6e:	e002      	b.n	8008d76 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4a37      	ldr	r2, [pc, #220]	; (8008e50 <UART_Start_Receive_IT+0x1f8>)
 8008d74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008dd0:	637a      	str	r2, [r7, #52]	; 0x34
 8008dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e5      	bne.n	8008db0 <UART_Start_Receive_IT+0x158>
 8008de4:	e02c      	b.n	8008e40 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	d107      	bne.n	8008e00 <UART_Start_Receive_IT+0x1a8>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4a16      	ldr	r2, [pc, #88]	; (8008e54 <UART_Start_Receive_IT+0x1fc>)
 8008dfc:	671a      	str	r2, [r3, #112]	; 0x70
 8008dfe:	e002      	b.n	8008e06 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4a15      	ldr	r2, [pc, #84]	; (8008e58 <UART_Start_Receive_IT+0x200>)
 8008e04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e22:	663b      	str	r3, [r7, #96]	; 0x60
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e2c:	623b      	str	r3, [r7, #32]
 8008e2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	69f9      	ldr	r1, [r7, #28]
 8008e32:	6a3a      	ldr	r2, [r7, #32]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3774      	adds	r7, #116	; 0x74
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr
 8008e4c:	08009719 	.word	0x08009719
 8008e50:	08009421 	.word	0x08009421
 8008e54:	080092bf 	.word	0x080092bf
 8008e58:	0800915f 	.word	0x0800915f

08008e5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b08f      	sub	sp, #60	; 0x3c
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008eac:	633b      	str	r3, [r7, #48]	; 0x30
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb6:	61ba      	str	r2, [r7, #24]
 8008eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e5      	bne.n	8008e96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008ed2:	bf00      	nop
 8008ed4:	373c      	adds	r7, #60	; 0x3c
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b095      	sub	sp, #84	; 0x54
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	643b      	str	r3, [r7, #64]	; 0x40
 8008f04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e6      	bne.n	8008ee4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e3      	bne.n	8008f16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d118      	bne.n	8008f88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	613b      	str	r3, [r7, #16]
   return(result);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e6      	bne.n	8008f56 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f9c:	bf00      	nop
 8008f9e:	3754      	adds	r7, #84	; 0x54
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b090      	sub	sp, #64	; 0x40
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d137      	bne.n	8009032 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fea:	633a      	str	r2, [r7, #48]	; 0x30
 8008fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	60fb      	str	r3, [r7, #12]
   return(result);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	617b      	str	r3, [r7, #20]
   return(result);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e6      	bne.n	8008ffe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009030:	e002      	b.n	8009038 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009034:	f7f9 fafc 	bl	8002630 <HAL_UART_TxCpltCallback>
}
 8009038:	bf00      	nop
 800903a:	3740      	adds	r7, #64	; 0x40
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff f9bc 	bl	80083cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009068:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009070:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009078:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009084:	2b80      	cmp	r3, #128	; 0x80
 8009086:	d109      	bne.n	800909c <UART_DMAError+0x40>
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b21      	cmp	r3, #33	; 0x21
 800908c:	d106      	bne.n	800909c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2200      	movs	r2, #0
 8009092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f7ff fee0 	bl	8008e5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d109      	bne.n	80090be <UART_DMAError+0x62>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b22      	cmp	r3, #34	; 0x22
 80090ae:	d106      	bne.n	80090be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80090b8:	6978      	ldr	r0, [r7, #20]
 80090ba:	f7ff ff0f 	bl	8008edc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c4:	f043 0210 	orr.w	r2, r3, #16
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ce:	6978      	ldr	r0, [r7, #20]
 80090d0:	f7ff f985 	bl	80083de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d4:	bf00      	nop
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff f96f 	bl	80083de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	60bb      	str	r3, [r7, #8]
   return(result);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6979      	ldr	r1, [r7, #20]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	613b      	str	r3, [r7, #16]
   return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e6      	bne.n	8009110 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7f9 fa6d 	bl	8002630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009156:	bf00      	nop
 8009158:	3720      	adds	r7, #32
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b096      	sub	sp, #88	; 0x58
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800916c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 8095 	bne.w	80092a6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009186:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800918a:	b2d9      	uxtb	r1, r3
 800918c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009196:	400a      	ands	r2, r1
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d178      	bne.n	80092b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091d8:	653b      	str	r3, [r7, #80]	; 0x50
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e2:	647b      	str	r3, [r7, #68]	; 0x44
 80091e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e6      	bne.n	80091c4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3308      	adds	r3, #8
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	623b      	str	r3, [r7, #32]
   return(result);
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	f023 0301 	bic.w	r3, r3, #1
 800920c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009216:	633a      	str	r2, [r7, #48]	; 0x30
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e5      	bne.n	80091f6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923c:	2b01      	cmp	r3, #1
 800923e:	d12e      	bne.n	800929e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	60fb      	str	r3, [r7, #12]
   return(result);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0310 	bic.w	r3, r3, #16
 800925a:	64bb      	str	r3, [r7, #72]	; 0x48
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009264:	61fb      	str	r3, [r7, #28]
 8009266:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	69b9      	ldr	r1, [r7, #24]
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	617b      	str	r3, [r7, #20]
   return(result);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	f003 0310 	and.w	r3, r3, #16
 8009282:	2b10      	cmp	r3, #16
 8009284:	d103      	bne.n	800928e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2210      	movs	r2, #16
 800928c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff f8aa 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800929c:	e00b      	b.n	80092b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7f9 f9d4 	bl	800264c <HAL_UART_RxCpltCallback>
}
 80092a4:	e007      	b.n	80092b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0208 	orr.w	r2, r2, #8
 80092b4:	619a      	str	r2, [r3, #24]
}
 80092b6:	bf00      	nop
 80092b8:	3758      	adds	r7, #88	; 0x58
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b096      	sub	sp, #88	; 0x58
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d6:	2b22      	cmp	r3, #34	; 0x22
 80092d8:	f040 8095 	bne.w	8009406 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80092ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80092f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092f4:	4013      	ands	r3, r2
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009300:	1c9a      	adds	r2, r3, #2
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d178      	bne.n	8009416 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009342:	643b      	str	r3, [r7, #64]	; 0x40
 8009344:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e6      	bne.n	8009324 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3308      	adds	r3, #8
 800935c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	61fb      	str	r3, [r7, #28]
   return(result);
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f023 0301 	bic.w	r3, r3, #1
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3308      	adds	r3, #8
 8009374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e5      	bne.n	8009356 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d12e      	bne.n	80093fe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f023 0310 	bic.w	r3, r3, #16
 80093ba:	647b      	str	r3, [r7, #68]	; 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6979      	ldr	r1, [r7, #20]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	613b      	str	r3, [r7, #16]
   return(result);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e6      	bne.n	80093a6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d103      	bne.n	80093ee <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2210      	movs	r2, #16
 80093ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7fe fffa 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093fc:	e00b      	b.n	8009416 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f9 f924 	bl	800264c <HAL_UART_RxCpltCallback>
}
 8009404:	e007      	b.n	8009416 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	619a      	str	r2, [r3, #24]
}
 8009416:	bf00      	nop
 8009418:	3758      	adds	r7, #88	; 0x58
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b0a6      	sub	sp, #152	; 0x98
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800942e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009456:	2b22      	cmp	r3, #34	; 0x22
 8009458:	f040 814f 	bne.w	80096fa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009462:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009466:	e0f6      	b.n	8009656 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009472:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009476:	b2d9      	uxtb	r1, r3
 8009478:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009482:	400a      	ands	r2, r1
 8009484:	b2d2      	uxtb	r2, r2
 8009486:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d053      	beq.n	8009562 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d011      	beq.n	80094ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80094c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00b      	beq.n	80094ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2201      	movs	r2, #1
 80094d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e0:	f043 0201 	orr.w	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2202      	movs	r2, #2
 8009508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009510:	f043 0204 	orr.w	r2, r3, #4
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800951a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d011      	beq.n	800954a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2204      	movs	r2, #4
 8009538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009540:	f043 0202 	orr.w	r2, r3, #2
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7fe ff42 	bl	80083de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d173      	bne.n	8009656 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800957c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800957e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009590:	66bb      	str	r3, [r7, #104]	; 0x68
 8009592:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800959e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e4      	bne.n	800956e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095c8:	657a      	str	r2, [r7, #84]	; 0x54
 80095ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e3      	bne.n	80095a4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d12e      	bne.n	8009650 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f023 0310 	bic.w	r3, r3, #16
 800960c:	67bb      	str	r3, [r7, #120]	; 0x78
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009616:	643b      	str	r3, [r7, #64]	; 0x40
 8009618:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800961c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b10      	cmp	r3, #16
 8009636:	d103      	bne.n	8009640 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2210      	movs	r2, #16
 800963e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f7fe fed1 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
 800964e:	e002      	b.n	8009656 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7f8 fffb 	bl	800264c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009656:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800965e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b00      	cmp	r3, #0
 8009668:	f47f aefe 	bne.w	8009468 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009672:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009676:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800967a:	2b00      	cmp	r3, #0
 800967c:	d045      	beq.n	800970a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009684:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009688:	429a      	cmp	r2, r3
 800968a:	d23e      	bcs.n	800970a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	61fb      	str	r3, [r7, #28]
   return(result);
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096a2:	673b      	str	r3, [r7, #112]	; 0x70
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e5      	bne.n	800968c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a14      	ldr	r2, [pc, #80]	; (8009714 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80096c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f043 0320 	orr.w	r3, r3, #32
 80096da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6979      	ldr	r1, [r7, #20]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	613b      	str	r3, [r7, #16]
   return(result);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e6      	bne.n	80096c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096f8:	e007      	b.n	800970a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0208 	orr.w	r2, r2, #8
 8009708:	619a      	str	r2, [r3, #24]
}
 800970a:	bf00      	nop
 800970c:	3798      	adds	r7, #152	; 0x98
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	0800915f 	.word	0x0800915f

08009718 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b0a8      	sub	sp, #160	; 0xa0
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009726:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974e:	2b22      	cmp	r3, #34	; 0x22
 8009750:	f040 8153 	bne.w	80099fa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800975a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800975e:	e0fa      	b.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009772:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009776:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800977a:	4013      	ands	r3, r2
 800977c:	b29a      	uxth	r2, r3
 800977e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009788:	1c9a      	adds	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009794:	b29b      	uxth	r3, r3
 8009796:	3b01      	subs	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80097aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d053      	beq.n	800985e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d011      	beq.n	80097e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80097c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097dc:	f043 0201 	orr.w	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d011      	beq.n	8009816 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80097f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2202      	movs	r2, #2
 8009804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800980c:	f043 0204 	orr.w	r2, r3, #4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d011      	beq.n	8009846 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00b      	beq.n	8009846 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2204      	movs	r2, #4
 8009834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983c:	f043 0202 	orr.w	r2, r3, #2
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d006      	beq.n	800985e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7fe fdc4 	bl	80083de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d175      	bne.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800987a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800987e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800988c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800988e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009892:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800989a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e4      	bne.n	800986a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3308      	adds	r3, #8
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80098ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e1      	bne.n	80098a0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d12e      	bne.n	8009950 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	f023 0310 	bic.w	r3, r3, #16
 800990c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009916:	647b      	str	r3, [r7, #68]	; 0x44
 8009918:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800991c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b10      	cmp	r3, #16
 8009936:	d103      	bne.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2210      	movs	r2, #16
 800993e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fe fd51 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
 800994e:	e002      	b.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7f8 fe7b 	bl	800264c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009956:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <UART_RxISR_16BIT_FIFOEN+0x254>
 800995e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	f47f aefa 	bne.w	8009760 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009972:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009976:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800997a:	2b00      	cmp	r3, #0
 800997c:	d045      	beq.n	8009a0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009984:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009988:	429a      	cmp	r2, r3
 800998a:	d23e      	bcs.n	8009a0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	623b      	str	r3, [r7, #32]
   return(result);
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a2:	677b      	str	r3, [r7, #116]	; 0x74
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80099ac:	633a      	str	r2, [r7, #48]	; 0x30
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e5      	bne.n	800998c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a14      	ldr	r2, [pc, #80]	; (8009a14 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80099c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f043 0320 	orr.w	r3, r3, #32
 80099da:	673b      	str	r3, [r7, #112]	; 0x70
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099e4:	61fb      	str	r3, [r7, #28]
 80099e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	69b9      	ldr	r1, [r7, #24]
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	617b      	str	r3, [r7, #20]
   return(result);
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e6      	bne.n	80099c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099f8:	e007      	b.n	8009a0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699a      	ldr	r2, [r3, #24]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0208 	orr.w	r2, r2, #8
 8009a08:	619a      	str	r2, [r3, #24]
}
 8009a0a:	bf00      	nop
 8009a0c:	37a0      	adds	r7, #160	; 0xa0
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	080092bf 	.word	0x080092bf

08009a18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr

08009a2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b083      	sub	sp, #12
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr

08009a3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr

08009a4e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af02      	add	r7, sp, #8
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e046      	b.n	8009afc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2224      	movs	r2, #36	; 0x24
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0201 	bic.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d105      	bne.n	8009ab4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009aa8:	1d3b      	adds	r3, r7, #4
 8009aaa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f911 	bl	8009cd6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f042 0201 	orr.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac4:	f7f8 f880 	bl	8001bc8 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7fe fff5 	bl	8008ac8 <UART_WaitOnFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	75fb      	strb	r3, [r7, #23]
 8009ae8:	e003      	b.n	8009af2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b089      	sub	sp, #36	; 0x24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_UARTEx_EnableStopMode+0x16>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e021      	b.n	8009b5e <HAL_UARTEx_EnableStopMode+0x5a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6979      	ldr	r1, [r7, #20]
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e6      	bne.n	8009b22 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3724      	adds	r7, #36	; 0x24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d101      	bne.n	8009b7e <HAL_UARTEx_EnableFifoMode+0x16>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e02b      	b.n	8009bd6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2224      	movs	r2, #36	; 0x24
 8009b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0201 	bic.w	r2, r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009bb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f8ac 	bl	8009d1c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e02d      	b.n	8009c52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2224      	movs	r2, #36	; 0x24
 8009c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0201 	bic.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f872 	bl	8009d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e02d      	b.n	8009cce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2224      	movs	r2, #36	; 0x24
 8009c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f834 	bl	8009d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	1d3b      	adds	r3, r7, #4
 8009ce0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f023 0210 	bic.w	r2, r3, #16
 8009cee:	893b      	ldrh	r3, [r7, #8]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	430a      	orrs	r2, r1
 8009cf8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009d04:	7abb      	ldrb	r3, [r7, #10]
 8009d06:	061a      	lsls	r2, r3, #24
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	605a      	str	r2, [r3, #4]
}
 8009d10:	bf00      	nop
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr
	...

08009d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d108      	bne.n	8009d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d3c:	e031      	b.n	8009da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d3e:	2308      	movs	r3, #8
 8009d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d42:	2308      	movs	r3, #8
 8009d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	0e5b      	lsrs	r3, r3, #25
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	0f5b      	lsrs	r3, r3, #29
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	7b3a      	ldrb	r2, [r7, #12]
 8009d6a:	4910      	ldr	r1, [pc, #64]	; (8009dac <UARTEx_SetNbDataToProcess+0x90>)
 8009d6c:	5c8a      	ldrb	r2, [r1, r2]
 8009d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d72:	7b3a      	ldrb	r2, [r7, #12]
 8009d74:	490e      	ldr	r1, [pc, #56]	; (8009db0 <UARTEx_SetNbDataToProcess+0x94>)
 8009d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	7b7a      	ldrb	r2, [r7, #13]
 8009d88:	4908      	ldr	r1, [pc, #32]	; (8009dac <UARTEx_SetNbDataToProcess+0x90>)
 8009d8a:	5c8a      	ldrb	r2, [r1, r2]
 8009d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d90:	7b7a      	ldrb	r2, [r7, #13]
 8009d92:	4907      	ldr	r1, [pc, #28]	; (8009db0 <UARTEx_SetNbDataToProcess+0x94>)
 8009d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009da2:	bf00      	nop
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr
 8009dac:	0801e26c 	.word	0x0801e26c
 8009db0:	0801e274 	.word	0x0801e274

08009db4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009db8:	f7f7 fda8 	bl	800190c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009dbc:	f000 f80a 	bl	8009dd4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009dc0:	bf00      	nop
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	f012 fcde 	bl	801c78c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_RED);
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f7f8 fc98 	bl	8002710 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009de0:	2101      	movs	r1, #1
 8009de2:	2000      	movs	r0, #0
 8009de4:	f7f8 fcf2 	bl	80027cc <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009de8:	2300      	movs	r3, #0
 8009dea:	9302      	str	r3, [sp, #8]
 8009dec:	2301      	movs	r3, #1
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	2301      	movs	r3, #1
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4b2b      	ldr	r3, [pc, #172]	; (8009ea4 <LoRaWAN_Init+0xd0>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	2100      	movs	r1, #0
 8009dfa:	2002      	movs	r0, #2
 8009dfc:	f012 f96e 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009e00:	2300      	movs	r3, #0
 8009e02:	9302      	str	r3, [sp, #8]
 8009e04:	2303      	movs	r3, #3
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	2302      	movs	r3, #2
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	4b26      	ldr	r3, [pc, #152]	; (8009ea8 <LoRaWAN_Init+0xd4>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	2002      	movs	r0, #2
 8009e14:	f012 f962 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	2301      	movs	r3, #1
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	4b21      	ldr	r3, [pc, #132]	; (8009eac <LoRaWAN_Init+0xd8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	2100      	movs	r1, #0
 8009e2a:	2002      	movs	r0, #2
 8009e2c:	f012 f956 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n\r\n\r\n----------LoRaWAN_End_Node_FreeRTOS----------\r\n\r\n\r\n");
 8009e30:	4b1f      	ldr	r3, [pc, #124]	; (8009eb0 <LoRaWAN_Init+0xdc>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	2002      	movs	r0, #2
 8009e38:	f012 f950 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <LoRaWAN_Init+0xe0>)
 8009e3e:	2100      	movs	r1, #0
 8009e40:	2001      	movs	r0, #1
 8009e42:	f012 fd87 	bl	801c954 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009e46:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <LoRaWAN_Init+0xe4>)
 8009e48:	2100      	movs	r1, #0
 8009e4a:	2002      	movs	r0, #2
 8009e4c:	f012 fd82 	bl	801c954 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009e50:	f000 fac6 	bl	800a3e0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009e54:	4819      	ldr	r0, [pc, #100]	; (8009ebc <LoRaWAN_Init+0xe8>)
 8009e56:	f003 faef 	bl	800d438 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009e5a:	4819      	ldr	r0, [pc, #100]	; (8009ec0 <LoRaWAN_Init+0xec>)
 8009e5c:	f003 fb38 	bl	800d4d0 <LmHandlerConfigure>


  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009e60:	4b18      	ldr	r3, [pc, #96]	; (8009ec4 <LoRaWAN_Init+0xf0>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f003 fc69 	bl	800d73c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009e6a:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <LoRaWAN_Init+0xf4>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d111      	bne.n	8009e96 <LoRaWAN_Init+0xc2>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009e72:	2300      	movs	r3, #0
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <LoRaWAN_Init+0xf8>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e7e:	4814      	ldr	r0, [pc, #80]	; (8009ed0 <LoRaWAN_Init+0xfc>)
 8009e80:	f012 ff68 	bl	801cd54 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8009e84:	f242 7110 	movw	r1, #10000	; 0x2710
 8009e88:	4811      	ldr	r0, [pc, #68]	; (8009ed0 <LoRaWAN_Init+0xfc>)
 8009e8a:	f013 f877 	bl	801cf7c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009e8e:	4810      	ldr	r0, [pc, #64]	; (8009ed0 <LoRaWAN_Init+0xfc>)
 8009e90:	f012 ff96 	bl	801cdc0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009e94:	e003      	b.n	8009e9e <LoRaWAN_Init+0xca>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009e96:	2101      	movs	r1, #1
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f7f8 fc97 	bl	80027cc <BSP_PB_Init>
}
 8009e9e:	bf00      	nop
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	0801d924 	.word	0x0801d924
 8009ea8:	0801d944 	.word	0x0801d944
 8009eac:	0801d964 	.word	0x0801d964
 8009eb0:	0801d984 	.word	0x0801d984
 8009eb4:	0800d729 	.word	0x0800d729
 8009eb8:	0800a025 	.word	0x0800a025
 8009ebc:	2000001c 	.word	0x2000001c
 8009ec0:	20000050 	.word	0x20000050
 8009ec4:	20000019 	.word	0x20000019
 8009ec8:	20000c70 	.word	0x20000c70
 8009ecc:	0800a291 	.word	0x0800a291
 8009ed0:	20000c74 	.word	0x20000c74

08009ed4 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009ede:	88fb      	ldrh	r3, [r7, #6]
 8009ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ee4:	d104      	bne.n	8009ef0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUTTON_SW1_PIN:
      /* Note: when "EventType == TX_ON_TIMER" this GPIO is not initialized */
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	2002      	movs	r0, #2
 8009eea:	f012 fd55 	bl	801c998 <UTIL_SEQ_SetTask>
      break;
 8009eee:	e000      	b.n	8009ef2 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009ef0:	bf00      	nop
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009efc:	b5b0      	push	{r4, r5, r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af06      	add	r7, sp, #24
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <OnRxData+0x16>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d072      	beq.n	8009ff8 <OnRxData+0xfc>
  {
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009f12:	4b3e      	ldr	r3, [pc, #248]	; (800a00c <OnRxData+0x110>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	2100      	movs	r1, #0
 8009f18:	2002      	movs	r0, #2
 8009f1a:	f012 f8df 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4a39      	ldr	r2, [pc, #228]	; (800a010 <OnRxData+0x114>)
 8009f2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	7809      	ldrb	r1, [r1, #0]
 8009f34:	4608      	mov	r0, r1
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009f44:	460d      	mov	r5, r1
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8009f4c:	9105      	str	r1, [sp, #20]
 8009f4e:	9504      	str	r5, [sp, #16]
 8009f50:	9403      	str	r4, [sp, #12]
 8009f52:	9002      	str	r0, [sp, #8]
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4b2e      	ldr	r3, [pc, #184]	; (800a014 <OnRxData+0x118>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	2003      	movs	r0, #3
 8009f60:	f012 f8bc 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d021      	beq.n	8009fb0 <OnRxData+0xb4>
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d145      	bne.n	8009ffc <OnRxData+0x100>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d117      	bne.n	8009fa8 <OnRxData+0xac>
        {
          switch (appData->Buffer[0])
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d00e      	beq.n	8009fa0 <OnRxData+0xa4>
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	dc12      	bgt.n	8009fac <OnRxData+0xb0>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <OnRxData+0x94>
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d004      	beq.n	8009f98 <OnRxData+0x9c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8009f8e:	e00d      	b.n	8009fac <OnRxData+0xb0>
              LmHandlerRequestClass(CLASS_A);
 8009f90:	2000      	movs	r0, #0
 8009f92:	f003 fd35 	bl	800da00 <LmHandlerRequestClass>
              break;
 8009f96:	e00a      	b.n	8009fae <OnRxData+0xb2>
              LmHandlerRequestClass(CLASS_B);
 8009f98:	2001      	movs	r0, #1
 8009f9a:	f003 fd31 	bl	800da00 <LmHandlerRequestClass>
              break;
 8009f9e:	e006      	b.n	8009fae <OnRxData+0xb2>
              LmHandlerRequestClass(CLASS_C);
 8009fa0:	2002      	movs	r0, #2
 8009fa2:	f003 fd2d 	bl	800da00 <LmHandlerRequestClass>
              break;
 8009fa6:	e002      	b.n	8009fae <OnRxData+0xb2>
          }
        }
 8009fa8:	bf00      	nop
 8009faa:	e02a      	b.n	800a002 <OnRxData+0x106>
              break;
 8009fac:	bf00      	nop
        break;
 8009fae:	e028      	b.n	800a002 <OnRxData+0x106>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d123      	bne.n	800a000 <OnRxData+0x104>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	4b14      	ldr	r3, [pc, #80]	; (800a018 <OnRxData+0x11c>)
 8009fc6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8009fc8:	4b13      	ldr	r3, [pc, #76]	; (800a018 <OnRxData+0x11c>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <OnRxData+0xe8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8009fd0:	4b12      	ldr	r3, [pc, #72]	; (800a01c <OnRxData+0x120>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2003      	movs	r0, #3
 8009fd8:	f012 f880 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f7f8 fbdf 	bl	80027a0 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 8009fe2:	e00d      	b.n	800a000 <OnRxData+0x104>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009fe4:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <OnRxData+0x124>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	2003      	movs	r0, #3
 8009fec:	f012 f876 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f7f8 fbbf 	bl	8002774 <BSP_LED_On>
        break;
 8009ff6:	e003      	b.n	800a000 <OnRxData+0x104>

      default:

        break;
    }
  }
 8009ff8:	bf00      	nop
 8009ffa:	e002      	b.n	800a002 <OnRxData+0x106>
        break;
 8009ffc:	bf00      	nop
 8009ffe:	e000      	b.n	800a002 <OnRxData+0x106>
        break;
 800a000:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bdb0      	pop	{r4, r5, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	0801d9c0 	.word	0x0801d9c0
 800a010:	20000068 	.word	0x20000068
 800a014:	0801d9f4 	.word	0x0801d9f4
 800a018:	20000d7e 	.word	0x20000d7e
 800a01c:	0801da3c 	.word	0x0801da3c
 800a020:	0801da48 	.word	0x0801da48

0800a024 <SendTxData>:

static void SendTxData(void)
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b091      	sub	sp, #68	; 0x44
 800a028:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a04a:	f107 0308 	add.w	r3, r7, #8
 800a04e:	4618      	mov	r0, r3
 800a050:	f7f7 fdea 	bl	8001c28 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a054:	f7f6 ffb6 	bl	8000fc4 <SYS_GetTemperatureLevel>
 800a058:	4603      	mov	r3, r0
 800a05a:	121b      	asrs	r3, r3, #8
 800a05c:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4983      	ldr	r1, [pc, #524]	; (800a270 <SendTxData+0x24c>)
 800a062:	4618      	mov	r0, r3
 800a064:	f7f6 fc0e 	bl	8000884 <__aeabi_fmul>
 800a068:	4603      	mov	r3, r0
 800a06a:	4982      	ldr	r1, [pc, #520]	; (800a274 <SendTxData+0x250>)
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f6 fcbd 	bl	80009ec <__aeabi_fdiv>
 800a072:	4603      	mov	r3, r0
 800a074:	4618      	mov	r0, r3
 800a076:	f7f6 fd55 	bl	8000b24 <__aeabi_f2uiz>
 800a07a:	4603      	mov	r3, r0
 800a07c:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a07e:	4b7e      	ldr	r3, [pc, #504]	; (800a278 <SendTxData+0x254>)
 800a080:	2202      	movs	r2, #2
 800a082:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	497b      	ldr	r1, [pc, #492]	; (800a274 <SendTxData+0x250>)
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f6 fbfb 	bl	8000884 <__aeabi_fmul>
 800a08e:	4603      	mov	r3, r0
 800a090:	4618      	mov	r0, r3
 800a092:	f7f6 fd47 	bl	8000b24 <__aeabi_f2uiz>
 800a096:	4603      	mov	r3, r0
 800a098:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a09a:	4b77      	ldr	r3, [pc, #476]	; (800a278 <SendTxData+0x254>)
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	1c59      	adds	r1, r3, #1
 800a0a2:	6379      	str	r1, [r7, #52]	; 0x34
 800a0a4:	4413      	add	r3, r2
 800a0a6:	4a75      	ldr	r2, [pc, #468]	; (800a27c <SendTxData+0x258>)
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a0ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a0ae:	0a1b      	lsrs	r3, r3, #8
 800a0b0:	b298      	uxth	r0, r3
 800a0b2:	4b71      	ldr	r3, [pc, #452]	; (800a278 <SendTxData+0x254>)
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	1c59      	adds	r1, r3, #1
 800a0ba:	6379      	str	r1, [r7, #52]	; 0x34
 800a0bc:	4413      	add	r3, r2
 800a0be:	b2c2      	uxtb	r2, r0
 800a0c0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a0c2:	4b6d      	ldr	r3, [pc, #436]	; (800a278 <SendTxData+0x254>)
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c8:	1c59      	adds	r1, r3, #1
 800a0ca:	6379      	str	r1, [r7, #52]	; 0x34
 800a0cc:	4413      	add	r3, r2
 800a0ce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a0d0:	b2d2      	uxtb	r2, r2
 800a0d2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a0d4:	4b68      	ldr	r3, [pc, #416]	; (800a278 <SendTxData+0x254>)
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	1c59      	adds	r1, r3, #1
 800a0dc:	6379      	str	r1, [r7, #52]	; 0x34
 800a0de:	4413      	add	r3, r2
 800a0e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a0e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	b298      	uxth	r0, r3
 800a0ec:	4b62      	ldr	r3, [pc, #392]	; (800a278 <SendTxData+0x254>)
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f2:	1c59      	adds	r1, r3, #1
 800a0f4:	6379      	str	r1, [r7, #52]	; 0x34
 800a0f6:	4413      	add	r3, r2
 800a0f8:	b2c2      	uxtb	r2, r0
 800a0fa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a0fc:	4b5e      	ldr	r3, [pc, #376]	; (800a278 <SendTxData+0x254>)
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a102:	1c59      	adds	r1, r3, #1
 800a104:	6379      	str	r1, [r7, #52]	; 0x34
 800a106:	4413      	add	r3, r2
 800a108:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a10e:	4b5c      	ldr	r3, [pc, #368]	; (800a280 <SendTxData+0x25c>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b08      	cmp	r3, #8
 800a114:	d007      	beq.n	800a126 <SendTxData+0x102>
 800a116:	4b5a      	ldr	r3, [pc, #360]	; (800a280 <SendTxData+0x25c>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d003      	beq.n	800a126 <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a11e:	4b58      	ldr	r3, [pc, #352]	; (800a280 <SendTxData+0x25c>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d120      	bne.n	800a168 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a126:	4b54      	ldr	r3, [pc, #336]	; (800a278 <SendTxData+0x254>)
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12c:	1c59      	adds	r1, r3, #1
 800a12e:	6379      	str	r1, [r7, #52]	; 0x34
 800a130:	4413      	add	r3, r2
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a136:	4b50      	ldr	r3, [pc, #320]	; (800a278 <SendTxData+0x254>)
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13c:	1c59      	adds	r1, r3, #1
 800a13e:	6379      	str	r1, [r7, #52]	; 0x34
 800a140:	4413      	add	r3, r2
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a146:	4b4c      	ldr	r3, [pc, #304]	; (800a278 <SendTxData+0x254>)
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14c:	1c59      	adds	r1, r3, #1
 800a14e:	6379      	str	r1, [r7, #52]	; 0x34
 800a150:	4413      	add	r3, r2
 800a152:	2200      	movs	r2, #0
 800a154:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a156:	4b48      	ldr	r3, [pc, #288]	; (800a278 <SendTxData+0x254>)
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15c:	1c59      	adds	r1, r3, #1
 800a15e:	6379      	str	r1, [r7, #52]	; 0x34
 800a160:	4413      	add	r3, r2
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	e05b      	b.n	800a220 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a170:	4b41      	ldr	r3, [pc, #260]	; (800a278 <SendTxData+0x254>)
 800a172:	685a      	ldr	r2, [r3, #4]
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	1c59      	adds	r1, r3, #1
 800a178:	6379      	str	r1, [r7, #52]	; 0x34
 800a17a:	18d4      	adds	r4, r2, r3
 800a17c:	f7f7 fbf0 	bl	8001960 <GetBatteryLevel>
 800a180:	4603      	mov	r3, r0
 800a182:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	1418      	asrs	r0, r3, #16
 800a188:	4b3b      	ldr	r3, [pc, #236]	; (800a278 <SendTxData+0x254>)
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	1c59      	adds	r1, r3, #1
 800a190:	6379      	str	r1, [r7, #52]	; 0x34
 800a192:	4413      	add	r3, r2
 800a194:	b2c2      	uxtb	r2, r0
 800a196:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	1218      	asrs	r0, r3, #8
 800a19c:	4b36      	ldr	r3, [pc, #216]	; (800a278 <SendTxData+0x254>)
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	1c59      	adds	r1, r3, #1
 800a1a4:	6379      	str	r1, [r7, #52]	; 0x34
 800a1a6:	4413      	add	r3, r2
 800a1a8:	b2c2      	uxtb	r2, r0
 800a1aa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a1ac:	4b32      	ldr	r3, [pc, #200]	; (800a278 <SendTxData+0x254>)
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	1c59      	adds	r1, r3, #1
 800a1b4:	6379      	str	r1, [r7, #52]	; 0x34
 800a1b6:	4413      	add	r3, r2
 800a1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	1418      	asrs	r0, r3, #16
 800a1c2:	4b2d      	ldr	r3, [pc, #180]	; (800a278 <SendTxData+0x254>)
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	6379      	str	r1, [r7, #52]	; 0x34
 800a1cc:	4413      	add	r3, r2
 800a1ce:	b2c2      	uxtb	r2, r0
 800a1d0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	1218      	asrs	r0, r3, #8
 800a1d6:	4b28      	ldr	r3, [pc, #160]	; (800a278 <SendTxData+0x254>)
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	1c59      	adds	r1, r3, #1
 800a1de:	6379      	str	r1, [r7, #52]	; 0x34
 800a1e0:	4413      	add	r3, r2
 800a1e2:	b2c2      	uxtb	r2, r0
 800a1e4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <SendTxData+0x254>)
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ec:	1c59      	adds	r1, r3, #1
 800a1ee:	6379      	str	r1, [r7, #52]	; 0x34
 800a1f0:	4413      	add	r3, r2
 800a1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f4:	b2d2      	uxtb	r2, r2
 800a1f6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a1f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	b298      	uxth	r0, r3
 800a1fe:	4b1e      	ldr	r3, [pc, #120]	; (800a278 <SendTxData+0x254>)
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a204:	1c59      	adds	r1, r3, #1
 800a206:	6379      	str	r1, [r7, #52]	; 0x34
 800a208:	4413      	add	r3, r2
 800a20a:	b2c2      	uxtb	r2, r0
 800a20c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a20e:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <SendTxData+0x254>)
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a214:	1c59      	adds	r1, r3, #1
 800a216:	6379      	str	r1, [r7, #52]	; 0x34
 800a218:	4413      	add	r3, r2
 800a21a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	b2da      	uxtb	r2, r3
 800a224:	4b14      	ldr	r3, [pc, #80]	; (800a278 <SendTxData+0x254>)
 800a226:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a228:	1d3a      	adds	r2, r7, #4
 800a22a:	2300      	movs	r3, #0
 800a22c:	2101      	movs	r1, #1
 800a22e:	4812      	ldr	r0, [pc, #72]	; (800a278 <SendTxData+0x254>)
 800a230:	f003 fafa 	bl	800d828 <LmHandlerSend>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a23a:	4b12      	ldr	r3, [pc, #72]	; (800a284 <SendTxData+0x260>)
 800a23c:	2201      	movs	r2, #1
 800a23e:	2100      	movs	r1, #0
 800a240:	2001      	movs	r0, #1
 800a242:	f011 ff4b 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a246:	e00e      	b.n	800a266 <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a0d      	ldr	r2, [pc, #52]	; (800a288 <SendTxData+0x264>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	099b      	lsrs	r3, r3, #6
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <SendTxData+0x268>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	2100      	movs	r1, #0
 800a260:	2001      	movs	r0, #1
 800a262:	f011 ff3b 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800a266:	bf00      	nop
 800a268:	373c      	adds	r7, #60	; 0x3c
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd90      	pop	{r4, r7, pc}
 800a26e:	bf00      	nop
 800a270:	42c80000 	.word	0x42c80000
 800a274:	41200000 	.word	0x41200000
 800a278:	20000060 	.word	0x20000060
 800a27c:	20000d7e 	.word	0x20000d7e
 800a280:	20000050 	.word	0x20000050
 800a284:	0801da54 	.word	0x0801da54
 800a288:	10624dd3 	.word	0x10624dd3
 800a28c:	0801da64 	.word	0x0801da64

0800a290 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f012 fb7c 	bl	801c998 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a2a0:	4803      	ldr	r0, [pc, #12]	; (800a2b0 <OnTxTimerEvent+0x20>)
 800a2a2:	f012 fd8d 	bl	801cdc0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000c74 	.word	0x20000c74

0800a2b4 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d03e      	beq.n	800a340 <OnTxData+0x8c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d03a      	beq.n	800a340 <OnTxData+0x8c>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a2ca:	4b1f      	ldr	r3, [pc, #124]	; (800a348 <OnTxData+0x94>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	2002      	movs	r0, #2
 800a2d2:	f011 ff03 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	7b12      	ldrb	r2, [r2, #12]
 800a2de:	4611      	mov	r1, r2
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a2ee:	9203      	str	r2, [sp, #12]
 800a2f0:	9002      	str	r0, [sp, #8]
 800a2f2:	9101      	str	r1, [sp, #4]
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	4b15      	ldr	r3, [pc, #84]	; (800a34c <OnTxData+0x98>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	2003      	movs	r0, #3
 800a2fe:	f011 feed 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a302:	4b13      	ldr	r3, [pc, #76]	; (800a350 <OnTxData+0x9c>)
 800a304:	2200      	movs	r2, #0
 800a306:	2100      	movs	r1, #0
 800a308:	2003      	movs	r0, #3
 800a30a:	f011 fee7 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	789b      	ldrb	r3, [r3, #2]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d10e      	bne.n	800a334 <OnTxData+0x80>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	78db      	ldrb	r3, [r3, #3]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <OnTxData+0x6e>
 800a31e:	4b0d      	ldr	r3, [pc, #52]	; (800a354 <OnTxData+0xa0>)
 800a320:	e000      	b.n	800a324 <OnTxData+0x70>
 800a322:	4b0d      	ldr	r3, [pc, #52]	; (800a358 <OnTxData+0xa4>)
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <OnTxData+0xa8>)
 800a328:	2200      	movs	r2, #0
 800a32a:	2100      	movs	r1, #0
 800a32c:	2003      	movs	r0, #3
 800a32e:	f011 fed5 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a332:	e005      	b.n	800a340 <OnTxData+0x8c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a334:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <OnTxData+0xac>)
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	2003      	movs	r0, #3
 800a33c:	f011 fece 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0801da84 	.word	0x0801da84
 800a34c:	0801dab8 	.word	0x0801dab8
 800a350:	0801daec 	.word	0x0801daec
 800a354:	0801dafc 	.word	0x0801dafc
 800a358:	0801db00 	.word	0x0801db00
 800a35c:	0801db08 	.word	0x0801db08
 800a360:	0801db1c 	.word	0x0801db1c

0800a364 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d022      	beq.n	800a3b8 <OnJoinRequest+0x54>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d117      	bne.n	800a3ac <OnJoinRequest+0x48>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a37c:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <OnJoinRequest+0x5c>)
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	2002      	movs	r0, #2
 800a384:	f011 feaa 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d106      	bne.n	800a39e <OnJoinRequest+0x3a>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <OnJoinRequest+0x60>)
 800a392:	2200      	movs	r2, #0
 800a394:	2100      	movs	r1, #0
 800a396:	2002      	movs	r0, #2
 800a398:	f011 fea0 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a39c:	e00c      	b.n	800a3b8 <OnJoinRequest+0x54>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a39e:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <OnJoinRequest+0x64>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	2002      	movs	r0, #2
 800a3a6:	f011 fe99 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800a3aa:	e005      	b.n	800a3b8 <OnJoinRequest+0x54>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <OnJoinRequest+0x68>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2002      	movs	r0, #2
 800a3b4:	f011 fe92 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0801db2c 	.word	0x0801db2c
 800a3c4:	0801db44 	.word	0x0801db44
 800a3c8:	0801db64 	.word	0x0801db64
 800a3cc:	0801db84 	.word	0x0801db84

0800a3d0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	f012 fade 	bl	801c998 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a3dc:	bf00      	nop
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a3e4:	4b18      	ldr	r3, [pc, #96]	; (800a448 <LoraInfo_Init+0x68>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a3ea:	4b17      	ldr	r3, [pc, #92]	; (800a448 <LoraInfo_Init+0x68>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a3f0:	4b15      	ldr	r3, [pc, #84]	; (800a448 <LoraInfo_Init+0x68>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <LoraInfo_Init+0x68>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a3fc:	4b12      	ldr	r3, [pc, #72]	; (800a448 <LoraInfo_Init+0x68>)
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f043 0320 	orr.w	r3, r3, #32
 800a404:	4a10      	ldr	r2, [pc, #64]	; (800a448 <LoraInfo_Init+0x68>)
 800a406:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800a408:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <LoraInfo_Init+0x68>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a410:	4a0d      	ldr	r2, [pc, #52]	; (800a448 <LoraInfo_Init+0x68>)
 800a412:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a414:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <LoraInfo_Init+0x68>)
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10c      	bne.n	800a436 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a41c:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <LoraInfo_Init+0x6c>)
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	2000      	movs	r0, #0
 800a424:	f011 fe5a 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a428:	bf00      	nop
 800a42a:	f011 fe45 	bl	801c0b8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b01      	cmp	r3, #1
 800a432:	d1fa      	bne.n	800a42a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a434:	e7fe      	b.n	800a434 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a436:	4b04      	ldr	r3, [pc, #16]	; (800a448 <LoraInfo_Init+0x68>)
 800a438:	2200      	movs	r2, #0
 800a43a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <LoraInfo_Init+0x68>)
 800a43e:	2203      	movs	r2, #3
 800a440:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a442:	bf00      	nop
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000d80 	.word	0x20000d80
 800a44c:	0801dbdc 	.word	0x0801dbdc

0800a450 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <LoraInfo_GetPtr+0x10>)
}
 800a456:	4618      	mov	r0, r3
 800a458:	46bd      	mov	sp, r7
 800a45a:	bc80      	pop	{r7}
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20000d80 	.word	0x20000d80

0800a464 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a468:	f7f8 fa45 	bl	80028f6 <BSP_RADIO_Init>
 800a46c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a46e:	4618      	mov	r0, r3
 800a470:	bd80      	pop	{r7, pc}

0800a472 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	4603      	mov	r3, r0
 800a47a:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f8 fa6e 	bl	8002960 <BSP_RADIO_ConfigRFSwitch>
 800a484:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a492:	f7f8 fab3 	bl	80029fc <BSP_RADIO_GetTxConfig>
 800a496:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a498:	4618      	mov	r0, r3
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a4a0:	f7f8 fab3 	bl	8002a0a <BSP_RADIO_IsTCXO>
 800a4a4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a4ae:	f7f8 fab3 	bl	8002a18 <BSP_RADIO_IsDCDC>
 800a4b2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a4c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4ca:	2b84      	cmp	r3, #132	; 0x84
 800a4cc:	d005      	beq.n	800a4da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a4ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3303      	adds	r3, #3
 800a4d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a4da:	68fb      	ldr	r3, [r7, #12]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bc80      	pop	{r7}
 800a4e4:	4770      	bx	lr

0800a4e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a4ea:	f000 fad9 	bl	800aaa0 <vTaskStartScheduler>
  
  return osOK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f6:	b089      	sub	sp, #36	; 0x24
 800a4f8:	af04      	add	r7, sp, #16
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d020      	beq.n	800a548 <osThreadCreate+0x54>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d01c      	beq.n	800a548 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685c      	ldr	r4, [r3, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681d      	ldr	r5, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691e      	ldr	r6, [r3, #16]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff ffc9 	bl	800a4b8 <makeFreeRtosPriority>
 800a526:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a530:	9202      	str	r2, [sp, #8]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	9100      	str	r1, [sp, #0]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	4632      	mov	r2, r6
 800a53a:	4629      	mov	r1, r5
 800a53c:	4620      	mov	r0, r4
 800a53e:	f000 f8e8 	bl	800a712 <xTaskCreateStatic>
 800a542:	4603      	mov	r3, r0
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e01c      	b.n	800a582 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685c      	ldr	r4, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a554:	b29e      	uxth	r6, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7ff ffab 	bl	800a4b8 <makeFreeRtosPriority>
 800a562:	4602      	mov	r2, r0
 800a564:	f107 030c 	add.w	r3, r7, #12
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	9200      	str	r2, [sp, #0]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	4632      	mov	r2, r6
 800a570:	4629      	mov	r1, r5
 800a572:	4620      	mov	r0, r4
 800a574:	f000 f92a 	bl	800a7cc <xTaskCreate>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d001      	beq.n	800a582 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	e000      	b.n	800a584 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a582:	68fb      	ldr	r3, [r7, #12]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a58c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <osDelay+0x16>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	e000      	b.n	800a5a4 <osDelay+0x18>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fa47 	bl	800aa38 <vTaskDelay>
  
  return osOK;
 800a5aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f103 0208 	add.w	r2, r3, #8
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f103 0208 	add.w	r2, r3, #8
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f103 0208 	add.w	r2, r3, #8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr

0800a5f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr

0800a60a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bc80      	pop	{r7}
 800a64e:	4770      	bx	lr

0800a650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d103      	bne.n	800a670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	e00c      	b.n	800a68a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3308      	adds	r3, #8
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	e002      	b.n	800a67e <vListInsert+0x2e>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	429a      	cmp	r2, r3
 800a688:	d2f6      	bcs.n	800a678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6892      	ldr	r2, [r2, #8]
 800a6d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	6852      	ldr	r2, [r2, #4]
 800a6e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d103      	bne.n	800a6f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bc80      	pop	{r7}
 800a710:	4770      	bx	lr

0800a712 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a712:	b580      	push	{r7, lr}
 800a714:	b08e      	sub	sp, #56	; 0x38
 800a716:	af04      	add	r7, sp, #16
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
 800a71e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <xTaskCreateStatic+0x46>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	61fb      	str	r3, [r7, #28]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a758:	2354      	movs	r3, #84	; 0x54
 800a75a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2b54      	cmp	r3, #84	; 0x54
 800a760:	d00a      	beq.n	800a778 <xTaskCreateStatic+0x66>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	61bb      	str	r3, [r7, #24]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a778:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01e      	beq.n	800a7be <xTaskCreateStatic+0xac>
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01b      	beq.n	800a7be <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a78e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	2202      	movs	r2, #2
 800a794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a798:	2300      	movs	r3, #0
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	9302      	str	r3, [sp, #8]
 800a7a0:	f107 0314 	add.w	r3, r7, #20
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f850 	bl	800a856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7b8:	f000 f8d4 	bl	800a964 <prvAddNewTaskToReadyList>
 800a7bc:	e001      	b.n	800a7c2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
	}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3728      	adds	r7, #40	; 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08c      	sub	sp, #48	; 0x30
 800a7d0:	af04      	add	r7, sp, #16
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f001 f823 	bl	800b82c <pvPortMalloc>
 800a7e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00e      	beq.n	800a80c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7ee:	2054      	movs	r0, #84	; 0x54
 800a7f0:	f001 f81c 	bl	800b82c <pvPortMalloc>
 800a7f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	631a      	str	r2, [r3, #48]	; 0x30
 800a802:	e005      	b.n	800a810 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a804:	6978      	ldr	r0, [r7, #20]
 800a806:	f001 f8d5 	bl	800b9b4 <vPortFree>
 800a80a:	e001      	b.n	800a810 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d017      	beq.n	800a846 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	2300      	movs	r3, #0
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68b9      	ldr	r1, [r7, #8]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f80e 	bl	800a856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a83a:	69f8      	ldr	r0, [r7, #28]
 800a83c:	f000 f892 	bl	800a964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a840:	2301      	movs	r3, #1
 800a842:	61bb      	str	r3, [r7, #24]
 800a844:	e002      	b.n	800a84c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a84c:	69bb      	ldr	r3, [r7, #24]
	}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b088      	sub	sp, #32
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a86e:	3b01      	subs	r3, #1
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	f023 0307 	bic.w	r3, r3, #7
 800a87c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f003 0307 	and.w	r3, r3, #7
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <prvInitialiseNewTask+0x48>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	617b      	str	r3, [r7, #20]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01f      	beq.n	800a8e4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e012      	b.n	800a8d0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	7819      	ldrb	r1, [r3, #0]
 800a8b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	3334      	adds	r3, #52	; 0x34
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d006      	beq.n	800a8d8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	2b0f      	cmp	r3, #15
 800a8d4:	d9e9      	bls.n	800a8aa <prvInitialiseNewTask+0x54>
 800a8d6:	e000      	b.n	800a8da <prvInitialiseNewTask+0x84>
			{
				break;
 800a8d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8e2:	e003      	b.n	800a8ec <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	2b06      	cmp	r3, #6
 800a8f0:	d901      	bls.n	800a8f6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8f2:	2306      	movs	r3, #6
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a900:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	2200      	movs	r2, #0
 800a906:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fe70 	bl	800a5f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	3318      	adds	r3, #24
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fe6b 	bl	800a5f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a920:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	f1c3 0207 	rsb	r2, r3, #7
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a930:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	2200      	movs	r2, #0
 800a936:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	69b8      	ldr	r0, [r7, #24]
 800a946:	f000 fcd7 	bl	800b2f8 <pxPortInitialiseStack>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a95a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a95c:	bf00      	nop
 800a95e:	3720      	adds	r7, #32
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a96c:	f000 fdb6 	bl	800b4dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a970:	4b2a      	ldr	r3, [pc, #168]	; (800aa1c <prvAddNewTaskToReadyList+0xb8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3301      	adds	r3, #1
 800a976:	4a29      	ldr	r2, [pc, #164]	; (800aa1c <prvAddNewTaskToReadyList+0xb8>)
 800a978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a97a:	4b29      	ldr	r3, [pc, #164]	; (800aa20 <prvAddNewTaskToReadyList+0xbc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d109      	bne.n	800a996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a982:	4a27      	ldr	r2, [pc, #156]	; (800aa20 <prvAddNewTaskToReadyList+0xbc>)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a988:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <prvAddNewTaskToReadyList+0xb8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d110      	bne.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a990:	f000 fb70 	bl	800b074 <prvInitialiseTaskLists>
 800a994:	e00d      	b.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a996:	4b23      	ldr	r3, [pc, #140]	; (800aa24 <prvAddNewTaskToReadyList+0xc0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a99e:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <prvAddNewTaskToReadyList+0xbc>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d802      	bhi.n	800a9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9ac:	4a1c      	ldr	r2, [pc, #112]	; (800aa20 <prvAddNewTaskToReadyList+0xbc>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9b2:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <prvAddNewTaskToReadyList+0xc4>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	4a1b      	ldr	r2, [pc, #108]	; (800aa28 <prvAddNewTaskToReadyList+0xc4>)
 800a9ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	409a      	lsls	r2, r3
 800a9c4:	4b19      	ldr	r3, [pc, #100]	; (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	4a18      	ldr	r2, [pc, #96]	; (800aa2c <prvAddNewTaskToReadyList+0xc8>)
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4a15      	ldr	r2, [pc, #84]	; (800aa30 <prvAddNewTaskToReadyList+0xcc>)
 800a9dc:	441a      	add	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	f7ff fe10 	bl	800a60a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9ea:	f000 fda7 	bl	800b53c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <prvAddNewTaskToReadyList+0xc0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00e      	beq.n	800aa14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <prvAddNewTaskToReadyList+0xbc>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d207      	bcs.n	800aa14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa04:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <prvAddNewTaskToReadyList+0xd0>)
 800aa06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000e90 	.word	0x20000e90
 800aa20:	20000d90 	.word	0x20000d90
 800aa24:	20000e9c 	.word	0x20000e9c
 800aa28:	20000eac 	.word	0x20000eac
 800aa2c:	20000e98 	.word	0x20000e98
 800aa30:	20000d94 	.word	0x20000d94
 800aa34:	e000ed04 	.word	0xe000ed04

0800aa38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d017      	beq.n	800aa7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa4a:	4b13      	ldr	r3, [pc, #76]	; (800aa98 <vTaskDelay+0x60>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00a      	beq.n	800aa68 <vTaskDelay+0x30>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	60bb      	str	r3, [r7, #8]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa68:	f000 f87a 	bl	800ab60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fbdc 	bl	800b22c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa74:	f000 f8bc 	bl	800abf0 <xTaskResumeAll>
 800aa78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d107      	bne.n	800aa90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <vTaskDelay+0x64>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000eb8 	.word	0x20000eb8
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	; 0x28
 800aaa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aaae:	463a      	mov	r2, r7
 800aab0:	1d39      	adds	r1, r7, #4
 800aab2:	f107 0308 	add.w	r3, r7, #8
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f6 fba6 	bl	8001208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	9202      	str	r2, [sp, #8]
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	2300      	movs	r3, #0
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	2300      	movs	r3, #0
 800aacc:	460a      	mov	r2, r1
 800aace:	491e      	ldr	r1, [pc, #120]	; (800ab48 <vTaskStartScheduler+0xa8>)
 800aad0:	481e      	ldr	r0, [pc, #120]	; (800ab4c <vTaskStartScheduler+0xac>)
 800aad2:	f7ff fe1e 	bl	800a712 <xTaskCreateStatic>
 800aad6:	4603      	mov	r3, r0
 800aad8:	4a1d      	ldr	r2, [pc, #116]	; (800ab50 <vTaskStartScheduler+0xb0>)
 800aada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <vTaskStartScheduler+0xb0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e001      	b.n	800aaee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d116      	bne.n	800ab22 <vTaskStartScheduler+0x82>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	613b      	str	r3, [r7, #16]
}
 800ab06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <vTaskStartScheduler+0xb4>)
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab10:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <vTaskStartScheduler+0xb8>)
 800ab12:	2201      	movs	r2, #1
 800ab14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab16:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <vTaskStartScheduler+0xbc>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab1c:	f000 fc6c 	bl	800b3f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab20:	e00e      	b.n	800ab40 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab28:	d10a      	bne.n	800ab40 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	60fb      	str	r3, [r7, #12]
}
 800ab3c:	bf00      	nop
 800ab3e:	e7fe      	b.n	800ab3e <vTaskStartScheduler+0x9e>
}
 800ab40:	bf00      	nop
 800ab42:	3718      	adds	r7, #24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	0801dc2c 	.word	0x0801dc2c
 800ab4c:	0800af99 	.word	0x0800af99
 800ab50:	20000eb4 	.word	0x20000eb4
 800ab54:	20000eb0 	.word	0x20000eb0
 800ab58:	20000e9c 	.word	0x20000e9c
 800ab5c:	20000e94 	.word	0x20000e94

0800ab60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ab64:	4b04      	ldr	r3, [pc, #16]	; (800ab78 <vTaskSuspendAll+0x18>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	4a03      	ldr	r2, [pc, #12]	; (800ab78 <vTaskSuspendAll+0x18>)
 800ab6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ab6e:	bf00      	nop
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	20000eb8 	.word	0x20000eb8

0800ab7c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800ab86:	2301      	movs	r3, #1
 800ab88:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800ab8a:	4b14      	ldr	r3, [pc, #80]	; (800abdc <prvGetExpectedIdleTime+0x60>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d201      	bcs.n	800ab98 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ab94:	2301      	movs	r3, #1
 800ab96:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ab98:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <prvGetExpectedIdleTime+0x64>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	e012      	b.n	800abce <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800aba8:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <prvGetExpectedIdleTime+0x68>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d902      	bls.n	800abb6 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e00b      	b.n	800abce <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e005      	b.n	800abce <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <prvGetExpectedIdleTime+0x6c>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <prvGetExpectedIdleTime+0x70>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800abce:	68fb      	ldr	r3, [r7, #12]
	}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20000e98 	.word	0x20000e98
 800abe0:	20000d90 	.word	0x20000d90
 800abe4:	20000d94 	.word	0x20000d94
 800abe8:	20000eb0 	.word	0x20000eb0
 800abec:	20000e94 	.word	0x20000e94

0800abf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abfe:	4b41      	ldr	r3, [pc, #260]	; (800ad04 <xTaskResumeAll+0x114>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <xTaskResumeAll+0x2c>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	603b      	str	r3, [r7, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac1c:	f000 fc5e 	bl	800b4dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac20:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <xTaskResumeAll+0x114>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4a37      	ldr	r2, [pc, #220]	; (800ad04 <xTaskResumeAll+0x114>)
 800ac28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac2a:	4b36      	ldr	r3, [pc, #216]	; (800ad04 <xTaskResumeAll+0x114>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d161      	bne.n	800acf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac32:	4b35      	ldr	r3, [pc, #212]	; (800ad08 <xTaskResumeAll+0x118>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d05d      	beq.n	800acf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac3a:	e02e      	b.n	800ac9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3c:	4b33      	ldr	r3, [pc, #204]	; (800ad0c <xTaskResumeAll+0x11c>)
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3318      	adds	r3, #24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff fd39 	bl	800a6c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fd34 	bl	800a6c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	409a      	lsls	r2, r3
 800ac60:	4b2b      	ldr	r3, [pc, #172]	; (800ad10 <xTaskResumeAll+0x120>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	4a2a      	ldr	r2, [pc, #168]	; (800ad10 <xTaskResumeAll+0x120>)
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4a27      	ldr	r2, [pc, #156]	; (800ad14 <xTaskResumeAll+0x124>)
 800ac78:	441a      	add	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7ff fcc2 	bl	800a60a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8a:	4b23      	ldr	r3, [pc, #140]	; (800ad18 <xTaskResumeAll+0x128>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ac94:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <xTaskResumeAll+0x12c>)
 800ac96:	2201      	movs	r2, #1
 800ac98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac9a:	4b1c      	ldr	r3, [pc, #112]	; (800ad0c <xTaskResumeAll+0x11c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1cc      	bne.n	800ac3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aca8:	f000 fa82 	bl	800b1b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800acac:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <xTaskResumeAll+0x130>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d010      	beq.n	800acda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acb8:	f000 f85c 	bl	800ad74 <xTaskIncrementTick>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800acc2:	4b16      	ldr	r3, [pc, #88]	; (800ad1c <xTaskResumeAll+0x12c>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3b01      	subs	r3, #1
 800accc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1f1      	bne.n	800acb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800acd4:	4b12      	ldr	r3, [pc, #72]	; (800ad20 <xTaskResumeAll+0x130>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acda:	4b10      	ldr	r3, [pc, #64]	; (800ad1c <xTaskResumeAll+0x12c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ace2:	2301      	movs	r3, #1
 800ace4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <xTaskResumeAll+0x134>)
 800ace8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acf6:	f000 fc21 	bl	800b53c <vPortExitCritical>

	return xAlreadyYielded;
 800acfa:	68bb      	ldr	r3, [r7, #8]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20000eb8 	.word	0x20000eb8
 800ad08:	20000e90 	.word	0x20000e90
 800ad0c:	20000e50 	.word	0x20000e50
 800ad10:	20000e98 	.word	0x20000e98
 800ad14:	20000d94 	.word	0x20000d94
 800ad18:	20000d90 	.word	0x20000d90
 800ad1c:	20000ea4 	.word	0x20000ea4
 800ad20:	20000ea0 	.word	0x20000ea0
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800ad30:	4b0e      	ldr	r3, [pc, #56]	; (800ad6c <vTaskStepTick+0x44>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	441a      	add	r2, r3
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <vTaskStepTick+0x48>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d90a      	bls.n	800ad56 <vTaskStepTick+0x2e>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	60fb      	str	r3, [r7, #12]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <vTaskStepTick+0x44>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	4a03      	ldr	r2, [pc, #12]	; (800ad6c <vTaskStepTick+0x44>)
 800ad60:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800ad62:	bf00      	nop
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bc80      	pop	{r7}
 800ad6a:	4770      	bx	lr
 800ad6c:	20000e94 	.word	0x20000e94
 800ad70:	20000eb0 	.word	0x20000eb0

0800ad74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad7e:	4b4e      	ldr	r3, [pc, #312]	; (800aeb8 <xTaskIncrementTick+0x144>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f040 8088 	bne.w	800ae98 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad88:	4b4c      	ldr	r3, [pc, #304]	; (800aebc <xTaskIncrementTick+0x148>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad90:	4a4a      	ldr	r2, [pc, #296]	; (800aebc <xTaskIncrementTick+0x148>)
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d120      	bne.n	800adde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad9c:	4b48      	ldr	r3, [pc, #288]	; (800aec0 <xTaskIncrementTick+0x14c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <xTaskIncrementTick+0x48>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	603b      	str	r3, [r7, #0]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xTaskIncrementTick+0x46>
 800adbc:	4b40      	ldr	r3, [pc, #256]	; (800aec0 <xTaskIncrementTick+0x14c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	4b40      	ldr	r3, [pc, #256]	; (800aec4 <xTaskIncrementTick+0x150>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a3e      	ldr	r2, [pc, #248]	; (800aec0 <xTaskIncrementTick+0x14c>)
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	4a3e      	ldr	r2, [pc, #248]	; (800aec4 <xTaskIncrementTick+0x150>)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <xTaskIncrementTick+0x154>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	4a3c      	ldr	r2, [pc, #240]	; (800aec8 <xTaskIncrementTick+0x154>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	f000 f9e9 	bl	800b1b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adde:	4b3b      	ldr	r3, [pc, #236]	; (800aecc <xTaskIncrementTick+0x158>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d348      	bcc.n	800ae7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ade8:	4b35      	ldr	r3, [pc, #212]	; (800aec0 <xTaskIncrementTick+0x14c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d104      	bne.n	800adfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adf2:	4b36      	ldr	r3, [pc, #216]	; (800aecc <xTaskIncrementTick+0x158>)
 800adf4:	f04f 32ff 	mov.w	r2, #4294967295
 800adf8:	601a      	str	r2, [r3, #0]
					break;
 800adfa:	e03e      	b.n	800ae7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfc:	4b30      	ldr	r3, [pc, #192]	; (800aec0 <xTaskIncrementTick+0x14c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d203      	bcs.n	800ae1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae14:	4a2d      	ldr	r2, [pc, #180]	; (800aecc <xTaskIncrementTick+0x158>)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae1a:	e02e      	b.n	800ae7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fc4d 	bl	800a6c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3318      	adds	r3, #24
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fc44 	bl	800a6c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	409a      	lsls	r2, r3
 800ae40:	4b23      	ldr	r3, [pc, #140]	; (800aed0 <xTaskIncrementTick+0x15c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	4a22      	ldr	r2, [pc, #136]	; (800aed0 <xTaskIncrementTick+0x15c>)
 800ae48:	6013      	str	r3, [r2, #0]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4a1f      	ldr	r2, [pc, #124]	; (800aed4 <xTaskIncrementTick+0x160>)
 800ae58:	441a      	add	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7ff fbd2 	bl	800a60a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae6a:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <xTaskIncrementTick+0x164>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3b9      	bcc.n	800ade8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae78:	e7b6      	b.n	800ade8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae7a:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <xTaskIncrementTick+0x164>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae80:	4914      	ldr	r1, [pc, #80]	; (800aed4 <xTaskIncrementTick+0x160>)
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	440b      	add	r3, r1
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d907      	bls.n	800aea2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ae92:	2301      	movs	r3, #1
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	e004      	b.n	800aea2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae98:	4b10      	ldr	r3, [pc, #64]	; (800aedc <xTaskIncrementTick+0x168>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	4a0f      	ldr	r2, [pc, #60]	; (800aedc <xTaskIncrementTick+0x168>)
 800aea0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aea2:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <xTaskIncrementTick+0x16c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aeae:	697b      	ldr	r3, [r7, #20]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000eb8 	.word	0x20000eb8
 800aebc:	20000e94 	.word	0x20000e94
 800aec0:	20000e48 	.word	0x20000e48
 800aec4:	20000e4c 	.word	0x20000e4c
 800aec8:	20000ea8 	.word	0x20000ea8
 800aecc:	20000eb0 	.word	0x20000eb0
 800aed0:	20000e98 	.word	0x20000e98
 800aed4:	20000d94 	.word	0x20000d94
 800aed8:	20000d90 	.word	0x20000d90
 800aedc:	20000ea0 	.word	0x20000ea0
 800aee0:	20000ea4 	.word	0x20000ea4

0800aee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aeea:	4b26      	ldr	r3, [pc, #152]	; (800af84 <vTaskSwitchContext+0xa0>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aef2:	4b25      	ldr	r3, [pc, #148]	; (800af88 <vTaskSwitchContext+0xa4>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aef8:	e03f      	b.n	800af7a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800aefa:	4b23      	ldr	r3, [pc, #140]	; (800af88 <vTaskSwitchContext+0xa4>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af00:	4b22      	ldr	r3, [pc, #136]	; (800af8c <vTaskSwitchContext+0xa8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	fab3 f383 	clz	r3, r3
 800af0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	f1c3 031f 	rsb	r3, r3, #31
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	491e      	ldr	r1, [pc, #120]	; (800af90 <vTaskSwitchContext+0xac>)
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <vTaskSwitchContext+0x5c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	607b      	str	r3, [r7, #4]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <vTaskSwitchContext+0x5a>
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4a11      	ldr	r2, [pc, #68]	; (800af90 <vTaskSwitchContext+0xac>)
 800af4c:	4413      	add	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	605a      	str	r2, [r3, #4]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	3308      	adds	r3, #8
 800af62:	429a      	cmp	r2, r3
 800af64:	d104      	bne.n	800af70 <vTaskSwitchContext+0x8c>
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	605a      	str	r2, [r3, #4]
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	4a07      	ldr	r2, [pc, #28]	; (800af94 <vTaskSwitchContext+0xb0>)
 800af78:	6013      	str	r3, [r2, #0]
}
 800af7a:	bf00      	nop
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	bc80      	pop	{r7}
 800af82:	4770      	bx	lr
 800af84:	20000eb8 	.word	0x20000eb8
 800af88:	20000ea4 	.word	0x20000ea4
 800af8c:	20000e98 	.word	0x20000e98
 800af90:	20000d94 	.word	0x20000d94
 800af94:	20000d90 	.word	0x20000d90

0800af98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afa0:	f000 f8a8 	bl	800b0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afa4:	4b18      	ldr	r3, [pc, #96]	; (800b008 <prvIdleTask+0x70>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d907      	bls.n	800afbc <prvIdleTask+0x24>
			{
				taskYIELD();
 800afac:	4b17      	ldr	r3, [pc, #92]	; (800b00c <prvIdleTask+0x74>)
 800afae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800afbc:	f7ff fdde 	bl	800ab7c <prvGetExpectedIdleTime>
 800afc0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d9eb      	bls.n	800afa0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800afc8:	f7ff fdca 	bl	800ab60 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800afcc:	4b10      	ldr	r3, [pc, #64]	; (800b010 <prvIdleTask+0x78>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	4b10      	ldr	r3, [pc, #64]	; (800b014 <prvIdleTask+0x7c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d20a      	bcs.n	800afee <prvIdleTask+0x56>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	60bb      	str	r3, [r7, #8]
}
 800afea:	bf00      	nop
 800afec:	e7fe      	b.n	800afec <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800afee:	f7ff fdc5 	bl	800ab7c <prvGetExpectedIdleTime>
 800aff2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d902      	bls.n	800b000 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 fb0e 	bl	800b61c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b000:	f7ff fdf6 	bl	800abf0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b004:	e7cc      	b.n	800afa0 <prvIdleTask+0x8>
 800b006:	bf00      	nop
 800b008:	20000d94 	.word	0x20000d94
 800b00c:	e000ed04 	.word	0xe000ed04
 800b010:	20000eb0 	.word	0x20000eb0
 800b014:	20000e94 	.word	0x20000e94

0800b018 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b01e:	2301      	movs	r3, #1
 800b020:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b022:	2301      	movs	r3, #1
 800b024:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b026:	4b0f      	ldr	r3, [pc, #60]	; (800b064 <eTaskConfirmSleepModeStatus+0x4c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b02e:	2300      	movs	r3, #0
 800b030:	71fb      	strb	r3, [r7, #7]
 800b032:	e010      	b.n	800b056 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b034:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <eTaskConfirmSleepModeStatus+0x50>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b03c:	2300      	movs	r3, #0
 800b03e:	71fb      	strb	r3, [r7, #7]
 800b040:	e009      	b.n	800b056 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b042:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <eTaskConfirmSleepModeStatus+0x54>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <eTaskConfirmSleepModeStatus+0x58>)
 800b048:	6819      	ldr	r1, [r3, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	1acb      	subs	r3, r1, r3
 800b04e:	429a      	cmp	r2, r3
 800b050:	d101      	bne.n	800b056 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b052:	2302      	movs	r3, #2
 800b054:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b056:	79fb      	ldrb	r3, [r7, #7]
	}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000e50 	.word	0x20000e50
 800b068:	20000ea4 	.word	0x20000ea4
 800b06c:	20000e7c 	.word	0x20000e7c
 800b070:	20000e90 	.word	0x20000e90

0800b074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b07a:	2300      	movs	r3, #0
 800b07c:	607b      	str	r3, [r7, #4]
 800b07e:	e00c      	b.n	800b09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4a12      	ldr	r2, [pc, #72]	; (800b0d4 <prvInitialiseTaskLists+0x60>)
 800b08c:	4413      	add	r3, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff fa90 	bl	800a5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3301      	adds	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b06      	cmp	r3, #6
 800b09e:	d9ef      	bls.n	800b080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0a0:	480d      	ldr	r0, [pc, #52]	; (800b0d8 <prvInitialiseTaskLists+0x64>)
 800b0a2:	f7ff fa87 	bl	800a5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0a6:	480d      	ldr	r0, [pc, #52]	; (800b0dc <prvInitialiseTaskLists+0x68>)
 800b0a8:	f7ff fa84 	bl	800a5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0ac:	480c      	ldr	r0, [pc, #48]	; (800b0e0 <prvInitialiseTaskLists+0x6c>)
 800b0ae:	f7ff fa81 	bl	800a5b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0b2:	480c      	ldr	r0, [pc, #48]	; (800b0e4 <prvInitialiseTaskLists+0x70>)
 800b0b4:	f7ff fa7e 	bl	800a5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0b8:	480b      	ldr	r0, [pc, #44]	; (800b0e8 <prvInitialiseTaskLists+0x74>)
 800b0ba:	f7ff fa7b 	bl	800a5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0be:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <prvInitialiseTaskLists+0x78>)
 800b0c0:	4a05      	ldr	r2, [pc, #20]	; (800b0d8 <prvInitialiseTaskLists+0x64>)
 800b0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0c4:	4b0a      	ldr	r3, [pc, #40]	; (800b0f0 <prvInitialiseTaskLists+0x7c>)
 800b0c6:	4a05      	ldr	r2, [pc, #20]	; (800b0dc <prvInitialiseTaskLists+0x68>)
 800b0c8:	601a      	str	r2, [r3, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000d94 	.word	0x20000d94
 800b0d8:	20000e20 	.word	0x20000e20
 800b0dc:	20000e34 	.word	0x20000e34
 800b0e0:	20000e50 	.word	0x20000e50
 800b0e4:	20000e64 	.word	0x20000e64
 800b0e8:	20000e7c 	.word	0x20000e7c
 800b0ec:	20000e48 	.word	0x20000e48
 800b0f0:	20000e4c 	.word	0x20000e4c

0800b0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0fa:	e019      	b.n	800b130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0fc:	f000 f9ee 	bl	800b4dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b100:	4b10      	ldr	r3, [pc, #64]	; (800b144 <prvCheckTasksWaitingTermination+0x50>)
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fad7 	bl	800a6c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b112:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <prvCheckTasksWaitingTermination+0x54>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3b01      	subs	r3, #1
 800b118:	4a0b      	ldr	r2, [pc, #44]	; (800b148 <prvCheckTasksWaitingTermination+0x54>)
 800b11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b11c:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <prvCheckTasksWaitingTermination+0x58>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <prvCheckTasksWaitingTermination+0x58>)
 800b124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b126:	f000 fa09 	bl	800b53c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f810 	bl	800b150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b130:	4b06      	ldr	r3, [pc, #24]	; (800b14c <prvCheckTasksWaitingTermination+0x58>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e1      	bne.n	800b0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b138:	bf00      	nop
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000e64 	.word	0x20000e64
 800b148:	20000e90 	.word	0x20000e90
 800b14c:	20000e78 	.word	0x20000e78

0800b150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b166:	4618      	mov	r0, r3
 800b168:	f000 fc24 	bl	800b9b4 <vPortFree>
				vPortFree( pxTCB );
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fc21 	bl	800b9b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b172:	e018      	b.n	800b1a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d103      	bne.n	800b186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fc18 	bl	800b9b4 <vPortFree>
	}
 800b184:	e00f      	b.n	800b1a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d00a      	beq.n	800b1a6 <prvDeleteTCB+0x56>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	60fb      	str	r3, [r7, #12]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <prvDeleteTCB+0x54>
	}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <prvResetNextTaskUnblockTime+0x38>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c0:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <prvResetNextTaskUnblockTime+0x3c>)
 800b1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1c8:	e008      	b.n	800b1dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ca:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <prvResetNextTaskUnblockTime+0x38>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	4a04      	ldr	r2, [pc, #16]	; (800b1ec <prvResetNextTaskUnblockTime+0x3c>)
 800b1da:	6013      	str	r3, [r2, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bc80      	pop	{r7}
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20000e48 	.word	0x20000e48
 800b1ec:	20000eb0 	.word	0x20000eb0

0800b1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <xTaskGetSchedulerState+0x34>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1fe:	2301      	movs	r3, #1
 800b200:	607b      	str	r3, [r7, #4]
 800b202:	e008      	b.n	800b216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b204:	4b08      	ldr	r3, [pc, #32]	; (800b228 <xTaskGetSchedulerState+0x38>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b20c:	2302      	movs	r3, #2
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e001      	b.n	800b216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b212:	2300      	movs	r3, #0
 800b214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b216:	687b      	ldr	r3, [r7, #4]
	}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bc80      	pop	{r7}
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	20000e9c 	.word	0x20000e9c
 800b228:	20000eb8 	.word	0x20000eb8

0800b22c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b236:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fa3c 	bl	800a6c0 <uxListRemove>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b24e:	4b24      	ldr	r3, [pc, #144]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	2201      	movs	r2, #1
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	43da      	mvns	r2, r3
 800b25c:	4b21      	ldr	r3, [pc, #132]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4013      	ands	r3, r2
 800b262:	4a20      	ldr	r2, [pc, #128]	; (800b2e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b264:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d10a      	bne.n	800b284 <prvAddCurrentTaskToDelayedList+0x58>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b274:	4b1a      	ldr	r3, [pc, #104]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3304      	adds	r3, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	481a      	ldr	r0, [pc, #104]	; (800b2e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b27e:	f7ff f9c4 	bl	800a60a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b282:	e026      	b.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4413      	add	r3, r2
 800b28a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b28c:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d209      	bcs.n	800b2b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b29c:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	f7ff f9d1 	bl	800a650 <vListInsert>
}
 800b2ae:	e010      	b.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b0:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	4b0a      	ldr	r3, [pc, #40]	; (800b2e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f7ff f9c7 	bl	800a650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2c2:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d202      	bcs.n	800b2d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2cc:	4a09      	ldr	r2, [pc, #36]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6013      	str	r3, [r2, #0]
}
 800b2d2:	bf00      	nop
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000e94 	.word	0x20000e94
 800b2e0:	20000d90 	.word	0x20000d90
 800b2e4:	20000e98 	.word	0x20000e98
 800b2e8:	20000e7c 	.word	0x20000e7c
 800b2ec:	20000e4c 	.word	0x20000e4c
 800b2f0:	20000e48 	.word	0x20000e48
 800b2f4:	20000eb0 	.word	0x20000eb0

0800b2f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3b04      	subs	r3, #4
 800b308:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3b04      	subs	r3, #4
 800b316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f023 0201 	bic.w	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3b04      	subs	r3, #4
 800b326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b328:	4a08      	ldr	r2, [pc, #32]	; (800b34c <pxPortInitialiseStack+0x54>)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3b14      	subs	r3, #20
 800b332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b20      	subs	r3, #32
 800b33e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b340:	68fb      	ldr	r3, [r7, #12]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	bc80      	pop	{r7}
 800b34a:	4770      	bx	lr
 800b34c:	0800b351 	.word	0x0800b351

0800b350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b356:	2300      	movs	r3, #0
 800b358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b35a:	4b12      	ldr	r3, [pc, #72]	; (800b3a4 <prvTaskExitError+0x54>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d00a      	beq.n	800b37a <prvTaskExitError+0x2a>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	60fb      	str	r3, [r7, #12]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <prvTaskExitError+0x28>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	60bb      	str	r3, [r7, #8]
}
 800b38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b38e:	bf00      	nop
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0fc      	beq.n	800b390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b396:	bf00      	nop
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000080 	.word	0x20000080
	...

0800b3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3b0:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <pxCurrentTCBConst2>)
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	6808      	ldr	r0, [r1, #0]
 800b3b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b3ba:	f380 8809 	msr	PSP, r0
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8811 	msr	BASEPRI, r0
 800b3ca:	f04e 0e0d 	orr.w	lr, lr, #13
 800b3ce:	4770      	bx	lr

0800b3d0 <pxCurrentTCBConst2>:
 800b3d0:	20000d90 	.word	0x20000d90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b3d8:	4806      	ldr	r0, [pc, #24]	; (800b3f4 <prvPortStartFirstTask+0x1c>)
 800b3da:	6800      	ldr	r0, [r0, #0]
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	f380 8808 	msr	MSP, r0
 800b3e2:	b662      	cpsie	i
 800b3e4:	b661      	cpsie	f
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	df00      	svc	0
 800b3f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3f2:	bf00      	nop
 800b3f4:	e000ed08 	.word	0xe000ed08

0800b3f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3fe:	4b32      	ldr	r3, [pc, #200]	; (800b4c8 <xPortStartScheduler+0xd0>)
 800b400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	b2db      	uxtb	r3, r3
 800b408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	22ff      	movs	r2, #255	; 0xff
 800b40e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b420:	b2da      	uxtb	r2, r3
 800b422:	4b2a      	ldr	r3, [pc, #168]	; (800b4cc <xPortStartScheduler+0xd4>)
 800b424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b426:	4b2a      	ldr	r3, [pc, #168]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b428:	2207      	movs	r2, #7
 800b42a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b42c:	e009      	b.n	800b442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b42e:	4b28      	ldr	r3, [pc, #160]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3b01      	subs	r3, #1
 800b434:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b442:	78fb      	ldrb	r3, [r7, #3]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b44a:	2b80      	cmp	r3, #128	; 0x80
 800b44c:	d0ef      	beq.n	800b42e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b44e:	4b20      	ldr	r3, [pc, #128]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1c3 0307 	rsb	r3, r3, #7
 800b456:	2b04      	cmp	r3, #4
 800b458:	d00a      	beq.n	800b470 <xPortStartScheduler+0x78>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	60bb      	str	r3, [r7, #8]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b470:	4b17      	ldr	r3, [pc, #92]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b47a:	4b15      	ldr	r3, [pc, #84]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b482:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <xPortStartScheduler+0xd8>)
 800b484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b48e:	4b11      	ldr	r3, [pc, #68]	; (800b4d4 <xPortStartScheduler+0xdc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a10      	ldr	r2, [pc, #64]	; (800b4d4 <xPortStartScheduler+0xdc>)
 800b494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <xPortStartScheduler+0xdc>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <xPortStartScheduler+0xdc>)
 800b4a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4a6:	f000 f985 	bl	800b7b4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4aa:	4b0b      	ldr	r3, [pc, #44]	; (800b4d8 <xPortStartScheduler+0xe0>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4b0:	f7ff ff92 	bl	800b3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4b4:	f7ff fd16 	bl	800aee4 <vTaskSwitchContext>
	prvTaskExitError();
 800b4b8:	f7ff ff4a 	bl	800b350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	e000e400 	.word	0xe000e400
 800b4cc:	20000ec8 	.word	0x20000ec8
 800b4d0:	20000ecc 	.word	0x20000ecc
 800b4d4:	e000ed20 	.word	0xe000ed20
 800b4d8:	20000080 	.word	0x20000080

0800b4dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	607b      	str	r3, [r7, #4]
}
 800b4f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4f6:	4b0f      	ldr	r3, [pc, #60]	; (800b534 <vPortEnterCritical+0x58>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	4a0d      	ldr	r2, [pc, #52]	; (800b534 <vPortEnterCritical+0x58>)
 800b4fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b500:	4b0c      	ldr	r3, [pc, #48]	; (800b534 <vPortEnterCritical+0x58>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d10f      	bne.n	800b528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <vPortEnterCritical+0x5c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <vPortEnterCritical+0x4c>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	603b      	str	r3, [r7, #0]
}
 800b524:	bf00      	nop
 800b526:	e7fe      	b.n	800b526 <vPortEnterCritical+0x4a>
	}
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bc80      	pop	{r7}
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000080 	.word	0x20000080
 800b538:	e000ed04 	.word	0xe000ed04

0800b53c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <vPortExitCritical+0x4c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10a      	bne.n	800b560 <vPortExitCritical+0x24>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	607b      	str	r3, [r7, #4]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b560:	4b09      	ldr	r3, [pc, #36]	; (800b588 <vPortExitCritical+0x4c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3b01      	subs	r3, #1
 800b566:	4a08      	ldr	r2, [pc, #32]	; (800b588 <vPortExitCritical+0x4c>)
 800b568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b56a:	4b07      	ldr	r3, [pc, #28]	; (800b588 <vPortExitCritical+0x4c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d105      	bne.n	800b57e <vPortExitCritical+0x42>
 800b572:	2300      	movs	r3, #0
 800b574:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b57c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	bc80      	pop	{r7}
 800b586:	4770      	bx	lr
 800b588:	20000080 	.word	0x20000080
 800b58c:	00000000 	.word	0x00000000

0800b590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b590:	f3ef 8009 	mrs	r0, PSP
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <pxCurrentTCBConst>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5a0:	6010      	str	r0, [r2, #0]
 800b5a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b5a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5aa:	f380 8811 	msr	BASEPRI, r0
 800b5ae:	f7ff fc99 	bl	800aee4 <vTaskSwitchContext>
 800b5b2:	f04f 0000 	mov.w	r0, #0
 800b5b6:	f380 8811 	msr	BASEPRI, r0
 800b5ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b5be:	6819      	ldr	r1, [r3, #0]
 800b5c0:	6808      	ldr	r0, [r1, #0]
 800b5c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5c6:	f380 8809 	msr	PSP, r0
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	4770      	bx	lr

0800b5d0 <pxCurrentTCBConst>:
 800b5d0:	20000d90 	.word	0x20000d90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	607b      	str	r3, [r7, #4]
}
 800b5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5f2:	f7ff fbbf 	bl	800ad74 <xTaskIncrementTick>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5fc:	4b06      	ldr	r3, [pc, #24]	; (800b618 <xPortSysTickHandler+0x40>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	2300      	movs	r3, #0
 800b606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	f383 8811 	msr	BASEPRI, r3
}
 800b60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4b5d      	ldr	r3, [pc, #372]	; (800b79c <vPortSuppressTicksAndSleep+0x180>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d902      	bls.n	800b634 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b62e:	4b5b      	ldr	r3, [pc, #364]	; (800b79c <vPortSuppressTicksAndSleep+0x180>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b634:	4b5a      	ldr	r3, [pc, #360]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a59      	ldr	r2, [pc, #356]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b640:	4b58      	ldr	r3, [pc, #352]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3b01      	subs	r3, #1
 800b648:	4957      	ldr	r1, [pc, #348]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b64a:	6809      	ldr	r1, [r1, #0]
 800b64c:	fb01 f303 	mul.w	r3, r1, r3
 800b650:	4413      	add	r3, r2
 800b652:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b654:	4b55      	ldr	r3, [pc, #340]	; (800b7ac <vPortSuppressTicksAndSleep+0x190>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	69fa      	ldr	r2, [r7, #28]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d904      	bls.n	800b668 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b65e:	4b53      	ldr	r3, [pc, #332]	; (800b7ac <vPortSuppressTicksAndSleep+0x190>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b668:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b66a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b66e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b672:	f7ff fcd1 	bl	800b018 <eTaskConfirmSleepModeStatus>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d110      	bne.n	800b69e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b67c:	4b49      	ldr	r3, [pc, #292]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b67e:	4a4c      	ldr	r2, [pc, #304]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b684:	4b46      	ldr	r3, [pc, #280]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a45      	ldr	r2, [pc, #276]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b68a:	f043 0301 	orr.w	r3, r3, #1
 800b68e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b690:	4b45      	ldr	r3, [pc, #276]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a46      	ldr	r2, [pc, #280]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b696:	3b01      	subs	r3, #1
 800b698:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b69a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b69c:	e07a      	b.n	800b794 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b69e:	4a44      	ldr	r2, [pc, #272]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6a4:	4b3f      	ldr	r3, [pc, #252]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b6aa:	4b3d      	ldr	r3, [pc, #244]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a3c      	ldr	r2, [pc, #240]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b6b0:	f043 0301 	orr.w	r3, r3, #1
 800b6b4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b6ba:	f107 030c 	add.w	r3, r7, #12
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f5 fd74 	bl	80011ac <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b6ca:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b6ce:	bf30      	wfi
				__asm volatile( "isb" );
 800b6d0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b6d4:	1d3b      	adds	r3, r7, #4
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f5 fd86 	bl	80011e8 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b6dc:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b6de:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b6e2:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b6e6:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b6e8:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b6ec:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b6f0:	4b2b      	ldr	r3, [pc, #172]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b6f2:	2206      	movs	r2, #6
 800b6f4:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b6f6:	4b2a      	ldr	r3, [pc, #168]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d01d      	beq.n	800b73e <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b702:	4b29      	ldr	r3, [pc, #164]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b708:	6819      	ldr	r1, [r3, #0]
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	1acb      	subs	r3, r1, r3
 800b70e:	4413      	add	r3, r2
 800b710:	3b01      	subs	r3, #1
 800b712:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b714:	4b25      	ldr	r3, [pc, #148]	; (800b7ac <vPortSuppressTicksAndSleep+0x190>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d304      	bcc.n	800b728 <vPortSuppressTicksAndSleep+0x10c>
 800b71e:	4b22      	ldr	r3, [pc, #136]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	429a      	cmp	r2, r3
 800b726:	d903      	bls.n	800b730 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b728:	4b1f      	ldr	r3, [pc, #124]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3b01      	subs	r3, #1
 800b73a:	61bb      	str	r3, [r7, #24]
 800b73c:	e018      	b.n	800b770 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a19      	ldr	r2, [pc, #100]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b742:	6812      	ldr	r2, [r2, #0]
 800b744:	fb03 f202 	mul.w	r2, r3, r2
 800b748:	4b16      	ldr	r3, [pc, #88]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b750:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	3301      	adds	r3, #1
 800b760:	4a11      	ldr	r2, [pc, #68]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	fb03 f202 	mul.w	r2, r3, r2
 800b768:	4911      	ldr	r1, [pc, #68]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b770:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <vPortSuppressTicksAndSleep+0x188>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b776:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <vPortSuppressTicksAndSleep+0x184>)
 800b77c:	f043 0301 	orr.w	r3, r3, #1
 800b780:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b782:	69b8      	ldr	r0, [r7, #24]
 800b784:	f7ff fad0 	bl	800ad28 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b788:	4b07      	ldr	r3, [pc, #28]	; (800b7a8 <vPortSuppressTicksAndSleep+0x18c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <vPortSuppressTicksAndSleep+0x194>)
 800b78e:	3b01      	subs	r3, #1
 800b790:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b792:	b662      	cpsie	i
	}
 800b794:	bf00      	nop
 800b796:	3720      	adds	r7, #32
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000ec0 	.word	0x20000ec0
 800b7a0:	e000e010 	.word	0xe000e010
 800b7a4:	e000e018 	.word	0xe000e018
 800b7a8:	20000ebc 	.word	0x20000ebc
 800b7ac:	20000ec4 	.word	0x20000ec4
 800b7b0:	e000e014 	.word	0xe000e014

0800b7b4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b7b8:	4b14      	ldr	r3, [pc, #80]	; (800b80c <vPortSetupTimerInterrupt+0x58>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a14      	ldr	r2, [pc, #80]	; (800b810 <vPortSetupTimerInterrupt+0x5c>)
 800b7be:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c2:	099b      	lsrs	r3, r3, #6
 800b7c4:	4a13      	ldr	r2, [pc, #76]	; (800b814 <vPortSetupTimerInterrupt+0x60>)
 800b7c6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b7c8:	4b12      	ldr	r3, [pc, #72]	; (800b814 <vPortSetupTimerInterrupt+0x60>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d4:	4a10      	ldr	r2, [pc, #64]	; (800b818 <vPortSetupTimerInterrupt+0x64>)
 800b7d6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b7d8:	4b10      	ldr	r3, [pc, #64]	; (800b81c <vPortSetupTimerInterrupt+0x68>)
 800b7da:	222d      	movs	r2, #45	; 0x2d
 800b7dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7de:	4b10      	ldr	r3, [pc, #64]	; (800b820 <vPortSetupTimerInterrupt+0x6c>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7e4:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <vPortSetupTimerInterrupt+0x70>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7ea:	4b08      	ldr	r3, [pc, #32]	; (800b80c <vPortSetupTimerInterrupt+0x58>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a08      	ldr	r2, [pc, #32]	; (800b810 <vPortSetupTimerInterrupt+0x5c>)
 800b7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f4:	099b      	lsrs	r3, r3, #6
 800b7f6:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <vPortSetupTimerInterrupt+0x74>)
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7fc:	4b08      	ldr	r3, [pc, #32]	; (800b820 <vPortSetupTimerInterrupt+0x6c>)
 800b7fe:	2207      	movs	r2, #7
 800b800:	601a      	str	r2, [r3, #0]
}
 800b802:	bf00      	nop
 800b804:	46bd      	mov	sp, r7
 800b806:	bc80      	pop	{r7}
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	20000000 	.word	0x20000000
 800b810:	10624dd3 	.word	0x10624dd3
 800b814:	20000ebc 	.word	0x20000ebc
 800b818:	20000ec0 	.word	0x20000ec0
 800b81c:	20000ec4 	.word	0x20000ec4
 800b820:	e000e010 	.word	0xe000e010
 800b824:	e000e018 	.word	0xe000e018
 800b828:	e000e014 	.word	0xe000e014

0800b82c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b834:	2300      	movs	r3, #0
 800b836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b838:	f7ff f992 	bl	800ab60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b83c:	4b58      	ldr	r3, [pc, #352]	; (800b9a0 <pvPortMalloc+0x174>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b844:	f000 f910 	bl	800ba68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b848:	4b56      	ldr	r3, [pc, #344]	; (800b9a4 <pvPortMalloc+0x178>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4013      	ands	r3, r2
 800b850:	2b00      	cmp	r3, #0
 800b852:	f040 808e 	bne.w	800b972 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d01d      	beq.n	800b898 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b85c:	2208      	movs	r2, #8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4413      	add	r3, r2
 800b862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d014      	beq.n	800b898 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f023 0307 	bic.w	r3, r3, #7
 800b874:	3308      	adds	r3, #8
 800b876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <pvPortMalloc+0x6c>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	617b      	str	r3, [r7, #20]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d069      	beq.n	800b972 <pvPortMalloc+0x146>
 800b89e:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <pvPortMalloc+0x17c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d864      	bhi.n	800b972 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8a8:	4b40      	ldr	r3, [pc, #256]	; (800b9ac <pvPortMalloc+0x180>)
 800b8aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8ac:	4b3f      	ldr	r3, [pc, #252]	; (800b9ac <pvPortMalloc+0x180>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8b2:	e004      	b.n	800b8be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d903      	bls.n	800b8d0 <pvPortMalloc+0xa4>
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1f1      	bne.n	800b8b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8d0:	4b33      	ldr	r3, [pc, #204]	; (800b9a0 <pvPortMalloc+0x174>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d04b      	beq.n	800b972 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2208      	movs	r2, #8
 800b8e0:	4413      	add	r3, r2
 800b8e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	1ad2      	subs	r2, r2, r3
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d91f      	bls.n	800b93c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4413      	add	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <pvPortMalloc+0xf8>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	613b      	str	r3, [r7, #16]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	1ad2      	subs	r2, r2, r3
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b936:	69b8      	ldr	r0, [r7, #24]
 800b938:	f000 f8f8 	bl	800bb2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b93c:	4b1a      	ldr	r3, [pc, #104]	; (800b9a8 <pvPortMalloc+0x17c>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <pvPortMalloc+0x17c>)
 800b948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b94a:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <pvPortMalloc+0x17c>)
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	4b18      	ldr	r3, [pc, #96]	; (800b9b0 <pvPortMalloc+0x184>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	429a      	cmp	r2, r3
 800b954:	d203      	bcs.n	800b95e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b956:	4b14      	ldr	r3, [pc, #80]	; (800b9a8 <pvPortMalloc+0x17c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a15      	ldr	r2, [pc, #84]	; (800b9b0 <pvPortMalloc+0x184>)
 800b95c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <pvPortMalloc+0x178>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	431a      	orrs	r2, r3
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	2200      	movs	r2, #0
 800b970:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b972:	f7ff f93d 	bl	800abf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f003 0307 	and.w	r3, r3, #7
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <pvPortMalloc+0x16a>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60fb      	str	r3, [r7, #12]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <pvPortMalloc+0x168>
	return pvReturn;
 800b996:	69fb      	ldr	r3, [r7, #28]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3728      	adds	r7, #40	; 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20002e90 	.word	0x20002e90
 800b9a4:	20002e9c 	.word	0x20002e9c
 800b9a8:	20002e94 	.word	0x20002e94
 800b9ac:	20002e88 	.word	0x20002e88
 800b9b0:	20002e98 	.word	0x20002e98

0800b9b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d048      	beq.n	800ba58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9c6:	2308      	movs	r3, #8
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	4b21      	ldr	r3, [pc, #132]	; (800ba60 <vPortFree+0xac>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4013      	ands	r3, r2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <vPortFree+0x44>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	60fb      	str	r3, [r7, #12]
}
 800b9f4:	bf00      	nop
 800b9f6:	e7fe      	b.n	800b9f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <vPortFree+0x62>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60bb      	str	r3, [r7, #8]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	4b11      	ldr	r3, [pc, #68]	; (800ba60 <vPortFree+0xac>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4013      	ands	r3, r2
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d019      	beq.n	800ba58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d115      	bne.n	800ba58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <vPortFree+0xac>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	43db      	mvns	r3, r3
 800ba36:	401a      	ands	r2, r3
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba3c:	f7ff f890 	bl	800ab60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <vPortFree+0xb0>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4413      	add	r3, r2
 800ba4a:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <vPortFree+0xb0>)
 800ba4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba4e:	6938      	ldr	r0, [r7, #16]
 800ba50:	f000 f86c 	bl	800bb2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ba54:	f7ff f8cc 	bl	800abf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba58:	bf00      	nop
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	20002e9c 	.word	0x20002e9c
 800ba64:	20002e94 	.word	0x20002e94

0800ba68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba6e:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800ba72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba74:	4b27      	ldr	r3, [pc, #156]	; (800bb14 <prvHeapInit+0xac>)
 800ba76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00c      	beq.n	800ba9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3307      	adds	r3, #7
 800ba86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 0307 	bic.w	r3, r3, #7
 800ba8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	4a1f      	ldr	r2, [pc, #124]	; (800bb14 <prvHeapInit+0xac>)
 800ba98:	4413      	add	r3, r2
 800ba9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baa0:	4a1d      	ldr	r2, [pc, #116]	; (800bb18 <prvHeapInit+0xb0>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800baa6:	4b1c      	ldr	r3, [pc, #112]	; (800bb18 <prvHeapInit+0xb0>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	4413      	add	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bab4:	2208      	movs	r2, #8
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f023 0307 	bic.w	r3, r3, #7
 800bac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	4a15      	ldr	r2, [pc, #84]	; (800bb1c <prvHeapInit+0xb4>)
 800bac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800baca:	4b14      	ldr	r3, [pc, #80]	; (800bb1c <prvHeapInit+0xb4>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2200      	movs	r2, #0
 800bad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <prvHeapInit+0xb4>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	1ad2      	subs	r2, r2, r3
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bae8:	4b0c      	ldr	r3, [pc, #48]	; (800bb1c <prvHeapInit+0xb4>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	4a0a      	ldr	r2, [pc, #40]	; (800bb20 <prvHeapInit+0xb8>)
 800baf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <prvHeapInit+0xbc>)
 800bafe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb00:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <prvHeapInit+0xc0>)
 800bb02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb06:	601a      	str	r2, [r3, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000ed0 	.word	0x20000ed0
 800bb18:	20002e88 	.word	0x20002e88
 800bb1c:	20002e90 	.word	0x20002e90
 800bb20:	20002e98 	.word	0x20002e98
 800bb24:	20002e94 	.word	0x20002e94
 800bb28:	20002e9c 	.word	0x20002e9c

0800bb2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb34:	4b27      	ldr	r3, [pc, #156]	; (800bbd4 <prvInsertBlockIntoFreeList+0xa8>)
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	e002      	b.n	800bb40 <prvInsertBlockIntoFreeList+0x14>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d8f7      	bhi.n	800bb3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	4413      	add	r3, r2
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d108      	bne.n	800bb6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	441a      	add	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	441a      	add	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d118      	bne.n	800bbb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <prvInsertBlockIntoFreeList+0xac>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d00d      	beq.n	800bbaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	441a      	add	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	e008      	b.n	800bbbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <prvInsertBlockIntoFreeList+0xac>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	e003      	b.n	800bbbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d002      	beq.n	800bbca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbca:	bf00      	nop
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr
 800bbd4:	20002e88 	.word	0x20002e88
 800bbd8:	20002e90 	.word	0x20002e90

0800bbdc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	33f1      	adds	r3, #241	; 0xf1
 800bbe8:	2210      	movs	r2, #16
 800bbea:	2100      	movs	r1, #0
 800bbec:	4618      	mov	r0, r3
 800bbee:	f00d f95d 	bl	8018eac <memset1>
    ctx->M_n = 0;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	22f0      	movs	r2, #240	; 0xf0
 800bbfe:	2100      	movs	r1, #0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f00d f953 	bl	8018eac <memset1>
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2110      	movs	r1, #16
 800bc1e:	6838      	ldr	r0, [r7, #0]
 800bc20:	f000 fe5c 	bl	800c8dc <lorawan_aes_set_key>
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08c      	sub	sp, #48	; 0x30
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 80a1 	beq.w	800bd86 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc4a:	f1c3 0310 	rsb	r3, r3, #16
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	4293      	cmp	r3, r2
 800bc52:	bf28      	it	cs
 800bc54:	4613      	movcs	r3, r2
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc64:	4413      	add	r3, r2
 800bc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc68:	b292      	uxth	r2, r2
 800bc6a:	68b9      	ldr	r1, [r7, #8]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f00d f8e2 	bl	8018e36 <memcpy1>
        ctx->M_n += mlen;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	441a      	add	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc88:	2b0f      	cmp	r3, #15
 800bc8a:	f240 808d 	bls.w	800bda8 <AES_CMAC_Update+0x17c>
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	429a      	cmp	r2, r3
 800bc94:	f000 8088 	beq.w	800bda8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bc98:	2300      	movs	r3, #0
 800bc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc9c:	e015      	b.n	800bcca <AES_CMAC_Update+0x9e>
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca2:	4413      	add	r3, r2
 800bca4:	33f1      	adds	r3, #241	; 0xf1
 800bca6:	781a      	ldrb	r2, [r3, #0]
 800bca8:	68f9      	ldr	r1, [r7, #12]
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	440b      	add	r3, r1
 800bcae:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	4053      	eors	r3, r2
 800bcb6:	b2d9      	uxtb	r1, r3
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	4413      	add	r3, r2
 800bcbe:	33f1      	adds	r3, #241	; 0xf1
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	2b0f      	cmp	r3, #15
 800bcce:	dde6      	ble.n	800bc9e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bcd6:	f107 0314 	add.w	r3, r7, #20
 800bcda:	2210      	movs	r2, #16
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f00d f8aa 	bl	8018e36 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	f107 0114 	add.w	r1, r7, #20
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 fed3 	bl	800ca98 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	33f1      	adds	r3, #241	; 0xf1
 800bcf6:	f107 0114 	add.w	r1, r7, #20
 800bcfa:	2210      	movs	r2, #16
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f00d f89a 	bl	8018e36 <memcpy1>

        data += mlen;
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	4413      	add	r3, r2
 800bd08:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800bd12:	e038      	b.n	800bd86 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800bd14:	2300      	movs	r3, #0
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd18:	e013      	b.n	800bd42 <AES_CMAC_Update+0x116>
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	4413      	add	r3, r2
 800bd20:	33f1      	adds	r3, #241	; 0xf1
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	440b      	add	r3, r1
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	4053      	eors	r3, r2
 800bd2e:	b2d9      	uxtb	r1, r3
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	4413      	add	r3, r2
 800bd36:	33f1      	adds	r3, #241	; 0xf1
 800bd38:	460a      	mov	r2, r1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	3301      	adds	r3, #1
 800bd40:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	2b0f      	cmp	r3, #15
 800bd46:	dde8      	ble.n	800bd1a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bd4e:	f107 0314 	add.w	r3, r7, #20
 800bd52:	2210      	movs	r2, #16
 800bd54:	4618      	mov	r0, r3
 800bd56:	f00d f86e 	bl	8018e36 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	f107 0114 	add.w	r1, r7, #20
 800bd60:	f107 0314 	add.w	r3, r7, #20
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fe97 	bl	800ca98 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	33f1      	adds	r3, #241	; 0xf1
 800bd6e:	f107 0114 	add.w	r1, r7, #20
 800bd72:	2210      	movs	r2, #16
 800bd74:	4618      	mov	r0, r3
 800bd76:	f00d f85e 	bl	8018e36 <memcpy1>

        data += 16;
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3b10      	subs	r3, #16
 800bd84:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b10      	cmp	r3, #16
 800bd8a:	d8c3      	bhi.n	800bd14 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	b292      	uxth	r2, r2
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f00d f84c 	bl	8018e36 <memcpy1>
    ctx->M_n = len;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bda6:	e000      	b.n	800bdaa <AES_CMAC_Update+0x17e>
            return;
 800bda8:	bf00      	nop
}
 800bdaa:	3730      	adds	r7, #48	; 0x30
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b092      	sub	sp, #72	; 0x48
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800bdba:	f107 031c 	add.w	r3, r7, #28
 800bdbe:	2210      	movs	r2, #16
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f00d f872 	bl	8018eac <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	f107 011c 	add.w	r1, r7, #28
 800bdce:	f107 031c 	add.w	r3, r7, #28
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fe60 	bl	800ca98 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800bdd8:	7f3b      	ldrb	r3, [r7, #28]
 800bdda:	b25b      	sxtb	r3, r3
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	da30      	bge.n	800be42 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800bde0:	2300      	movs	r3, #0
 800bde2:	647b      	str	r3, [r7, #68]	; 0x44
 800bde4:	e01b      	b.n	800be1e <AES_CMAC_Final+0x6e>
 800bde6:	f107 021c 	add.w	r2, r7, #28
 800bdea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdec:	4413      	add	r3, r2
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	b25a      	sxtb	r2, r3
 800bdf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	3348      	adds	r3, #72	; 0x48
 800bdfa:	443b      	add	r3, r7
 800bdfc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be00:	09db      	lsrs	r3, r3, #7
 800be02:	b2db      	uxtb	r3, r3
 800be04:	b25b      	sxtb	r3, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	b2d9      	uxtb	r1, r3
 800be0c:	f107 021c 	add.w	r2, r7, #28
 800be10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be12:	4413      	add	r3, r2
 800be14:	460a      	mov	r2, r1
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be1a:	3301      	adds	r3, #1
 800be1c:	647b      	str	r3, [r7, #68]	; 0x44
 800be1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be20:	2b0e      	cmp	r3, #14
 800be22:	dde0      	ble.n	800bde6 <AES_CMAC_Final+0x36>
 800be24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800be30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be34:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800be38:	43db      	mvns	r3, r3
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be40:	e027      	b.n	800be92 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800be42:	2300      	movs	r3, #0
 800be44:	643b      	str	r3, [r7, #64]	; 0x40
 800be46:	e01b      	b.n	800be80 <AES_CMAC_Final+0xd0>
 800be48:	f107 021c 	add.w	r2, r7, #28
 800be4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	b25a      	sxtb	r2, r3
 800be56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be58:	3301      	adds	r3, #1
 800be5a:	3348      	adds	r3, #72	; 0x48
 800be5c:	443b      	add	r3, r7
 800be5e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800be62:	09db      	lsrs	r3, r3, #7
 800be64:	b2db      	uxtb	r3, r3
 800be66:	b25b      	sxtb	r3, r3
 800be68:	4313      	orrs	r3, r2
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	b2d9      	uxtb	r1, r3
 800be6e:	f107 021c 	add.w	r2, r7, #28
 800be72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be74:	4413      	add	r3, r2
 800be76:	460a      	mov	r2, r1
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7c:	3301      	adds	r3, #1
 800be7e:	643b      	str	r3, [r7, #64]	; 0x40
 800be80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be82:	2b0e      	cmp	r3, #14
 800be84:	dde0      	ble.n	800be48 <AES_CMAC_Final+0x98>
 800be86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800be98:	2b10      	cmp	r3, #16
 800be9a:	d11d      	bne.n	800bed8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800be9c:	2300      	movs	r3, #0
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea0:	e016      	b.n	800bed0 <AES_CMAC_Final+0x120>
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea6:	4413      	add	r3, r2
 800bea8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800beac:	781a      	ldrb	r2, [r3, #0]
 800beae:	f107 011c 	add.w	r1, r7, #28
 800beb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb4:	440b      	add	r3, r1
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4053      	eors	r3, r2
 800beba:	b2d9      	uxtb	r1, r3
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec0:	4413      	add	r3, r2
 800bec2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bec6:	460a      	mov	r2, r1
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800becc:	3301      	adds	r3, #1
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed2:	2b0f      	cmp	r3, #15
 800bed4:	dde5      	ble.n	800bea2 <AES_CMAC_Final+0xf2>
 800bed6:	e096      	b.n	800c006 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bed8:	7f3b      	ldrb	r3, [r7, #28]
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da30      	bge.n	800bf42 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bee0:	2300      	movs	r3, #0
 800bee2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bee4:	e01b      	b.n	800bf1e <AES_CMAC_Final+0x16e>
 800bee6:	f107 021c 	add.w	r2, r7, #28
 800beea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beec:	4413      	add	r3, r2
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	b25a      	sxtb	r2, r3
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	3301      	adds	r3, #1
 800bef8:	3348      	adds	r3, #72	; 0x48
 800befa:	443b      	add	r3, r7
 800befc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf00:	09db      	lsrs	r3, r3, #7
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	b25b      	sxtb	r3, r3
 800bf0a:	b2d9      	uxtb	r1, r3
 800bf0c:	f107 021c 	add.w	r2, r7, #28
 800bf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf12:	4413      	add	r3, r2
 800bf14:	460a      	mov	r2, r1
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	2b0e      	cmp	r3, #14
 800bf22:	dde0      	ble.n	800bee6 <AES_CMAC_Final+0x136>
 800bf24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800bf30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf34:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bf38:	43db      	mvns	r3, r3
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf40:	e027      	b.n	800bf92 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800bf42:	2300      	movs	r3, #0
 800bf44:	637b      	str	r3, [r7, #52]	; 0x34
 800bf46:	e01b      	b.n	800bf80 <AES_CMAC_Final+0x1d0>
 800bf48:	f107 021c 	add.w	r2, r7, #28
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	b25a      	sxtb	r2, r3
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	3301      	adds	r3, #1
 800bf5a:	3348      	adds	r3, #72	; 0x48
 800bf5c:	443b      	add	r3, r7
 800bf5e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bf62:	09db      	lsrs	r3, r3, #7
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	b25b      	sxtb	r3, r3
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	b25b      	sxtb	r3, r3
 800bf6c:	b2d9      	uxtb	r1, r3
 800bf6e:	f107 021c 	add.w	r2, r7, #28
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf74:	4413      	add	r3, r2
 800bf76:	460a      	mov	r2, r1
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf82:	2b0e      	cmp	r3, #14
 800bf84:	dde0      	ble.n	800bf48 <AES_CMAC_Final+0x198>
 800bf86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	2280      	movs	r2, #128	; 0x80
 800bf9e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800bfa2:	e007      	b.n	800bfb4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	4413      	add	r3, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bfc8:	2b0f      	cmp	r3, #15
 800bfca:	d9eb      	bls.n	800bfa4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800bfcc:	2300      	movs	r3, #0
 800bfce:	633b      	str	r3, [r7, #48]	; 0x30
 800bfd0:	e016      	b.n	800c000 <AES_CMAC_Final+0x250>
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	f107 011c 	add.w	r1, r7, #28
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	440b      	add	r3, r1
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	4053      	eors	r3, r2
 800bfea:	b2d9      	uxtb	r1, r3
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	4413      	add	r3, r2
 800bff2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bff6:	460a      	mov	r2, r1
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	3301      	adds	r3, #1
 800bffe:	633b      	str	r3, [r7, #48]	; 0x30
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	2b0f      	cmp	r3, #15
 800c004:	dde5      	ble.n	800bfd2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c006:	2300      	movs	r3, #0
 800c008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c00a:	e015      	b.n	800c038 <AES_CMAC_Final+0x288>
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	4413      	add	r3, r2
 800c012:	33f1      	adds	r3, #241	; 0xf1
 800c014:	781a      	ldrb	r2, [r3, #0]
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	440b      	add	r3, r1
 800c01c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	4053      	eors	r3, r2
 800c024:	b2d9      	uxtb	r1, r3
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	4413      	add	r3, r2
 800c02c:	33f1      	adds	r3, #241	; 0xf1
 800c02e:	460a      	mov	r2, r1
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	3301      	adds	r3, #1
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	2b0f      	cmp	r3, #15
 800c03c:	dde6      	ble.n	800c00c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c044:	f107 030c 	add.w	r3, r7, #12
 800c048:	2210      	movs	r2, #16
 800c04a:	4618      	mov	r0, r3
 800c04c:	f00c fef3 	bl	8018e36 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	f107 030c 	add.w	r3, r7, #12
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 fd1d 	bl	800ca98 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c05e:	f107 031c 	add.w	r3, r7, #28
 800c062:	2210      	movs	r2, #16
 800c064:	2100      	movs	r1, #0
 800c066:	4618      	mov	r0, r3
 800c068:	f00c ff20 	bl	8018eac <memset1>
}
 800c06c:	bf00      	nop
 800c06e:	3748      	adds	r7, #72	; 0x48
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	781a      	ldrb	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3301      	adds	r3, #1
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	7852      	ldrb	r2, [r2, #1]
 800c08e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3302      	adds	r3, #2
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	7892      	ldrb	r2, [r2, #2]
 800c098:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3303      	adds	r3, #3
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	78d2      	ldrb	r2, [r2, #3]
 800c0a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	7912      	ldrb	r2, [r2, #4]
 800c0ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3305      	adds	r3, #5
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	7952      	ldrb	r2, [r2, #5]
 800c0b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3306      	adds	r3, #6
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	7992      	ldrb	r2, [r2, #6]
 800c0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3307      	adds	r3, #7
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	79d2      	ldrb	r2, [r2, #7]
 800c0ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	7a12      	ldrb	r2, [r2, #8]
 800c0d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	3309      	adds	r3, #9
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	7a52      	ldrb	r2, [r2, #9]
 800c0de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	330a      	adds	r3, #10
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	7a92      	ldrb	r2, [r2, #10]
 800c0e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	330b      	adds	r3, #11
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	7ad2      	ldrb	r2, [r2, #11]
 800c0f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	330c      	adds	r3, #12
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	7b12      	ldrb	r2, [r2, #12]
 800c0fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	330d      	adds	r3, #13
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	7b52      	ldrb	r2, [r2, #13]
 800c106:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	330e      	adds	r3, #14
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	7b92      	ldrb	r2, [r2, #14]
 800c110:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	330f      	adds	r3, #15
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	7bd2      	ldrb	r2, [r2, #15]
 800c11a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	bc80      	pop	{r7}
 800c124:	4770      	bx	lr

0800c126 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c126:	b480      	push	{r7}
 800c128:	b085      	sub	sp, #20
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	4613      	mov	r3, r2
 800c132:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c134:	e007      	b.n	800c146 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	1c53      	adds	r3, r2, #1
 800c13a:	60bb      	str	r3, [r7, #8]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	1c59      	adds	r1, r3, #1
 800c140:	60f9      	str	r1, [r7, #12]
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c146:	79fb      	ldrb	r3, [r7, #7]
 800c148:	1e5a      	subs	r2, r3, #1
 800c14a:	71fa      	strb	r2, [r7, #7]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1f2      	bne.n	800c136 <copy_block_nn+0x10>
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr

0800c15c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	781a      	ldrb	r2, [r3, #0]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	4053      	eors	r3, r2
 800c170:	b2da      	uxtb	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3301      	adds	r3, #1
 800c17a:	7819      	ldrb	r1, [r3, #0]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	781a      	ldrb	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3301      	adds	r3, #1
 800c186:	404a      	eors	r2, r1
 800c188:	b2d2      	uxtb	r2, r2
 800c18a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3302      	adds	r3, #2
 800c190:	7819      	ldrb	r1, [r3, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	3302      	adds	r3, #2
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3302      	adds	r3, #2
 800c19c:	404a      	eors	r2, r1
 800c19e:	b2d2      	uxtb	r2, r2
 800c1a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3303      	adds	r3, #3
 800c1a6:	7819      	ldrb	r1, [r3, #0]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	3303      	adds	r3, #3
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3303      	adds	r3, #3
 800c1b2:	404a      	eors	r2, r1
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	7819      	ldrb	r1, [r3, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	404a      	eors	r2, r1
 800c1ca:	b2d2      	uxtb	r2, r2
 800c1cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	3305      	adds	r3, #5
 800c1d2:	7819      	ldrb	r1, [r3, #0]
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	3305      	adds	r3, #5
 800c1d8:	781a      	ldrb	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3305      	adds	r3, #5
 800c1de:	404a      	eors	r2, r1
 800c1e0:	b2d2      	uxtb	r2, r2
 800c1e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3306      	adds	r3, #6
 800c1e8:	7819      	ldrb	r1, [r3, #0]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	3306      	adds	r3, #6
 800c1ee:	781a      	ldrb	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3306      	adds	r3, #6
 800c1f4:	404a      	eors	r2, r1
 800c1f6:	b2d2      	uxtb	r2, r2
 800c1f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3307      	adds	r3, #7
 800c1fe:	7819      	ldrb	r1, [r3, #0]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	3307      	adds	r3, #7
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3307      	adds	r3, #7
 800c20a:	404a      	eors	r2, r1
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3308      	adds	r3, #8
 800c214:	7819      	ldrb	r1, [r3, #0]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	3308      	adds	r3, #8
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3308      	adds	r3, #8
 800c220:	404a      	eors	r2, r1
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3309      	adds	r3, #9
 800c22a:	7819      	ldrb	r1, [r3, #0]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	3309      	adds	r3, #9
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	3309      	adds	r3, #9
 800c236:	404a      	eors	r2, r1
 800c238:	b2d2      	uxtb	r2, r2
 800c23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	330a      	adds	r3, #10
 800c240:	7819      	ldrb	r1, [r3, #0]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	330a      	adds	r3, #10
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	330a      	adds	r3, #10
 800c24c:	404a      	eors	r2, r1
 800c24e:	b2d2      	uxtb	r2, r2
 800c250:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	330b      	adds	r3, #11
 800c256:	7819      	ldrb	r1, [r3, #0]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	330b      	adds	r3, #11
 800c25c:	781a      	ldrb	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	330b      	adds	r3, #11
 800c262:	404a      	eors	r2, r1
 800c264:	b2d2      	uxtb	r2, r2
 800c266:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	330c      	adds	r3, #12
 800c26c:	7819      	ldrb	r1, [r3, #0]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	330c      	adds	r3, #12
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	330c      	adds	r3, #12
 800c278:	404a      	eors	r2, r1
 800c27a:	b2d2      	uxtb	r2, r2
 800c27c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	330d      	adds	r3, #13
 800c282:	7819      	ldrb	r1, [r3, #0]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	330d      	adds	r3, #13
 800c288:	781a      	ldrb	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	330d      	adds	r3, #13
 800c28e:	404a      	eors	r2, r1
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	330e      	adds	r3, #14
 800c298:	7819      	ldrb	r1, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	330e      	adds	r3, #14
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	330e      	adds	r3, #14
 800c2a4:	404a      	eors	r2, r1
 800c2a6:	b2d2      	uxtb	r2, r2
 800c2a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	330f      	adds	r3, #15
 800c2ae:	7819      	ldrb	r1, [r3, #0]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	330f      	adds	r3, #15
 800c2b4:	781a      	ldrb	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	330f      	adds	r3, #15
 800c2ba:	404a      	eors	r2, r1
 800c2bc:	b2d2      	uxtb	r2, r2
 800c2be:	701a      	strb	r2, [r3, #0]
#endif
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bc80      	pop	{r7}
 800c2c8:	4770      	bx	lr

0800c2ca <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b085      	sub	sp, #20
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	4053      	eors	r3, r2
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	7819      	ldrb	r1, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	404a      	eors	r2, r1
 800c2f8:	b2d2      	uxtb	r2, r2
 800c2fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	3302      	adds	r3, #2
 800c300:	7819      	ldrb	r1, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3302      	adds	r3, #2
 800c306:	781a      	ldrb	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3302      	adds	r3, #2
 800c30c:	404a      	eors	r2, r1
 800c30e:	b2d2      	uxtb	r2, r2
 800c310:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	3303      	adds	r3, #3
 800c316:	7819      	ldrb	r1, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3303      	adds	r3, #3
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3303      	adds	r3, #3
 800c322:	404a      	eors	r2, r1
 800c324:	b2d2      	uxtb	r2, r2
 800c326:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	3304      	adds	r3, #4
 800c32c:	7819      	ldrb	r1, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	3304      	adds	r3, #4
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3304      	adds	r3, #4
 800c338:	404a      	eors	r2, r1
 800c33a:	b2d2      	uxtb	r2, r2
 800c33c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	3305      	adds	r3, #5
 800c342:	7819      	ldrb	r1, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	3305      	adds	r3, #5
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3305      	adds	r3, #5
 800c34e:	404a      	eors	r2, r1
 800c350:	b2d2      	uxtb	r2, r2
 800c352:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3306      	adds	r3, #6
 800c358:	7819      	ldrb	r1, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3306      	adds	r3, #6
 800c35e:	781a      	ldrb	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3306      	adds	r3, #6
 800c364:	404a      	eors	r2, r1
 800c366:	b2d2      	uxtb	r2, r2
 800c368:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	3307      	adds	r3, #7
 800c36e:	7819      	ldrb	r1, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3307      	adds	r3, #7
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3307      	adds	r3, #7
 800c37a:	404a      	eors	r2, r1
 800c37c:	b2d2      	uxtb	r2, r2
 800c37e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	3308      	adds	r3, #8
 800c384:	7819      	ldrb	r1, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3308      	adds	r3, #8
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3308      	adds	r3, #8
 800c390:	404a      	eors	r2, r1
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3309      	adds	r3, #9
 800c39a:	7819      	ldrb	r1, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	3309      	adds	r3, #9
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3309      	adds	r3, #9
 800c3a6:	404a      	eors	r2, r1
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	330a      	adds	r3, #10
 800c3b0:	7819      	ldrb	r1, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	330a      	adds	r3, #10
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	330a      	adds	r3, #10
 800c3bc:	404a      	eors	r2, r1
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	330b      	adds	r3, #11
 800c3c6:	7819      	ldrb	r1, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	330b      	adds	r3, #11
 800c3cc:	781a      	ldrb	r2, [r3, #0]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	330b      	adds	r3, #11
 800c3d2:	404a      	eors	r2, r1
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	330c      	adds	r3, #12
 800c3dc:	7819      	ldrb	r1, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	330c      	adds	r3, #12
 800c3e2:	781a      	ldrb	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	404a      	eors	r2, r1
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	330d      	adds	r3, #13
 800c3f2:	7819      	ldrb	r1, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	330d      	adds	r3, #13
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	330d      	adds	r3, #13
 800c3fe:	404a      	eors	r2, r1
 800c400:	b2d2      	uxtb	r2, r2
 800c402:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	330e      	adds	r3, #14
 800c408:	7819      	ldrb	r1, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	330e      	adds	r3, #14
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	330e      	adds	r3, #14
 800c414:	404a      	eors	r2, r1
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	330f      	adds	r3, #15
 800c41e:	7819      	ldrb	r1, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	330f      	adds	r3, #15
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	330f      	adds	r3, #15
 800c42a:	404a      	eors	r2, r1
 800c42c:	b2d2      	uxtb	r2, r2
 800c42e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c430:	bf00      	nop
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	bc80      	pop	{r7}
 800c438:	4770      	bx	lr

0800c43a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff fe88 	bl	800c15c <xor_block>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	4b48      	ldr	r3, [pc, #288]	; (800c584 <shift_sub_rows+0x130>)
 800c464:	5c9a      	ldrb	r2, [r3, r2]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3304      	adds	r3, #4
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	4619      	mov	r1, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3304      	adds	r3, #4
 800c476:	4a43      	ldr	r2, [pc, #268]	; (800c584 <shift_sub_rows+0x130>)
 800c478:	5c52      	ldrb	r2, [r2, r1]
 800c47a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3308      	adds	r3, #8
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	4619      	mov	r1, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3308      	adds	r3, #8
 800c488:	4a3e      	ldr	r2, [pc, #248]	; (800c584 <shift_sub_rows+0x130>)
 800c48a:	5c52      	ldrb	r2, [r2, r1]
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	330c      	adds	r3, #12
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	4619      	mov	r1, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	330c      	adds	r3, #12
 800c49a:	4a3a      	ldr	r2, [pc, #232]	; (800c584 <shift_sub_rows+0x130>)
 800c49c:	5c52      	ldrb	r2, [r2, r1]
 800c49e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	785b      	ldrb	r3, [r3, #1]
 800c4a4:	73fb      	strb	r3, [r7, #15]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3305      	adds	r3, #5
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	4a34      	ldr	r2, [pc, #208]	; (800c584 <shift_sub_rows+0x130>)
 800c4b4:	5c52      	ldrb	r2, [r2, r1]
 800c4b6:	701a      	strb	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3309      	adds	r3, #9
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3305      	adds	r3, #5
 800c4c4:	4a2f      	ldr	r2, [pc, #188]	; (800c584 <shift_sub_rows+0x130>)
 800c4c6:	5c52      	ldrb	r2, [r2, r1]
 800c4c8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	330d      	adds	r3, #13
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3309      	adds	r3, #9
 800c4d6:	4a2b      	ldr	r2, [pc, #172]	; (800c584 <shift_sub_rows+0x130>)
 800c4d8:	5c52      	ldrb	r2, [r2, r1]
 800c4da:	701a      	strb	r2, [r3, #0]
 800c4dc:	7bfa      	ldrb	r2, [r7, #15]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	330d      	adds	r3, #13
 800c4e2:	4928      	ldr	r1, [pc, #160]	; (800c584 <shift_sub_rows+0x130>)
 800c4e4:	5c8a      	ldrb	r2, [r1, r2]
 800c4e6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	789b      	ldrb	r3, [r3, #2]
 800c4ec:	73fb      	strb	r3, [r7, #15]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	330a      	adds	r3, #10
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3302      	adds	r3, #2
 800c4fa:	4a22      	ldr	r2, [pc, #136]	; (800c584 <shift_sub_rows+0x130>)
 800c4fc:	5c52      	ldrb	r2, [r2, r1]
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	7bfa      	ldrb	r2, [r7, #15]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	330a      	adds	r3, #10
 800c506:	491f      	ldr	r1, [pc, #124]	; (800c584 <shift_sub_rows+0x130>)
 800c508:	5c8a      	ldrb	r2, [r1, r2]
 800c50a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	799b      	ldrb	r3, [r3, #6]
 800c510:	73fb      	strb	r3, [r7, #15]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	330e      	adds	r3, #14
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	4619      	mov	r1, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3306      	adds	r3, #6
 800c51e:	4a19      	ldr	r2, [pc, #100]	; (800c584 <shift_sub_rows+0x130>)
 800c520:	5c52      	ldrb	r2, [r2, r1]
 800c522:	701a      	strb	r2, [r3, #0]
 800c524:	7bfa      	ldrb	r2, [r7, #15]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	330e      	adds	r3, #14
 800c52a:	4916      	ldr	r1, [pc, #88]	; (800c584 <shift_sub_rows+0x130>)
 800c52c:	5c8a      	ldrb	r2, [r1, r2]
 800c52e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7bdb      	ldrb	r3, [r3, #15]
 800c534:	73fb      	strb	r3, [r7, #15]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	330b      	adds	r3, #11
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	4619      	mov	r1, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	330f      	adds	r3, #15
 800c542:	4a10      	ldr	r2, [pc, #64]	; (800c584 <shift_sub_rows+0x130>)
 800c544:	5c52      	ldrb	r2, [r2, r1]
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3307      	adds	r3, #7
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	4619      	mov	r1, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	330b      	adds	r3, #11
 800c554:	4a0b      	ldr	r2, [pc, #44]	; (800c584 <shift_sub_rows+0x130>)
 800c556:	5c52      	ldrb	r2, [r2, r1]
 800c558:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3303      	adds	r3, #3
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	4619      	mov	r1, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3307      	adds	r3, #7
 800c566:	4a07      	ldr	r2, [pc, #28]	; (800c584 <shift_sub_rows+0x130>)
 800c568:	5c52      	ldrb	r2, [r2, r1]
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	7bfa      	ldrb	r2, [r7, #15]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3303      	adds	r3, #3
 800c572:	4904      	ldr	r1, [pc, #16]	; (800c584 <shift_sub_rows+0x130>)
 800c574:	5c8a      	ldrb	r2, [r1, r2]
 800c576:	701a      	strb	r2, [r3, #0]
}
 800c578:	bf00      	nop
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bc80      	pop	{r7}
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	0801e27c 	.word	0x0801e27c

0800c588 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c590:	f107 0308 	add.w	r3, r7, #8
 800c594:	6879      	ldr	r1, [r7, #4]
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff fd6c 	bl	800c074 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c59c:	7a3b      	ldrb	r3, [r7, #8]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b9a      	ldr	r3, [pc, #616]	; (800c80c <mix_sub_columns+0x284>)
 800c5a2:	5c9a      	ldrb	r2, [r3, r2]
 800c5a4:	7b7b      	ldrb	r3, [r7, #13]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4b99      	ldr	r3, [pc, #612]	; (800c810 <mix_sub_columns+0x288>)
 800c5aa:	5c5b      	ldrb	r3, [r3, r1]
 800c5ac:	4053      	eors	r3, r2
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	7cbb      	ldrb	r3, [r7, #18]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4b97      	ldr	r3, [pc, #604]	; (800c814 <mix_sub_columns+0x28c>)
 800c5b6:	5c5b      	ldrb	r3, [r3, r1]
 800c5b8:	4053      	eors	r3, r2
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4b94      	ldr	r3, [pc, #592]	; (800c814 <mix_sub_columns+0x28c>)
 800c5c2:	5c5b      	ldrb	r3, [r3, r1]
 800c5c4:	4053      	eors	r3, r2
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c5cc:	7a3b      	ldrb	r3, [r7, #8]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	4b90      	ldr	r3, [pc, #576]	; (800c814 <mix_sub_columns+0x28c>)
 800c5d2:	5c9a      	ldrb	r2, [r3, r2]
 800c5d4:	7b7b      	ldrb	r3, [r7, #13]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4b8c      	ldr	r3, [pc, #560]	; (800c80c <mix_sub_columns+0x284>)
 800c5da:	5c5b      	ldrb	r3, [r3, r1]
 800c5dc:	4053      	eors	r3, r2
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	7cbb      	ldrb	r3, [r7, #18]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4b8a      	ldr	r3, [pc, #552]	; (800c810 <mix_sub_columns+0x288>)
 800c5e6:	5c5b      	ldrb	r3, [r3, r1]
 800c5e8:	4053      	eors	r3, r2
 800c5ea:	b2d9      	uxtb	r1, r3
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	4b88      	ldr	r3, [pc, #544]	; (800c814 <mix_sub_columns+0x28c>)
 800c5f2:	5c9a      	ldrb	r2, [r3, r2]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	404a      	eors	r2, r1
 800c5fa:	b2d2      	uxtb	r2, r2
 800c5fc:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c5fe:	7a3b      	ldrb	r3, [r7, #8]
 800c600:	461a      	mov	r2, r3
 800c602:	4b84      	ldr	r3, [pc, #528]	; (800c814 <mix_sub_columns+0x28c>)
 800c604:	5c9a      	ldrb	r2, [r3, r2]
 800c606:	7b7b      	ldrb	r3, [r7, #13]
 800c608:	4619      	mov	r1, r3
 800c60a:	4b82      	ldr	r3, [pc, #520]	; (800c814 <mix_sub_columns+0x28c>)
 800c60c:	5c5b      	ldrb	r3, [r3, r1]
 800c60e:	4053      	eors	r3, r2
 800c610:	b2da      	uxtb	r2, r3
 800c612:	7cbb      	ldrb	r3, [r7, #18]
 800c614:	4619      	mov	r1, r3
 800c616:	4b7d      	ldr	r3, [pc, #500]	; (800c80c <mix_sub_columns+0x284>)
 800c618:	5c5b      	ldrb	r3, [r3, r1]
 800c61a:	4053      	eors	r3, r2
 800c61c:	b2d9      	uxtb	r1, r3
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	461a      	mov	r2, r3
 800c622:	4b7b      	ldr	r3, [pc, #492]	; (800c810 <mix_sub_columns+0x288>)
 800c624:	5c9a      	ldrb	r2, [r3, r2]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3302      	adds	r3, #2
 800c62a:	404a      	eors	r2, r1
 800c62c:	b2d2      	uxtb	r2, r2
 800c62e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c630:	7a3b      	ldrb	r3, [r7, #8]
 800c632:	461a      	mov	r2, r3
 800c634:	4b76      	ldr	r3, [pc, #472]	; (800c810 <mix_sub_columns+0x288>)
 800c636:	5c9a      	ldrb	r2, [r3, r2]
 800c638:	7b7b      	ldrb	r3, [r7, #13]
 800c63a:	4619      	mov	r1, r3
 800c63c:	4b75      	ldr	r3, [pc, #468]	; (800c814 <mix_sub_columns+0x28c>)
 800c63e:	5c5b      	ldrb	r3, [r3, r1]
 800c640:	4053      	eors	r3, r2
 800c642:	b2da      	uxtb	r2, r3
 800c644:	7cbb      	ldrb	r3, [r7, #18]
 800c646:	4619      	mov	r1, r3
 800c648:	4b72      	ldr	r3, [pc, #456]	; (800c814 <mix_sub_columns+0x28c>)
 800c64a:	5c5b      	ldrb	r3, [r3, r1]
 800c64c:	4053      	eors	r3, r2
 800c64e:	b2d9      	uxtb	r1, r3
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	461a      	mov	r2, r3
 800c654:	4b6d      	ldr	r3, [pc, #436]	; (800c80c <mix_sub_columns+0x284>)
 800c656:	5c9a      	ldrb	r2, [r3, r2]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3303      	adds	r3, #3
 800c65c:	404a      	eors	r2, r1
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c662:	7b3b      	ldrb	r3, [r7, #12]
 800c664:	461a      	mov	r2, r3
 800c666:	4b69      	ldr	r3, [pc, #420]	; (800c80c <mix_sub_columns+0x284>)
 800c668:	5c9a      	ldrb	r2, [r3, r2]
 800c66a:	7c7b      	ldrb	r3, [r7, #17]
 800c66c:	4619      	mov	r1, r3
 800c66e:	4b68      	ldr	r3, [pc, #416]	; (800c810 <mix_sub_columns+0x288>)
 800c670:	5c5b      	ldrb	r3, [r3, r1]
 800c672:	4053      	eors	r3, r2
 800c674:	b2da      	uxtb	r2, r3
 800c676:	7dbb      	ldrb	r3, [r7, #22]
 800c678:	4619      	mov	r1, r3
 800c67a:	4b66      	ldr	r3, [pc, #408]	; (800c814 <mix_sub_columns+0x28c>)
 800c67c:	5c5b      	ldrb	r3, [r3, r1]
 800c67e:	4053      	eors	r3, r2
 800c680:	b2d9      	uxtb	r1, r3
 800c682:	7afb      	ldrb	r3, [r7, #11]
 800c684:	461a      	mov	r2, r3
 800c686:	4b63      	ldr	r3, [pc, #396]	; (800c814 <mix_sub_columns+0x28c>)
 800c688:	5c9a      	ldrb	r2, [r3, r2]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3304      	adds	r3, #4
 800c68e:	404a      	eors	r2, r1
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c694:	7b3b      	ldrb	r3, [r7, #12]
 800c696:	461a      	mov	r2, r3
 800c698:	4b5e      	ldr	r3, [pc, #376]	; (800c814 <mix_sub_columns+0x28c>)
 800c69a:	5c9a      	ldrb	r2, [r3, r2]
 800c69c:	7c7b      	ldrb	r3, [r7, #17]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4b5a      	ldr	r3, [pc, #360]	; (800c80c <mix_sub_columns+0x284>)
 800c6a2:	5c5b      	ldrb	r3, [r3, r1]
 800c6a4:	4053      	eors	r3, r2
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	7dbb      	ldrb	r3, [r7, #22]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4b58      	ldr	r3, [pc, #352]	; (800c810 <mix_sub_columns+0x288>)
 800c6ae:	5c5b      	ldrb	r3, [r3, r1]
 800c6b0:	4053      	eors	r3, r2
 800c6b2:	b2d9      	uxtb	r1, r3
 800c6b4:	7afb      	ldrb	r3, [r7, #11]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b56      	ldr	r3, [pc, #344]	; (800c814 <mix_sub_columns+0x28c>)
 800c6ba:	5c9a      	ldrb	r2, [r3, r2]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3305      	adds	r3, #5
 800c6c0:	404a      	eors	r2, r1
 800c6c2:	b2d2      	uxtb	r2, r2
 800c6c4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c6c6:	7b3b      	ldrb	r3, [r7, #12]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4b52      	ldr	r3, [pc, #328]	; (800c814 <mix_sub_columns+0x28c>)
 800c6cc:	5c9a      	ldrb	r2, [r3, r2]
 800c6ce:	7c7b      	ldrb	r3, [r7, #17]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4b50      	ldr	r3, [pc, #320]	; (800c814 <mix_sub_columns+0x28c>)
 800c6d4:	5c5b      	ldrb	r3, [r3, r1]
 800c6d6:	4053      	eors	r3, r2
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	7dbb      	ldrb	r3, [r7, #22]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4b4b      	ldr	r3, [pc, #300]	; (800c80c <mix_sub_columns+0x284>)
 800c6e0:	5c5b      	ldrb	r3, [r3, r1]
 800c6e2:	4053      	eors	r3, r2
 800c6e4:	b2d9      	uxtb	r1, r3
 800c6e6:	7afb      	ldrb	r3, [r7, #11]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4b49      	ldr	r3, [pc, #292]	; (800c810 <mix_sub_columns+0x288>)
 800c6ec:	5c9a      	ldrb	r2, [r3, r2]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3306      	adds	r3, #6
 800c6f2:	404a      	eors	r2, r1
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c6f8:	7b3b      	ldrb	r3, [r7, #12]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	4b44      	ldr	r3, [pc, #272]	; (800c810 <mix_sub_columns+0x288>)
 800c6fe:	5c9a      	ldrb	r2, [r3, r2]
 800c700:	7c7b      	ldrb	r3, [r7, #17]
 800c702:	4619      	mov	r1, r3
 800c704:	4b43      	ldr	r3, [pc, #268]	; (800c814 <mix_sub_columns+0x28c>)
 800c706:	5c5b      	ldrb	r3, [r3, r1]
 800c708:	4053      	eors	r3, r2
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	7dbb      	ldrb	r3, [r7, #22]
 800c70e:	4619      	mov	r1, r3
 800c710:	4b40      	ldr	r3, [pc, #256]	; (800c814 <mix_sub_columns+0x28c>)
 800c712:	5c5b      	ldrb	r3, [r3, r1]
 800c714:	4053      	eors	r3, r2
 800c716:	b2d9      	uxtb	r1, r3
 800c718:	7afb      	ldrb	r3, [r7, #11]
 800c71a:	461a      	mov	r2, r3
 800c71c:	4b3b      	ldr	r3, [pc, #236]	; (800c80c <mix_sub_columns+0x284>)
 800c71e:	5c9a      	ldrb	r2, [r3, r2]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3307      	adds	r3, #7
 800c724:	404a      	eors	r2, r1
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c72a:	7c3b      	ldrb	r3, [r7, #16]
 800c72c:	461a      	mov	r2, r3
 800c72e:	4b37      	ldr	r3, [pc, #220]	; (800c80c <mix_sub_columns+0x284>)
 800c730:	5c9a      	ldrb	r2, [r3, r2]
 800c732:	7d7b      	ldrb	r3, [r7, #21]
 800c734:	4619      	mov	r1, r3
 800c736:	4b36      	ldr	r3, [pc, #216]	; (800c810 <mix_sub_columns+0x288>)
 800c738:	5c5b      	ldrb	r3, [r3, r1]
 800c73a:	4053      	eors	r3, r2
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	7abb      	ldrb	r3, [r7, #10]
 800c740:	4619      	mov	r1, r3
 800c742:	4b34      	ldr	r3, [pc, #208]	; (800c814 <mix_sub_columns+0x28c>)
 800c744:	5c5b      	ldrb	r3, [r3, r1]
 800c746:	4053      	eors	r3, r2
 800c748:	b2d9      	uxtb	r1, r3
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b31      	ldr	r3, [pc, #196]	; (800c814 <mix_sub_columns+0x28c>)
 800c750:	5c9a      	ldrb	r2, [r3, r2]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3308      	adds	r3, #8
 800c756:	404a      	eors	r2, r1
 800c758:	b2d2      	uxtb	r2, r2
 800c75a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c75c:	7c3b      	ldrb	r3, [r7, #16]
 800c75e:	461a      	mov	r2, r3
 800c760:	4b2c      	ldr	r3, [pc, #176]	; (800c814 <mix_sub_columns+0x28c>)
 800c762:	5c9a      	ldrb	r2, [r3, r2]
 800c764:	7d7b      	ldrb	r3, [r7, #21]
 800c766:	4619      	mov	r1, r3
 800c768:	4b28      	ldr	r3, [pc, #160]	; (800c80c <mix_sub_columns+0x284>)
 800c76a:	5c5b      	ldrb	r3, [r3, r1]
 800c76c:	4053      	eors	r3, r2
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	7abb      	ldrb	r3, [r7, #10]
 800c772:	4619      	mov	r1, r3
 800c774:	4b26      	ldr	r3, [pc, #152]	; (800c810 <mix_sub_columns+0x288>)
 800c776:	5c5b      	ldrb	r3, [r3, r1]
 800c778:	4053      	eors	r3, r2
 800c77a:	b2d9      	uxtb	r1, r3
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	461a      	mov	r2, r3
 800c780:	4b24      	ldr	r3, [pc, #144]	; (800c814 <mix_sub_columns+0x28c>)
 800c782:	5c9a      	ldrb	r2, [r3, r2]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3309      	adds	r3, #9
 800c788:	404a      	eors	r2, r1
 800c78a:	b2d2      	uxtb	r2, r2
 800c78c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c78e:	7c3b      	ldrb	r3, [r7, #16]
 800c790:	461a      	mov	r2, r3
 800c792:	4b20      	ldr	r3, [pc, #128]	; (800c814 <mix_sub_columns+0x28c>)
 800c794:	5c9a      	ldrb	r2, [r3, r2]
 800c796:	7d7b      	ldrb	r3, [r7, #21]
 800c798:	4619      	mov	r1, r3
 800c79a:	4b1e      	ldr	r3, [pc, #120]	; (800c814 <mix_sub_columns+0x28c>)
 800c79c:	5c5b      	ldrb	r3, [r3, r1]
 800c79e:	4053      	eors	r3, r2
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	7abb      	ldrb	r3, [r7, #10]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4b19      	ldr	r3, [pc, #100]	; (800c80c <mix_sub_columns+0x284>)
 800c7a8:	5c5b      	ldrb	r3, [r3, r1]
 800c7aa:	4053      	eors	r3, r2
 800c7ac:	b2d9      	uxtb	r1, r3
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4b17      	ldr	r3, [pc, #92]	; (800c810 <mix_sub_columns+0x288>)
 800c7b4:	5c9a      	ldrb	r2, [r3, r2]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	330a      	adds	r3, #10
 800c7ba:	404a      	eors	r2, r1
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c7c0:	7c3b      	ldrb	r3, [r7, #16]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4b12      	ldr	r3, [pc, #72]	; (800c810 <mix_sub_columns+0x288>)
 800c7c6:	5c9a      	ldrb	r2, [r3, r2]
 800c7c8:	7d7b      	ldrb	r3, [r7, #21]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4b11      	ldr	r3, [pc, #68]	; (800c814 <mix_sub_columns+0x28c>)
 800c7ce:	5c5b      	ldrb	r3, [r3, r1]
 800c7d0:	4053      	eors	r3, r2
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	7abb      	ldrb	r3, [r7, #10]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <mix_sub_columns+0x28c>)
 800c7da:	5c5b      	ldrb	r3, [r3, r1]
 800c7dc:	4053      	eors	r3, r2
 800c7de:	b2d9      	uxtb	r1, r3
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4b09      	ldr	r3, [pc, #36]	; (800c80c <mix_sub_columns+0x284>)
 800c7e6:	5c9a      	ldrb	r2, [r3, r2]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	330b      	adds	r3, #11
 800c7ec:	404a      	eors	r2, r1
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c7f2:	7d3b      	ldrb	r3, [r7, #20]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <mix_sub_columns+0x284>)
 800c7f8:	5c9a      	ldrb	r2, [r3, r2]
 800c7fa:	7a7b      	ldrb	r3, [r7, #9]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4b04      	ldr	r3, [pc, #16]	; (800c810 <mix_sub_columns+0x288>)
 800c800:	5c5b      	ldrb	r3, [r3, r1]
 800c802:	4053      	eors	r3, r2
 800c804:	b2da      	uxtb	r2, r3
 800c806:	7bbb      	ldrb	r3, [r7, #14]
 800c808:	4619      	mov	r1, r3
 800c80a:	e005      	b.n	800c818 <mix_sub_columns+0x290>
 800c80c:	0801e37c 	.word	0x0801e37c
 800c810:	0801e47c 	.word	0x0801e47c
 800c814:	0801e27c 	.word	0x0801e27c
 800c818:	4b2d      	ldr	r3, [pc, #180]	; (800c8d0 <mix_sub_columns+0x348>)
 800c81a:	5c5b      	ldrb	r3, [r3, r1]
 800c81c:	4053      	eors	r3, r2
 800c81e:	b2d9      	uxtb	r1, r3
 800c820:	7cfb      	ldrb	r3, [r7, #19]
 800c822:	461a      	mov	r2, r3
 800c824:	4b2a      	ldr	r3, [pc, #168]	; (800c8d0 <mix_sub_columns+0x348>)
 800c826:	5c9a      	ldrb	r2, [r3, r2]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	330c      	adds	r3, #12
 800c82c:	404a      	eors	r2, r1
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c832:	7d3b      	ldrb	r3, [r7, #20]
 800c834:	461a      	mov	r2, r3
 800c836:	4b26      	ldr	r3, [pc, #152]	; (800c8d0 <mix_sub_columns+0x348>)
 800c838:	5c9a      	ldrb	r2, [r3, r2]
 800c83a:	7a7b      	ldrb	r3, [r7, #9]
 800c83c:	4619      	mov	r1, r3
 800c83e:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <mix_sub_columns+0x34c>)
 800c840:	5c5b      	ldrb	r3, [r3, r1]
 800c842:	4053      	eors	r3, r2
 800c844:	b2da      	uxtb	r2, r3
 800c846:	7bbb      	ldrb	r3, [r7, #14]
 800c848:	4619      	mov	r1, r3
 800c84a:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <mix_sub_columns+0x350>)
 800c84c:	5c5b      	ldrb	r3, [r3, r1]
 800c84e:	4053      	eors	r3, r2
 800c850:	b2d9      	uxtb	r1, r3
 800c852:	7cfb      	ldrb	r3, [r7, #19]
 800c854:	461a      	mov	r2, r3
 800c856:	4b1e      	ldr	r3, [pc, #120]	; (800c8d0 <mix_sub_columns+0x348>)
 800c858:	5c9a      	ldrb	r2, [r3, r2]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	330d      	adds	r3, #13
 800c85e:	404a      	eors	r2, r1
 800c860:	b2d2      	uxtb	r2, r2
 800c862:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c864:	7d3b      	ldrb	r3, [r7, #20]
 800c866:	461a      	mov	r2, r3
 800c868:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <mix_sub_columns+0x348>)
 800c86a:	5c9a      	ldrb	r2, [r3, r2]
 800c86c:	7a7b      	ldrb	r3, [r7, #9]
 800c86e:	4619      	mov	r1, r3
 800c870:	4b17      	ldr	r3, [pc, #92]	; (800c8d0 <mix_sub_columns+0x348>)
 800c872:	5c5b      	ldrb	r3, [r3, r1]
 800c874:	4053      	eors	r3, r2
 800c876:	b2da      	uxtb	r2, r3
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	4619      	mov	r1, r3
 800c87c:	4b15      	ldr	r3, [pc, #84]	; (800c8d4 <mix_sub_columns+0x34c>)
 800c87e:	5c5b      	ldrb	r3, [r3, r1]
 800c880:	4053      	eors	r3, r2
 800c882:	b2d9      	uxtb	r1, r3
 800c884:	7cfb      	ldrb	r3, [r7, #19]
 800c886:	461a      	mov	r2, r3
 800c888:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <mix_sub_columns+0x350>)
 800c88a:	5c9a      	ldrb	r2, [r3, r2]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	330e      	adds	r3, #14
 800c890:	404a      	eors	r2, r1
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c896:	7d3b      	ldrb	r3, [r7, #20]
 800c898:	461a      	mov	r2, r3
 800c89a:	4b0f      	ldr	r3, [pc, #60]	; (800c8d8 <mix_sub_columns+0x350>)
 800c89c:	5c9a      	ldrb	r2, [r3, r2]
 800c89e:	7a7b      	ldrb	r3, [r7, #9]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <mix_sub_columns+0x348>)
 800c8a4:	5c5b      	ldrb	r3, [r3, r1]
 800c8a6:	4053      	eors	r3, r2
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4b08      	ldr	r3, [pc, #32]	; (800c8d0 <mix_sub_columns+0x348>)
 800c8b0:	5c5b      	ldrb	r3, [r3, r1]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	b2d9      	uxtb	r1, r3
 800c8b6:	7cfb      	ldrb	r3, [r7, #19]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <mix_sub_columns+0x34c>)
 800c8bc:	5c9a      	ldrb	r2, [r3, r2]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	330f      	adds	r3, #15
 800c8c2:	404a      	eors	r2, r1
 800c8c4:	b2d2      	uxtb	r2, r2
 800c8c6:	701a      	strb	r2, [r3, #0]
  }
 800c8c8:	bf00      	nop
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	0801e27c 	.word	0x0801e27c
 800c8d4:	0801e37c 	.word	0x0801e37c
 800c8d8:	0801e47c 	.word	0x0801e47c

0800c8dc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c8ea:	7afb      	ldrb	r3, [r7, #11]
 800c8ec:	3b10      	subs	r3, #16
 800c8ee:	2b10      	cmp	r3, #16
 800c8f0:	bf8c      	ite	hi
 800c8f2:	2201      	movhi	r2, #1
 800c8f4:	2200      	movls	r2, #0
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	d10d      	bne.n	800c918 <lorawan_aes_set_key+0x3c>
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	bf14      	ite	ne
 800c90e:	2301      	movne	r3, #1
 800c910:	2300      	moveq	r3, #0
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d105      	bne.n	800c924 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800c920:	23ff      	movs	r3, #255	; 0xff
 800c922:	e0b2      	b.n	800ca8a <lorawan_aes_set_key+0x1ae>
        break;
 800c924:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	7afa      	ldrb	r2, [r7, #11]
 800c92a:	68f9      	ldr	r1, [r7, #12]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff fbfa 	bl	800c126 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	331c      	adds	r3, #28
 800c936:	b2db      	uxtb	r3, r3
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c93c:	7c7b      	ldrb	r3, [r7, #17]
 800c93e:	091b      	lsrs	r3, r3, #4
 800c940:	b2db      	uxtb	r3, r3
 800c942:	3b01      	subs	r3, #1
 800c944:	b2da      	uxtb	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	75fb      	strb	r3, [r7, #23]
 800c950:	2301      	movs	r3, #1
 800c952:	75bb      	strb	r3, [r7, #22]
 800c954:	e093      	b.n	800ca7e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	3b04      	subs	r3, #4
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	5cd3      	ldrb	r3, [r2, r3]
 800c95e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	3b03      	subs	r3, #3
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	5cd3      	ldrb	r3, [r2, r3]
 800c968:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	3b02      	subs	r3, #2
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	5cd3      	ldrb	r3, [r2, r3]
 800c972:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	3b01      	subs	r3, #1
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	5cd3      	ldrb	r3, [r2, r3]
 800c97c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	7afa      	ldrb	r2, [r7, #11]
 800c982:	fbb3 f1f2 	udiv	r1, r3, r2
 800c986:	fb01 f202 	mul.w	r2, r1, r2
 800c98a:	1a9b      	subs	r3, r3, r2
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d127      	bne.n	800c9e2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800c992:	7d7b      	ldrb	r3, [r7, #21]
 800c994:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c996:	7d3b      	ldrb	r3, [r7, #20]
 800c998:	4a3e      	ldr	r2, [pc, #248]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800c99a:	5cd2      	ldrb	r2, [r2, r3]
 800c99c:	7dbb      	ldrb	r3, [r7, #22]
 800c99e:	4053      	eors	r3, r2
 800c9a0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c9a2:	7cfb      	ldrb	r3, [r7, #19]
 800c9a4:	4a3b      	ldr	r2, [pc, #236]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800c9a6:	5cd3      	ldrb	r3, [r2, r3]
 800c9a8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c9aa:	7cbb      	ldrb	r3, [r7, #18]
 800c9ac:	4a39      	ldr	r2, [pc, #228]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800c9ae:	5cd3      	ldrb	r3, [r2, r3]
 800c9b0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c9b2:	7c3b      	ldrb	r3, [r7, #16]
 800c9b4:	4a37      	ldr	r2, [pc, #220]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800c9b6:	5cd3      	ldrb	r3, [r2, r3]
 800c9b8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c9ba:	7dbb      	ldrb	r3, [r7, #22]
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	b25a      	sxtb	r2, r3
 800c9c0:	7dbb      	ldrb	r3, [r7, #22]
 800c9c2:	09db      	lsrs	r3, r3, #7
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	0049      	lsls	r1, r1, #1
 800c9ca:	440b      	add	r3, r1
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	00c8      	lsls	r0, r1, #3
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	440b      	add	r3, r1
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	4053      	eors	r3, r2
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	75bb      	strb	r3, [r7, #22]
 800c9e0:	e01c      	b.n	800ca1c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c9e2:	7afb      	ldrb	r3, [r7, #11]
 800c9e4:	2b18      	cmp	r3, #24
 800c9e6:	d919      	bls.n	800ca1c <lorawan_aes_set_key+0x140>
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	7afa      	ldrb	r2, [r7, #11]
 800c9ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9f0:	fb01 f202 	mul.w	r2, r1, r2
 800c9f4:	1a9b      	subs	r3, r3, r2
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b10      	cmp	r3, #16
 800c9fa:	d10f      	bne.n	800ca1c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800c9fc:	7d7b      	ldrb	r3, [r7, #21]
 800c9fe:	4a25      	ldr	r2, [pc, #148]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800ca00:	5cd3      	ldrb	r3, [r2, r3]
 800ca02:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ca04:	7d3b      	ldrb	r3, [r7, #20]
 800ca06:	4a23      	ldr	r2, [pc, #140]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800ca08:	5cd3      	ldrb	r3, [r2, r3]
 800ca0a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ca0c:	7cfb      	ldrb	r3, [r7, #19]
 800ca0e:	4a21      	ldr	r2, [pc, #132]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800ca10:	5cd3      	ldrb	r3, [r2, r3]
 800ca12:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ca14:	7cbb      	ldrb	r3, [r7, #18]
 800ca16:	4a1f      	ldr	r2, [pc, #124]	; (800ca94 <lorawan_aes_set_key+0x1b8>)
 800ca18:	5cd3      	ldrb	r3, [r2, r3]
 800ca1a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ca1c:	7dfa      	ldrb	r2, [r7, #23]
 800ca1e:	7afb      	ldrb	r3, [r7, #11]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ca24:	7c3b      	ldrb	r3, [r7, #16]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	5cd1      	ldrb	r1, [r2, r3]
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	7d7a      	ldrb	r2, [r7, #21]
 800ca2e:	404a      	eors	r2, r1
 800ca30:	b2d1      	uxtb	r1, r2
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ca36:	7c3b      	ldrb	r3, [r7, #16]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	5cd1      	ldrb	r1, [r2, r3]
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
 800ca40:	3301      	adds	r3, #1
 800ca42:	7d3a      	ldrb	r2, [r7, #20]
 800ca44:	404a      	eors	r2, r1
 800ca46:	b2d1      	uxtb	r1, r2
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ca4c:	7c3b      	ldrb	r3, [r7, #16]
 800ca4e:	3302      	adds	r3, #2
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	5cd1      	ldrb	r1, [r2, r3]
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	3302      	adds	r3, #2
 800ca58:	7cfa      	ldrb	r2, [r7, #19]
 800ca5a:	404a      	eors	r2, r1
 800ca5c:	b2d1      	uxtb	r1, r2
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ca62:	7c3b      	ldrb	r3, [r7, #16]
 800ca64:	3303      	adds	r3, #3
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	5cd1      	ldrb	r1, [r2, r3]
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	3303      	adds	r3, #3
 800ca6e:	7cba      	ldrb	r2, [r7, #18]
 800ca70:	404a      	eors	r2, r1
 800ca72:	b2d1      	uxtb	r1, r2
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	75fb      	strb	r3, [r7, #23]
 800ca7e:	7dfa      	ldrb	r2, [r7, #23]
 800ca80:	7c7b      	ldrb	r3, [r7, #17]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	f4ff af67 	bcc.w	800c956 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	0801e27c 	.word	0x0801e27c

0800ca98 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d038      	beq.n	800cb20 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	f107 0314 	add.w	r3, r7, #20
 800cab4:	68f9      	ldr	r1, [r7, #12]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7ff fc07 	bl	800c2ca <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cabc:	2301      	movs	r3, #1
 800cabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cac2:	e014      	b.n	800caee <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cac4:	f107 0314 	add.w	r3, r7, #20
 800cac8:	4618      	mov	r0, r3
 800caca:	f7ff fd5d 	bl	800c588 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cad4:	0112      	lsls	r2, r2, #4
 800cad6:	441a      	add	r2, r3
 800cad8:	f107 0314 	add.w	r3, r7, #20
 800cadc:	4611      	mov	r1, r2
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fcab 	bl	800c43a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	3301      	adds	r3, #1
 800caea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800caf4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d3e3      	bcc.n	800cac4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cafc:	f107 0314 	add.w	r3, r7, #20
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff fca7 	bl	800c454 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb0c:	0112      	lsls	r2, r2, #4
 800cb0e:	441a      	add	r2, r3
 800cb10:	f107 0314 	add.w	r3, r7, #20
 800cb14:	4619      	mov	r1, r3
 800cb16:	68b8      	ldr	r0, [r7, #8]
 800cb18:	f7ff fbd7 	bl	800c2ca <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	e000      	b.n	800cb22 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800cb20:	23ff      	movs	r3, #255	; 0xff
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3728      	adds	r7, #40	; 0x28
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2e:	b09d      	sub	sp, #116	; 0x74
 800cb30:	af10      	add	r7, sp, #64	; 0x40
 800cb32:	4603      	mov	r3, r0
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cb38:	2306      	movs	r3, #6
 800cb3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800cb3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb46:	4611      	mov	r1, r2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 fa19 	bl	800cf80 <SecureElementGetKeyByID>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800cb54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f040 80b0 	bne.w	800ccbe <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800cb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800cb66:	4b58      	ldr	r3, [pc, #352]	; (800ccc8 <PrintKey+0x19c>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	2002      	movs	r0, #2
 800cb6e:	f00f fab5 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cb72:	e056      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d106      	bne.n	800cb8a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800cb7c:	4b53      	ldr	r3, [pc, #332]	; (800cccc <PrintKey+0x1a0>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2100      	movs	r1, #0
 800cb82:	2002      	movs	r0, #2
 800cb84:	f00f faaa 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cb88:	e04b      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800cb8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d106      	bne.n	800cba0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800cb92:	4b4f      	ldr	r3, [pc, #316]	; (800ccd0 <PrintKey+0x1a4>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	2100      	movs	r1, #0
 800cb98:	2002      	movs	r0, #2
 800cb9a:	f00f fa9f 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cb9e:	e040      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800cba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d106      	bne.n	800cbb6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800cba8:	4b4a      	ldr	r3, [pc, #296]	; (800ccd4 <PrintKey+0x1a8>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2100      	movs	r1, #0
 800cbae:	2002      	movs	r0, #2
 800cbb0:	f00f fa94 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cbb4:	e035      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800cbb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	d106      	bne.n	800cbcc <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800cbbe:	4b46      	ldr	r3, [pc, #280]	; (800ccd8 <PrintKey+0x1ac>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	2002      	movs	r0, #2
 800cbc6:	f00f fa89 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cbca:	e02a      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd0:	2b7f      	cmp	r3, #127	; 0x7f
 800cbd2:	d106      	bne.n	800cbe2 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800cbd4:	4b41      	ldr	r3, [pc, #260]	; (800ccdc <PrintKey+0x1b0>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2002      	movs	r0, #2
 800cbdc:	f00f fa7e 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cbe0:	e01f      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe6:	2b80      	cmp	r3, #128	; 0x80
 800cbe8:	d106      	bne.n	800cbf8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800cbea:	4b3d      	ldr	r3, [pc, #244]	; (800cce0 <PrintKey+0x1b4>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	2100      	movs	r1, #0
 800cbf0:	2002      	movs	r0, #2
 800cbf2:	f00f fa73 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cbf6:	e014      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	2b81      	cmp	r3, #129	; 0x81
 800cbfe:	d106      	bne.n	800cc0e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800cc00:	4b38      	ldr	r3, [pc, #224]	; (800cce4 <PrintKey+0x1b8>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	2100      	movs	r1, #0
 800cc06:	2002      	movs	r0, #2
 800cc08:	f00f fa68 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 800cc0c:	e009      	b.n	800cc22 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800cc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc12:	2b82      	cmp	r3, #130	; 0x82
 800cc14:	d105      	bne.n	800cc22 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800cc16:	4b34      	ldr	r3, [pc, #208]	; (800cce8 <PrintKey+0x1bc>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	2002      	movs	r0, #2
 800cc1e:	f00f fa5d 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	785b      	ldrb	r3, [r3, #1]
 800cc26:	4618      	mov	r0, r3
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	789b      	ldrb	r3, [r3, #2]
 800cc2c:	461c      	mov	r4, r3
 800cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc30:	78db      	ldrb	r3, [r3, #3]
 800cc32:	461d      	mov	r5, r3
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	791b      	ldrb	r3, [r3, #4]
 800cc38:	461e      	mov	r6, r3
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	795b      	ldrb	r3, [r3, #5]
 800cc3e:	623b      	str	r3, [r7, #32]
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	799b      	ldrb	r3, [r3, #6]
 800cc44:	61fb      	str	r3, [r7, #28]
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	79db      	ldrb	r3, [r3, #7]
 800cc4a:	61bb      	str	r3, [r7, #24]
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	7a1b      	ldrb	r3, [r3, #8]
 800cc50:	617b      	str	r3, [r7, #20]
 800cc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc54:	7a5b      	ldrb	r3, [r3, #9]
 800cc56:	613b      	str	r3, [r7, #16]
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	7a9b      	ldrb	r3, [r3, #10]
 800cc5c:	60fb      	str	r3, [r7, #12]
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	7adb      	ldrb	r3, [r3, #11]
 800cc62:	60bb      	str	r3, [r7, #8]
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	7b1b      	ldrb	r3, [r3, #12]
 800cc68:	607b      	str	r3, [r7, #4]
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	7b5b      	ldrb	r3, [r3, #13]
 800cc6e:	603b      	str	r3, [r7, #0]
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	7b9b      	ldrb	r3, [r3, #14]
 800cc74:	4619      	mov	r1, r3
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	7bdb      	ldrb	r3, [r3, #15]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	7c1b      	ldrb	r3, [r3, #16]
 800cc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc82:	920e      	str	r2, [sp, #56]	; 0x38
 800cc84:	910d      	str	r1, [sp, #52]	; 0x34
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	920c      	str	r2, [sp, #48]	; 0x30
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	920a      	str	r2, [sp, #40]	; 0x28
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	9209      	str	r2, [sp, #36]	; 0x24
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	9208      	str	r2, [sp, #32]
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	9207      	str	r2, [sp, #28]
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	9206      	str	r2, [sp, #24]
 800cca2:	69fa      	ldr	r2, [r7, #28]
 800cca4:	9205      	str	r2, [sp, #20]
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	9603      	str	r6, [sp, #12]
 800ccac:	9502      	str	r5, [sp, #8]
 800ccae:	9401      	str	r4, [sp, #4]
 800ccb0:	9000      	str	r0, [sp, #0]
 800ccb2:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <PrintKey+0x1c0>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	2002      	movs	r0, #2
 800ccba:	f00f fa0f 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ccbe:	bf00      	nop
 800ccc0:	3734      	adds	r7, #52	; 0x34
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0801dc34 	.word	0x0801dc34
 800cccc:	0801dc4c 	.word	0x0801dc4c
 800ccd0:	0801dc64 	.word	0x0801dc64
 800ccd4:	0801dc7c 	.word	0x0801dc7c
 800ccd8:	0801dc94 	.word	0x0801dc94
 800ccdc:	0801dcac 	.word	0x0801dcac
 800cce0:	0801dcc4 	.word	0x0801dcc4
 800cce4:	0801dcdc 	.word	0x0801dcdc
 800cce8:	0801dcf4 	.word	0x0801dcf4
 800ccec:	0801dd0c 	.word	0x0801dd0c

0800ccf0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]
 800cd00:	e01a      	b.n	800cd38 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cd02:	4b12      	ldr	r3, [pc, #72]	; (800cd4c <GetKeyByID+0x5c>)
 800cd04:	6819      	ldr	r1, [r3, #0]
 800cd06:	7bfa      	ldrb	r2, [r7, #15]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	4413      	add	r3, r2
 800cd0e:	440b      	add	r3, r1
 800cd10:	3310      	adds	r3, #16
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	79fa      	ldrb	r2, [r7, #7]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d10b      	bne.n	800cd32 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800cd1a:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <GetKeyByID+0x5c>)
 800cd1c:	6819      	ldr	r1, [r3, #0]
 800cd1e:	7bfa      	ldrb	r2, [r7, #15]
 800cd20:	4613      	mov	r3, r2
 800cd22:	011b      	lsls	r3, r3, #4
 800cd24:	4413      	add	r3, r2
 800cd26:	3310      	adds	r3, #16
 800cd28:	18ca      	adds	r2, r1, r3
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e006      	b.n	800cd40 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	3301      	adds	r3, #1
 800cd36:	73fb      	strb	r3, [r7, #15]
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	2b09      	cmp	r3, #9
 800cd3c:	d9e1      	bls.n	800cd02 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cd3e:	2303      	movs	r3, #3
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bc80      	pop	{r7}
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	20002ea0 	.word	0x20002ea0

0800cd50 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800cd50:	b590      	push	{r4, r7, lr}
 800cd52:	b0d1      	sub	sp, #324	; 0x144
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800cd5a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800cd5e:	6020      	str	r0, [r4, #0]
 800cd60:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800cd64:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800cd68:	6001      	str	r1, [r0, #0]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cd70:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cd74:	801a      	strh	r2, [r3, #0]
 800cd76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cd7a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cd7e:	460a      	mov	r2, r1
 800cd80:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cd82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cd86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d003      	beq.n	800cd98 <ComputeCmac+0x48>
 800cd90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e05c      	b.n	800ce56 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe ff1b 	bl	800bbdc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cda6:	f107 0210 	add.w	r2, r7, #16
 800cdaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdae:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff ff9a 	bl	800ccf0 <GetKeyByID>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cdc2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d143      	bne.n	800ce52 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800cdca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	f107 0314 	add.w	r3, r7, #20
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe ff16 	bl	800bc0e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800cde2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cde6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d009      	beq.n	800ce04 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800cdf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cdf4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cdf8:	f107 0014 	add.w	r0, r7, #20
 800cdfc:	2210      	movs	r2, #16
 800cdfe:	6819      	ldr	r1, [r3, #0]
 800ce00:	f7fe ff14 	bl	800bc2c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ce04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce08:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ce0c:	881a      	ldrh	r2, [r3, #0]
 800ce0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ce12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ce16:	f107 0014 	add.w	r0, r7, #20
 800ce1a:	6819      	ldr	r1, [r3, #0]
 800ce1c:	f7fe ff06 	bl	800bc2c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ce20:	f107 0214 	add.w	r2, r7, #20
 800ce24:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ce28:	4611      	mov	r1, r2
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fe ffc0 	bl	800bdb0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ce30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ce34:	061a      	lsls	r2, r3, #24
 800ce36:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ce3a:	041b      	lsls	r3, r3, #16
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ce46:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ce50:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ce52:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd90      	pop	{r4, r7, pc}

0800ce60 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ce60:	b5b0      	push	{r4, r5, r7, lr}
 800ce62:	b0b2      	sub	sp, #200	; 0xc8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	22c0      	movs	r2, #192	; 0xc0
 800ce70:	2100      	movs	r1, #0
 800ce72:	4618      	mov	r0, r3
 800ce74:	f010 fc8a 	bl	801d78c <memset>
 800ce78:	4a3b      	ldr	r2, [pc, #236]	; (800cf68 <SecureElementInit+0x108>)
 800ce7a:	f107 0308 	add.w	r3, r7, #8
 800ce7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce82:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce86:	4a39      	ldr	r2, [pc, #228]	; (800cf6c <SecureElementInit+0x10c>)
 800ce88:	f107 0310 	add.w	r3, r7, #16
 800ce8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce90:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce94:	4b36      	ldr	r3, [pc, #216]	; (800cf70 <SecureElementInit+0x110>)
 800ce96:	f107 0419 	add.w	r4, r7, #25
 800ce9a:	461d      	mov	r5, r3
 800ce9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce9e:	6020      	str	r0, [r4, #0]
 800cea0:	6061      	str	r1, [r4, #4]
 800cea2:	60a2      	str	r2, [r4, #8]
 800cea4:	60e3      	str	r3, [r4, #12]
 800cea6:	2301      	movs	r3, #1
 800cea8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ceac:	4b30      	ldr	r3, [pc, #192]	; (800cf70 <SecureElementInit+0x110>)
 800ceae:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800ceb2:	461d      	mov	r5, r3
 800ceb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceb6:	6020      	str	r0, [r4, #0]
 800ceb8:	6061      	str	r1, [r4, #4]
 800ceba:	60a2      	str	r2, [r4, #8]
 800cebc:	60e3      	str	r3, [r4, #12]
 800cebe:	2302      	movs	r3, #2
 800cec0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800cec4:	4b2a      	ldr	r3, [pc, #168]	; (800cf70 <SecureElementInit+0x110>)
 800cec6:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800ceca:	461d      	mov	r5, r3
 800cecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cece:	6020      	str	r0, [r4, #0]
 800ced0:	6061      	str	r1, [r4, #4]
 800ced2:	60a2      	str	r2, [r4, #8]
 800ced4:	60e3      	str	r3, [r4, #12]
 800ced6:	2303      	movs	r3, #3
 800ced8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cedc:	4b24      	ldr	r3, [pc, #144]	; (800cf70 <SecureElementInit+0x110>)
 800cede:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cee8:	2304      	movs	r3, #4
 800ceea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800ceee:	237f      	movs	r3, #127	; 0x7f
 800cef0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800cef4:	2380      	movs	r3, #128	; 0x80
 800cef6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800cefa:	2381      	movs	r3, #129	; 0x81
 800cefc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800cf00:	2382      	movs	r3, #130	; 0x82
 800cf02:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800cf06:	2383      	movs	r3, #131	; 0x83
 800cf08:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf12:	2302      	movs	r3, #2
 800cf14:	e023      	b.n	800cf5e <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800cf16:	4a17      	ldr	r2, [pc, #92]	; (800cf74 <SecureElementInit+0x114>)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800cf1c:	4b15      	ldr	r3, [pc, #84]	; (800cf74 <SecureElementInit+0x114>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f107 0108 	add.w	r1, r7, #8
 800cf24:	22c0      	movs	r2, #192	; 0xc0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f00b ff85 	bl	8018e36 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cf2c:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <SecureElementInit+0x118>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	2002      	movs	r0, #2
 800cf34:	f00f f8d2 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cf38:	2000      	movs	r0, #0
 800cf3a:	f7ff fdf7 	bl	800cb2c <PrintKey>
    PrintKey(NWK_KEY);
 800cf3e:	2001      	movs	r0, #1
 800cf40:	f7ff fdf4 	bl	800cb2c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cf44:	4b0d      	ldr	r3, [pc, #52]	; (800cf7c <SecureElementInit+0x11c>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	2100      	movs	r1, #0
 800cf4a:	2002      	movs	r0, #2
 800cf4c:	f00f f8c6 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800cf50:	2003      	movs	r0, #3
 800cf52:	f7ff fdeb 	bl	800cb2c <PrintKey>
    PrintKey(NWK_S_KEY);
 800cf56:	2002      	movs	r0, #2
 800cf58:	f7ff fde8 	bl	800cb2c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	37c8      	adds	r7, #200	; 0xc8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bdb0      	pop	{r4, r5, r7, pc}
 800cf66:	bf00      	nop
 800cf68:	0801dd90 	.word	0x0801dd90
 800cf6c:	0801dd98 	.word	0x0801dd98
 800cf70:	0801dda0 	.word	0x0801dda0
 800cf74:	20002ea0 	.word	0x20002ea0
 800cf78:	0801dd60 	.word	0x0801dd60
 800cf7c:	0801dd78 	.word	0x0801dd78

0800cf80 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	73fb      	strb	r3, [r7, #15]
 800cf90:	e01a      	b.n	800cfc8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800cf92:	4b12      	ldr	r3, [pc, #72]	; (800cfdc <SecureElementGetKeyByID+0x5c>)
 800cf94:	6819      	ldr	r1, [r3, #0]
 800cf96:	7bfa      	ldrb	r2, [r7, #15]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	4413      	add	r3, r2
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3310      	adds	r3, #16
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	79fa      	ldrb	r2, [r7, #7]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d10b      	bne.n	800cfc2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800cfaa:	4b0c      	ldr	r3, [pc, #48]	; (800cfdc <SecureElementGetKeyByID+0x5c>)
 800cfac:	6819      	ldr	r1, [r3, #0]
 800cfae:	7bfa      	ldrb	r2, [r7, #15]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	011b      	lsls	r3, r3, #4
 800cfb4:	4413      	add	r3, r2
 800cfb6:	3310      	adds	r3, #16
 800cfb8:	18ca      	adds	r2, r1, r3
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e006      	b.n	800cfd0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	73fb      	strb	r3, [r7, #15]
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	2b09      	cmp	r3, #9
 800cfcc:	d9e1      	bls.n	800cf92 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfce:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bc80      	pop	{r7}
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	20002ea0 	.word	0x20002ea0

0800cfe0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	6039      	str	r1, [r7, #0]
 800cfea:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cff2:	2302      	movs	r3, #2
 800cff4:	e04c      	b.n	800d090 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cff6:	2300      	movs	r3, #0
 800cff8:	77fb      	strb	r3, [r7, #31]
 800cffa:	e045      	b.n	800d088 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cffc:	4b26      	ldr	r3, [pc, #152]	; (800d098 <SecureElementSetKey+0xb8>)
 800cffe:	6819      	ldr	r1, [r3, #0]
 800d000:	7ffa      	ldrb	r2, [r7, #31]
 800d002:	4613      	mov	r3, r2
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	4413      	add	r3, r2
 800d008:	440b      	add	r3, r1
 800d00a:	3310      	adds	r3, #16
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	79fa      	ldrb	r2, [r7, #7]
 800d010:	429a      	cmp	r2, r3
 800d012:	d136      	bne.n	800d082 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b80      	cmp	r3, #128	; 0x80
 800d018:	d123      	bne.n	800d062 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800d01a:	2306      	movs	r3, #6
 800d01c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800d01e:	2300      	movs	r3, #0
 800d020:	60fb      	str	r3, [r7, #12]
 800d022:	f107 0310 	add.w	r3, r7, #16
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	605a      	str	r2, [r3, #4]
 800d02c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d02e:	f107 030c 	add.w	r3, r7, #12
 800d032:	227f      	movs	r2, #127	; 0x7f
 800d034:	2110      	movs	r1, #16
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	f000 f87d 	bl	800d136 <SecureElementAesEncrypt>
 800d03c:	4603      	mov	r3, r0
 800d03e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d040:	4b15      	ldr	r3, [pc, #84]	; (800d098 <SecureElementSetKey+0xb8>)
 800d042:	6819      	ldr	r1, [r3, #0]
 800d044:	7ffa      	ldrb	r2, [r7, #31]
 800d046:	4613      	mov	r3, r2
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	4413      	add	r3, r2
 800d04c:	3310      	adds	r3, #16
 800d04e:	440b      	add	r3, r1
 800d050:	3301      	adds	r3, #1
 800d052:	f107 010c 	add.w	r1, r7, #12
 800d056:	2210      	movs	r2, #16
 800d058:	4618      	mov	r0, r3
 800d05a:	f00b feec 	bl	8018e36 <memcpy1>
                return retval;
 800d05e:	7fbb      	ldrb	r3, [r7, #30]
 800d060:	e016      	b.n	800d090 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d062:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <SecureElementSetKey+0xb8>)
 800d064:	6819      	ldr	r1, [r3, #0]
 800d066:	7ffa      	ldrb	r2, [r7, #31]
 800d068:	4613      	mov	r3, r2
 800d06a:	011b      	lsls	r3, r3, #4
 800d06c:	4413      	add	r3, r2
 800d06e:	3310      	adds	r3, #16
 800d070:	440b      	add	r3, r1
 800d072:	3301      	adds	r3, #1
 800d074:	2210      	movs	r2, #16
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	4618      	mov	r0, r3
 800d07a:	f00b fedc 	bl	8018e36 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d07e:	2300      	movs	r3, #0
 800d080:	e006      	b.n	800d090 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d082:	7ffb      	ldrb	r3, [r7, #31]
 800d084:	3301      	adds	r3, #1
 800d086:	77fb      	strb	r3, [r7, #31]
 800d088:	7ffb      	ldrb	r3, [r7, #31]
 800d08a:	2b09      	cmp	r3, #9
 800d08c:	d9b6      	bls.n	800cffc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d08e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20002ea0 	.word	0x20002ea0

0800d09c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	80fb      	strh	r3, [r7, #6]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d0b2:	797b      	ldrb	r3, [r7, #5]
 800d0b4:	2b7e      	cmp	r3, #126	; 0x7e
 800d0b6:	d901      	bls.n	800d0bc <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e009      	b.n	800d0d0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d0bc:	7979      	ldrb	r1, [r7, #5]
 800d0be:	88fa      	ldrh	r2, [r7, #6]
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	68b9      	ldr	r1, [r7, #8]
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff fe41 	bl	800cd50 <ComputeCmac>
 800d0ce:	4603      	mov	r3, r0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b088      	sub	sp, #32
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	817b      	strh	r3, [r7, #10]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e01b      	b.n	800d12e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d0f6:	2306      	movs	r3, #6
 800d0f8:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d0fe:	7a79      	ldrb	r1, [r7, #9]
 800d100:	897a      	ldrh	r2, [r7, #10]
 800d102:	f107 0310 	add.w	r3, r7, #16
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	460b      	mov	r3, r1
 800d10a:	68f9      	ldr	r1, [r7, #12]
 800d10c:	2000      	movs	r0, #0
 800d10e:	f7ff fe1f 	bl	800cd50 <ComputeCmac>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800d11c:	7dfb      	ldrb	r3, [r7, #23]
 800d11e:	e006      	b.n	800d12e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	429a      	cmp	r2, r3
 800d126:	d001      	beq.n	800d12c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d128:	2301      	movs	r3, #1
 800d12a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b0c2      	sub	sp, #264	; 0x108
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d146:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d14a:	6013      	str	r3, [r2, #0]
 800d14c:	4603      	mov	r3, r0
 800d14e:	817b      	strh	r3, [r7, #10]
 800d150:	460b      	mov	r3, r1
 800d152:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d006      	beq.n	800d168 <SecureElementAesEncrypt+0x32>
 800d15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d15e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d168:	2302      	movs	r3, #2
 800d16a:	e046      	b.n	800d1fa <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d16c:	897b      	ldrh	r3, [r7, #10]
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	b29b      	uxth	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d178:	2305      	movs	r3, #5
 800d17a:	e03e      	b.n	800d1fa <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d17c:	f107 0314 	add.w	r3, r7, #20
 800d180:	22f0      	movs	r2, #240	; 0xf0
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f00b fe91 	bl	8018eac <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d18a:	f107 0210 	add.w	r2, r7, #16
 800d18e:	7a7b      	ldrb	r3, [r7, #9]
 800d190:	4611      	mov	r1, r2
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fdac 	bl	800ccf0 <GetKeyByID>
 800d198:	4603      	mov	r3, r0
 800d19a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d19e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d127      	bne.n	800d1f6 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	f107 0214 	add.w	r2, r7, #20
 800d1ae:	2110      	movs	r1, #16
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff fb93 	bl	800c8dc <lorawan_aes_set_key>

        uint8_t block = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d1bc:	e018      	b.n	800d1f0 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d1be:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	18d0      	adds	r0, r2, r3
 800d1c6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d1ca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d1ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d1d2:	6812      	ldr	r2, [r2, #0]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f107 0214 	add.w	r2, r7, #20
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f7ff fc5c 	bl	800ca98 <lorawan_aes_encrypt>
            block = block + 16;
 800d1e0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d1e4:	3310      	adds	r3, #16
 800d1e6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d1ea:	897b      	ldrh	r3, [r7, #10]
 800d1ec:	3b10      	subs	r3, #16
 800d1ee:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800d1f0:	897b      	ldrh	r3, [r7, #10]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1e3      	bne.n	800d1be <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d1f6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b088      	sub	sp, #32
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
 800d210:	4613      	mov	r3, r2
 800d212:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d21a:	2302      	movs	r3, #2
 800d21c:	e02e      	b.n	800d27c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d21e:	2306      	movs	r3, #6
 800d220:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800d222:	78bb      	ldrb	r3, [r7, #2]
 800d224:	2b7f      	cmp	r3, #127	; 0x7f
 800d226:	d104      	bne.n	800d232 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d228:	78fb      	ldrb	r3, [r7, #3]
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d001      	beq.n	800d232 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d22e:	2303      	movs	r3, #3
 800d230:	e024      	b.n	800d27c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800d232:	2300      	movs	r3, #0
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	f107 0310 	add.w	r3, r7, #16
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	605a      	str	r2, [r3, #4]
 800d240:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d242:	f107 030c 	add.w	r3, r7, #12
 800d246:	78fa      	ldrb	r2, [r7, #3]
 800d248:	2110      	movs	r1, #16
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ff73 	bl	800d136 <SecureElementAesEncrypt>
 800d250:	4603      	mov	r3, r0
 800d252:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d254:	7ffb      	ldrb	r3, [r7, #31]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d25a:	7ffb      	ldrb	r3, [r7, #31]
 800d25c:	e00e      	b.n	800d27c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d25e:	f107 020c 	add.w	r2, r7, #12
 800d262:	78bb      	ldrb	r3, [r7, #2]
 800d264:	4611      	mov	r1, r2
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff feba 	bl	800cfe0 <SecureElementSetKey>
 800d26c:	4603      	mov	r3, r0
 800d26e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d270:	7ffb      	ldrb	r3, [r7, #31]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d276:	7ffb      	ldrb	r3, [r7, #31]
 800d278:	e000      	b.n	800d27c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d27a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3720      	adds	r7, #32
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	607b      	str	r3, [r7, #4]
 800d28e:	4603      	mov	r3, r0
 800d290:	73fb      	strb	r3, [r7, #15]
 800d292:	4613      	mov	r3, r2
 800d294:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d005      	beq.n	800d2a8 <SecureElementProcessJoinAccept+0x24>
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d002      	beq.n	800d2a8 <SecureElementProcessJoinAccept+0x24>
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	e064      	b.n	800d376 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d2ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2b0:	2b21      	cmp	r3, #33	; 0x21
 800d2b2:	d901      	bls.n	800d2b8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d2b4:	2305      	movs	r3, #5
 800d2b6:	e05e      	b.n	800d376 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d2bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	6879      	ldr	r1, [r7, #4]
 800d2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2c8:	f00b fdb5 	bl	8018e36 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	1c58      	adds	r0, r3, #1
 800d2d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	b299      	uxth	r1, r3
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	3301      	adds	r3, #1
 800d2de:	7dfa      	ldrb	r2, [r7, #23]
 800d2e0:	f7ff ff29 	bl	800d136 <SecureElementAesEncrypt>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d2ea:	2307      	movs	r3, #7
 800d2ec:	e043      	b.n	800d376 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	330b      	adds	r3, #11
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	09db      	lsrs	r3, r3, #7
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800d300:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d304:	3b04      	subs	r3, #4
 800d306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d308:	4413      	add	r3, r2
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800d30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d312:	3b03      	subs	r3, #3
 800d314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d316:	4413      	add	r3, r2
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	021b      	lsls	r3, r3, #8
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	4313      	orrs	r3, r2
 800d320:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800d322:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d326:	3b02      	subs	r3, #2
 800d328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32a:	4413      	add	r3, r2
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	041b      	lsls	r3, r3, #16
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	4313      	orrs	r3, r2
 800d334:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800d336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d33e:	4413      	add	r3, r2
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	061b      	lsls	r3, r3, #24
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	4313      	orrs	r3, r2
 800d348:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10e      	bne.n	800d370 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d352:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d356:	b29b      	uxth	r3, r3
 800d358:	3b04      	subs	r3, #4
 800d35a:	b299      	uxth	r1, r3
 800d35c:	2301      	movs	r3, #1
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d362:	f7ff feb9 	bl	800d0d8 <SecureElementVerifyAesCmac>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e002      	b.n	800d376 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d370:	2304      	movs	r3, #4
 800d372:	e000      	b.n	800d376 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d38e:	2302      	movs	r3, #2
 800d390:	e006      	b.n	800d3a0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800d392:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <SecureElementRandomNumber+0x28>)
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	4798      	blx	r3
 800d398:	4602      	mov	r2, r0
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	0801e648 	.word	0x0801e648

0800d3ac <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	e007      	b.n	800d3ce <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <SecureElementSetDevEui+0x2c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2208      	movs	r2, #8
 800d3c4:	6879      	ldr	r1, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f00b fd35 	bl	8018e36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20002ea0 	.word	0x20002ea0

0800d3dc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800d3e0:	4b02      	ldr	r3, [pc, #8]	; (800d3ec <SecureElementGetDevEui+0x10>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bc80      	pop	{r7}
 800d3ea:	4770      	bx	lr
 800d3ec:	20002ea0 	.word	0x20002ea0

0800d3f0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d3fe:	2302      	movs	r3, #2
 800d400:	e008      	b.n	800d414 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800d402:	4b06      	ldr	r3, [pc, #24]	; (800d41c <SecureElementSetJoinEui+0x2c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3308      	adds	r3, #8
 800d408:	2208      	movs	r2, #8
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f00b fd12 	bl	8018e36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20002ea0 	.word	0x20002ea0

0800d420 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d424:	4b03      	ldr	r3, [pc, #12]	; (800d434 <SecureElementGetJoinEui+0x14>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3308      	adds	r3, #8
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bc80      	pop	{r7}
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20002ea0 	.word	0x20002ea0

0800d438 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800d440:	4a1a      	ldr	r2, [pc, #104]	; (800d4ac <LmHandlerInit+0x74>)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d446:	4b1a      	ldr	r3, [pc, #104]	; (800d4b0 <LmHandlerInit+0x78>)
 800d448:	4a1a      	ldr	r2, [pc, #104]	; (800d4b4 <LmHandlerInit+0x7c>)
 800d44a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d44c:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <LmHandlerInit+0x78>)
 800d44e:	4a1a      	ldr	r2, [pc, #104]	; (800d4b8 <LmHandlerInit+0x80>)
 800d450:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d452:	4b17      	ldr	r3, [pc, #92]	; (800d4b0 <LmHandlerInit+0x78>)
 800d454:	4a19      	ldr	r2, [pc, #100]	; (800d4bc <LmHandlerInit+0x84>)
 800d456:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d458:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <LmHandlerInit+0x78>)
 800d45a:	4a19      	ldr	r2, [pc, #100]	; (800d4c0 <LmHandlerInit+0x88>)
 800d45c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d45e:	4b13      	ldr	r3, [pc, #76]	; (800d4ac <LmHandlerInit+0x74>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a17      	ldr	r2, [pc, #92]	; (800d4c4 <LmHandlerInit+0x8c>)
 800d466:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d468:	4b10      	ldr	r3, [pc, #64]	; (800d4ac <LmHandlerInit+0x74>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	4a15      	ldr	r2, [pc, #84]	; (800d4c4 <LmHandlerInit+0x8c>)
 800d470:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d472:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <LmHandlerInit+0x74>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	4a12      	ldr	r2, [pc, #72]	; (800d4c4 <LmHandlerInit+0x8c>)
 800d47a:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d47c:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <LmHandlerInit+0x8c>)
 800d47e:	4a12      	ldr	r2, [pc, #72]	; (800d4c8 <LmHandlerInit+0x90>)
 800d480:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d482:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <LmHandlerInit+0x74>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	691b      	ldr	r3, [r3, #16]
 800d488:	4a0e      	ldr	r2, [pc, #56]	; (800d4c4 <LmHandlerInit+0x8c>)
 800d48a:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d48c:	490f      	ldr	r1, [pc, #60]	; (800d4cc <LmHandlerInit+0x94>)
 800d48e:	2000      	movs	r0, #0
 800d490:	f000 fcfe 	bl	800de90 <LmHandlerPackageRegister>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800d49a:	f04f 33ff 	mov.w	r3, #4294967295
 800d49e:	e000      	b.n	800d4a2 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20002ec8 	.word	0x20002ec8
 800d4b0:	20002ecc 	.word	0x20002ecc
 800d4b4:	0800dbe5 	.word	0x0800dbe5
 800d4b8:	0800dc4d 	.word	0x0800dc4d
 800d4bc:	0800dd2d 	.word	0x0800dd2d
 800d4c0:	0800ddf1 	.word	0x0800ddf1
 800d4c4:	20002edc 	.word	0x20002edc
 800d4c8:	0800e101 	.word	0x0800e101
 800d4cc:	2000009c 	.word	0x2000009c

0800d4d0 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d2:	b099      	sub	sp, #100	; 0x64
 800d4d4:	af08      	add	r7, sp, #32
 800d4d6:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d4dc:	2210      	movs	r2, #16
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4882      	ldr	r0, [pc, #520]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d4e2:	f00f f919 	bl	801c718 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800d4e6:	f7fc ffb3 	bl	800a450 <LoraInfo_GetPtr>
 800d4ea:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d4ec:	4b7f      	ldr	r3, [pc, #508]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	4093      	lsls	r3, r2
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00c      	beq.n	800d51c <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d502:	4b7a      	ldr	r3, [pc, #488]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	4979      	ldr	r1, [pc, #484]	; (800d6f0 <LmHandlerConfigure+0x220>)
 800d50a:	487a      	ldr	r0, [pc, #488]	; (800d6f4 <LmHandlerConfigure+0x224>)
 800d50c:	f004 fb1a 	bl	8011b44 <LoRaMacInitialization>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800d516:	f04f 33ff 	mov.w	r3, #4294967295
 800d51a:	e0e2      	b.n	800d6e2 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d51c:	4b76      	ldr	r3, [pc, #472]	; (800d6f8 <LmHandlerConfigure+0x228>)
 800d51e:	2201      	movs	r2, #1
 800d520:	2100      	movs	r1, #0
 800d522:	2000      	movs	r0, #0
 800d524:	f00e fdda 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d528:	e7fe      	b.n	800d528 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800d52a:	f000 fdfa 	bl	800e122 <NvmDataMgmtRestore>
 800d52e:	4603      	mov	r3, r0
 800d530:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800d532:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d534:	2b00      	cmp	r3, #0
 800d536:	d003      	beq.n	800d540 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800d538:	4b70      	ldr	r3, [pc, #448]	; (800d6fc <LmHandlerConfigure+0x22c>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e002      	b.n	800d546 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800d540:	4b6e      	ldr	r3, [pc, #440]	; (800d6fc <LmHandlerConfigure+0x22c>)
 800d542:	2200      	movs	r2, #0
 800d544:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d546:	2302      	movs	r3, #2
 800d548:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d54a:	f107 0314 	add.w	r3, r7, #20
 800d54e:	4618      	mov	r0, r3
 800d550:	f004 fe42 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	2208      	movs	r2, #8
 800d558:	4619      	mov	r1, r3
 800d55a:	4869      	ldr	r0, [pc, #420]	; (800d700 <LmHandlerConfigure+0x230>)
 800d55c:	f00b fc6b 	bl	8018e36 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d560:	2303      	movs	r3, #3
 800d562:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d564:	f107 0314 	add.w	r3, r7, #20
 800d568:	4618      	mov	r0, r3
 800d56a:	f004 fe35 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2208      	movs	r2, #8
 800d572:	4619      	mov	r1, r3
 800d574:	4863      	ldr	r0, [pc, #396]	; (800d704 <LmHandlerConfigure+0x234>)
 800d576:	f00b fc5e 	bl	8018e36 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d57a:	4b63      	ldr	r3, [pc, #396]	; (800d708 <LmHandlerConfigure+0x238>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	4798      	blx	r3
 800d582:	4603      	mov	r3, r0
 800d584:	4a5e      	ldr	r2, [pc, #376]	; (800d700 <LmHandlerConfigure+0x230>)
 800d586:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800d588:	2306      	movs	r3, #6
 800d58a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d58c:	4b5c      	ldr	r3, [pc, #368]	; (800d700 <LmHandlerConfigure+0x230>)
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d592:	f107 0314 	add.w	r3, r7, #20
 800d596:	4618      	mov	r0, r3
 800d598:	f004 ff7c 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d59c:	4b58      	ldr	r3, [pc, #352]	; (800d700 <LmHandlerConfigure+0x230>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b57      	ldr	r3, [pc, #348]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5a4:	785b      	ldrb	r3, [r3, #1]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	4b55      	ldr	r3, [pc, #340]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5aa:	789b      	ldrb	r3, [r3, #2]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	4b54      	ldr	r3, [pc, #336]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5b0:	78db      	ldrb	r3, [r3, #3]
 800d5b2:	461c      	mov	r4, r3
 800d5b4:	4b52      	ldr	r3, [pc, #328]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5b6:	791b      	ldrb	r3, [r3, #4]
 800d5b8:	461d      	mov	r5, r3
 800d5ba:	4b51      	ldr	r3, [pc, #324]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5bc:	795b      	ldrb	r3, [r3, #5]
 800d5be:	461e      	mov	r6, r3
 800d5c0:	4b4f      	ldr	r3, [pc, #316]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5c2:	799b      	ldrb	r3, [r3, #6]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	4b4e      	ldr	r3, [pc, #312]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5c8:	79db      	ldrb	r3, [r3, #7]
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	9306      	str	r3, [sp, #24]
 800d5d0:	9605      	str	r6, [sp, #20]
 800d5d2:	9504      	str	r5, [sp, #16]
 800d5d4:	9403      	str	r4, [sp, #12]
 800d5d6:	9002      	str	r0, [sp, #8]
 800d5d8:	9101      	str	r1, [sp, #4]
 800d5da:	9200      	str	r2, [sp, #0]
 800d5dc:	4b4b      	ldr	r3, [pc, #300]	; (800d70c <LmHandlerConfigure+0x23c>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	2002      	movs	r0, #2
 800d5e4:	f00e fd7a 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d5e8:	4b45      	ldr	r3, [pc, #276]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5ea:	7a1b      	ldrb	r3, [r3, #8]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4b44      	ldr	r3, [pc, #272]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5f0:	7a5b      	ldrb	r3, [r3, #9]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4b42      	ldr	r3, [pc, #264]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5f6:	7a9b      	ldrb	r3, [r3, #10]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	4b41      	ldr	r3, [pc, #260]	; (800d700 <LmHandlerConfigure+0x230>)
 800d5fc:	7adb      	ldrb	r3, [r3, #11]
 800d5fe:	461c      	mov	r4, r3
 800d600:	4b3f      	ldr	r3, [pc, #252]	; (800d700 <LmHandlerConfigure+0x230>)
 800d602:	7b1b      	ldrb	r3, [r3, #12]
 800d604:	461d      	mov	r5, r3
 800d606:	4b3e      	ldr	r3, [pc, #248]	; (800d700 <LmHandlerConfigure+0x230>)
 800d608:	7b5b      	ldrb	r3, [r3, #13]
 800d60a:	461e      	mov	r6, r3
 800d60c:	4b3c      	ldr	r3, [pc, #240]	; (800d700 <LmHandlerConfigure+0x230>)
 800d60e:	7b9b      	ldrb	r3, [r3, #14]
 800d610:	603b      	str	r3, [r7, #0]
 800d612:	4b3b      	ldr	r3, [pc, #236]	; (800d700 <LmHandlerConfigure+0x230>)
 800d614:	7bdb      	ldrb	r3, [r3, #15]
 800d616:	9307      	str	r3, [sp, #28]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	9306      	str	r3, [sp, #24]
 800d61c:	9605      	str	r6, [sp, #20]
 800d61e:	9504      	str	r5, [sp, #16]
 800d620:	9403      	str	r4, [sp, #12]
 800d622:	9002      	str	r0, [sp, #8]
 800d624:	9101      	str	r1, [sp, #4]
 800d626:	9200      	str	r2, [sp, #0]
 800d628:	4b39      	ldr	r3, [pc, #228]	; (800d710 <LmHandlerConfigure+0x240>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	2100      	movs	r1, #0
 800d62e:	2002      	movs	r0, #2
 800d630:	f00e fd54 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800d634:	4b37      	ldr	r3, [pc, #220]	; (800d714 <LmHandlerConfigure+0x244>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	4b37      	ldr	r3, [pc, #220]	; (800d718 <LmHandlerConfigure+0x248>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	4619      	mov	r1, r3
 800d640:	4b36      	ldr	r3, [pc, #216]	; (800d71c <LmHandlerConfigure+0x24c>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	4618      	mov	r0, r3
 800d646:	4b36      	ldr	r3, [pc, #216]	; (800d720 <LmHandlerConfigure+0x250>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	9303      	str	r3, [sp, #12]
 800d64c:	9002      	str	r0, [sp, #8]
 800d64e:	9101      	str	r1, [sp, #4]
 800d650:	9200      	str	r2, [sp, #0]
 800d652:	4b34      	ldr	r3, [pc, #208]	; (800d724 <LmHandlerConfigure+0x254>)
 800d654:	2200      	movs	r2, #0
 800d656:	2100      	movs	r1, #0
 800d658:	2002      	movs	r0, #2
 800d65a:	f00e fd3f 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d65e:	230f      	movs	r3, #15
 800d660:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d662:	2301      	movs	r3, #1
 800d664:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d666:	f107 0314 	add.w	r3, r7, #20
 800d66a:	4618      	mov	r0, r3
 800d66c:	f004 ff12 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800d670:	2305      	movs	r3, #5
 800d672:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d674:	2300      	movs	r3, #0
 800d676:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d678:	f107 0314 	add.w	r3, r7, #20
 800d67c:	4618      	mov	r0, r3
 800d67e:	f004 ff09 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d682:	2310      	movs	r3, #16
 800d684:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d686:	2300      	movs	r3, #0
 800d688:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d68a:	f107 0314 	add.w	r3, r7, #20
 800d68e:	4618      	mov	r0, r3
 800d690:	f004 ff00 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d694:	2304      	movs	r3, #4
 800d696:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d698:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d69a:	789b      	ldrb	r3, [r3, #2]
 800d69c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d69e:	f107 0314 	add.w	r3, r7, #20
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f004 fef6 	bl	8012494 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d6a8:	230f      	movs	r3, #15
 800d6aa:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d6ac:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f107 020c 	add.w	r2, r7, #12
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f007 fcfd 	bl	80150b6 <RegionGetPhyParam>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bf14      	ite	ne
 800d6c6:	2301      	movne	r3, #1
 800d6c8:	2300      	moveq	r3, #0
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d6ce:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800d6d0:	2014      	movs	r0, #20
 800d6d2:	f000 fa6f 	bl	800dbb4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d6d6:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <LmHandlerConfigure+0x21c>)
 800d6d8:	795b      	ldrb	r3, [r3, #5]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f005 fc4e 	bl	8012f7c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3744      	adds	r7, #68	; 0x44
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20002eb8 	.word	0x20002eb8
 800d6f0:	20002edc 	.word	0x20002edc
 800d6f4:	20002ecc 	.word	0x20002ecc
 800d6f8:	0801ddb0 	.word	0x0801ddb0
 800d6fc:	20002ffa 	.word	0x20002ffa
 800d700:	20000084 	.word	0x20000084
 800d704:	2000008c 	.word	0x2000008c
 800d708:	20002ec8 	.word	0x20002ec8
 800d70c:	0801ddfc 	.word	0x0801ddfc
 800d710:	0801de38 	.word	0x0801de38
 800d714:	2000009b 	.word	0x2000009b
 800d718:	2000009a 	.word	0x2000009a
 800d71c:	20000099 	.word	0x20000099
 800d720:	20000098 	.word	0x20000098
 800d724:	0801de74 	.word	0x0801de74

0800d728 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d72c:	f002 f9b8 	bl	800faa0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d730:	f000 fc9a 	bl	800e068 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800d734:	f000 fcee 	bl	800e114 <NvmDataMgmtStore>
}
 800d738:	bf00      	nop
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b090      	sub	sp, #64	; 0x40
 800d740:	af00      	add	r7, sp, #0
 800d742:	4603      	mov	r3, r0
 800d744:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d111      	bne.n	800d770 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d74c:	4b23      	ldr	r3, [pc, #140]	; (800d7dc <LmHandlerJoin+0xa0>)
 800d74e:	2202      	movs	r2, #2
 800d750:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800d752:	f004 fcab 	bl	80120ac <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800d756:	2301      	movs	r3, #1
 800d758:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d75a:	4b21      	ldr	r3, [pc, #132]	; (800d7e0 <LmHandlerJoin+0xa4>)
 800d75c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d764:	f107 0308 	add.w	r3, r7, #8
 800d768:	4618      	mov	r0, r3
 800d76a:	f005 f9d1 	bl	8012b10 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800d76e:	e030      	b.n	800d7d2 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d770:	4b1a      	ldr	r3, [pc, #104]	; (800d7dc <LmHandlerJoin+0xa0>)
 800d772:	2201      	movs	r2, #1
 800d774:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d776:	4b1a      	ldr	r3, [pc, #104]	; (800d7e0 <LmHandlerJoin+0xa4>)
 800d778:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d77c:	4b17      	ldr	r3, [pc, #92]	; (800d7dc <LmHandlerJoin+0xa0>)
 800d77e:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d780:	4b16      	ldr	r3, [pc, #88]	; (800d7dc <LmHandlerJoin+0xa0>)
 800d782:	2200      	movs	r2, #0
 800d784:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800d786:	4b17      	ldr	r3, [pc, #92]	; (800d7e4 <LmHandlerJoin+0xa8>)
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	f083 0301 	eor.w	r3, r3, #1
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d794:	2327      	movs	r3, #39	; 0x27
 800d796:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d798:	4b13      	ldr	r3, [pc, #76]	; (800d7e8 <LmHandlerJoin+0xac>)
 800d79a:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d79c:	f107 031c 	add.w	r3, r7, #28
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f004 fe77 	bl	8012494 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d7a6:	f004 fc81 	bl	80120ac <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d7b4:	f107 031c 	add.w	r3, r7, #28
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f004 fe6b 	bl	8012494 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d7be:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <LmHandlerJoin+0xb0>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	4805      	ldr	r0, [pc, #20]	; (800d7dc <LmHandlerJoin+0xa0>)
 800d7c6:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d7c8:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <LmHandlerJoin+0xa4>)
 800d7ca:	785b      	ldrb	r3, [r3, #1]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 f917 	bl	800da00 <LmHandlerRequestClass>
}
 800d7d2:	bf00      	nop
 800d7d4:	3740      	adds	r7, #64	; 0x40
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	200000a8 	.word	0x200000a8
 800d7e0:	20002eb8 	.word	0x20002eb8
 800d7e4:	20002ffa 	.word	0x20002ffa
 800d7e8:	01000300 	.word	0x01000300
 800d7ec:	20002ec8 	.word	0x20002ec8

0800d7f0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08a      	sub	sp, #40	; 0x28
 800d7f4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d7fa:	463b      	mov	r3, r7
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f004 fceb 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
 800d802:	4603      	mov	r3, r0
 800d804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800d808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d106      	bne.n	800d81e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d810:	793b      	ldrb	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d816:	2300      	movs	r3, #0
 800d818:	e002      	b.n	800d820 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d81e:	2300      	movs	r3, #0
    }
}
 800d820:	4618      	mov	r0, r3
 800d822:	3728      	adds	r7, #40	; 0x28
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	; 0x30
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	461a      	mov	r2, r3
 800d834:	460b      	mov	r3, r1
 800d836:	72fb      	strb	r3, [r7, #11]
 800d838:	4613      	mov	r3, r2
 800d83a:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d83c:	23ff      	movs	r3, #255	; 0xff
 800d83e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d842:	f001 fe97 	bl	800f574 <LoRaMacIsBusy>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d84c:	f06f 0301 	mvn.w	r3, #1
 800d850:	e0b4      	b.n	800d9bc <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d852:	f7ff ffcd 	bl	800d7f0 <LmHandlerJoinStatus>
 800d856:	4603      	mov	r3, r0
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d007      	beq.n	800d86c <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800d85c:	4b59      	ldr	r3, [pc, #356]	; (800d9c4 <LmHandlerSend+0x19c>)
 800d85e:	789b      	ldrb	r3, [r3, #2]
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff ff6b 	bl	800d73c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d866:	f06f 0302 	mvn.w	r3, #2
 800d86a:	e0a7      	b.n	800d9bc <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800d86c:	4b56      	ldr	r3, [pc, #344]	; (800d9c8 <LmHandlerSend+0x1a0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	4798      	blx	r3
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00d      	beq.n	800d896 <LmHandlerSend+0x6e>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	781a      	ldrb	r2, [r3, #0]
 800d87e:	4b52      	ldr	r3, [pc, #328]	; (800d9c8 <LmHandlerSend+0x1a0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	d006      	beq.n	800d896 <LmHandlerSend+0x6e>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d890:	f06f 0303 	mvn.w	r3, #3
 800d894:	e092      	b.n	800d9bc <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d896:	4b4d      	ldr	r3, [pc, #308]	; (800d9cc <LmHandlerSend+0x1a4>)
 800d898:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d89c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	f107 0214 	add.w	r2, r7, #20
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f004 fc0c 	bl	80120c8 <LoRaMacQueryTxPossible>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d009      	beq.n	800d8ca <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d8b6:	4b46      	ldr	r3, [pc, #280]	; (800d9d0 <LmHandlerSend+0x1a8>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d8c8:	e017      	b.n	800d8fa <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800d8ca:	4a41      	ldr	r2, [pc, #260]	; (800d9d0 <LmHandlerSend+0x1a8>)
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800d8e4:	7afb      	ldrb	r3, [r7, #11]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	763b      	strb	r3, [r7, #24]
 800d8ee:	e004      	b.n	800d8fa <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800d8f4:	2308      	movs	r3, #8
 800d8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800d8fa:	4b35      	ldr	r3, [pc, #212]	; (800d9d0 <LmHandlerSend+0x1a8>)
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	330c      	adds	r3, #12
 800d900:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d904:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d908:	4b30      	ldr	r3, [pc, #192]	; (800d9cc <LmHandlerSend+0x1a4>)
 800d90a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d90e:	4b30      	ldr	r3, [pc, #192]	; (800d9d0 <LmHandlerSend+0x1a8>)
 800d910:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d912:	7aba      	ldrb	r2, [r7, #10]
 800d914:	f107 0318 	add.w	r3, r7, #24
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f005 fa38 	bl	8012d90 <LoRaMacMcpsRequest>
 800d920:	4603      	mov	r3, r0
 800d922:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800d932:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d936:	2b11      	cmp	r3, #17
 800d938:	d83a      	bhi.n	800d9b0 <LmHandlerSend+0x188>
 800d93a:	a201      	add	r2, pc, #4	; (adr r2, 800d940 <LmHandlerSend+0x118>)
 800d93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d940:	0800d989 	.word	0x0800d989
 800d944:	0800d991 	.word	0x0800d991
 800d948:	0800d9b1 	.word	0x0800d9b1
 800d94c:	0800d9b1 	.word	0x0800d9b1
 800d950:	0800d9b1 	.word	0x0800d9b1
 800d954:	0800d9b1 	.word	0x0800d9b1
 800d958:	0800d9b1 	.word	0x0800d9b1
 800d95c:	0800d999 	.word	0x0800d999
 800d960:	0800d9b1 	.word	0x0800d9b1
 800d964:	0800d9b1 	.word	0x0800d9b1
 800d968:	0800d9b1 	.word	0x0800d9b1
 800d96c:	0800d9a9 	.word	0x0800d9a9
 800d970:	0800d9b1 	.word	0x0800d9b1
 800d974:	0800d9b1 	.word	0x0800d9b1
 800d978:	0800d991 	.word	0x0800d991
 800d97c:	0800d991 	.word	0x0800d991
 800d980:	0800d991 	.word	0x0800d991
 800d984:	0800d9a1 	.word	0x0800d9a1
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d98e:	e013      	b.n	800d9b8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d990:	23fe      	movs	r3, #254	; 0xfe
 800d992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d996:	e00f      	b.n	800d9b8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d998:	23fd      	movs	r3, #253	; 0xfd
 800d99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d99e:	e00b      	b.n	800d9b8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d9a0:	23fb      	movs	r3, #251	; 0xfb
 800d9a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d9a6:	e007      	b.n	800d9b8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d9a8:	23fa      	movs	r3, #250	; 0xfa
 800d9aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d9ae:	e003      	b.n	800d9b8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d9b0:	23ff      	movs	r3, #255	; 0xff
 800d9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d9b6:	bf00      	nop
    }

    return lmhStatus;
 800d9b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3730      	adds	r7, #48	; 0x30
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200000a8 	.word	0x200000a8
 800d9c8:	20002ea4 	.word	0x20002ea4
 800d9cc:	20002eb8 	.word	0x20002eb8
 800d9d0:	20002ef0 	.word	0x20002ef0

0800d9d4 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d9da:	230a      	movs	r3, #10
 800d9dc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d9de:	463b      	mov	r3, r7
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f005 f895 	bl	8012b10 <LoRaMacMlmeRequest>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	e001      	b.n	800d9f8 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d9f4:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08c      	sub	sp, #48	; 0x30
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800da0a:	2300      	movs	r3, #0
 800da0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800da10:	f001 fdb0 	bl	800f574 <LoRaMacIsBusy>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800da1a:	f06f 0301 	mvn.w	r3, #1
 800da1e:	e07b      	b.n	800db18 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800da20:	f7ff fee6 	bl	800d7f0 <LmHandlerJoinStatus>
 800da24:	4603      	mov	r3, r0
 800da26:	2b01      	cmp	r3, #1
 800da28:	d002      	beq.n	800da30 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800da2a:	f06f 0302 	mvn.w	r3, #2
 800da2e:	e073      	b.n	800db18 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800da30:	2300      	movs	r3, #0
 800da32:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800da34:	f107 0308 	add.w	r3, r7, #8
 800da38:	4618      	mov	r0, r3
 800da3a:	f004 fbcd 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800da44:	f04f 33ff 	mov.w	r3, #4294967295
 800da48:	e066      	b.n	800db18 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800da4a:	7b3b      	ldrb	r3, [r7, #12]
 800da4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800da50:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	429a      	cmp	r2, r3
 800da58:	d055      	beq.n	800db06 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d02c      	beq.n	800daba <LmHandlerRequestClass+0xba>
 800da60:	2b02      	cmp	r3, #2
 800da62:	dc52      	bgt.n	800db0a <LmHandlerRequestClass+0x10a>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <LmHandlerRequestClass+0x6e>
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d022      	beq.n	800dab2 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800da6c:	e04d      	b.n	800db0a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800da6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800da72:	2b00      	cmp	r3, #0
 800da74:	d04b      	beq.n	800db0e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800da7a:	f107 0308 	add.w	r3, r7, #8
 800da7e:	4618      	mov	r0, r3
 800da80:	f004 fd08 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10f      	bne.n	800daaa <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 fb1f 	bl	800e0d0 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <LmHandlerRequestClass+0x120>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d038      	beq.n	800db0e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800da9c:	4b20      	ldr	r3, [pc, #128]	; (800db20 <LmHandlerRequestClass+0x120>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa2:	79fa      	ldrb	r2, [r7, #7]
 800daa4:	4610      	mov	r0, r2
 800daa6:	4798      	blx	r3
            break;
 800daa8:	e031      	b.n	800db0e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800daaa:	23ff      	movs	r3, #255	; 0xff
 800daac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dab0:	e02d      	b.n	800db0e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800dab2:	23ff      	movs	r3, #255	; 0xff
 800dab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dab8:	e02c      	b.n	800db14 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800daba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800dac2:	23ff      	movs	r3, #255	; 0xff
 800dac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800dac8:	e023      	b.n	800db12 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4618      	mov	r0, r3
 800dad4:	f004 fcde 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10f      	bne.n	800dafe <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800dade:	79fb      	ldrb	r3, [r7, #7]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 faf5 	bl	800e0d0 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800dae6:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <LmHandlerRequestClass+0x120>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daec:	2b00      	cmp	r3, #0
 800daee:	d010      	beq.n	800db12 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <LmHandlerRequestClass+0x120>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf6:	79fa      	ldrb	r2, [r7, #7]
 800daf8:	4610      	mov	r0, r2
 800dafa:	4798      	blx	r3
            break;
 800dafc:	e009      	b.n	800db12 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800dafe:	23ff      	movs	r3, #255	; 0xff
 800db00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800db04:	e005      	b.n	800db12 <LmHandlerRequestClass+0x112>
        }
    }
 800db06:	bf00      	nop
 800db08:	e004      	b.n	800db14 <LmHandlerRequestClass+0x114>
            break;
 800db0a:	bf00      	nop
 800db0c:	e002      	b.n	800db14 <LmHandlerRequestClass+0x114>
            break;
 800db0e:	bf00      	nop
 800db10:	e000      	b.n	800db14 <LmHandlerRequestClass+0x114>
            break;
 800db12:	bf00      	nop
    return errorStatus;
 800db14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3730      	adds	r7, #48	; 0x30
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	20002ec8 	.word	0x20002ec8

0800db24 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08c      	sub	sp, #48	; 0x30
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	e010      	b.n	800db5a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800db38:	2300      	movs	r3, #0
 800db3a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800db3c:	f107 030c 	add.w	r3, r7, #12
 800db40:	4618      	mov	r0, r3
 800db42:	f004 fb49 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db4c:	f04f 33ff 	mov.w	r3, #4294967295
 800db50:	e003      	b.n	800db5a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800db52:	7c3a      	ldrb	r2, [r7, #16]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3730      	adds	r7, #48	; 0x30
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
	...

0800db64 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08c      	sub	sp, #48	; 0x30
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	e016      	b.n	800dba6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800db78:	231f      	movs	r3, #31
 800db7a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800db7c:	f107 030c 	add.w	r3, r7, #12
 800db80:	4618      	mov	r0, r3
 800db82:	f004 fb29 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db8c:	f04f 33ff 	mov.w	r3, #4294967295
 800db90:	e009      	b.n	800dba6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800db92:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f993 2000 	ldrsb.w	r2, [r3]
 800dba0:	4b03      	ldr	r3, [pc, #12]	; (800dbb0 <LmHandlerGetTxDatarate+0x4c>)
 800dba2:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3730      	adds	r7, #48	; 0x30
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20002eb8 	.word	0x20002eb8

0800dbb4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08c      	sub	sp, #48	; 0x30
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dbbc:	2322      	movs	r3, #34	; 0x22
 800dbbe:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800dbc4:	f107 030c 	add.w	r3, r7, #12
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f004 fc63 	bl	8012494 <LoRaMacMibSetRequestConfirm>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d002      	beq.n	800dbda <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800dbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd8:	e000      	b.n	800dbdc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3730      	adds	r7, #48	; 0x30
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800dbec:	4b15      	ldr	r3, [pc, #84]	; (800dc44 <McpsConfirm+0x60>)
 800dbee:	2201      	movs	r2, #1
 800dbf0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	785a      	ldrb	r2, [r3, #1]
 800dbf6:	4b13      	ldr	r3, [pc, #76]	; (800dc44 <McpsConfirm+0x60>)
 800dbf8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	789b      	ldrb	r3, [r3, #2]
 800dbfe:	b25a      	sxtb	r2, r3
 800dc00:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <McpsConfirm+0x60>)
 800dc02:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	4a0e      	ldr	r2, [pc, #56]	; (800dc44 <McpsConfirm+0x60>)
 800dc0a:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800dc12:	4b0c      	ldr	r3, [pc, #48]	; (800dc44 <McpsConfirm+0x60>)
 800dc14:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <McpsConfirm+0x60>)
 800dc1e:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	791b      	ldrb	r3, [r3, #4]
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <McpsConfirm+0x60>)
 800dc28:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800dc2a:	4b07      	ldr	r3, [pc, #28]	; (800dc48 <McpsConfirm+0x64>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	4804      	ldr	r0, [pc, #16]	; (800dc44 <McpsConfirm+0x60>)
 800dc32:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800dc34:	6879      	ldr	r1, [r7, #4]
 800dc36:	2000      	movs	r0, #0
 800dc38:	f000 f99a 	bl	800df70 <LmHandlerPackagesNotify>
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20002ef0 	.word	0x20002ef0
 800dc48:	20002ec8 	.word	0x20002ec8

0800dc4c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800dc56:	2300      	movs	r3, #0
 800dc58:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800dc5a:	4b32      	ldr	r3, [pc, #200]	; (800dd24 <McpsIndication+0xd8>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	785a      	ldrb	r2, [r3, #1]
 800dc64:	4b2f      	ldr	r3, [pc, #188]	; (800dd24 <McpsIndication+0xd8>)
 800dc66:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800dc68:	4b2e      	ldr	r3, [pc, #184]	; (800dd24 <McpsIndication+0xd8>)
 800dc6a:	785b      	ldrb	r3, [r3, #1]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d154      	bne.n	800dd1a <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	791b      	ldrb	r3, [r3, #4]
 800dc74:	b25a      	sxtb	r2, r3
 800dc76:	4b2b      	ldr	r3, [pc, #172]	; (800dd24 <McpsIndication+0xd8>)
 800dc78:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc80:	b25a      	sxtb	r2, r3
 800dc82:	4b28      	ldr	r3, [pc, #160]	; (800dd24 <McpsIndication+0xd8>)
 800dc84:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dc8c:	4b25      	ldr	r3, [pc, #148]	; (800dd24 <McpsIndication+0xd8>)
 800dc8e:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	78db      	ldrb	r3, [r3, #3]
 800dc94:	b25a      	sxtb	r2, r3
 800dc96:	4b23      	ldr	r3, [pc, #140]	; (800dd24 <McpsIndication+0xd8>)
 800dc98:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	4a21      	ldr	r2, [pc, #132]	; (800dd24 <McpsIndication+0xd8>)
 800dca0:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	78db      	ldrb	r3, [r3, #3]
 800dca6:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	7b1b      	ldrb	r3, [r3, #12]
 800dcac:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800dcb4:	4b1c      	ldr	r3, [pc, #112]	; (800dd28 <McpsIndication+0xdc>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcba:	f107 0218 	add.w	r2, r7, #24
 800dcbe:	4919      	ldr	r1, [pc, #100]	; (800dd24 <McpsIndication+0xd8>)
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800dcc4:	4b18      	ldr	r3, [pc, #96]	; (800dd28 <McpsIndication+0xdc>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <McpsIndication+0x92>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	7e1b      	ldrb	r3, [r3, #24]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800dcd6:	4b14      	ldr	r3, [pc, #80]	; (800dd28 <McpsIndication+0xdc>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcdc:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	2001      	movs	r0, #1
 800dce2:	f000 f945 	bl	800df70 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800dce6:	f107 0317 	add.w	r3, r7, #23
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff ff1a 	bl	800db24 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	795b      	ldrb	r3, [r3, #5]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d111      	bne.n	800dd1c <McpsIndication+0xd0>
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10e      	bne.n	800dd1c <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800dcfe:	2300      	movs	r3, #0
 800dd00:	733b      	strb	r3, [r7, #12]
 800dd02:	2300      	movs	r3, #0
 800dd04:	737b      	strb	r3, [r7, #13]
 800dd06:	2300      	movs	r3, #0
 800dd08:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800dd0a:	f107 000c 	add.w	r0, r7, #12
 800dd0e:	2301      	movs	r3, #1
 800dd10:	2200      	movs	r2, #0
 800dd12:	2100      	movs	r1, #0
 800dd14:	f7ff fd88 	bl	800d828 <LmHandlerSend>
 800dd18:	e000      	b.n	800dd1c <McpsIndication+0xd0>
        return;
 800dd1a:	bf00      	nop
    }
}
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	200000ac 	.word	0x200000ac
 800dd28:	20002ec8 	.word	0x20002ec8

0800dd2c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08c      	sub	sp, #48	; 0x30
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800dd34:	4b28      	ldr	r3, [pc, #160]	; (800ddd8 <MlmeConfirm+0xac>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	785a      	ldrb	r2, [r3, #1]
 800dd3e:	4b26      	ldr	r3, [pc, #152]	; (800ddd8 <MlmeConfirm+0xac>)
 800dd40:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800dd42:	4b26      	ldr	r3, [pc, #152]	; (800dddc <MlmeConfirm+0xb0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	4823      	ldr	r0, [pc, #140]	; (800ddd8 <MlmeConfirm+0xac>)
 800dd4a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	2002      	movs	r0, #2
 800dd50:	f000 f90e 	bl	800df70 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b0a      	cmp	r3, #10
 800dd5a:	d035      	beq.n	800ddc8 <MlmeConfirm+0x9c>
 800dd5c:	2b0a      	cmp	r3, #10
 800dd5e:	dc35      	bgt.n	800ddcc <MlmeConfirm+0xa0>
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d002      	beq.n	800dd6a <MlmeConfirm+0x3e>
 800dd64:	2b04      	cmp	r3, #4
 800dd66:	d023      	beq.n	800ddb0 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800dd68:	e030      	b.n	800ddcc <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800dd6a:	2306      	movs	r3, #6
 800dd6c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dd6e:	f107 030c 	add.w	r3, r7, #12
 800dd72:	4618      	mov	r0, r3
 800dd74:	f004 fa30 	bl	80121d8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	4a19      	ldr	r2, [pc, #100]	; (800dde0 <MlmeConfirm+0xb4>)
 800dd7c:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800dd7e:	4819      	ldr	r0, [pc, #100]	; (800dde4 <MlmeConfirm+0xb8>)
 800dd80:	f7ff fef0 	bl	800db64 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	785b      	ldrb	r3, [r3, #1]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d108      	bne.n	800dd9e <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dd8c:	4b15      	ldr	r3, [pc, #84]	; (800dde4 <MlmeConfirm+0xb8>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dd92:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <MlmeConfirm+0xbc>)
 800dd94:	785b      	ldrb	r3, [r3, #1]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff fe32 	bl	800da00 <LmHandlerRequestClass>
 800dd9c:	e002      	b.n	800dda4 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <MlmeConfirm+0xb8>)
 800dda0:	22ff      	movs	r2, #255	; 0xff
 800dda2:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dda4:	4b0d      	ldr	r3, [pc, #52]	; (800dddc <MlmeConfirm+0xb0>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	69db      	ldr	r3, [r3, #28]
 800ddaa:	480e      	ldr	r0, [pc, #56]	; (800dde4 <MlmeConfirm+0xb8>)
 800ddac:	4798      	blx	r3
        break;
 800ddae:	e00e      	b.n	800ddce <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ddb0:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <MlmeConfirm+0xc0>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7a1a      	ldrb	r2, [r3, #8]
 800ddba:	4b0c      	ldr	r3, [pc, #48]	; (800ddec <MlmeConfirm+0xc0>)
 800ddbc:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7a5a      	ldrb	r2, [r3, #9]
 800ddc2:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <MlmeConfirm+0xc0>)
 800ddc4:	73da      	strb	r2, [r3, #15]
        break;
 800ddc6:	e002      	b.n	800ddce <MlmeConfirm+0xa2>
        break;
 800ddc8:	bf00      	nop
 800ddca:	e000      	b.n	800ddce <MlmeConfirm+0xa2>
        break;
 800ddcc:	bf00      	nop
    }
}
 800ddce:	bf00      	nop
 800ddd0:	3730      	adds	r7, #48	; 0x30
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20002ef0 	.word	0x20002ef0
 800dddc:	20002ec8 	.word	0x20002ec8
 800dde0:	20000084 	.word	0x20000084
 800dde4:	200000a8 	.word	0x200000a8
 800dde8:	20002eb8 	.word	0x20002eb8
 800ddec:	200000ac 	.word	0x200000ac

0800ddf0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ddfa:	4b22      	ldr	r3, [pc, #136]	; (800de84 <MlmeIndication+0x94>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	785a      	ldrb	r2, [r3, #1]
 800de04:	4b1f      	ldr	r3, [pc, #124]	; (800de84 <MlmeIndication+0x94>)
 800de06:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de0e:	b25a      	sxtb	r2, r3
 800de10:	4b1c      	ldr	r3, [pc, #112]	; (800de84 <MlmeIndication+0x94>)
 800de12:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800de1a:	4b1a      	ldr	r3, [pc, #104]	; (800de84 <MlmeIndication+0x94>)
 800de1c:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	78db      	ldrb	r3, [r3, #3]
 800de22:	b25a      	sxtb	r2, r3
 800de24:	4b17      	ldr	r3, [pc, #92]	; (800de84 <MlmeIndication+0x94>)
 800de26:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800de28:	4b16      	ldr	r3, [pc, #88]	; (800de84 <MlmeIndication+0x94>)
 800de2a:	785b      	ldrb	r3, [r3, #1]
 800de2c:	2b0e      	cmp	r3, #14
 800de2e:	d005      	beq.n	800de3c <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800de30:	4b15      	ldr	r3, [pc, #84]	; (800de88 <MlmeIndication+0x98>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de36:	4913      	ldr	r1, [pc, #76]	; (800de84 <MlmeIndication+0x94>)
 800de38:	2000      	movs	r0, #0
 800de3a:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b07      	cmp	r3, #7
 800de42:	d117      	bne.n	800de74 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800de44:	2300      	movs	r3, #0
 800de46:	723b      	strb	r3, [r7, #8]
 800de48:	2300      	movs	r3, #0
 800de4a:	727b      	strb	r3, [r7, #9]
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800de50:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <MlmeIndication+0x9c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	4798      	blx	r3
 800de58:	4603      	mov	r3, r0
 800de5a:	f083 0301 	eor.w	r3, r3, #1
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d009      	beq.n	800de78 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800de64:	f107 0008 	add.w	r0, r7, #8
 800de68:	2301      	movs	r3, #1
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	f7ff fcdb 	bl	800d828 <LmHandlerSend>
            }
        }
        break;
 800de72:	e001      	b.n	800de78 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800de74:	bf00      	nop
 800de76:	e000      	b.n	800de7a <MlmeIndication+0x8a>
        break;
 800de78:	bf00      	nop
    }
}
 800de7a:	bf00      	nop
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	200000ac 	.word	0x200000ac
 800de88:	20002ec8 	.word	0x20002ec8
 800de8c:	20002ea4 	.word	0x20002ea4

0800de90 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800de9c:	2300      	movs	r3, #0
 800de9e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800dea0:	79fb      	ldrb	r3, [r7, #7]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d103      	bne.n	800deae <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800dea6:	f000 f943 	bl	800e130 <LmhpCompliancePackageFactory>
 800deaa:	60f8      	str	r0, [r7, #12]
            break;
 800deac:	e000      	b.n	800deb0 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800deae:	bf00      	nop
        }
    }
    if( package != NULL )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d02b      	beq.n	800df0e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	4918      	ldr	r1, [pc, #96]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	4a16      	ldr	r2, [pc, #88]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800dec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dec8:	4a15      	ldr	r2, [pc, #84]	; (800df20 <LmHandlerPackageRegister+0x90>)
 800deca:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800decc:	79fb      	ldrb	r3, [r7, #7]
 800dece:	4a13      	ldr	r2, [pc, #76]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ded4:	4a13      	ldr	r2, [pc, #76]	; (800df24 <LmHandlerPackageRegister+0x94>)
 800ded6:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	4a10      	ldr	r2, [pc, #64]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800dedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee0:	4a11      	ldr	r2, [pc, #68]	; (800df28 <LmHandlerPackageRegister+0x98>)
 800dee2:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800dee4:	4b11      	ldr	r3, [pc, #68]	; (800df2c <LmHandlerPackageRegister+0x9c>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	490c      	ldr	r1, [pc, #48]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800deec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800def0:	6912      	ldr	r2, [r2, #16]
 800def2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	4a09      	ldr	r2, [pc, #36]	; (800df1c <LmHandlerPackageRegister+0x8c>)
 800def8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	4a0c      	ldr	r2, [pc, #48]	; (800df30 <LmHandlerPackageRegister+0xa0>)
 800df00:	6851      	ldr	r1, [r2, #4]
 800df02:	4a0b      	ldr	r2, [pc, #44]	; (800df30 <LmHandlerPackageRegister+0xa0>)
 800df04:	7852      	ldrb	r2, [r2, #1]
 800df06:	6838      	ldr	r0, [r7, #0]
 800df08:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800df0a:	2300      	movs	r3, #0
 800df0c:	e001      	b.n	800df12 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800df0e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	20002ea4 	.word	0x20002ea4
 800df20:	0800d73d 	.word	0x0800d73d
 800df24:	0800d829 	.word	0x0800d829
 800df28:	0800d9d5 	.word	0x0800d9d5
 800df2c:	20002ec8 	.word	0x20002ec8
 800df30:	200000bc 	.word	0x200000bc

0800df34 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	2b04      	cmp	r3, #4
 800df42:	d80e      	bhi.n	800df62 <LmHandlerPackageIsInitialized+0x2e>
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	4a09      	ldr	r2, [pc, #36]	; (800df6c <LmHandlerPackageIsInitialized+0x38>)
 800df48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d007      	beq.n	800df62 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	4a05      	ldr	r2, [pc, #20]	; (800df6c <LmHandlerPackageIsInitialized+0x38>)
 800df56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	4798      	blx	r3
 800df5e:	4603      	mov	r3, r0
 800df60:	e000      	b.n	800df64 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800df62:	2300      	movs	r3, #0
    }
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20002ea4 	.word	0x20002ea4

0800df70 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	6039      	str	r1, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
 800df80:	e067      	b.n	800e052 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800df82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df86:	4a37      	ldr	r2, [pc, #220]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800df88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d051      	beq.n	800e034 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800df90:	79fb      	ldrb	r3, [r7, #7]
 800df92:	2b02      	cmp	r3, #2
 800df94:	d03d      	beq.n	800e012 <LmHandlerPackagesNotify+0xa2>
 800df96:	2b02      	cmp	r3, #2
 800df98:	dc4e      	bgt.n	800e038 <LmHandlerPackagesNotify+0xc8>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <LmHandlerPackagesNotify+0x34>
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d011      	beq.n	800dfc6 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800dfa2:	e049      	b.n	800e038 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800dfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfa8:	4a2e      	ldr	r2, [pc, #184]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800dfaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfae:	699b      	ldr	r3, [r3, #24]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d043      	beq.n	800e03c <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800dfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfb8:	4a2a      	ldr	r2, [pc, #168]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800dfba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	6838      	ldr	r0, [r7, #0]
 800dfc2:	4798      	blx	r3
                    break;
 800dfc4:	e03a      	b.n	800e03c <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800dfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfca:	4a26      	ldr	r2, [pc, #152]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800dfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d034      	beq.n	800e040 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800dfd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfda:	4a22      	ldr	r2, [pc, #136]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800dfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d00a      	beq.n	800e000 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800dfea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d126      	bne.n	800e040 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800dff2:	4b1c      	ldr	r3, [pc, #112]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	4798      	blx	r3
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d01f      	beq.n	800e040 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800e000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e004:	4a17      	ldr	r2, [pc, #92]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800e006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	6838      	ldr	r0, [r7, #0]
 800e00e:	4798      	blx	r3
                    break;
 800e010:	e016      	b.n	800e040 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e016:	4a13      	ldr	r2, [pc, #76]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d010      	beq.n	800e044 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800e022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e026:	4a0f      	ldr	r2, [pc, #60]	; (800e064 <LmHandlerPackagesNotify+0xf4>)
 800e028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	6838      	ldr	r0, [r7, #0]
 800e030:	4798      	blx	r3
                    break;
 800e032:	e007      	b.n	800e044 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800e034:	bf00      	nop
 800e036:	e006      	b.n	800e046 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e038:	bf00      	nop
 800e03a:	e004      	b.n	800e046 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e03c:	bf00      	nop
 800e03e:	e002      	b.n	800e046 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e040:	bf00      	nop
 800e042:	e000      	b.n	800e046 <LmHandlerPackagesNotify+0xd6>
                    break;
 800e044:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	3301      	adds	r3, #1
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	73fb      	strb	r3, [r7, #15]
 800e052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e056:	2b04      	cmp	r3, #4
 800e058:	dd93      	ble.n	800df82 <LmHandlerPackagesNotify+0x12>
    }
}
 800e05a:	bf00      	nop
 800e05c:	bf00      	nop
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20002ea4 	.word	0x20002ea4

0800e068 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e06e:	2300      	movs	r3, #0
 800e070:	71fb      	strb	r3, [r7, #7]
 800e072:	e022      	b.n	800e0ba <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e078:	4a14      	ldr	r2, [pc, #80]	; (800e0cc <LmHandlerPackagesProcess+0x64>)
 800e07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d015      	beq.n	800e0ae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e086:	4a11      	ldr	r2, [pc, #68]	; (800e0cc <LmHandlerPackagesProcess+0x64>)
 800e088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e08c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00d      	beq.n	800e0ae <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff ff4d 	bl	800df34 <LmHandlerPackageIsInitialized>
 800e09a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d006      	beq.n	800e0ae <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a4:	4a09      	ldr	r2, [pc, #36]	; (800e0cc <LmHandlerPackagesProcess+0x64>)
 800e0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	71fb      	strb	r3, [r7, #7]
 800e0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0be:	2b04      	cmp	r3, #4
 800e0c0:	ddd8      	ble.n	800e074 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e0c2:	bf00      	nop
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20002ea4 	.word	0x20002ea4

0800e0d0 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	4a06      	ldr	r2, [pc, #24]	; (800e0f8 <DisplayClassUpdate+0x28>)
 800e0de:	5cd3      	ldrb	r3, [r2, r3]
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <DisplayClassUpdate+0x2c>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	2002      	movs	r0, #2
 800e0ea:	f00d fff7 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	0801deb8 	.word	0x0801deb8
 800e0fc:	0801de9c 	.word	0x0801de9c

0800e100 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	bc80      	pop	{r7}
 800e112:	4770      	bx	lr

0800e114 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800e114:	b480      	push	{r7}
 800e116:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800e118:	2300      	movs	r3, #0
#endif
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bc80      	pop	{r7}
 800e120:	4770      	bx	lr

0800e122 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800e122:	b480      	push	{r7}
 800e124:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bc80      	pop	{r7}
 800e12e:	4770      	bx	lr

0800e130 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e130:	b480      	push	{r7}
 800e132:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800e134:	4b02      	ldr	r3, [pc, #8]	; (800e140 <LmhpCompliancePackageFactory+0x10>)
}
 800e136:	4618      	mov	r0, r3
 800e138:	46bd      	mov	sp, r7
 800e13a:	bc80      	pop	{r7}
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	200000c4 	.word	0x200000c4

0800e144 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	4613      	mov	r3, r2
 800e150:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00f      	beq.n	800e178 <LmhpComplianceInit+0x34>
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00c      	beq.n	800e178 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800e15e:	4a0c      	ldr	r2, [pc, #48]	; (800e190 <LmhpComplianceInit+0x4c>)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800e164:	4a0b      	ldr	r2, [pc, #44]	; (800e194 <LmhpComplianceInit+0x50>)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e16a:	4a0a      	ldr	r2, [pc, #40]	; (800e194 <LmhpComplianceInit+0x50>)
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <LmhpComplianceInit+0x50>)
 800e172:	2201      	movs	r2, #1
 800e174:	701a      	strb	r2, [r3, #0]
 800e176:	e006      	b.n	800e186 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <LmhpComplianceInit+0x4c>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e17e:	4b05      	ldr	r3, [pc, #20]	; (800e194 <LmhpComplianceInit+0x50>)
 800e180:	2200      	movs	r2, #0
 800e182:	701a      	strb	r2, [r3, #0]
    }
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bc80      	pop	{r7}
 800e18e:	4770      	bx	lr
 800e190:	20003028 	.word	0x20003028
 800e194:	20003014 	.word	0x20003014

0800e198 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e198:	b480      	push	{r7}
 800e19a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e19c:	4b02      	ldr	r3, [pc, #8]	; (800e1a8 <LmhpComplianceIsInitialized+0x10>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bc80      	pop	{r7}
 800e1a6:	4770      	bx	lr
 800e1a8:	20003014 	.word	0x20003014

0800e1ac <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <LmhpComplianceIsRunning+0x24>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f083 0301 	eor.w	r3, r3, #1
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e001      	b.n	800e1c6 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800e1c2:	4b03      	ldr	r3, [pc, #12]	; (800e1d0 <LmhpComplianceIsRunning+0x24>)
 800e1c4:	785b      	ldrb	r3, [r3, #1]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bc80      	pop	{r7}
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	20003014 	.word	0x20003014

0800e1d4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800e1dc:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	f083 0301 	eor.w	r3, r3, #1
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d112      	bne.n	800e210 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e1ec:	785b      	ldrb	r3, [r3, #1]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00f      	beq.n	800e212 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d10b      	bne.n	800e212 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d007      	beq.n	800e212 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e202:	4b06      	ldr	r3, [pc, #24]	; (800e21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e204:	899b      	ldrh	r3, [r3, #12]
 800e206:	3301      	adds	r3, #1
 800e208:	b29a      	uxth	r2, r3
 800e20a:	4b04      	ldr	r3, [pc, #16]	; (800e21c <LmhpComplianceOnMcpsConfirm+0x48>)
 800e20c:	819a      	strh	r2, [r3, #12]
 800e20e:	e000      	b.n	800e212 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800e210:	bf00      	nop
    }
}
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	bc80      	pop	{r7}
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	20003014 	.word	0x20003014

0800e220 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e228:	4b12      	ldr	r3, [pc, #72]	; (800e274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	f083 0301 	eor.w	r3, r3, #1
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d116      	bne.n	800e264 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e236:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e238:	785b      	ldrb	r3, [r3, #1]
 800e23a:	f083 0301 	eor.w	r3, r3, #1
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d111      	bne.n	800e268 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2b04      	cmp	r3, #4
 800e24a:	d10e      	bne.n	800e26a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800e24c:	4b09      	ldr	r3, [pc, #36]	; (800e274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e24e:	2201      	movs	r2, #1
 800e250:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7a1a      	ldrb	r2, [r3, #8]
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e258:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	7a5a      	ldrb	r2, [r3, #9]
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e260:	741a      	strb	r2, [r3, #16]
 800e262:	e002      	b.n	800e26a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e264:	bf00      	nop
 800e266:	e000      	b.n	800e26a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800e268:	bf00      	nop
    }
}
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bc80      	pop	{r7}
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	20003014 	.word	0x20003014

0800e278 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e27e:	4b33      	ldr	r3, [pc, #204]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f083 0301 	eor.w	r3, r3, #1
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e28c:	f04f 33ff 	mov.w	r3, #4294967295
 800e290:	e058      	b.n	800e344 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800e292:	4b2e      	ldr	r3, [pc, #184]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e294:	785b      	ldrb	r3, [r3, #1]
 800e296:	f083 0301 	eor.w	r3, r3, #1
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e04f      	b.n	800e344 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800e2a4:	4b29      	ldr	r3, [pc, #164]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2a6:	7b9b      	ldrb	r3, [r3, #14]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d019      	beq.n	800e2e0 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800e2ac:	4b27      	ldr	r3, [pc, #156]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800e2b2:	4b26      	ldr	r3, [pc, #152]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2b4:	2203      	movs	r2, #3
 800e2b6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800e2b8:	4b24      	ldr	r3, [pc, #144]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	2205      	movs	r2, #5
 800e2be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e2c0:	4b22      	ldr	r3, [pc, #136]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	4a21      	ldr	r2, [pc, #132]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2c8:	7bd2      	ldrb	r2, [r2, #15]
 800e2ca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e2cc:	4b1f      	ldr	r3, [pc, #124]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	3302      	adds	r3, #2
 800e2d2:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2d4:	7c12      	ldrb	r2, [r2, #16]
 800e2d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800e2d8:	4b1c      	ldr	r3, [pc, #112]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	709a      	strb	r2, [r3, #2]
 800e2de:	e01c      	b.n	800e31a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800e2e0:	4b1a      	ldr	r3, [pc, #104]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2e2:	789b      	ldrb	r3, [r3, #2]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d005      	beq.n	800e2f4 <LmhpComplianceTxProcess+0x7c>
 800e2e8:	2b04      	cmp	r3, #4
 800e2ea:	d116      	bne.n	800e31a <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800e2ec:	4b17      	ldr	r3, [pc, #92]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	709a      	strb	r2, [r3, #2]
            break;
 800e2f2:	e012      	b.n	800e31a <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800e2f4:	4b15      	ldr	r3, [pc, #84]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e2fa:	4b14      	ldr	r3, [pc, #80]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e2fc:	899b      	ldrh	r3, [r3, #12]
 800e2fe:	0a1b      	lsrs	r3, r3, #8
 800e300:	b29a      	uxth	r2, r3
 800e302:	4b12      	ldr	r3, [pc, #72]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	b2d2      	uxtb	r2, r2
 800e308:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e30a:	4b10      	ldr	r3, [pc, #64]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e30c:	899a      	ldrh	r2, [r3, #12]
 800e30e:	4b0f      	ldr	r3, [pc, #60]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	3301      	adds	r3, #1
 800e314:	b2d2      	uxtb	r2, r2
 800e316:	701a      	strb	r2, [r3, #0]
            break;
 800e318:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800e31a:	23e0      	movs	r3, #224	; 0xe0
 800e31c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800e31e:	4b0b      	ldr	r3, [pc, #44]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e320:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800e322:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800e324:	4b09      	ldr	r3, [pc, #36]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e326:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800e328:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800e32a:	4809      	ldr	r0, [pc, #36]	; (800e350 <LmhpComplianceTxProcess+0xd8>)
 800e32c:	f00e fd48 	bl	801cdc0 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <LmhpComplianceTxProcess+0xdc>)
 800e332:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800e334:	4b05      	ldr	r3, [pc, #20]	; (800e34c <LmhpComplianceTxProcess+0xd4>)
 800e336:	78db      	ldrb	r3, [r3, #3]
 800e338:	4619      	mov	r1, r3
 800e33a:	4638      	mov	r0, r7
 800e33c:	2301      	movs	r3, #1
 800e33e:	2200      	movs	r2, #0
 800e340:	47a0      	blx	r4
 800e342:	4603      	mov	r3, r0
}
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd90      	pop	{r4, r7, pc}
 800e34c:	20003014 	.word	0x20003014
 800e350:	20002ffc 	.word	0x20002ffc
 800e354:	200000c4 	.word	0x200000c4

0800e358 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b0a2      	sub	sp, #136	; 0x88
 800e35c:	af02      	add	r7, sp, #8
 800e35e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e360:	4ba2      	ldr	r3, [pc, #648]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	f083 0301 	eor.w	r3, r3, #1
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f040 81c0 	bne.w	800e6f0 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	7b5b      	ldrb	r3, [r3, #13]
 800e374:	f083 0301 	eor.w	r3, r3, #1
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f040 81ba 	bne.w	800e6f4 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800e380:	4b9a      	ldr	r3, [pc, #616]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00c      	beq.n	800e3a2 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	7b9b      	ldrb	r3, [r3, #14]
 800e38c:	f083 0301 	eor.w	r3, r3, #1
 800e390:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800e392:	2b00      	cmp	r3, #0
 800e394:	d005      	beq.n	800e3a2 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e396:	4b95      	ldr	r3, [pc, #596]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e398:	899b      	ldrh	r3, [r3, #12]
 800e39a:	3301      	adds	r3, #1
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	4b93      	ldr	r3, [pc, #588]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e3a0:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	78db      	ldrb	r3, [r3, #3]
 800e3a6:	2be0      	cmp	r3, #224	; 0xe0
 800e3a8:	f040 81a6 	bne.w	800e6f8 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e3ac:	4b8f      	ldr	r3, [pc, #572]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e3ae:	785b      	ldrb	r3, [r3, #1]
 800e3b0:	f083 0301 	eor.w	r3, r3, #1
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d060      	beq.n	800e47c <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7b1b      	ldrb	r3, [r3, #12]
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	f040 819f 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	f040 8199 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	f040 8192 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	3302      	adds	r3, #2
 800e3e4:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	f040 818b 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	3303      	adds	r3, #3
 800e3f2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	f040 8184 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800e3fa:	4b7c      	ldr	r3, [pc, #496]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800e400:	4b7a      	ldr	r3, [pc, #488]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e402:	22e0      	movs	r2, #224	; 0xe0
 800e404:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800e406:	4b79      	ldr	r3, [pc, #484]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e408:	2202      	movs	r2, #2
 800e40a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800e40c:	4b77      	ldr	r3, [pc, #476]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e40e:	2200      	movs	r2, #0
 800e410:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800e412:	4b76      	ldr	r3, [pc, #472]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e414:	2200      	movs	r2, #0
 800e416:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800e418:	4b74      	ldr	r3, [pc, #464]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800e41e:	4b73      	ldr	r3, [pc, #460]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e420:	2200      	movs	r2, #0
 800e422:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800e424:	4b71      	ldr	r3, [pc, #452]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e426:	2201      	movs	r2, #1
 800e428:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800e42a:	4b70      	ldr	r3, [pc, #448]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e42c:	2201      	movs	r2, #1
 800e42e:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800e430:	2304      	movs	r3, #4
 800e432:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800e434:	2301      	movs	r3, #1
 800e436:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e438:	f107 0308 	add.w	r3, r7, #8
 800e43c:	4618      	mov	r0, r3
 800e43e:	f004 f829 	bl	8012494 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800e442:	2000      	movs	r0, #0
 800e444:	f004 fd9a 	bl	8012f7c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800e448:	4b69      	ldr	r3, [pc, #420]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800e452:	4b67      	ldr	r3, [pc, #412]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800e45a:	2300      	movs	r3, #0
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	4b65      	ldr	r3, [pc, #404]	; (800e5f4 <LmhpComplianceOnMcpsIndication+0x29c>)
 800e460:	2200      	movs	r2, #0
 800e462:	f04f 31ff 	mov.w	r1, #4294967295
 800e466:	4864      	ldr	r0, [pc, #400]	; (800e5f8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e468:	f00e fc74 	bl	801cd54 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800e46c:	f241 3188 	movw	r1, #5000	; 0x1388
 800e470:	4861      	ldr	r0, [pc, #388]	; (800e5f8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e472:	f00e fd83 	bl	801cf7c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800e476:	f7ff feff 	bl	800e278 <LmhpComplianceTxProcess>
 800e47a:	e142      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	781a      	ldrb	r2, [r3, #0]
 800e482:	4b5a      	ldr	r3, [pc, #360]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e484:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800e486:	4b59      	ldr	r3, [pc, #356]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e488:	789b      	ldrb	r3, [r3, #2]
 800e48a:	2b0a      	cmp	r3, #10
 800e48c:	f200 8136 	bhi.w	800e6fc <LmhpComplianceOnMcpsIndication+0x3a4>
 800e490:	a201      	add	r2, pc, #4	; (adr r2, 800e498 <LmhpComplianceOnMcpsIndication+0x140>)
 800e492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e496:	bf00      	nop
 800e498:	0800e4c5 	.word	0x0800e4c5
 800e49c:	0800e50f 	.word	0x0800e50f
 800e4a0:	0800e517 	.word	0x0800e517
 800e4a4:	0800e525 	.word	0x0800e525
 800e4a8:	0800e533 	.word	0x0800e533
 800e4ac:	0800e58b 	.word	0x0800e58b
 800e4b0:	0800e59d 	.word	0x0800e59d
 800e4b4:	0800e601 	.word	0x0800e601
 800e4b8:	0800e6a9 	.word	0x0800e6a9
 800e4bc:	0800e6bb 	.word	0x0800e6bb
 800e4c0:	0800e6d5 	.word	0x0800e6d5
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800e4c4:	484c      	ldr	r0, [pc, #304]	; (800e5f8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e4c6:	f00e fce9 	bl	801ce9c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e4ca:	4b48      	ldr	r3, [pc, #288]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e4d0:	4b46      	ldr	r3, [pc, #280]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e4d6:	2304      	movs	r3, #4
 800e4d8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e4da:	4b45      	ldr	r3, [pc, #276]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e4e2:	f107 0308 	add.w	r3, r7, #8
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f003 ffd4 	bl	8012494 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e4ec:	4b40      	ldr	r3, [pc, #256]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	785b      	ldrb	r3, [r3, #1]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f004 fd42 	bl	8012f7c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e4f8:	4b3d      	ldr	r3, [pc, #244]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 80fe 	beq.w	800e700 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e504:	4b3a      	ldr	r3, [pc, #232]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	4798      	blx	r3
                }
            }
            break;
 800e50c:	e0f8      	b.n	800e700 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800e50e:	4b37      	ldr	r3, [pc, #220]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e510:	2202      	movs	r2, #2
 800e512:	719a      	strb	r2, [r3, #6]
            break;
 800e514:	e0f5      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800e516:	4b35      	ldr	r3, [pc, #212]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e518:	2201      	movs	r2, #1
 800e51a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e51c:	4b33      	ldr	r3, [pc, #204]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e51e:	2201      	movs	r2, #1
 800e520:	709a      	strb	r2, [r3, #2]
            break;
 800e522:	e0ee      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800e524:	4b31      	ldr	r3, [pc, #196]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e526:	2200      	movs	r2, #0
 800e528:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800e52a:	4b30      	ldr	r3, [pc, #192]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e52c:	2201      	movs	r2, #1
 800e52e:	709a      	strb	r2, [r3, #2]
            break;
 800e530:	e0e7      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	7b1a      	ldrb	r2, [r3, #12]
 800e536:	4b2d      	ldr	r3, [pc, #180]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e538:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800e53a:	4b2c      	ldr	r3, [pc, #176]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	2204      	movs	r2, #4
 800e540:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e542:	2301      	movs	r3, #1
 800e544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e548:	e012      	b.n	800e570 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	689a      	ldr	r2, [r3, #8]
 800e54e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e552:	4413      	add	r3, r2
 800e554:	781a      	ldrb	r2, [r3, #0]
 800e556:	4b25      	ldr	r3, [pc, #148]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e558:	6899      	ldr	r1, [r3, #8]
 800e55a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e55e:	440b      	add	r3, r1
 800e560:	3201      	adds	r2, #1
 800e562:	b2d2      	uxtb	r2, r2
 800e564:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e566:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e56a:	3301      	adds	r3, #1
 800e56c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e570:	4b1e      	ldr	r3, [pc, #120]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e572:	795a      	ldrb	r2, [r3, #5]
 800e574:	4b1d      	ldr	r3, [pc, #116]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e576:	799b      	ldrb	r3, [r3, #6]
 800e578:	4293      	cmp	r3, r2
 800e57a:	bf28      	it	cs
 800e57c:	4613      	movcs	r3, r2
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800e584:	429a      	cmp	r2, r3
 800e586:	d3e0      	bcc.n	800e54a <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800e588:	e0bb      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800e58a:	2304      	movs	r3, #4
 800e58c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800e590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e594:	4618      	mov	r0, r3
 800e596:	f004 fabb 	bl	8012b10 <LoRaMacMlmeRequest>
            }
            break;
 800e59a:	e0b2      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800e59c:	4816      	ldr	r0, [pc, #88]	; (800e5f8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e59e:	f00e fc7d 	bl	801ce9c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e5a8:	4b10      	ldr	r3, [pc, #64]	; (800e5ec <LmhpComplianceOnMcpsIndication+0x294>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e5ae:	2304      	movs	r3, #4
 800e5b0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e5b2:	4b0f      	ldr	r3, [pc, #60]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e5ba:	f107 0308 	add.w	r3, r7, #8
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f003 ff68 	bl	8012494 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e5c4:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f004 fcd6 	bl	8012f7c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <LmhpComplianceOnMcpsIndication+0x298>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	689b      	ldr	r3, [r3, #8]
 800e5e0:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800e5e2:	4b06      	ldr	r3, [pc, #24]	; (800e5fc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e6:	2002      	movs	r0, #2
 800e5e8:	4798      	blx	r3
            }
            break;
 800e5ea:	e08a      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
 800e5ec:	20003014 	.word	0x20003014
 800e5f0:	20003028 	.word	0x20003028
 800e5f4:	0800e719 	.word	0x0800e719
 800e5f8:	20002ffc 	.word	0x20002ffc
 800e5fc:	200000c4 	.word	0x200000c4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	7b1b      	ldrb	r3, [r3, #12]
 800e604:	2b03      	cmp	r3, #3
 800e606:	d113      	bne.n	800e630 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e608:	2305      	movs	r3, #5
 800e60a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	3301      	adds	r3, #1
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	021b      	lsls	r3, r3, #8
 800e618:	b21a      	sxth	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	3302      	adds	r3, #2
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	b21b      	sxth	r3, r3
 800e624:	4313      	orrs	r3, r2
 800e626:	b21b      	sxth	r3, r3
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800e62e:	e032      	b.n	800e696 <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7b1b      	ldrb	r3, [r3, #12]
 800e634:	2b07      	cmp	r3, #7
 800e636:	d12e      	bne.n	800e696 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800e638:	2306      	movs	r3, #6
 800e63a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	3301      	adds	r3, #1
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	021b      	lsls	r3, r3, #8
 800e648:	b21a      	sxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	3302      	adds	r3, #2
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	b21b      	sxth	r3, r3
 800e654:	4313      	orrs	r3, r2
 800e656:	b21b      	sxth	r3, r3
 800e658:	b29b      	uxth	r3, r3
 800e65a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	3303      	adds	r3, #3
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	041a      	lsls	r2, r3, #16
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	3304      	adds	r3, #4
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	021b      	lsls	r3, r3, #8
 800e672:	4313      	orrs	r3, r2
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	6892      	ldr	r2, [r2, #8]
 800e678:	3205      	adds	r2, #5
 800e67a:	7812      	ldrb	r2, [r2, #0]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	461a      	mov	r2, r3
 800e680:	2364      	movs	r3, #100	; 0x64
 800e682:	fb02 f303 	mul.w	r3, r2, r3
 800e686:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	3306      	adds	r3, #6
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b25b      	sxtb	r3, r3
 800e692:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800e696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e69a:	4618      	mov	r0, r3
 800e69c:	f004 fa38 	bl	8012b10 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800e6a0:	4b19      	ldr	r3, [pc, #100]	; (800e708 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	709a      	strb	r2, [r3, #2]
            }
            break;
 800e6a6:	e02c      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800e6a8:	230a      	movs	r3, #10
 800e6aa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800e6ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f004 fa2c 	bl	8012b10 <LoRaMacMlmeRequest>
            }
            break;
 800e6b8:	e023      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e6c8:	f107 0308 	add.w	r3, r7, #8
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f003 fee1 	bl	8012494 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800e6d2:	e016      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e6d4:	230d      	movs	r3, #13
 800e6d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800e6e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f004 fa11 	bl	8012b10 <LoRaMacMlmeRequest>
            }
            break;
 800e6ee:	e008      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e6f0:	bf00      	nop
 800e6f2:	e006      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e6f4:	bf00      	nop
 800e6f6:	e004      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e6f8:	bf00      	nop
 800e6fa:	e002      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800e6fc:	bf00      	nop
 800e6fe:	e000      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800e700:	bf00      	nop
        }
    }
}
 800e702:	3780      	adds	r7, #128	; 0x80
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	20003014 	.word	0x20003014

0800e70c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e710:	bf00      	nop
 800e712:	46bd      	mov	sp, r7
 800e714:	bc80      	pop	{r7}
 800e716:	4770      	bx	lr

0800e718 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e720:	f7ff fdaa 	bl	800e278 <LmhpComplianceTxProcess>
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e72c:	b590      	push	{r4, r7, lr}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e732:	f00e fccd 	bl	801d0d0 <UTIL_TIMER_GetCurrentTime>
 800e736:	4603      	mov	r3, r0
 800e738:	4a16      	ldr	r2, [pc, #88]	; (800e794 <OnRadioTxDone+0x68>)
 800e73a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e73c:	4c16      	ldr	r4, [pc, #88]	; (800e798 <OnRadioTxDone+0x6c>)
 800e73e:	463b      	mov	r3, r7
 800e740:	4618      	mov	r0, r3
 800e742:	f00e fa39 	bl	801cbb8 <SysTimeGet>
 800e746:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e74a:	463a      	mov	r2, r7
 800e74c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e750:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e754:	4a11      	ldr	r2, [pc, #68]	; (800e79c <OnRadioTxDone+0x70>)
 800e756:	7813      	ldrb	r3, [r2, #0]
 800e758:	f043 0310 	orr.w	r3, r3, #16
 800e75c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e75e:	4b0e      	ldr	r3, [pc, #56]	; (800e798 <OnRadioTxDone+0x6c>)
 800e760:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00a      	beq.n	800e77e <OnRadioTxDone+0x52>
 800e768:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <OnRadioTxDone+0x6c>)
 800e76a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e774:	4b08      	ldr	r3, [pc, #32]	; (800e798 <OnRadioTxDone+0x6c>)
 800e776:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e77a:	691b      	ldr	r3, [r3, #16]
 800e77c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e77e:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <OnRadioTxDone+0x74>)
 800e780:	2201      	movs	r2, #1
 800e782:	2100      	movs	r1, #0
 800e784:	2002      	movs	r0, #2
 800e786:	f00d fca9 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd90      	pop	{r4, r7, pc}
 800e792:	bf00      	nop
 800e794:	20003b48 	.word	0x20003b48
 800e798:	2000302c 	.word	0x2000302c
 800e79c:	20003b44 	.word	0x20003b44
 800e7a0:	0801debc 	.word	0x0801debc

0800e7a4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	4608      	mov	r0, r1
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	817b      	strh	r3, [r7, #10]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	813b      	strh	r3, [r7, #8]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e7be:	f00e fc87 	bl	801d0d0 <UTIL_TIMER_GetCurrentTime>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4a16      	ldr	r2, [pc, #88]	; (800e820 <OnRadioRxDone+0x7c>)
 800e7c6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e7c8:	4a15      	ldr	r2, [pc, #84]	; (800e820 <OnRadioRxDone+0x7c>)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e7ce:	4a14      	ldr	r2, [pc, #80]	; (800e820 <OnRadioRxDone+0x7c>)
 800e7d0:	897b      	ldrh	r3, [r7, #10]
 800e7d2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e7d4:	4a12      	ldr	r2, [pc, #72]	; (800e820 <OnRadioRxDone+0x7c>)
 800e7d6:	893b      	ldrh	r3, [r7, #8]
 800e7d8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e7da:	4a11      	ldr	r2, [pc, #68]	; (800e820 <OnRadioRxDone+0x7c>)
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e7e0:	4a10      	ldr	r2, [pc, #64]	; (800e824 <OnRadioRxDone+0x80>)
 800e7e2:	7813      	ldrb	r3, [r2, #0]
 800e7e4:	f043 0308 	orr.w	r3, r3, #8
 800e7e8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e7ea:	4b0f      	ldr	r3, [pc, #60]	; (800e828 <OnRadioRxDone+0x84>)
 800e7ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00a      	beq.n	800e80a <OnRadioRxDone+0x66>
 800e7f4:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <OnRadioRxDone+0x84>)
 800e7f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d004      	beq.n	800e80a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <OnRadioRxDone+0x84>)
 800e802:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e80a:	4b08      	ldr	r3, [pc, #32]	; (800e82c <OnRadioRxDone+0x88>)
 800e80c:	2201      	movs	r2, #1
 800e80e:	2100      	movs	r1, #0
 800e810:	2002      	movs	r0, #2
 800e812:	f00d fc63 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	20003b4c 	.word	0x20003b4c
 800e824:	20003b44 	.word	0x20003b44
 800e828:	2000302c 	.word	0x2000302c
 800e82c:	0801decc 	.word	0x0801decc

0800e830 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e834:	4a0e      	ldr	r2, [pc, #56]	; (800e870 <OnRadioTxTimeout+0x40>)
 800e836:	7813      	ldrb	r3, [r2, #0]
 800e838:	f043 0304 	orr.w	r3, r3, #4
 800e83c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e83e:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <OnRadioTxTimeout+0x44>)
 800e840:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00a      	beq.n	800e85e <OnRadioTxTimeout+0x2e>
 800e848:	4b0a      	ldr	r3, [pc, #40]	; (800e874 <OnRadioTxTimeout+0x44>)
 800e84a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d004      	beq.n	800e85e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e854:	4b07      	ldr	r3, [pc, #28]	; (800e874 <OnRadioTxTimeout+0x44>)
 800e856:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e85e:	4b06      	ldr	r3, [pc, #24]	; (800e878 <OnRadioTxTimeout+0x48>)
 800e860:	2201      	movs	r2, #1
 800e862:	2100      	movs	r1, #0
 800e864:	2002      	movs	r0, #2
 800e866:	f00d fc39 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800e86a:	bf00      	nop
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20003b44 	.word	0x20003b44
 800e874:	2000302c 	.word	0x2000302c
 800e878:	0801dedc 	.word	0x0801dedc

0800e87c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e880:	4a0b      	ldr	r2, [pc, #44]	; (800e8b0 <OnRadioRxError+0x34>)
 800e882:	7813      	ldrb	r3, [r2, #0]
 800e884:	f043 0302 	orr.w	r3, r3, #2
 800e888:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e88a:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <OnRadioRxError+0x38>)
 800e88c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00a      	beq.n	800e8aa <OnRadioRxError+0x2e>
 800e894:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <OnRadioRxError+0x38>)
 800e896:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d004      	beq.n	800e8aa <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e8a0:	4b04      	ldr	r3, [pc, #16]	; (800e8b4 <OnRadioRxError+0x38>)
 800e8a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8a6:	691b      	ldr	r3, [r3, #16]
 800e8a8:	4798      	blx	r3
    }
}
 800e8aa:	bf00      	nop
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20003b44 	.word	0x20003b44
 800e8b4:	2000302c 	.word	0x2000302c

0800e8b8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e8bc:	4a0e      	ldr	r2, [pc, #56]	; (800e8f8 <OnRadioRxTimeout+0x40>)
 800e8be:	7813      	ldrb	r3, [r2, #0]
 800e8c0:	f043 0301 	orr.w	r3, r3, #1
 800e8c4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e8c6:	4b0d      	ldr	r3, [pc, #52]	; (800e8fc <OnRadioRxTimeout+0x44>)
 800e8c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <OnRadioRxTimeout+0x2e>
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	; (800e8fc <OnRadioRxTimeout+0x44>)
 800e8d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e8dc:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <OnRadioRxTimeout+0x44>)
 800e8de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e8e6:	4b06      	ldr	r3, [pc, #24]	; (800e900 <OnRadioRxTimeout+0x48>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2002      	movs	r0, #2
 800e8ee:	f00d fbf5 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 800e8f2:	bf00      	nop
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20003b44 	.word	0x20003b44
 800e8fc:	2000302c 	.word	0x2000302c
 800e900:	0801deec 	.word	0x0801deec

0800e904 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e904:	b480      	push	{r7}
 800e906:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e908:	4b08      	ldr	r3, [pc, #32]	; (800e92c <UpdateRxSlotIdleState+0x28>)
 800e90a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e90e:	2b02      	cmp	r3, #2
 800e910:	d004      	beq.n	800e91c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e912:	4b07      	ldr	r3, [pc, #28]	; (800e930 <UpdateRxSlotIdleState+0x2c>)
 800e914:	2206      	movs	r2, #6
 800e916:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e91a:	e003      	b.n	800e924 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e91c:	4b04      	ldr	r3, [pc, #16]	; (800e930 <UpdateRxSlotIdleState+0x2c>)
 800e91e:	2202      	movs	r2, #2
 800e920:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800e924:	bf00      	nop
 800e926:	46bd      	mov	sp, r7
 800e928:	bc80      	pop	{r7}
 800e92a:	4770      	bx	lr
 800e92c:	20003534 	.word	0x20003534
 800e930:	2000302c 	.word	0x2000302c

0800e934 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08e      	sub	sp, #56	; 0x38
 800e938:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e93a:	4b44      	ldr	r3, [pc, #272]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800e93c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e940:	2b02      	cmp	r3, #2
 800e942:	d002      	beq.n	800e94a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e944:	4b42      	ldr	r3, [pc, #264]	; (800ea50 <ProcessRadioTxDone+0x11c>)
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e94a:	4b42      	ldr	r3, [pc, #264]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800e94c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800e950:	4619      	mov	r1, r3
 800e952:	4841      	ldr	r0, [pc, #260]	; (800ea58 <ProcessRadioTxDone+0x124>)
 800e954:	f00e fb12 	bl	801cf7c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e958:	483f      	ldr	r0, [pc, #252]	; (800ea58 <ProcessRadioTxDone+0x124>)
 800e95a:	f00e fa31 	bl	801cdc0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e95e:	4b3d      	ldr	r3, [pc, #244]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800e960:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e964:	4619      	mov	r1, r3
 800e966:	483d      	ldr	r0, [pc, #244]	; (800ea5c <ProcessRadioTxDone+0x128>)
 800e968:	f00e fb08 	bl	801cf7c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e96c:	483b      	ldr	r0, [pc, #236]	; (800ea5c <ProcessRadioTxDone+0x128>)
 800e96e:	f00e fa27 	bl	801cdc0 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e972:	4b36      	ldr	r3, [pc, #216]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800e974:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d004      	beq.n	800e986 <ProcessRadioTxDone+0x52>
 800e97c:	4b35      	ldr	r3, [pc, #212]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800e97e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e982:	2b00      	cmp	r3, #0
 800e984:	d019      	beq.n	800e9ba <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e986:	2316      	movs	r3, #22
 800e988:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e98c:	4b2f      	ldr	r3, [pc, #188]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800e98e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e992:	f107 0220 	add.w	r2, r7, #32
 800e996:	4611      	mov	r1, r2
 800e998:	4618      	mov	r0, r3
 800e99a:	f006 fb8c 	bl	80150b6 <RegionGetPhyParam>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e9a2:	4b2c      	ldr	r3, [pc, #176]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800e9a4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	482c      	ldr	r0, [pc, #176]	; (800ea60 <ProcessRadioTxDone+0x12c>)
 800e9b0:	f00e fae4 	bl	801cf7c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e9b4:	482a      	ldr	r0, [pc, #168]	; (800ea60 <ProcessRadioTxDone+0x12c>)
 800e9b6:	f00e fa03 	bl	801cdc0 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <ProcessRadioTxDone+0x130>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a23      	ldr	r2, [pc, #140]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800e9c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e9c2:	4b24      	ldr	r3, [pc, #144]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800e9c4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800e9c8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e9ca:	4b26      	ldr	r3, [pc, #152]	; (800ea64 <ProcessRadioTxDone+0x130>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e9d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f00e f927 	bl	801cc28 <SysTimeGetMcuTime>
 800e9da:	4638      	mov	r0, r7
 800e9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800e9de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800e9e2:	9200      	str	r2, [sp, #0]
 800e9e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e9e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e9ec:	ca06      	ldmia	r2, {r1, r2}
 800e9ee:	f00e f87c 	bl	801caea <SysTimeSub>
 800e9f2:	f107 0314 	add.w	r3, r7, #20
 800e9f6:	463a      	mov	r2, r7
 800e9f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9fc:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ea00:	4b14      	ldr	r3, [pc, #80]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800ea02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800ea06:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ea0c:	4b0f      	ldr	r3, [pc, #60]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800ea0e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ea16:	2300      	movs	r3, #0
 800ea18:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	; (800ea4c <ProcessRadioTxDone+0x118>)
 800ea1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea20:	f107 0208 	add.w	r2, r7, #8
 800ea24:	4611      	mov	r1, r2
 800ea26:	4618      	mov	r0, r3
 800ea28:	f006 fb66 	bl	80150f8 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800ea2c:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800ea2e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ea32:	f083 0301 	eor.w	r3, r3, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea3c:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <ProcessRadioTxDone+0x120>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800ea44:	bf00      	nop
 800ea46:	3730      	adds	r7, #48	; 0x30
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20003534 	.word	0x20003534
 800ea50:	0801e648 	.word	0x0801e648
 800ea54:	2000302c 	.word	0x2000302c
 800ea58:	200033ac 	.word	0x200033ac
 800ea5c:	200033c4 	.word	0x200033c4
 800ea60:	20003424 	.word	0x20003424
 800ea64:	20003b48 	.word	0x20003b48

0800ea68 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ea6c:	4b10      	ldr	r3, [pc, #64]	; (800eab0 <PrepareRxDoneAbort+0x48>)
 800ea6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea76:	4a0e      	ldr	r2, [pc, #56]	; (800eab0 <PrepareRxDoneAbort+0x48>)
 800ea78:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800ea7c:	4b0c      	ldr	r3, [pc, #48]	; (800eab0 <PrepareRxDoneAbort+0x48>)
 800ea7e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800ea86:	2000      	movs	r0, #0
 800ea88:	f001 f8f8 	bl	800fc7c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ea8c:	4a08      	ldr	r2, [pc, #32]	; (800eab0 <PrepareRxDoneAbort+0x48>)
 800ea8e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ea92:	f043 0302 	orr.w	r3, r3, #2
 800ea96:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ea9a:	4a05      	ldr	r2, [pc, #20]	; (800eab0 <PrepareRxDoneAbort+0x48>)
 800ea9c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800eaa0:	f043 0320 	orr.w	r3, r3, #32
 800eaa4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800eaa8:	f7ff ff2c 	bl	800e904 <UpdateRxSlotIdleState>
}
 800eaac:	bf00      	nop
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	2000302c 	.word	0x2000302c

0800eab4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800eab4:	b5b0      	push	{r4, r5, r7, lr}
 800eab6:	b0a6      	sub	sp, #152	; 0x98
 800eab8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800eaba:	2313      	movs	r3, #19
 800eabc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800eac0:	4bb9      	ldr	r3, [pc, #740]	; (800eda8 <ProcessRadioRxDone+0x2f4>)
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800eac6:	4bb8      	ldr	r3, [pc, #736]	; (800eda8 <ProcessRadioRxDone+0x2f4>)
 800eac8:	891b      	ldrh	r3, [r3, #8]
 800eaca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800eace:	4bb6      	ldr	r3, [pc, #728]	; (800eda8 <ProcessRadioRxDone+0x2f4>)
 800ead0:	895b      	ldrh	r3, [r3, #10]
 800ead2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800ead6:	4bb4      	ldr	r3, [pc, #720]	; (800eda8 <ProcessRadioRxDone+0x2f4>)
 800ead8:	7b1b      	ldrb	r3, [r3, #12]
 800eada:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800eae4:	2300      	movs	r3, #0
 800eae6:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800eae8:	4bb0      	ldr	r3, [pc, #704]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800eaea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800eaee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800eafe:	4bac      	ldr	r3, [pc, #688]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800eb06:	4aaa      	ldr	r2, [pc, #680]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb08:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800eb0c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800eb10:	4aa7      	ldr	r2, [pc, #668]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800eb16:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800eb1a:	4ba5      	ldr	r3, [pc, #660]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb1c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800eb20:	4ba3      	ldr	r3, [pc, #652]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb22:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800eb26:	4ba2      	ldr	r3, [pc, #648]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800eb2e:	4ba0      	ldr	r3, [pc, #640]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800eb36:	4b9e      	ldr	r3, [pc, #632]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800eb3e:	4b9c      	ldr	r3, [pc, #624]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800eb46:	4b9a      	ldr	r3, [pc, #616]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800eb4e:	4b98      	ldr	r3, [pc, #608]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800eb56:	4b96      	ldr	r3, [pc, #600]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800eb5e:	4b94      	ldr	r3, [pc, #592]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800eb66:	4b92      	ldr	r3, [pc, #584]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800eb6e:	4b90      	ldr	r3, [pc, #576]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800eb76:	4b8e      	ldr	r3, [pc, #568]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800eb7e:	4b8d      	ldr	r3, [pc, #564]	; (800edb4 <ProcessRadioRxDone+0x300>)
 800eb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb82:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800eb84:	488c      	ldr	r0, [pc, #560]	; (800edb8 <ProcessRadioRxDone+0x304>)
 800eb86:	f00e f989 	bl	801ce9c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800eb8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800eb92:	f004 fb28 	bl	80131e6 <LoRaMacClassBRxBeacon>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00a      	beq.n	800ebb2 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800eb9c:	4a84      	ldr	r2, [pc, #528]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eb9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800eba2:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800eba6:	4a82      	ldr	r2, [pc, #520]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800eba8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ebac:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800ebb0:	e3bf      	b.n	800f332 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ebb2:	4b7e      	ldr	r3, [pc, #504]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ebb4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d11e      	bne.n	800ebfa <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ebbc:	f004 fb26 	bl	801320c <LoRaMacClassBIsPingExpected>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00a      	beq.n	800ebdc <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f004 fad7 	bl	801317a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ebcc:	2000      	movs	r0, #0
 800ebce:	f004 faf8 	bl	80131c2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ebd2:	4b77      	ldr	r3, [pc, #476]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800ebd4:	2204      	movs	r2, #4
 800ebd6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800ebda:	e00e      	b.n	800ebfa <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ebdc:	f004 fb1d 	bl	801321a <LoRaMacClassBIsMulticastExpected>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d009      	beq.n	800ebfa <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	f004 fad1 	bl	801318e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ebec:	2000      	movs	r0, #0
 800ebee:	f004 faf1 	bl	80131d4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ebf2:	4b6f      	ldr	r3, [pc, #444]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800ebf4:	2205      	movs	r2, #5
 800ebf6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ebfa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800ec04:	461a      	mov	r2, r3
 800ec06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec08:	4413      	add	r3, r2
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800ec10:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ec14:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	2b06      	cmp	r3, #6
 800ec1e:	f200 8362 	bhi.w	800f2e6 <ProcessRadioRxDone+0x832>
 800ec22:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <ProcessRadioRxDone+0x174>)
 800ec24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec28:	0800ec45 	.word	0x0800ec45
 800ec2c:	0800f2e7 	.word	0x0800f2e7
 800ec30:	0800edc5 	.word	0x0800edc5
 800ec34:	0800f2e7 	.word	0x0800f2e7
 800ec38:	0800edbd 	.word	0x0800edbd
 800ec3c:	0800f2e7 	.word	0x0800f2e7
 800ec40:	0800f28d 	.word	0x0800f28d
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ec44:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ec48:	2b10      	cmp	r3, #16
 800ec4a:	d806      	bhi.n	800ec5a <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec4c:	4b58      	ldr	r3, [pc, #352]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ec54:	f7ff ff08 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ec58:	e36b      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800ec5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec5c:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800ec5e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ec66:	4b51      	ldr	r3, [pc, #324]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ec68:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d006      	beq.n	800ec7e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec70:	4b4f      	ldr	r3, [pc, #316]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ec78:	f7ff fef6 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ec7c:	e359      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ec7e:	f7fe fbcf 	bl	800d420 <SecureElementGetJoinEui>
 800ec82:	4601      	mov	r1, r0
 800ec84:	f107 0308 	add.w	r3, r7, #8
 800ec88:	461a      	mov	r2, r3
 800ec8a:	20ff      	movs	r0, #255	; 0xff
 800ec8c:	f005 fc92 	bl	80145b4 <LoRaMacCryptoHandleJoinAccept>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ec96:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d172      	bne.n	800ed84 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ec9e:	7c7b      	ldrb	r3, [r7, #17]
 800eca0:	461a      	mov	r2, r3
 800eca2:	4b42      	ldr	r3, [pc, #264]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800eca4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800eca8:	4b40      	ldr	r3, [pc, #256]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecaa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ecae:	7cbb      	ldrb	r3, [r7, #18]
 800ecb0:	021b      	lsls	r3, r3, #8
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	4a3d      	ldr	r2, [pc, #244]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecb6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ecba:	4b3c      	ldr	r3, [pc, #240]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecbc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ecc0:	7cfb      	ldrb	r3, [r7, #19]
 800ecc2:	041b      	lsls	r3, r3, #16
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	4a39      	ldr	r2, [pc, #228]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecc8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	4a37      	ldr	r2, [pc, #220]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecd0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ecd4:	7e3b      	ldrb	r3, [r7, #24]
 800ecd6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	461a      	mov	r2, r3
 800ecde:	4b33      	ldr	r3, [pc, #204]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ece0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ece4:	7e3b      	ldrb	r3, [r7, #24]
 800ece6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	461a      	mov	r2, r3
 800ecee:	4b2f      	ldr	r3, [pc, #188]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ecf0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ecf4:	7e3b      	ldrb	r3, [r7, #24]
 800ecf6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	4b2b      	ldr	r3, [pc, #172]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ed04:	7e7b      	ldrb	r3, [r7, #25]
 800ed06:	461a      	mov	r2, r3
 800ed08:	4b28      	ldr	r3, [pc, #160]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed0a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ed0c:	4b27      	ldr	r3, [pc, #156]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d102      	bne.n	800ed1a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800ed14:	4b25      	ldr	r3, [pc, #148]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed16:	2201      	movs	r2, #1
 800ed18:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ed1a:	4b24      	ldr	r3, [pc, #144]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed22:	fb02 f303 	mul.w	r3, r2, r3
 800ed26:	4a21      	ldr	r2, [pc, #132]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed28:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ed2a:	4b20      	ldr	r3, [pc, #128]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ed32:	4a1e      	ldr	r2, [pc, #120]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed34:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ed36:	4b1d      	ldr	r3, [pc, #116]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ed3e:	f107 0308 	add.w	r3, r7, #8
 800ed42:	3312      	adds	r3, #18
 800ed44:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ed46:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	3b11      	subs	r3, #17
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ed54:	4b15      	ldr	r3, [pc, #84]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed5a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f006 fa19 	bl	8015198 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ed66:	4b11      	ldr	r3, [pc, #68]	; (800edac <ProcessRadioRxDone+0x2f8>)
 800ed68:	2202      	movs	r2, #2
 800ed6a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ed6e:	2001      	movs	r0, #1
 800ed70:	f004 ff18 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00e      	beq.n	800ed98 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ed7a:	2101      	movs	r1, #1
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	f004 fe85 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
 800ed82:	e009      	b.n	800ed98 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ed84:	2001      	movs	r0, #1
 800ed86:	f004 ff0d 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d003      	beq.n	800ed98 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ed90:	2101      	movs	r1, #1
 800ed92:	2007      	movs	r0, #7
 800ed94:	f004 fe7a 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ed98:	4a05      	ldr	r2, [pc, #20]	; (800edb0 <ProcessRadioRxDone+0x2fc>)
 800ed9a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed9e:	f043 0308 	orr.w	r3, r3, #8
 800eda2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800eda6:	e2a5      	b.n	800f2f4 <ProcessRadioRxDone+0x840>
 800eda8:	20003b4c 	.word	0x20003b4c
 800edac:	20003534 	.word	0x20003534
 800edb0:	2000302c 	.word	0x2000302c
 800edb4:	0801e648 	.word	0x0801e648
 800edb8:	200033c4 	.word	0x200033c4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800edbc:	4bae      	ldr	r3, [pc, #696]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800edc4:	4bad      	ldr	r3, [pc, #692]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800edc6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800edca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800edce:	4baa      	ldr	r3, [pc, #680]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800edd0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800edd4:	b25b      	sxtb	r3, r3
 800edd6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800edda:	230d      	movs	r3, #13
 800eddc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ede0:	4ba6      	ldr	r3, [pc, #664]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800ede2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800edea:	230e      	movs	r3, #14
 800edec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800edf0:	4ba2      	ldr	r3, [pc, #648]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800edf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edf6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800edfa:	4611      	mov	r1, r2
 800edfc:	4618      	mov	r0, r3
 800edfe:	f006 f95a 	bl	80150b6 <RegionGetPhyParam>
 800ee02:	4603      	mov	r3, r0
 800ee04:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ee06:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee0a:	3b0d      	subs	r3, #13
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	b21b      	sxth	r3, r3
 800ee10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee14:	b21a      	sxth	r2, r3
 800ee16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee18:	b21b      	sxth	r3, r3
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	dc03      	bgt.n	800ee26 <ProcessRadioRxDone+0x372>
 800ee1e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee22:	2b0b      	cmp	r3, #11
 800ee24:	d806      	bhi.n	800ee34 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee26:	4b94      	ldr	r3, [pc, #592]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee2e:	f7ff fe1b 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ee32:	e27e      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800ee34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee36:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800ee38:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ee42:	4b8f      	ldr	r3, [pc, #572]	; (800f080 <ProcessRadioRxDone+0x5cc>)
 800ee44:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ee46:	23ff      	movs	r3, #255	; 0xff
 800ee48:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ee4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ee50:	4618      	mov	r0, r3
 800ee52:	f005 feae 	bl	8014bb2 <LoRaMacParserData>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d006      	beq.n	800ee6a <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee5c:	4b86      	ldr	r3, [pc, #536]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee64:	f7ff fe00 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ee68:	e263      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	4a82      	ldr	r2, [pc, #520]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ee6e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ee72:	1cba      	adds	r2, r7, #2
 800ee74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ee78:	4611      	mov	r1, r2
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f002 fcde 	bl	801183c <DetermineFrameType>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d006      	beq.n	800ee94 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee86:	4b7c      	ldr	r3, [pc, #496]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ee8e:	f7ff fdeb 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ee92:	e24e      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ee94:	2300      	movs	r3, #0
 800ee96:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800eea4:	e049      	b.n	800ef3a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eea6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800eeaa:	4a74      	ldr	r2, [pc, #464]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800eeac:	212c      	movs	r1, #44	; 0x2c
 800eeae:	fb01 f303 	mul.w	r3, r1, r3
 800eeb2:	4413      	add	r3, r2
 800eeb4:	33d4      	adds	r3, #212	; 0xd4
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d138      	bne.n	800ef30 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800eebe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800eec2:	4a6e      	ldr	r2, [pc, #440]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800eec4:	212c      	movs	r1, #44	; 0x2c
 800eec6:	fb01 f303 	mul.w	r3, r1, r3
 800eeca:	4413      	add	r3, r2
 800eecc:	33d2      	adds	r3, #210	; 0xd2
 800eece:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d02d      	beq.n	800ef30 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800eed4:	2301      	movs	r3, #1
 800eed6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800eeda:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800eede:	4a67      	ldr	r2, [pc, #412]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800eee0:	212c      	movs	r1, #44	; 0x2c
 800eee2:	fb01 f303 	mul.w	r3, r1, r3
 800eee6:	4413      	add	r3, r2
 800eee8:	33d3      	adds	r3, #211	; 0xd3
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800eef0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800eef4:	4a61      	ldr	r2, [pc, #388]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800eef6:	212c      	movs	r1, #44	; 0x2c
 800eef8:	fb01 f303 	mul.w	r3, r1, r3
 800eefc:	4413      	add	r3, r2
 800eefe:	33f0      	adds	r3, #240	; 0xf0
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ef06:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef0a:	4a5c      	ldr	r2, [pc, #368]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800ef0c:	212c      	movs	r1, #44	; 0x2c
 800ef0e:	fb01 f303 	mul.w	r3, r1, r3
 800ef12:	4413      	add	r3, r2
 800ef14:	33d4      	adds	r3, #212	; 0xd4
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ef1c:	4b57      	ldr	r3, [pc, #348]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800ef1e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d10e      	bne.n	800ef44 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ef26:	4b54      	ldr	r3, [pc, #336]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ef28:	2203      	movs	r2, #3
 800ef2a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800ef2e:	e009      	b.n	800ef44 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef30:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef34:	3301      	adds	r3, #1
 800ef36:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ef3a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0b1      	beq.n	800eea6 <ProcessRadioRxDone+0x3f2>
 800ef42:	e000      	b.n	800ef46 <ProcessRadioRxDone+0x492>
                    break;
 800ef44:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ef46:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d117      	bne.n	800ef7e <ProcessRadioRxDone+0x4ca>
 800ef4e:	78bb      	ldrb	r3, [r7, #2]
 800ef50:	2b03      	cmp	r3, #3
 800ef52:	d10d      	bne.n	800ef70 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ef54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ef58:	f003 0320 	and.w	r3, r3, #32
 800ef5c:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d106      	bne.n	800ef70 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ef62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ef66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef6a:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d006      	beq.n	800ef7e <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef70:	4b41      	ldr	r3, [pc, #260]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ef78:	f7ff fd76 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800ef7c:	e1d9      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ef7e:	2315      	movs	r3, #21
 800ef80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef84:	4b3d      	ldr	r3, [pc, #244]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800ef86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ef8e:	4611      	mov	r1, r2
 800ef90:	4618      	mov	r0, r3
 800ef92:	f006 f890 	bl	80150b6 <RegionGetPhyParam>
 800ef96:	4603      	mov	r3, r0
 800ef98:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ef9a:	78b9      	ldrb	r1, [r7, #2]
 800ef9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	4d36      	ldr	r5, [pc, #216]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800efa2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800efa6:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800efaa:	1d3a      	adds	r2, r7, #4
 800efac:	9202      	str	r2, [sp, #8]
 800efae:	1cfa      	adds	r2, r7, #3
 800efb0:	9201      	str	r2, [sp, #4]
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800efb8:	4622      	mov	r2, r4
 800efba:	f000 fe95 	bl	800fce8 <GetFCntDown>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800efc4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d031      	beq.n	800f030 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800efcc:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800efd0:	2b07      	cmp	r3, #7
 800efd2:	d119      	bne.n	800f008 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800efd4:	4b28      	ldr	r3, [pc, #160]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800efd6:	2208      	movs	r2, #8
 800efd8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800efdc:	4b27      	ldr	r3, [pc, #156]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800efde:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d11d      	bne.n	800f022 <ProcessRadioRxDone+0x56e>
 800efe6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800efea:	f023 031f 	bic.w	r3, r3, #31
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2ba0      	cmp	r3, #160	; 0xa0
 800eff2:	d116      	bne.n	800f022 <ProcessRadioRxDone+0x56e>
 800eff4:	4b21      	ldr	r3, [pc, #132]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800eff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800effa:	429a      	cmp	r2, r3
 800effc:	d111      	bne.n	800f022 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800effe:	4b1f      	ldr	r3, [pc, #124]	; (800f07c <ProcessRadioRxDone+0x5c8>)
 800f000:	2201      	movs	r2, #1
 800f002:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f006:	e00c      	b.n	800f022 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f008:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f00c:	2b08      	cmp	r3, #8
 800f00e:	d104      	bne.n	800f01a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f010:	4b19      	ldr	r3, [pc, #100]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800f012:	220a      	movs	r2, #10
 800f014:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f018:	e003      	b.n	800f022 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f01a:	4b17      	ldr	r3, [pc, #92]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800f01c:	2201      	movs	r2, #1
 800f01e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	4a14      	ldr	r2, [pc, #80]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800f026:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800f02a:	f7ff fd1d 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800f02e:	e180      	b.n	800f332 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f030:	78fa      	ldrb	r2, [r7, #3]
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800f038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	460b      	mov	r3, r1
 800f040:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f044:	f005 fc02 	bl	801484c <LoRaMacCryptoUnsecureMessage>
 800f048:	4603      	mov	r3, r0
 800f04a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f04e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f052:	2b00      	cmp	r3, #0
 800f054:	d016      	beq.n	800f084 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f056:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	d104      	bne.n	800f068 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f05e:	4b06      	ldr	r3, [pc, #24]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800f060:	220b      	movs	r2, #11
 800f062:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800f066:	e003      	b.n	800f070 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f068:	4b03      	ldr	r3, [pc, #12]	; (800f078 <ProcessRadioRxDone+0x5c4>)
 800f06a:	220c      	movs	r2, #12
 800f06c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800f070:	f7ff fcfa 	bl	800ea68 <PrepareRxDoneAbort>
                return;
 800f074:	e15d      	b.n	800f332 <ProcessRadioRxDone+0x87e>
 800f076:	bf00      	nop
 800f078:	2000302c 	.word	0x2000302c
 800f07c:	20003534 	.word	0x20003534
 800f080:	20003264 	.word	0x20003264
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f084:	4bac      	ldr	r3, [pc, #688]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f086:	2200      	movs	r2, #0
 800f088:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800f08c:	4aaa      	ldr	r2, [pc, #680]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f08e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f092:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f096:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f09a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4ba5      	ldr	r3, [pc, #660]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0a4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800f0a8:	4ba3      	ldr	r3, [pc, #652]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800f0b0:	4ba1      	ldr	r3, [pc, #644]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a9f      	ldr	r2, [pc, #636]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0bc:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f0c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	bf14      	ite	ne
 800f0ce:	2301      	movne	r3, #1
 800f0d0:	2300      	moveq	r3, #0
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	4b98      	ldr	r3, [pc, #608]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0d6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f0da:	4b97      	ldr	r3, [pc, #604]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f0e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f0e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bf14      	ite	ne
 800f0f0:	2301      	movne	r3, #1
 800f0f2:	2300      	moveq	r3, #0
 800f0f4:	b2da      	uxtb	r2, r3
 800f0f6:	4b90      	ldr	r3, [pc, #576]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0f8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f0fc:	4b8e      	ldr	r3, [pc, #568]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f0fe:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f102:	2b00      	cmp	r3, #0
 800f104:	d004      	beq.n	800f110 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f106:	4b8c      	ldr	r3, [pc, #560]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f108:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d102      	bne.n	800f116 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f110:	4b8a      	ldr	r3, [pc, #552]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f112:	2200      	movs	r2, #0
 800f114:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f116:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d104      	bne.n	800f128 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f11e:	4b86      	ldr	r3, [pc, #536]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f120:	2202      	movs	r2, #2
 800f122:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f126:	e01f      	b.n	800f168 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f128:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f12c:	f023 031f 	bic.w	r3, r3, #31
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2ba0      	cmp	r3, #160	; 0xa0
 800f134:	d110      	bne.n	800f158 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f136:	4b81      	ldr	r3, [pc, #516]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f138:	2201      	movs	r2, #1
 800f13a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f13e:	4b7f      	ldr	r3, [pc, #508]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f140:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f14a:	4a7c      	ldr	r2, [pc, #496]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f14c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f14e:	4b7a      	ldr	r3, [pc, #488]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f150:	2201      	movs	r2, #1
 800f152:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800f156:	e007      	b.n	800f168 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f158:	4b78      	ldr	r3, [pc, #480]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f160:	4b75      	ldr	r3, [pc, #468]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f162:	2200      	movs	r2, #0
 800f164:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f168:	4b73      	ldr	r3, [pc, #460]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f16a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f16e:	4a72      	ldr	r2, [pc, #456]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f170:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800f174:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800f178:	4618      	mov	r0, r3
 800f17a:	f001 ff0d 	bl	8010f98 <RemoveMacCommands>

            switch( fType )
 800f17e:	78bb      	ldrb	r3, [r7, #2]
 800f180:	2b03      	cmp	r3, #3
 800f182:	d874      	bhi.n	800f26e <ProcessRadioRxDone+0x7ba>
 800f184:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <ProcessRadioRxDone+0x6d8>)
 800f186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18a:	bf00      	nop
 800f18c:	0800f19d 	.word	0x0800f19d
 800f190:	0800f1ed 	.word	0x0800f1ed
 800f194:	0800f223 	.word	0x0800f223
 800f198:	0800f249 	.word	0x0800f249
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f19c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f1a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	461c      	mov	r4, r3
 800f1a8:	4b63      	ldr	r3, [pc, #396]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1aa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f1ae:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f1b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f1b6:	f102 0010 	add.w	r0, r2, #16
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	4622      	mov	r2, r4
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	f000 ff03 	bl	800ffcc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f1c6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f1ca:	4b5b      	ldr	r3, [pc, #364]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1cc:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1d2:	4a59      	ldr	r2, [pc, #356]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1d4:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f1d8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f1dc:	4b56      	ldr	r3, [pc, #344]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1de:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f1e2:	4b55      	ldr	r3, [pc, #340]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f1ea:	e047      	b.n	800f27c <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f1ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f1f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	461c      	mov	r4, r3
 800f1f8:	4b4f      	ldr	r3, [pc, #316]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f1fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f1fe:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f202:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f206:	f102 0010 	add.w	r0, r2, #16
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	460b      	mov	r3, r1
 800f20e:	4622      	mov	r2, r4
 800f210:	2100      	movs	r1, #0
 800f212:	f000 fedb 	bl	800ffcc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f216:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f21a:	4b47      	ldr	r3, [pc, #284]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f21c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f220:	e02c      	b.n	800f27c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f222:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f224:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f228:	4b43      	ldr	r3, [pc, #268]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f22a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f22e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	460b      	mov	r3, r1
 800f236:	2100      	movs	r1, #0
 800f238:	f000 fec8 	bl	800ffcc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f23c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f240:	4b3d      	ldr	r3, [pc, #244]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f242:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800f246:	e019      	b.n	800f27c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f248:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f24c:	4b3a      	ldr	r3, [pc, #232]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f24e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f254:	4a38      	ldr	r2, [pc, #224]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f256:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f25a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800f25e:	4b36      	ldr	r3, [pc, #216]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f260:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800f264:	4b34      	ldr	r3, [pc, #208]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f266:	2201      	movs	r2, #1
 800f268:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800f26c:	e006      	b.n	800f27c <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f26e:	4b32      	ldr	r3, [pc, #200]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f270:	2201      	movs	r2, #1
 800f272:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800f276:	f7ff fbf7 	bl	800ea68 <PrepareRxDoneAbort>
                    break;
 800f27a:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f27c:	4a2e      	ldr	r2, [pc, #184]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f27e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f282:	f043 0302 	orr.w	r3, r3, #2
 800f286:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800f28a:	e033      	b.n	800f2f4 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f28c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f290:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f292:	18d1      	adds	r1, r2, r3
 800f294:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f298:	b29b      	uxth	r3, r3
 800f29a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4826      	ldr	r0, [pc, #152]	; (800f340 <ProcessRadioRxDone+0x88c>)
 800f2a6:	f009 fdc6 	bl	8018e36 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f2aa:	4b23      	ldr	r3, [pc, #140]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2ac:	2203      	movs	r2, #3
 800f2ae:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f2b2:	4b21      	ldr	r3, [pc, #132]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f2ba:	4b1f      	ldr	r3, [pc, #124]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2bc:	4a20      	ldr	r2, [pc, #128]	; (800f340 <ProcessRadioRxDone+0x88c>)
 800f2be:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f2c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f2c6:	b2da      	uxtb	r2, r3
 800f2c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	b2da      	uxtb	r2, r3
 800f2d0:	4b19      	ldr	r3, [pc, #100]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2d2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f2d6:	4a18      	ldr	r2, [pc, #96]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2d8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f2dc:	f043 0302 	orr.w	r3, r3, #2
 800f2e0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800f2e4:	e006      	b.n	800f2f4 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f2e6:	4b14      	ldr	r3, [pc, #80]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800f2ee:	f7ff fbbb 	bl	800ea68 <PrepareRxDoneAbort>
            break;
 800f2f2:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f2f6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d008      	beq.n	800f310 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f2fe:	4b0e      	ldr	r3, [pc, #56]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f300:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00b      	beq.n	800f320 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f308:	2000      	movs	r0, #0
 800f30a:	f000 fcb7 	bl	800fc7c <OnAckTimeoutTimerEvent>
 800f30e:	e007      	b.n	800f320 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <ProcessRadioRxDone+0x888>)
 800f312:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f316:	2b02      	cmp	r3, #2
 800f318:	d102      	bne.n	800f320 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f31a:	2000      	movs	r0, #0
 800f31c:	f000 fcae 	bl	800fc7c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f320:	4a05      	ldr	r2, [pc, #20]	; (800f338 <ProcessRadioRxDone+0x884>)
 800f322:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f326:	f043 0320 	orr.w	r3, r3, #32
 800f32a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800f32e:	f7ff fae9 	bl	800e904 <UpdateRxSlotIdleState>
}
 800f332:	3788      	adds	r7, #136	; 0x88
 800f334:	46bd      	mov	sp, r7
 800f336:	bdb0      	pop	{r4, r5, r7, pc}
 800f338:	2000302c 	.word	0x2000302c
 800f33c:	20003534 	.word	0x20003534
 800f340:	20003264 	.word	0x20003264

0800f344 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f348:	4b11      	ldr	r3, [pc, #68]	; (800f390 <ProcessRadioTxTimeout+0x4c>)
 800f34a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f34e:	2b02      	cmp	r3, #2
 800f350:	d002      	beq.n	800f358 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f352:	4b10      	ldr	r3, [pc, #64]	; (800f394 <ProcessRadioTxTimeout+0x50>)
 800f354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f356:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f358:	f7ff fad4 	bl	800e904 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f35c:	4b0e      	ldr	r3, [pc, #56]	; (800f398 <ProcessRadioTxTimeout+0x54>)
 800f35e:	2202      	movs	r2, #2
 800f360:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f364:	2002      	movs	r0, #2
 800f366:	f004 fbe9 	bl	8013b3c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f36a:	4b0b      	ldr	r3, [pc, #44]	; (800f398 <ProcessRadioTxTimeout+0x54>)
 800f36c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f370:	2b00      	cmp	r3, #0
 800f372:	d003      	beq.n	800f37c <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800f374:	4b08      	ldr	r3, [pc, #32]	; (800f398 <ProcessRadioTxTimeout+0x54>)
 800f376:	2201      	movs	r2, #1
 800f378:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f37c:	4a06      	ldr	r2, [pc, #24]	; (800f398 <ProcessRadioTxTimeout+0x54>)
 800f37e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f382:	f043 0320 	orr.w	r3, r3, #32
 800f386:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f38a:	bf00      	nop
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	20003534 	.word	0x20003534
 800f394:	0801e648 	.word	0x0801e648
 800f398:	2000302c 	.word	0x2000302c

0800f39c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	460a      	mov	r2, r1
 800f3a6:	71fb      	strb	r3, [r7, #7]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f3b0:	4b40      	ldr	r3, [pc, #256]	; (800f4b4 <HandleRadioRxErrorTimeout+0x118>)
 800f3b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d002      	beq.n	800f3c0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f3ba:	4b3f      	ldr	r3, [pc, #252]	; (800f4b8 <HandleRadioRxErrorTimeout+0x11c>)
 800f3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3be:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f3c0:	f003 ff1d 	bl	80131fe <LoRaMacClassBIsBeaconExpected>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f3ca:	2002      	movs	r0, #2
 800f3cc:	f003 fecb 	bl	8013166 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	f003 feed 	bl	80131b0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f3da:	4b36      	ldr	r3, [pc, #216]	; (800f4b4 <HandleRadioRxErrorTimeout+0x118>)
 800f3dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d119      	bne.n	800f418 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f3e4:	f003 ff12 	bl	801320c <LoRaMacClassBIsPingExpected>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d007      	beq.n	800f3fe <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	f003 fec3 	bl	801317a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	f003 fee4 	bl	80131c2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f3fe:	f003 ff0c 	bl	801321a <LoRaMacClassBIsMulticastExpected>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d007      	beq.n	800f418 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f408:	2000      	movs	r0, #0
 800f40a:	f003 fec0 	bl	801318e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f40e:	2000      	movs	r0, #0
 800f410:	f003 fee0 	bl	80131d4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f414:	2301      	movs	r3, #1
 800f416:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f418:	7bfb      	ldrb	r3, [r7, #15]
 800f41a:	f083 0301 	eor.w	r3, r3, #1
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d040      	beq.n	800f4a6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f424:	4b25      	ldr	r3, [pc, #148]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f426:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d122      	bne.n	800f474 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f42e:	4b23      	ldr	r3, [pc, #140]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f430:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f438:	4a20      	ldr	r2, [pc, #128]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	4618      	mov	r0, r3
 800f444:	f004 fb7a 	bl	8013b3c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f448:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <HandleRadioRxErrorTimeout+0x118>)
 800f44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44c:	4618      	mov	r0, r3
 800f44e:	f00d fe51 	bl	801d0f4 <UTIL_TIMER_GetElapsedTime>
 800f452:	4602      	mov	r2, r0
 800f454:	4b19      	ldr	r3, [pc, #100]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f456:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d323      	bcc.n	800f4a6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f45e:	4818      	ldr	r0, [pc, #96]	; (800f4c0 <HandleRadioRxErrorTimeout+0x124>)
 800f460:	f00d fd1c 	bl	801ce9c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f464:	4a15      	ldr	r2, [pc, #84]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f466:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f46a:	f043 0320 	orr.w	r3, r3, #32
 800f46e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800f472:	e018      	b.n	800f4a6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f474:	4b11      	ldr	r3, [pc, #68]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f476:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d003      	beq.n	800f486 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f47e:	4a0f      	ldr	r2, [pc, #60]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f480:	79bb      	ldrb	r3, [r7, #6]
 800f482:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f486:	79bb      	ldrb	r3, [r7, #6]
 800f488:	4618      	mov	r0, r3
 800f48a:	f004 fb57 	bl	8013b3c <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f48e:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <HandleRadioRxErrorTimeout+0x118>)
 800f490:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f494:	2b02      	cmp	r3, #2
 800f496:	d006      	beq.n	800f4a6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f498:	4a08      	ldr	r2, [pc, #32]	; (800f4bc <HandleRadioRxErrorTimeout+0x120>)
 800f49a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f49e:	f043 0320 	orr.w	r3, r3, #32
 800f4a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f4a6:	f7ff fa2d 	bl	800e904 <UpdateRxSlotIdleState>
}
 800f4aa:	bf00      	nop
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20003534 	.word	0x20003534
 800f4b8:	0801e648 	.word	0x0801e648
 800f4bc:	2000302c 	.word	0x2000302c
 800f4c0:	200033c4 	.word	0x200033c4

0800f4c4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f4c8:	2106      	movs	r1, #6
 800f4ca:	2005      	movs	r0, #5
 800f4cc:	f7ff ff66 	bl	800f39c <HandleRadioRxErrorTimeout>
}
 800f4d0:	bf00      	nop
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f4d8:	2104      	movs	r1, #4
 800f4da:	2003      	movs	r0, #3
 800f4dc:	f7ff ff5e 	bl	800f39c <HandleRadioRxErrorTimeout>
}
 800f4e0:	bf00      	nop
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f4ee:	607b      	str	r3, [r7, #4]
  return(result);
 800f4f0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f4f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4f4:	b672      	cpsid	i
}
 800f4f6:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f4f8:	4b1d      	ldr	r3, [pc, #116]	; (800f570 <LoRaMacHandleIrqEvents+0x8c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f4fe:	4b1c      	ldr	r3, [pc, #112]	; (800f570 <LoRaMacHandleIrqEvents+0x8c>)
 800f500:	2200      	movs	r2, #0
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	f383 8810 	msr	PRIMASK, r3
}
 800f50e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d027      	beq.n	800f566 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f516:	783b      	ldrb	r3, [r7, #0]
 800f518:	f003 0310 	and.w	r3, r3, #16
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f522:	f7ff fa07 	bl	800e934 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f526:	783b      	ldrb	r3, [r7, #0]
 800f528:	f003 0308 	and.w	r3, r3, #8
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f532:	f7ff fabf 	bl	800eab4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f536:	783b      	ldrb	r3, [r7, #0]
 800f538:	f003 0304 	and.w	r3, r3, #4
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f542:	f7ff feff 	bl	800f344 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f546:	783b      	ldrb	r3, [r7, #0]
 800f548:	f003 0302 	and.w	r3, r3, #2
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f552:	f7ff ffb7 	bl	800f4c4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f556:	783b      	ldrb	r3, [r7, #0]
 800f558:	f003 0301 	and.w	r3, r3, #1
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d001      	beq.n	800f566 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f562:	f7ff ffb7 	bl	800f4d4 <ProcessRadioRxTimeout>
        }
    }
}
 800f566:	bf00      	nop
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	20003b44 	.word	0x20003b44

0800f574 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f574:	b480      	push	{r7}
 800f576:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f578:	4b08      	ldr	r3, [pc, #32]	; (800f59c <LoRaMacIsBusy+0x28>)
 800f57a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f582:	4b06      	ldr	r3, [pc, #24]	; (800f59c <LoRaMacIsBusy+0x28>)
 800f584:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d101      	bne.n	800f590 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800f58c:	2300      	movs	r3, #0
 800f58e:	e000      	b.n	800f592 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800f590:	2301      	movs	r3, #1
}
 800f592:	4618      	mov	r0, r3
 800f594:	46bd      	mov	sp, r7
 800f596:	bc80      	pop	{r7}
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	2000302c 	.word	0x2000302c

0800f5a0 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f5aa:	4a04      	ldr	r2, [pc, #16]	; (800f5bc <LoRaMacEnableRequests+0x1c>)
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800f5b2:	bf00      	nop
 800f5b4:	370c      	adds	r7, #12
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bc80      	pop	{r7}
 800f5ba:	4770      	bx	lr
 800f5bc:	2000302c 	.word	0x2000302c

0800f5c0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f5c6:	4b2c      	ldr	r3, [pc, #176]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f5c8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f5cc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f5ce:	4b2a      	ldr	r3, [pc, #168]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f5d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d14a      	bne.n	800f66e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f5d8:	4b27      	ldr	r3, [pc, #156]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f5da:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d006      	beq.n	800f5f6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f5e8:	4a23      	ldr	r2, [pc, #140]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f5ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f5ee:	f36f 0300 	bfc	r3, #0, #1
 800f5f2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f5f6:	4b20      	ldr	r3, [pc, #128]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f5f8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f5fc:	f003 0304 	and.w	r3, r3, #4
 800f600:	b2db      	uxtb	r3, r3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d006      	beq.n	800f614 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f606:	4a1c      	ldr	r2, [pc, #112]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f608:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f60c:	f36f 0382 	bfc	r3, #2, #1
 800f610:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f614:	2001      	movs	r0, #1
 800f616:	f7ff ffc3 	bl	800f5a0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f61a:	793b      	ldrb	r3, [r7, #4]
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	b2db      	uxtb	r3, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d005      	beq.n	800f632 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f628:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4813      	ldr	r0, [pc, #76]	; (800f67c <LoRaMacHandleRequestEvents+0xbc>)
 800f630:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f632:	793b      	ldrb	r3, [r7, #4]
 800f634:	f003 0304 	and.w	r3, r3, #4
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00e      	beq.n	800f65c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f63e:	4810      	ldr	r0, [pc, #64]	; (800f680 <LoRaMacHandleRequestEvents+0xc0>)
 800f640:	f004 faca 	bl	8013bd8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f644:	f004 fb14 	bl	8013c70 <LoRaMacConfirmQueueGetCnt>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d006      	beq.n	800f65c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f64e:	4a0a      	ldr	r2, [pc, #40]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f650:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f654:	f043 0304 	orr.w	r3, r3, #4
 800f658:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f65c:	f003 fdfb 	bl	8013256 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f660:	4a05      	ldr	r2, [pc, #20]	; (800f678 <LoRaMacHandleRequestEvents+0xb8>)
 800f662:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f666:	f36f 1345 	bfc	r3, #5, #1
 800f66a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	2000302c 	.word	0x2000302c
 800f67c:	20003464 	.word	0x20003464
 800f680:	20003478 	.word	0x20003478

0800f684 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f68a:	4b0a      	ldr	r3, [pc, #40]	; (800f6b4 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800f68c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10a      	bne.n	800f6aa <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f694:	2300      	movs	r3, #0
 800f696:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f698:	1dfb      	adds	r3, r7, #7
 800f69a:	4618      	mov	r0, r3
 800f69c:	f004 f882 	bl	80137a4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f6a6:	f000 fc81 	bl	800ffac <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	2000302c 	.word	0x2000302c

0800f6b8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b088      	sub	sp, #32
 800f6bc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f6be:	4b25      	ldr	r3, [pc, #148]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f6c0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f6c4:	f003 0308 	and.w	r3, r3, #8
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00d      	beq.n	800f6ea <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f6ce:	4a21      	ldr	r2, [pc, #132]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f6d0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f6d4:	f36f 03c3 	bfc	r3, #3, #1
 800f6d8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f6dc:	4b1d      	ldr	r3, [pc, #116]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f6de:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	491c      	ldr	r1, [pc, #112]	; (800f758 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6e6:	481d      	ldr	r0, [pc, #116]	; (800f75c <LoRaMacHandleIndicationEvents+0xa4>)
 800f6e8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f6ea:	4b1a      	ldr	r3, [pc, #104]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f6ec:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f6f0:	f003 0310 	and.w	r3, r3, #16
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d012      	beq.n	800f720 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f6fa:	2307      	movs	r3, #7
 800f6fc:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800f702:	4b14      	ldr	r3, [pc, #80]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f704:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	1d3a      	adds	r2, r7, #4
 800f70c:	4912      	ldr	r1, [pc, #72]	; (800f758 <LoRaMacHandleIndicationEvents+0xa0>)
 800f70e:	4610      	mov	r0, r2
 800f710:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f712:	4a10      	ldr	r2, [pc, #64]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f714:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f718:	f36f 1304 	bfc	r3, #4, #1
 800f71c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f720:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f722:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00d      	beq.n	800f74c <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f730:	4a08      	ldr	r2, [pc, #32]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f732:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f736:	f36f 0341 	bfc	r3, #1, #1
 800f73a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f73e:	4b05      	ldr	r3, [pc, #20]	; (800f754 <LoRaMacHandleIndicationEvents+0x9c>)
 800f740:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	4904      	ldr	r1, [pc, #16]	; (800f758 <LoRaMacHandleIndicationEvents+0xa0>)
 800f748:	4805      	ldr	r0, [pc, #20]	; (800f760 <LoRaMacHandleIndicationEvents+0xa8>)
 800f74a:	4798      	blx	r3
    }
}
 800f74c:	bf00      	nop
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	2000302c 	.word	0x2000302c
 800f758:	200034a8 	.word	0x200034a8
 800f75c:	2000348c 	.word	0x2000348c
 800f760:	20003448 	.word	0x20003448

0800f764 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f76a:	4b32      	ldr	r3, [pc, #200]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f76c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f770:	f003 0301 	and.w	r3, r3, #1
 800f774:	b2db      	uxtb	r3, r3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d058      	beq.n	800f82c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f77a:	2300      	movs	r3, #0
 800f77c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f77e:	2300      	movs	r3, #0
 800f780:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f782:	4b2c      	ldr	r3, [pc, #176]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f784:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f78c:	4b29      	ldr	r3, [pc, #164]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f78e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f792:	2b03      	cmp	r3, #3
 800f794:	d104      	bne.n	800f7a0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f796:	f002 f89f 	bl	80118d8 <CheckRetransUnconfirmedUplink>
 800f79a:	4603      	mov	r3, r0
 800f79c:	71fb      	strb	r3, [r7, #7]
 800f79e:	e020      	b.n	800f7e2 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f7a0:	4b24      	ldr	r3, [pc, #144]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7a2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d11b      	bne.n	800f7e2 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f7aa:	4b22      	ldr	r3, [pc, #136]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7ac:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d014      	beq.n	800f7de <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f7b4:	f002 f8bc 	bl	8011930 <CheckRetransConfirmedUplink>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f7bc:	4b1e      	ldr	r3, [pc, #120]	; (800f838 <LoRaMacHandleMcpsRequest+0xd4>)
 800f7be:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10d      	bne.n	800f7e2 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f7c6:	79fb      	ldrb	r3, [r7, #7]
 800f7c8:	f083 0301 	eor.w	r3, r3, #1
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d002      	beq.n	800f7d8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f7d2:	f002 f929 	bl	8011a28 <AckTimeoutRetriesProcess>
 800f7d6:	e004      	b.n	800f7e2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f7d8:	f002 f964 	bl	8011aa4 <AckTimeoutRetriesFinalize>
 800f7dc:	e001      	b.n	800f7e2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00d      	beq.n	800f804 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f7e8:	4814      	ldr	r0, [pc, #80]	; (800f83c <LoRaMacHandleMcpsRequest+0xd8>)
 800f7ea:	f00d fb57 	bl	801ce9c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f7ee:	4b11      	ldr	r3, [pc, #68]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f7f4:	f023 0320 	bic.w	r3, r3, #32
 800f7f8:	4a0e      	ldr	r2, [pc, #56]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f7fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f7fe:	f002 f8b9 	bl	8011974 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f802:	e013      	b.n	800f82c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800f804:	79bb      	ldrb	r3, [r7, #6]
 800f806:	f083 0301 	eor.w	r3, r3, #1
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00d      	beq.n	800f82c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f810:	4a08      	ldr	r2, [pc, #32]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f812:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f816:	f36f 1345 	bfc	r3, #5, #1
 800f81a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800f81e:	4b05      	ldr	r3, [pc, #20]	; (800f834 <LoRaMacHandleMcpsRequest+0xd0>)
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800f826:	2000      	movs	r0, #0
 800f828:	f000 f97e 	bl	800fb28 <OnTxDelayedTimerEvent>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	2000302c 	.word	0x2000302c
 800f838:	20003534 	.word	0x20003534
 800f83c:	20003394 	.word	0x20003394

0800f840 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f844:	4b1b      	ldr	r3, [pc, #108]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f846:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f84a:	f003 0304 	and.w	r3, r3, #4
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b00      	cmp	r3, #0
 800f852:	d02c      	beq.n	800f8ae <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f854:	2001      	movs	r0, #1
 800f856:	f004 f9a5 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d012      	beq.n	800f886 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f860:	2001      	movs	r0, #1
 800f862:	f004 f941 	bl	8013ae8 <LoRaMacConfirmQueueGetStatus>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d103      	bne.n	800f874 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f86c:	4b11      	ldr	r3, [pc, #68]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f874:	4b0f      	ldr	r3, [pc, #60]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f876:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f87a:	f023 0302 	bic.w	r3, r3, #2
 800f87e:	4a0d      	ldr	r2, [pc, #52]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f880:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f884:	e013      	b.n	800f8ae <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f886:	2005      	movs	r0, #5
 800f888:	f004 f98c 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d105      	bne.n	800f89e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f892:	2006      	movs	r0, #6
 800f894:	f004 f986 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800f898:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d007      	beq.n	800f8ae <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f89e:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f8a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8a4:	f023 0302 	bic.w	r3, r3, #2
 800f8a8:	4a02      	ldr	r2, [pc, #8]	; (800f8b4 <LoRaMacHandleMlmeRequest+0x74>)
 800f8aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f8ae:	bf00      	nop
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	2000302c 	.word	0x2000302c

0800f8b8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f8bc:	200c      	movs	r0, #12
 800f8be:	f004 f971 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d019      	beq.n	800f8fc <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f8c8:	4b0e      	ldr	r3, [pc, #56]	; (800f904 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f8ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f8ce:	f003 0301 	and.w	r3, r3, #1
 800f8d2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d111      	bne.n	800f8fc <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f8d8:	4b0a      	ldr	r3, [pc, #40]	; (800f904 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f8da:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f8de:	f003 0304 	and.w	r3, r3, #4
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8e8:	4b06      	ldr	r3, [pc, #24]	; (800f904 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f8ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8ee:	f023 0302 	bic.w	r3, r3, #2
 800f8f2:	4a04      	ldr	r2, [pc, #16]	; (800f904 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f8f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e000      	b.n	800f8fe <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	2000302c 	.word	0x2000302c

0800f908 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f908:	b480      	push	{r7}
 800f90a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f90c:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <LoRaMacCheckForRxAbort+0x3c>)
 800f90e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00f      	beq.n	800f93a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f91a:	4b0a      	ldr	r3, [pc, #40]	; (800f944 <LoRaMacCheckForRxAbort+0x3c>)
 800f91c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f924:	4a07      	ldr	r2, [pc, #28]	; (800f944 <LoRaMacCheckForRxAbort+0x3c>)
 800f926:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f92a:	4b06      	ldr	r3, [pc, #24]	; (800f944 <LoRaMacCheckForRxAbort+0x3c>)
 800f92c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f930:	f023 0302 	bic.w	r3, r3, #2
 800f934:	4a03      	ldr	r2, [pc, #12]	; (800f944 <LoRaMacCheckForRxAbort+0x3c>)
 800f936:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f93a:	bf00      	nop
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bc80      	pop	{r7}
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	2000302c 	.word	0x2000302c

0800f948 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f954:	2300      	movs	r3, #0
 800f956:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f958:	4b50      	ldr	r3, [pc, #320]	; (800fa9c <LoRaMacHandleNvm+0x154>)
 800f95a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f040 8098 	bne.w	800fa94 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2124      	movs	r1, #36	; 0x24
 800f968:	4618      	mov	r0, r3
 800f96a:	f009 fab9 	bl	8018ee0 <Crc32>
 800f96e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	429a      	cmp	r2, r3
 800f978:	d006      	beq.n	800f988 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f980:	89fb      	ldrh	r3, [r7, #14]
 800f982:	f043 0301 	orr.w	r3, r3, #1
 800f986:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3328      	adds	r3, #40	; 0x28
 800f98c:	2114      	movs	r1, #20
 800f98e:	4618      	mov	r0, r3
 800f990:	f009 faa6 	bl	8018ee0 <Crc32>
 800f994:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f99a:	68ba      	ldr	r2, [r7, #8]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d006      	beq.n	800f9ae <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f9a6:	89fb      	ldrh	r3, [r7, #14]
 800f9a8:	f043 0302 	orr.w	r3, r3, #2
 800f9ac:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	3340      	adds	r3, #64	; 0x40
 800f9b2:	21d4      	movs	r1, #212	; 0xd4
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f009 fa93 	bl	8018ee0 <Crc32>
 800f9ba:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d007      	beq.n	800f9d8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f9d0:	89fb      	ldrh	r3, [r7, #14]
 800f9d2:	f043 0304 	orr.w	r3, r3, #4
 800f9d6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f9de:	21bc      	movs	r1, #188	; 0xbc
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f009 fa7d 	bl	8018ee0 <Crc32>
 800f9e6:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d007      	beq.n	800fa04 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f9fc:	89fb      	ldrh	r3, [r7, #14]
 800f9fe:	f043 0308 	orr.w	r3, r3, #8
 800fa02:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800fa0a:	21a0      	movs	r1, #160	; 0xa0
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f009 fa67 	bl	8018ee0 <Crc32>
 800fa12:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d007      	beq.n	800fa30 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fa28:	89fb      	ldrh	r3, [r7, #14]
 800fa2a:	f043 0310 	orr.w	r3, r3, #16
 800fa2e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800fa36:	f44f 715e 	mov.w	r1, #888	; 0x378
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f009 fa50 	bl	8018ee0 <Crc32>
 800fa40:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d007      	beq.n	800fa5e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fa56:	89fb      	ldrh	r3, [r7, #14]
 800fa58:	f043 0320 	orr.w	r3, r3, #32
 800fa5c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 800fa64:	2114      	movs	r1, #20
 800fa66:	4618      	mov	r0, r3
 800fa68:	f009 fa3a 	bl	8018ee0 <Crc32>
 800fa6c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d007      	beq.n	800fa8a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fa82:	89fb      	ldrh	r3, [r7, #14]
 800fa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa88:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fa8a:	89fb      	ldrh	r3, [r7, #14]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f001 ffad 	bl	80119ec <CallNvmDataChangeCallback>
 800fa92:	e000      	b.n	800fa96 <LoRaMacHandleNvm+0x14e>
        return;
 800fa94:	bf00      	nop
}
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	2000302c 	.word	0x2000302c

0800faa0 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800faa6:	2300      	movs	r3, #0
 800faa8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800faaa:	f7ff fd1b 	bl	800f4e4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800faae:	f003 fc36 	bl	801331e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fab2:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <LoRaMacProcess+0x80>)
 800fab4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fab8:	f003 0320 	and.w	r3, r3, #32
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d021      	beq.n	800fb06 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fac2:	2000      	movs	r0, #0
 800fac4:	f7ff fd6c 	bl	800f5a0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fac8:	f7ff ff1e 	bl	800f908 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800facc:	f002 f81e 	bl	8011b0c <IsRequestPending>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d006      	beq.n	800fae4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fad6:	f7ff feef 	bl	800f8b8 <LoRaMacCheckForBeaconAcquisition>
 800fada:	4603      	mov	r3, r0
 800fadc:	461a      	mov	r2, r3
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d103      	bne.n	800faf2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800faea:	f7ff fea9 	bl	800f840 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800faee:	f7ff fe39 	bl	800f764 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800faf2:	f7ff fd65 	bl	800f5c0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800faf6:	f7ff fdc5 	bl	800f684 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800fafa:	480a      	ldr	r0, [pc, #40]	; (800fb24 <LoRaMacProcess+0x84>)
 800fafc:	f7ff ff24 	bl	800f948 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fb00:	2001      	movs	r0, #1
 800fb02:	f7ff fd4d 	bl	800f5a0 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800fb06:	f7ff fdd7 	bl	800f6b8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fb0a:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <LoRaMacProcess+0x80>)
 800fb0c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d101      	bne.n	800fb18 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800fb14:	f001 fb7c 	bl	8011210 <OpenContinuousRxCWindow>
    }
}
 800fb18:	bf00      	nop
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	2000302c 	.word	0x2000302c
 800fb24:	20003534 	.word	0x20003534

0800fb28 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fb30:	4817      	ldr	r0, [pc, #92]	; (800fb90 <OnTxDelayedTimerEvent+0x68>)
 800fb32:	f00d f9b3 	bl	801ce9c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fb36:	4b17      	ldr	r3, [pc, #92]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb3c:	f023 0320 	bic.w	r3, r3, #32
 800fb40:	4a14      	ldr	r2, [pc, #80]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb42:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fb46:	2001      	movs	r0, #1
 800fb48:	f001 f8fc 	bl	8010d44 <ScheduleTx>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d018      	beq.n	800fb84 <OnTxDelayedTimerEvent+0x5c>
 800fb52:	2b0b      	cmp	r3, #11
 800fb54:	d016      	beq.n	800fb84 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb56:	4b10      	ldr	r3, [pc, #64]	; (800fb98 <OnTxDelayedTimerEvent+0x70>)
 800fb58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb60:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb66:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fb6a:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb6c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fb70:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <OnTxDelayedTimerEvent+0x6c>)
 800fb72:	2209      	movs	r2, #9
 800fb74:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fb78:	2009      	movs	r0, #9
 800fb7a:	f003 ffdf 	bl	8013b3c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fb7e:	f001 fef9 	bl	8011974 <StopRetransmission>
            break;
 800fb82:	e000      	b.n	800fb86 <OnTxDelayedTimerEvent+0x5e>
            break;
 800fb84:	bf00      	nop
        }
    }
}
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	20003394 	.word	0x20003394
 800fb94:	2000302c 	.word	0x2000302c
 800fb98:	20003534 	.word	0x20003534

0800fb9c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fba4:	4b14      	ldr	r3, [pc, #80]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fba6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fbaa:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fbb0:	4b12      	ldr	r3, [pc, #72]	; (800fbfc <OnRxWindow1TimerEvent+0x60>)
 800fbb2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fbb6:	b25a      	sxtb	r2, r3
 800fbb8:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbba:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fbbe:	4b0f      	ldr	r3, [pc, #60]	; (800fbfc <OnRxWindow1TimerEvent+0x60>)
 800fbc0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fbc4:	4b0c      	ldr	r3, [pc, #48]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbc6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fbca:	4b0c      	ldr	r3, [pc, #48]	; (800fbfc <OnRxWindow1TimerEvent+0x60>)
 800fbcc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fbd0:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbd2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fbd6:	4b08      	ldr	r3, [pc, #32]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fbde:	4b06      	ldr	r3, [pc, #24]	; (800fbf8 <OnRxWindow1TimerEvent+0x5c>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fbe6:	4906      	ldr	r1, [pc, #24]	; (800fc00 <OnRxWindow1TimerEvent+0x64>)
 800fbe8:	4806      	ldr	r0, [pc, #24]	; (800fc04 <OnRxWindow1TimerEvent+0x68>)
 800fbea:	f001 fae3 	bl	80111b4 <RxWindowSetup>
}
 800fbee:	bf00      	nop
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2000302c 	.word	0x2000302c
 800fbfc:	20003534 	.word	0x20003534
 800fc00:	200033e4 	.word	0x200033e4
 800fc04:	200033ac 	.word	0x200033ac

0800fc08 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fc10:	4b16      	ldr	r3, [pc, #88]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc12:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d023      	beq.n	800fc62 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fc1a:	4b14      	ldr	r3, [pc, #80]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc1c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fc20:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc22:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fc26:	4b12      	ldr	r3, [pc, #72]	; (800fc70 <OnRxWindow2TimerEvent+0x68>)
 800fc28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc2a:	4a10      	ldr	r2, [pc, #64]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc2c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc30:	4b0f      	ldr	r3, [pc, #60]	; (800fc70 <OnRxWindow2TimerEvent+0x68>)
 800fc32:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fc36:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc38:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fc3c:	4b0c      	ldr	r3, [pc, #48]	; (800fc70 <OnRxWindow2TimerEvent+0x68>)
 800fc3e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fc42:	4b0a      	ldr	r3, [pc, #40]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc44:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fc48:	4b08      	ldr	r3, [pc, #32]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fc50:	4b06      	ldr	r3, [pc, #24]	; (800fc6c <OnRxWindow2TimerEvent+0x64>)
 800fc52:	2201      	movs	r2, #1
 800fc54:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fc58:	4906      	ldr	r1, [pc, #24]	; (800fc74 <OnRxWindow2TimerEvent+0x6c>)
 800fc5a:	4807      	ldr	r0, [pc, #28]	; (800fc78 <OnRxWindow2TimerEvent+0x70>)
 800fc5c:	f001 faaa 	bl	80111b4 <RxWindowSetup>
 800fc60:	e000      	b.n	800fc64 <OnRxWindow2TimerEvent+0x5c>
        return;
 800fc62:	bf00      	nop
}
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	2000302c 	.word	0x2000302c
 800fc70:	20003534 	.word	0x20003534
 800fc74:	200033f8 	.word	0x200033f8
 800fc78:	200033c4 	.word	0x200033c4

0800fc7c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fc84:	4815      	ldr	r0, [pc, #84]	; (800fcdc <OnAckTimeoutTimerEvent+0x60>)
 800fc86:	f00d f909 	bl	801ce9c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fc8a:	4b15      	ldr	r3, [pc, #84]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fc8c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d003      	beq.n	800fc9c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800fc94:	4b12      	ldr	r3, [pc, #72]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fc9c:	4b11      	ldr	r3, [pc, #68]	; (800fce4 <OnAckTimeoutTimerEvent+0x68>)
 800fc9e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fca2:	2b02      	cmp	r3, #2
 800fca4:	d106      	bne.n	800fcb4 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fca6:	4a0e      	ldr	r2, [pc, #56]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fca8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800fcac:	f043 0320 	orr.w	r3, r3, #32
 800fcb0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fcb4:	4b0a      	ldr	r3, [pc, #40]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fcb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00a      	beq.n	800fcd4 <OnAckTimeoutTimerEvent+0x58>
 800fcbe:	4b08      	ldr	r3, [pc, #32]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fcc0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fcca:	4b05      	ldr	r3, [pc, #20]	; (800fce0 <OnAckTimeoutTimerEvent+0x64>)
 800fccc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	4798      	blx	r3
    }
}
 800fcd4:	bf00      	nop
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	20003424 	.word	0x20003424
 800fce0:	2000302c 	.word	0x2000302c
 800fce4:	20003534 	.word	0x20003534

0800fce8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60ba      	str	r2, [r7, #8]
 800fcf0:	607b      	str	r3, [r7, #4]
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73fb      	strb	r3, [r7, #15]
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d005      	beq.n	800fd0c <GetFCntDown+0x24>
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d002      	beq.n	800fd0c <GetFCntDown+0x24>
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d101      	bne.n	800fd10 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fd0c:	230a      	movs	r3, #10
 800fd0e:	e029      	b.n	800fd64 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d016      	beq.n	800fd44 <GetFCntDown+0x5c>
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d118      	bne.n	800fd4c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fd1a:	79bb      	ldrb	r3, [r7, #6]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d10d      	bne.n	800fd3c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d002      	beq.n	800fd2c <GetFCntDown+0x44>
 800fd26:	7bbb      	ldrb	r3, [r7, #14]
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d103      	bne.n	800fd34 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	2202      	movs	r2, #2
 800fd30:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fd32:	e00d      	b.n	800fd50 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	2201      	movs	r2, #1
 800fd38:	701a      	strb	r2, [r3, #0]
            break;
 800fd3a:	e009      	b.n	800fd50 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	2203      	movs	r2, #3
 800fd40:	701a      	strb	r2, [r3, #0]
            break;
 800fd42:	e005      	b.n	800fd50 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	2204      	movs	r2, #4
 800fd48:	701a      	strb	r2, [r3, #0]
            break;
 800fd4a:	e001      	b.n	800fd50 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fd4c:	2305      	movs	r3, #5
 800fd4e:	e009      	b.n	800fd64 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	7818      	ldrb	r0, [r3, #0]
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	89db      	ldrh	r3, [r3, #14]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	8b39      	ldrh	r1, [r7, #24]
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	f004 fb17 	bl	8014390 <LoRaMacCryptoGetFCntDown>
 800fd62:	4603      	mov	r3, r0
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fd6c:	b5b0      	push	{r4, r5, r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fd76:	2303      	movs	r3, #3
 800fd78:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fd7a:	4b61      	ldr	r3, [pc, #388]	; (800ff00 <SwitchClass+0x194>)
 800fd7c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	f000 80a5 	beq.w	800fed0 <SwitchClass+0x164>
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	f300 80b4 	bgt.w	800fef4 <SwitchClass+0x188>
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <SwitchClass+0x2c>
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	f000 808f 	beq.w	800feb4 <SwitchClass+0x148>
 800fd96:	e0ad      	b.n	800fef4 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fd98:	79fb      	ldrb	r3, [r7, #7]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d107      	bne.n	800fdae <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fd9e:	4b58      	ldr	r3, [pc, #352]	; (800ff00 <SwitchClass+0x194>)
 800fda0:	4a57      	ldr	r2, [pc, #348]	; (800ff00 <SwitchClass+0x194>)
 800fda2:	336c      	adds	r3, #108	; 0x6c
 800fda4:	3264      	adds	r2, #100	; 0x64
 800fda6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdaa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d10c      	bne.n	800fdce <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f003 fa53 	bl	8013262 <LoRaMacClassBSwitchClass>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d103      	bne.n	800fdce <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fdc6:	4a4e      	ldr	r2, [pc, #312]	; (800ff00 <SwitchClass+0x194>)
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	f040 808a 	bne.w	800feea <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fdd6:	4a4a      	ldr	r2, [pc, #296]	; (800ff00 <SwitchClass+0x194>)
 800fdd8:	79fb      	ldrb	r3, [r7, #7]
 800fdda:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fdde:	4a49      	ldr	r2, [pc, #292]	; (800ff04 <SwitchClass+0x198>)
 800fde0:	4b48      	ldr	r3, [pc, #288]	; (800ff04 <SwitchClass+0x198>)
 800fde2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fde6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fdea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fdf2:	4b44      	ldr	r3, [pc, #272]	; (800ff04 <SwitchClass+0x198>)
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	73bb      	strb	r3, [r7, #14]
 800fdfe:	e049      	b.n	800fe94 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fe00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe04:	4a3e      	ldr	r2, [pc, #248]	; (800ff00 <SwitchClass+0x194>)
 800fe06:	212c      	movs	r1, #44	; 0x2c
 800fe08:	fb01 f303 	mul.w	r3, r1, r3
 800fe0c:	4413      	add	r3, r2
 800fe0e:	33d2      	adds	r3, #210	; 0xd2
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d038      	beq.n	800fe88 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fe16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe1a:	4a39      	ldr	r2, [pc, #228]	; (800ff00 <SwitchClass+0x194>)
 800fe1c:	212c      	movs	r1, #44	; 0x2c
 800fe1e:	fb01 f303 	mul.w	r3, r1, r3
 800fe22:	4413      	add	r3, r2
 800fe24:	33e8      	adds	r3, #232	; 0xe8
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a35      	ldr	r2, [pc, #212]	; (800ff00 <SwitchClass+0x194>)
 800fe2a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fe2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe30:	4a33      	ldr	r2, [pc, #204]	; (800ff00 <SwitchClass+0x194>)
 800fe32:	212c      	movs	r1, #44	; 0x2c
 800fe34:	fb01 f303 	mul.w	r3, r1, r3
 800fe38:	4413      	add	r3, r2
 800fe3a:	33ec      	adds	r3, #236	; 0xec
 800fe3c:	f993 3000 	ldrsb.w	r3, [r3]
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	4b2f      	ldr	r3, [pc, #188]	; (800ff00 <SwitchClass+0x194>)
 800fe44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fe48:	4b2e      	ldr	r3, [pc, #184]	; (800ff04 <SwitchClass+0x198>)
 800fe4a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe4e:	4b2d      	ldr	r3, [pc, #180]	; (800ff04 <SwitchClass+0x198>)
 800fe50:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fe54:	4b2a      	ldr	r3, [pc, #168]	; (800ff00 <SwitchClass+0x194>)
 800fe56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe58:	4a2a      	ldr	r2, [pc, #168]	; (800ff04 <SwitchClass+0x198>)
 800fe5a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe5e:	4b28      	ldr	r3, [pc, #160]	; (800ff00 <SwitchClass+0x194>)
 800fe60:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe64:	4b27      	ldr	r3, [pc, #156]	; (800ff04 <SwitchClass+0x198>)
 800fe66:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe6a:	4b25      	ldr	r3, [pc, #148]	; (800ff00 <SwitchClass+0x194>)
 800fe6c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fe70:	4b24      	ldr	r3, [pc, #144]	; (800ff04 <SwitchClass+0x198>)
 800fe72:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fe76:	4b23      	ldr	r3, [pc, #140]	; (800ff04 <SwitchClass+0x198>)
 800fe78:	2203      	movs	r2, #3
 800fe7a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe7e:	4b21      	ldr	r3, [pc, #132]	; (800ff04 <SwitchClass+0x198>)
 800fe80:	2201      	movs	r2, #1
 800fe82:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800fe86:	e009      	b.n	800fe9c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	3301      	adds	r3, #1
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	73bb      	strb	r3, [r7, #14]
 800fe94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	ddb1      	ble.n	800fe00 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fe9c:	4b19      	ldr	r3, [pc, #100]	; (800ff04 <SwitchClass+0x198>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fea4:	4b18      	ldr	r3, [pc, #96]	; (800ff08 <SwitchClass+0x19c>)
 800fea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800feaa:	f001 f9b1 	bl	8011210 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800feae:	2300      	movs	r3, #0
 800feb0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800feb2:	e01a      	b.n	800feea <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800feb4:	79fb      	ldrb	r3, [r7, #7]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f003 f9d3 	bl	8013262 <LoRaMacClassBSwitchClass>
 800febc:	4603      	mov	r3, r0
 800febe:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d113      	bne.n	800feee <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fec6:	4a0e      	ldr	r2, [pc, #56]	; (800ff00 <SwitchClass+0x194>)
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800fece:	e00e      	b.n	800feee <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10d      	bne.n	800fef2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fed6:	4a0a      	ldr	r2, [pc, #40]	; (800ff00 <SwitchClass+0x194>)
 800fed8:	79fb      	ldrb	r3, [r7, #7]
 800feda:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fede:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <SwitchClass+0x19c>)
 800fee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee2:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fee8:	e003      	b.n	800fef2 <SwitchClass+0x186>
            break;
 800feea:	bf00      	nop
 800feec:	e002      	b.n	800fef4 <SwitchClass+0x188>
            break;
 800feee:	bf00      	nop
 800fef0:	e000      	b.n	800fef4 <SwitchClass+0x188>
            break;
 800fef2:	bf00      	nop
        }
    }

    return status;
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bdb0      	pop	{r4, r5, r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20003534 	.word	0x20003534
 800ff04:	2000302c 	.word	0x2000302c
 800ff08:	0801e648 	.word	0x0801e648

0800ff0c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff16:	4b10      	ldr	r3, [pc, #64]	; (800ff58 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ff18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ff1c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ff22:	230d      	movs	r3, #13
 800ff24:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ff26:	4b0c      	ldr	r3, [pc, #48]	; (800ff58 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ff28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ff30:	230e      	movs	r3, #14
 800ff32:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff34:	4b08      	ldr	r3, [pc, #32]	; (800ff58 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ff36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff3a:	f107 0210 	add.w	r2, r7, #16
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f005 f8b8 	bl	80150b6 <RegionGetPhyParam>
 800ff46:	4603      	mov	r3, r0
 800ff48:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	b2db      	uxtb	r3, r3
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20003534 	.word	0x20003534

0800ff5c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	4603      	mov	r3, r0
 800ff64:	71fb      	strb	r3, [r7, #7]
 800ff66:	460b      	mov	r3, r1
 800ff68:	71bb      	strb	r3, [r7, #6]
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ff72:	2300      	movs	r3, #0
 800ff74:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ff76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff ffc6 	bl	800ff0c <GetMaxAppPayloadWithoutFOptsLength>
 800ff80:	4603      	mov	r3, r0
 800ff82:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	b29a      	uxth	r2, r3
 800ff88:	797b      	ldrb	r3, [r7, #5]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4413      	add	r3, r2
 800ff8e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ff90:	89ba      	ldrh	r2, [r7, #12]
 800ff92:	89fb      	ldrh	r3, [r7, #14]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d804      	bhi.n	800ffa2 <ValidatePayloadLength+0x46>
 800ff98:	89bb      	ldrh	r3, [r7, #12]
 800ff9a:	2bff      	cmp	r3, #255	; 0xff
 800ff9c:	d801      	bhi.n	800ffa2 <ValidatePayloadLength+0x46>
    {
        return true;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e000      	b.n	800ffa4 <ValidatePayloadLength+0x48>
    }
    return false;
 800ffa2:	2300      	movs	r3, #0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ffac:	b480      	push	{r7}
 800ffae:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ffb0:	4a05      	ldr	r2, [pc, #20]	; (800ffc8 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ffb2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ffb6:	f043 0310 	orr.w	r3, r3, #16
 800ffba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ffbe:	bf00      	nop
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bc80      	pop	{r7}
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	2000302c 	.word	0x2000302c

0800ffcc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b0a5      	sub	sp, #148	; 0x94
 800ffd0:	af02      	add	r7, sp, #8
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4603      	mov	r3, r0
 800ffdc:	70fb      	strb	r3, [r7, #3]
 800ffde:	460b      	mov	r3, r1
 800ffe0:	70bb      	strb	r3, [r7, #2]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fff2:	2300      	movs	r3, #0
 800fff4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800fff8:	f000 bc73 	b.w	80108e2 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fffc:	78fb      	ldrb	r3, [r7, #3]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	4413      	add	r3, r2
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	4618      	mov	r0, r3
 8010006:	f003 fbf5 	bl	80137f4 <LoRaMacCommandsGetCmdSize>
 801000a:	4603      	mov	r3, r0
 801000c:	461a      	mov	r2, r3
 801000e:	78fb      	ldrb	r3, [r7, #3]
 8010010:	441a      	add	r2, r3
 8010012:	78bb      	ldrb	r3, [r7, #2]
 8010014:	429a      	cmp	r2, r3
 8010016:	f300 846a 	bgt.w	80108ee <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801001a:	78fb      	ldrb	r3, [r7, #3]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	70fa      	strb	r2, [r7, #3]
 8010020:	461a      	mov	r2, r3
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4413      	add	r3, r2
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	3b02      	subs	r3, #2
 801002a:	2b11      	cmp	r3, #17
 801002c:	f200 8461 	bhi.w	80108f2 <ProcessMacCommands+0x926>
 8010030:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <ProcessMacCommands+0x6c>)
 8010032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010036:	bf00      	nop
 8010038:	08010081 	.word	0x08010081
 801003c:	080100c3 	.word	0x080100c3
 8010040:	080101df 	.word	0x080101df
 8010044:	0801021d 	.word	0x0801021d
 8010048:	0801030d 	.word	0x0801030d
 801004c:	08010369 	.word	0x08010369
 8010050:	08010425 	.word	0x08010425
 8010054:	0801047f 	.word	0x0801047f
 8010058:	08010563 	.word	0x08010563
 801005c:	080108f3 	.word	0x080108f3
 8010060:	080108f3 	.word	0x080108f3
 8010064:	0801060d 	.word	0x0801060d
 8010068:	080108f3 	.word	0x080108f3
 801006c:	080108f3 	.word	0x080108f3
 8010070:	08010723 	.word	0x08010723
 8010074:	08010757 	.word	0x08010757
 8010078:	080107e7 	.word	0x080107e7
 801007c:	0801085d 	.word	0x0801085d
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010080:	2004      	movs	r0, #4
 8010082:	f003 fd8f 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	f000 842a 	beq.w	80108e2 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801008e:	2104      	movs	r1, #4
 8010090:	2000      	movs	r0, #0
 8010092:	f003 fcfb 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010096:	78fb      	ldrb	r3, [r7, #3]
 8010098:	1c5a      	adds	r2, r3, #1
 801009a:	70fa      	strb	r2, [r7, #3]
 801009c:	461a      	mov	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4413      	add	r3, r2
 80100a2:	781a      	ldrb	r2, [r3, #0]
 80100a4:	4bad      	ldr	r3, [pc, #692]	; (801035c <ProcessMacCommands+0x390>)
 80100a6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80100aa:	78fb      	ldrb	r3, [r7, #3]
 80100ac:	1c5a      	adds	r2, r3, #1
 80100ae:	70fa      	strb	r2, [r7, #3]
 80100b0:	461a      	mov	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4413      	add	r3, r2
 80100b6:	781a      	ldrb	r2, [r3, #0]
 80100b8:	4ba8      	ldr	r3, [pc, #672]	; (801035c <ProcessMacCommands+0x390>)
 80100ba:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 80100be:	f000 bc10 	b.w	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80100c2:	2300      	movs	r3, #0
 80100c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80100c8:	2300      	movs	r3, #0
 80100ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 80100da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80100de:	f083 0301 	eor.w	r3, r3, #1
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d078      	beq.n	80101da <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80100e8:	2301      	movs	r3, #1
 80100ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80100ee:	78fb      	ldrb	r3, [r7, #3]
 80100f0:	3b01      	subs	r3, #1
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	4413      	add	r3, r2
 80100f6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80100f8:	78ba      	ldrb	r2, [r7, #2]
 80100fa:	78fb      	ldrb	r3, [r7, #3]
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	3301      	adds	r3, #1
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010108:	4b95      	ldr	r3, [pc, #596]	; (8010360 <ProcessMacCommands+0x394>)
 801010a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801010e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010112:	4b93      	ldr	r3, [pc, #588]	; (8010360 <ProcessMacCommands+0x394>)
 8010114:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010118:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801011c:	4b90      	ldr	r3, [pc, #576]	; (8010360 <ProcessMacCommands+0x394>)
 801011e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010122:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010126:	4b8e      	ldr	r3, [pc, #568]	; (8010360 <ProcessMacCommands+0x394>)
 8010128:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801012c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010130:	4b8b      	ldr	r3, [pc, #556]	; (8010360 <ProcessMacCommands+0x394>)
 8010132:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010136:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801013a:	4b89      	ldr	r3, [pc, #548]	; (8010360 <ProcessMacCommands+0x394>)
 801013c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010140:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8010142:	4b87      	ldr	r3, [pc, #540]	; (8010360 <ProcessMacCommands+0x394>)
 8010144:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010148:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801014c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8010150:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010154:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4623      	mov	r3, r4
 8010162:	f005 f8af 	bl	80152c4 <RegionLinkAdrReq>
 8010166:	4603      	mov	r3, r0
 8010168:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801016c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010170:	f003 0307 	and.w	r3, r3, #7
 8010174:	2b07      	cmp	r3, #7
 8010176:	d10e      	bne.n	8010196 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010178:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801017c:	4b78      	ldr	r3, [pc, #480]	; (8010360 <ProcessMacCommands+0x394>)
 801017e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010182:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010186:	4b76      	ldr	r3, [pc, #472]	; (8010360 <ProcessMacCommands+0x394>)
 8010188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801018c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010190:	4b73      	ldr	r3, [pc, #460]	; (8010360 <ProcessMacCommands+0x394>)
 8010192:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010196:	2300      	movs	r3, #0
 8010198:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801019c:	e00b      	b.n	80101b6 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801019e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80101a2:	2201      	movs	r2, #1
 80101a4:	4619      	mov	r1, r3
 80101a6:	2003      	movs	r0, #3
 80101a8:	f003 f9d4 	bl	8013554 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80101ac:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80101b0:	3301      	adds	r3, #1
 80101b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80101b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80101ba:	4a6a      	ldr	r2, [pc, #424]	; (8010364 <ProcessMacCommands+0x398>)
 80101bc:	fba2 2303 	umull	r2, r3, r2, r3
 80101c0:	089b      	lsrs	r3, r3, #2
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d3e8      	bcc.n	801019e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80101cc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80101d0:	78fb      	ldrb	r3, [r7, #3]
 80101d2:	4413      	add	r3, r2
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	3b01      	subs	r3, #1
 80101d8:	70fb      	strb	r3, [r7, #3]
                }
                break;
 80101da:	bf00      	nop
 80101dc:	e381      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80101de:	78fb      	ldrb	r3, [r7, #3]
 80101e0:	1c5a      	adds	r2, r3, #1
 80101e2:	70fa      	strb	r2, [r7, #3]
 80101e4:	461a      	mov	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4413      	add	r3, r2
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 030f 	and.w	r3, r3, #15
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	4b5b      	ldr	r3, [pc, #364]	; (8010360 <ProcessMacCommands+0x394>)
 80101f4:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80101f8:	4b59      	ldr	r3, [pc, #356]	; (8010360 <ProcessMacCommands+0x394>)
 80101fa:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80101fe:	461a      	mov	r2, r3
 8010200:	2301      	movs	r3, #1
 8010202:	4093      	lsls	r3, r2
 8010204:	b29a      	uxth	r2, r3
 8010206:	4b56      	ldr	r3, [pc, #344]	; (8010360 <ProcessMacCommands+0x394>)
 8010208:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801020c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010210:	2200      	movs	r2, #0
 8010212:	4619      	mov	r1, r3
 8010214:	2004      	movs	r0, #4
 8010216:	f003 f99d 	bl	8013554 <LoRaMacCommandsAddCmd>
                break;
 801021a:	e362      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801021c:	2307      	movs	r3, #7
 801021e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010222:	78fb      	ldrb	r3, [r7, #3]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	4413      	add	r3, r2
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	091b      	lsrs	r3, r3, #4
 801022c:	b2db      	uxtb	r3, r3
 801022e:	b25b      	sxtb	r3, r3
 8010230:	f003 0307 	and.w	r3, r3, #7
 8010234:	b25b      	sxtb	r3, r3
 8010236:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801023a:	78fb      	ldrb	r3, [r7, #3]
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	4413      	add	r3, r2
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	b25b      	sxtb	r3, r3
 8010244:	f003 030f 	and.w	r3, r3, #15
 8010248:	b25b      	sxtb	r3, r3
 801024a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801024e:	78fb      	ldrb	r3, [r7, #3]
 8010250:	3301      	adds	r3, #1
 8010252:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010254:	78fb      	ldrb	r3, [r7, #3]
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	70fa      	strb	r2, [r7, #3]
 801025a:	461a      	mov	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4413      	add	r3, r2
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010264:	78fb      	ldrb	r3, [r7, #3]
 8010266:	1c5a      	adds	r2, r3, #1
 8010268:	70fa      	strb	r2, [r7, #3]
 801026a:	461a      	mov	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4413      	add	r3, r2
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	021a      	lsls	r2, r3, #8
 8010274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010276:	4313      	orrs	r3, r2
 8010278:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801027a:	78fb      	ldrb	r3, [r7, #3]
 801027c:	1c5a      	adds	r2, r3, #1
 801027e:	70fa      	strb	r2, [r7, #3]
 8010280:	461a      	mov	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4413      	add	r3, r2
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	041a      	lsls	r2, r3, #16
 801028a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028c:	4313      	orrs	r3, r2
 801028e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010292:	2264      	movs	r2, #100	; 0x64
 8010294:	fb02 f303 	mul.w	r3, r2, r3
 8010298:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801029a:	4b31      	ldr	r3, [pc, #196]	; (8010360 <ProcessMacCommands+0x394>)
 801029c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80102a4:	4611      	mov	r1, r2
 80102a6:	4618      	mov	r0, r3
 80102a8:	f005 f833 	bl	8015312 <RegionRxParamSetupReq>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80102b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	2b07      	cmp	r3, #7
 80102bc:	d117      	bne.n	80102ee <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80102be:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80102c2:	b2da      	uxtb	r2, r3
 80102c4:	4b26      	ldr	r3, [pc, #152]	; (8010360 <ProcessMacCommands+0x394>)
 80102c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80102ca:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80102ce:	b2da      	uxtb	r2, r3
 80102d0:	4b23      	ldr	r3, [pc, #140]	; (8010360 <ProcessMacCommands+0x394>)
 80102d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80102d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102d8:	4a21      	ldr	r2, [pc, #132]	; (8010360 <ProcessMacCommands+0x394>)
 80102da:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80102dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102de:	4a20      	ldr	r2, [pc, #128]	; (8010360 <ProcessMacCommands+0x394>)
 80102e0:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80102e2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	4b1d      	ldr	r3, [pc, #116]	; (8010360 <ProcessMacCommands+0x394>)
 80102ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80102ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102f2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80102f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80102fa:	2201      	movs	r2, #1
 80102fc:	4619      	mov	r1, r3
 80102fe:	2005      	movs	r0, #5
 8010300:	f003 f928 	bl	8013554 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010304:	f7ff fe52 	bl	800ffac <SetMlmeScheduleUplinkIndication>
                break;
 8010308:	bf00      	nop
 801030a:	e2ea      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801030c:	23ff      	movs	r3, #255	; 0xff
 801030e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010312:	4b12      	ldr	r3, [pc, #72]	; (801035c <ProcessMacCommands+0x390>)
 8010314:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00d      	beq.n	8010338 <ProcessMacCommands+0x36c>
 801031c:	4b0f      	ldr	r3, [pc, #60]	; (801035c <ProcessMacCommands+0x390>)
 801031e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d007      	beq.n	8010338 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010328:	4b0c      	ldr	r3, [pc, #48]	; (801035c <ProcessMacCommands+0x390>)
 801032a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4798      	blx	r3
 8010332:	4603      	mov	r3, r0
 8010334:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010338:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801033c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010340:	787b      	ldrb	r3, [r7, #1]
 8010342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010346:	b2db      	uxtb	r3, r3
 8010348:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801034c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010350:	2202      	movs	r2, #2
 8010352:	4619      	mov	r1, r3
 8010354:	2006      	movs	r0, #6
 8010356:	f003 f8fd 	bl	8013554 <LoRaMacCommandsAddCmd>
                break;
 801035a:	e2c2      	b.n	80108e2 <ProcessMacCommands+0x916>
 801035c:	2000302c 	.word	0x2000302c
 8010360:	20003534 	.word	0x20003534
 8010364:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010368:	2303      	movs	r3, #3
 801036a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801036e:	78fb      	ldrb	r3, [r7, #3]
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	70fa      	strb	r2, [r7, #3]
 8010374:	461a      	mov	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4413      	add	r3, r2
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	b25b      	sxtb	r3, r3
 801037e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8010382:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010386:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010388:	78fb      	ldrb	r3, [r7, #3]
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	70fa      	strb	r2, [r7, #3]
 801038e:	461a      	mov	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4413      	add	r3, r2
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010398:	78fb      	ldrb	r3, [r7, #3]
 801039a:	1c5a      	adds	r2, r3, #1
 801039c:	70fa      	strb	r2, [r7, #3]
 801039e:	461a      	mov	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4413      	add	r3, r2
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	021a      	lsls	r2, r3, #8
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	4313      	orrs	r3, r2
 80103ac:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	70fa      	strb	r2, [r7, #3]
 80103b4:	461a      	mov	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4413      	add	r3, r2
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	041a      	lsls	r2, r3, #16
 80103be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c0:	4313      	orrs	r3, r2
 80103c2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	2264      	movs	r2, #100	; 0x64
 80103c8:	fb02 f303 	mul.w	r3, r2, r3
 80103cc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	70fa      	strb	r2, [r7, #3]
 80103d8:	461a      	mov	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	b25b      	sxtb	r3, r3
 80103e2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80103e6:	4b87      	ldr	r3, [pc, #540]	; (8010604 <ProcessMacCommands+0x638>)
 80103e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80103f0:	4611      	mov	r1, r2
 80103f2:	4618      	mov	r0, r3
 80103f4:	f004 ffa8 	bl	8015348 <RegionNewChannelReq>
 80103f8:	4603      	mov	r3, r0
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010400:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010404:	b25b      	sxtb	r3, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	db0a      	blt.n	8010420 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 801040a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801040e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010412:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010416:	2201      	movs	r2, #1
 8010418:	4619      	mov	r1, r3
 801041a:	2007      	movs	r0, #7
 801041c:	f003 f89a 	bl	8013554 <LoRaMacCommandsAddCmd>
                }
                break;
 8010420:	bf00      	nop
 8010422:	e25e      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010424:	78fb      	ldrb	r3, [r7, #3]
 8010426:	1c5a      	adds	r2, r3, #1
 8010428:	70fa      	strb	r2, [r7, #3]
 801042a:	461a      	mov	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4413      	add	r3, r2
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 030f 	and.w	r3, r3, #15
 8010436:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801043a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801043e:	2b00      	cmp	r3, #0
 8010440:	d104      	bne.n	801044c <ProcessMacCommands+0x480>
                {
                    delay++;
 8010442:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010446:	3301      	adds	r3, #1
 8010448:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801044c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010454:	fb02 f303 	mul.w	r3, r2, r3
 8010458:	461a      	mov	r2, r3
 801045a:	4b6a      	ldr	r3, [pc, #424]	; (8010604 <ProcessMacCommands+0x638>)
 801045c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801045e:	4b69      	ldr	r3, [pc, #420]	; (8010604 <ProcessMacCommands+0x638>)
 8010460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010462:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010466:	4a67      	ldr	r2, [pc, #412]	; (8010604 <ProcessMacCommands+0x638>)
 8010468:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801046a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801046e:	2200      	movs	r2, #0
 8010470:	4619      	mov	r1, r3
 8010472:	2008      	movs	r0, #8
 8010474:	f003 f86e 	bl	8013554 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010478:	f7ff fd98 	bl	800ffac <SetMlmeScheduleUplinkIndication>
                break;
 801047c:	e231      	b.n	80108e2 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801047e:	78fb      	ldrb	r3, [r7, #3]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	70fa      	strb	r2, [r7, #3]
 8010484:	461a      	mov	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4413      	add	r3, r2
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010490:	2300      	movs	r3, #0
 8010492:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801049c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80104a0:	f003 0320 	and.w	r3, r3, #32
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d002      	beq.n	80104ae <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80104ae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80104b2:	f003 0310 	and.w	r3, r3, #16
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d002      	beq.n	80104c0 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80104ba:	2301      	movs	r3, #1
 80104bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80104c0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80104c4:	f003 030f 	and.w	r3, r3, #15
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80104ce:	4b4d      	ldr	r3, [pc, #308]	; (8010604 <ProcessMacCommands+0x638>)
 80104d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80104d8:	4611      	mov	r1, r2
 80104da:	4618      	mov	r0, r3
 80104dc:	f004 ff4f 	bl	801537e <RegionTxParamSetupReq>
 80104e0:	4603      	mov	r3, r0
 80104e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e6:	d03a      	beq.n	801055e <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80104e8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80104ec:	4b45      	ldr	r3, [pc, #276]	; (8010604 <ProcessMacCommands+0x638>)
 80104ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80104f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80104f6:	4b43      	ldr	r3, [pc, #268]	; (8010604 <ProcessMacCommands+0x638>)
 80104f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80104fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010500:	461a      	mov	r2, r3
 8010502:	4b41      	ldr	r3, [pc, #260]	; (8010608 <ProcessMacCommands+0x63c>)
 8010504:	5c9b      	ldrb	r3, [r3, r2]
 8010506:	4618      	mov	r0, r3
 8010508:	f7f0 f964 	bl	80007d4 <__aeabi_ui2f>
 801050c:	4603      	mov	r3, r0
 801050e:	4a3d      	ldr	r2, [pc, #244]	; (8010604 <ProcessMacCommands+0x638>)
 8010510:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010512:	2302      	movs	r3, #2
 8010514:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010518:	4b3a      	ldr	r3, [pc, #232]	; (8010604 <ProcessMacCommands+0x638>)
 801051a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801051e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010522:	4b38      	ldr	r3, [pc, #224]	; (8010604 <ProcessMacCommands+0x638>)
 8010524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010528:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801052c:	4611      	mov	r1, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f004 fdc1 	bl	80150b6 <RegionGetPhyParam>
 8010534:	4603      	mov	r3, r0
 8010536:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053a:	b25a      	sxtb	r2, r3
 801053c:	4b31      	ldr	r3, [pc, #196]	; (8010604 <ProcessMacCommands+0x638>)
 801053e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010542:	4293      	cmp	r3, r2
 8010544:	bfb8      	it	lt
 8010546:	4613      	movlt	r3, r2
 8010548:	b25a      	sxtb	r2, r3
 801054a:	4b2e      	ldr	r3, [pc, #184]	; (8010604 <ProcessMacCommands+0x638>)
 801054c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010554:	2200      	movs	r2, #0
 8010556:	4619      	mov	r1, r3
 8010558:	2009      	movs	r0, #9
 801055a:	f002 fffb 	bl	8013554 <LoRaMacCommandsAddCmd>
                }
                break;
 801055e:	bf00      	nop
 8010560:	e1bf      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010562:	2303      	movs	r3, #3
 8010564:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010568:	78fb      	ldrb	r3, [r7, #3]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	70fa      	strb	r2, [r7, #3]
 801056e:	461a      	mov	r2, r3
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4413      	add	r3, r2
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	1c5a      	adds	r2, r3, #1
 801057e:	70fa      	strb	r2, [r7, #3]
 8010580:	461a      	mov	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4413      	add	r3, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	1c5a      	adds	r2, r3, #1
 801058e:	70fa      	strb	r2, [r7, #3]
 8010590:	461a      	mov	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4413      	add	r3, r2
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	021a      	lsls	r2, r3, #8
 801059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059c:	4313      	orrs	r3, r2
 801059e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80105a0:	78fb      	ldrb	r3, [r7, #3]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	70fa      	strb	r2, [r7, #3]
 80105a6:	461a      	mov	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4413      	add	r3, r2
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	041a      	lsls	r2, r3, #16
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	4313      	orrs	r3, r2
 80105b4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b8:	2264      	movs	r2, #100	; 0x64
 80105ba:	fb02 f303 	mul.w	r3, r2, r3
 80105be:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80105c0:	4b10      	ldr	r3, [pc, #64]	; (8010604 <ProcessMacCommands+0x638>)
 80105c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105c6:	f107 0220 	add.w	r2, r7, #32
 80105ca:	4611      	mov	r1, r2
 80105cc:	4618      	mov	r0, r3
 80105ce:	f004 fef1 	bl	80153b4 <RegionDlChannelReq>
 80105d2:	4603      	mov	r3, r0
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80105da:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80105de:	b25b      	sxtb	r3, r3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	db0c      	blt.n	80105fe <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 80105e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80105e8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80105ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105f0:	2201      	movs	r2, #1
 80105f2:	4619      	mov	r1, r3
 80105f4:	200a      	movs	r0, #10
 80105f6:	f002 ffad 	bl	8013554 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 80105fa:	f7ff fcd7 	bl	800ffac <SetMlmeScheduleUplinkIndication>
                }
                break;
 80105fe:	bf00      	nop
 8010600:	e16f      	b.n	80108e2 <ProcessMacCommands+0x916>
 8010602:	bf00      	nop
 8010604:	20003534 	.word	0x20003534
 8010608:	0801e57c 	.word	0x0801e57c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801060c:	200a      	movs	r0, #10
 801060e:	f003 fac9 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 8164 	beq.w	80108e2 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801061a:	210a      	movs	r1, #10
 801061c:	2000      	movs	r0, #0
 801061e:	f003 fa35 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010622:	f107 0318 	add.w	r3, r7, #24
 8010626:	2200      	movs	r2, #0
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 801062c:	f107 0310 	add.w	r3, r7, #16
 8010630:	2200      	movs	r2, #0
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010636:	f107 0308 	add.w	r3, r7, #8
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010640:	78fb      	ldrb	r3, [r7, #3]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	70fa      	strb	r2, [r7, #3]
 8010646:	461a      	mov	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4413      	add	r3, r2
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	70fa      	strb	r2, [r7, #3]
 8010656:	461a      	mov	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4413      	add	r3, r2
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	021a      	lsls	r2, r3, #8
 8010660:	69bb      	ldr	r3, [r7, #24]
 8010662:	4313      	orrs	r3, r2
 8010664:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010666:	78fb      	ldrb	r3, [r7, #3]
 8010668:	1c5a      	adds	r2, r3, #1
 801066a:	70fa      	strb	r2, [r7, #3]
 801066c:	461a      	mov	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4413      	add	r3, r2
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	041a      	lsls	r2, r3, #16
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	4313      	orrs	r3, r2
 801067a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801067c:	78fb      	ldrb	r3, [r7, #3]
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	70fa      	strb	r2, [r7, #3]
 8010682:	461a      	mov	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4413      	add	r3, r2
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	061a      	lsls	r2, r3, #24
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	4313      	orrs	r3, r2
 8010690:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010692:	78fb      	ldrb	r3, [r7, #3]
 8010694:	1c5a      	adds	r2, r3, #1
 8010696:	70fa      	strb	r2, [r7, #3]
 8010698:	461a      	mov	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4413      	add	r3, r2
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	b21b      	sxth	r3, r3
 80106a2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80106a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80106a8:	461a      	mov	r2, r3
 80106aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80106ae:	fb02 f303 	mul.w	r3, r2, r3
 80106b2:	121b      	asrs	r3, r3, #8
 80106b4:	b21b      	sxth	r3, r3
 80106b6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80106b8:	f107 0310 	add.w	r3, r7, #16
 80106bc:	f107 0218 	add.w	r2, r7, #24
 80106c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106c4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	4b8c      	ldr	r3, [pc, #560]	; (80108fc <ProcessMacCommands+0x930>)
 80106cc:	4413      	add	r3, r2
 80106ce:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80106d0:	f107 0308 	add.w	r3, r7, #8
 80106d4:	4618      	mov	r0, r3
 80106d6:	f00c fa6f 	bl	801cbb8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80106da:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80106de:	4b88      	ldr	r3, [pc, #544]	; (8010900 <ProcessMacCommands+0x934>)
 80106e0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80106e4:	9200      	str	r2, [sp, #0]
 80106e6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80106ea:	f107 0210 	add.w	r2, r7, #16
 80106ee:	ca06      	ldmia	r2, {r1, r2}
 80106f0:	f00c f9fb 	bl	801caea <SysTimeSub>
 80106f4:	f107 0010 	add.w	r0, r7, #16
 80106f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106fe:	f107 0208 	add.w	r2, r7, #8
 8010702:	ca06      	ldmia	r2, {r1, r2}
 8010704:	f00c f9b8 	bl	801ca78 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010708:	f107 0310 	add.w	r3, r7, #16
 801070c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010710:	f00c fa24 	bl	801cb5c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010714:	f002 fde3 	bl	80132de <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010718:	4b79      	ldr	r3, [pc, #484]	; (8010900 <ProcessMacCommands+0x934>)
 801071a:	2201      	movs	r2, #1
 801071c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 8010720:	e0df      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010722:	200d      	movs	r0, #13
 8010724:	f003 fa3e 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 80d9 	beq.w	80108e2 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010730:	210d      	movs	r1, #13
 8010732:	2000      	movs	r0, #0
 8010734:	f003 f9aa 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010738:	4b71      	ldr	r3, [pc, #452]	; (8010900 <ProcessMacCommands+0x934>)
 801073a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801073e:	2b04      	cmp	r3, #4
 8010740:	f000 80cf 	beq.w	80108e2 <ProcessMacCommands+0x916>
 8010744:	4b6e      	ldr	r3, [pc, #440]	; (8010900 <ProcessMacCommands+0x934>)
 8010746:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801074a:	2b05      	cmp	r3, #5
 801074c:	f000 80c9 	beq.w	80108e2 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010750:	f002 fda6 	bl	80132a0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010754:	e0c5      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010756:	2303      	movs	r3, #3
 8010758:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801075c:	2300      	movs	r3, #0
 801075e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010760:	78fb      	ldrb	r3, [r7, #3]
 8010762:	1c5a      	adds	r2, r3, #1
 8010764:	70fa      	strb	r2, [r7, #3]
 8010766:	461a      	mov	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4413      	add	r3, r2
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	1c5a      	adds	r2, r3, #1
 8010774:	70fa      	strb	r2, [r7, #3]
 8010776:	461a      	mov	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4413      	add	r3, r2
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	021b      	lsls	r3, r3, #8
 8010780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010782:	4313      	orrs	r3, r2
 8010784:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010786:	78fb      	ldrb	r3, [r7, #3]
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	70fa      	strb	r2, [r7, #3]
 801078c:	461a      	mov	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4413      	add	r3, r2
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	041b      	lsls	r3, r3, #16
 8010796:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010798:	4313      	orrs	r3, r2
 801079a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801079c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801079e:	2264      	movs	r2, #100	; 0x64
 80107a0:	fb02 f303 	mul.w	r3, r2, r3
 80107a4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80107a6:	78fb      	ldrb	r3, [r7, #3]
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	70fa      	strb	r2, [r7, #3]
 80107ac:	461a      	mov	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4413      	add	r3, r2
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	f003 030f 	and.w	r3, r3, #15
 80107b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80107bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80107c0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80107c2:	4618      	mov	r0, r3
 80107c4:	f002 fd72 	bl	80132ac <LoRaMacClassBPingSlotChannelReq>
 80107c8:	4603      	mov	r3, r0
 80107ca:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80107ce:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80107d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80107d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80107da:	2201      	movs	r2, #1
 80107dc:	4619      	mov	r1, r3
 80107de:	2011      	movs	r0, #17
 80107e0:	f002 feb8 	bl	8013554 <LoRaMacCommandsAddCmd>
                break;
 80107e4:	e07d      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80107e6:	200e      	movs	r0, #14
 80107e8:	f003 f9dc 	bl	8013ba4 <LoRaMacConfirmQueueIsCmdActive>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d077      	beq.n	80108e2 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80107f2:	210e      	movs	r1, #14
 80107f4:	2000      	movs	r0, #0
 80107f6:	f003 f949 	bl	8013a8c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010800:	2300      	movs	r3, #0
 8010802:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	1c5a      	adds	r2, r3, #1
 801080a:	70fa      	strb	r2, [r7, #3]
 801080c:	461a      	mov	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4413      	add	r3, r2
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010818:	78fb      	ldrb	r3, [r7, #3]
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	70fa      	strb	r2, [r7, #3]
 801081e:	461a      	mov	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4413      	add	r3, r2
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	021b      	lsls	r3, r3, #8
 8010828:	b21a      	sxth	r2, r3
 801082a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801082e:	4313      	orrs	r3, r2
 8010830:	b21b      	sxth	r3, r3
 8010832:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010836:	78fb      	ldrb	r3, [r7, #3]
 8010838:	1c5a      	adds	r2, r3, #1
 801083a:	70fa      	strb	r2, [r7, #3]
 801083c:	461a      	mov	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4413      	add	r3, r2
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010848:	4b2e      	ldr	r3, [pc, #184]	; (8010904 <ProcessMacCommands+0x938>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8010850:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010854:	4618      	mov	r0, r3
 8010856:	f002 fd35 	bl	80132c4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801085a:	e042      	b.n	80108e2 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801085c:	2300      	movs	r3, #0
 801085e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010862:	78fb      	ldrb	r3, [r7, #3]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	70fa      	strb	r2, [r7, #3]
 8010868:	461a      	mov	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010874:	78fb      	ldrb	r3, [r7, #3]
 8010876:	1c5a      	adds	r2, r3, #1
 8010878:	70fa      	strb	r2, [r7, #3]
 801087a:	461a      	mov	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4413      	add	r3, r2
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	021b      	lsls	r3, r3, #8
 8010884:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010888:	4313      	orrs	r3, r2
 801088a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801088e:	78fb      	ldrb	r3, [r7, #3]
 8010890:	1c5a      	adds	r2, r3, #1
 8010892:	70fa      	strb	r2, [r7, #3]
 8010894:	461a      	mov	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4413      	add	r3, r2
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	041b      	lsls	r3, r3, #16
 801089e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80108a2:	4313      	orrs	r3, r2
 80108a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80108a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108ac:	2264      	movs	r2, #100	; 0x64
 80108ae:	fb02 f303 	mul.w	r3, r2, r3
 80108b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80108b6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80108ba:	f002 fd16 	bl	80132ea <LoRaMacClassBBeaconFreqReq>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d003      	beq.n	80108cc <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 80108c4:	2301      	movs	r3, #1
 80108c6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80108ca:	e002      	b.n	80108d2 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80108d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80108d6:	2201      	movs	r2, #1
 80108d8:	4619      	mov	r1, r3
 80108da:	2013      	movs	r0, #19
 80108dc:	f002 fe3a 	bl	8013554 <LoRaMacCommandsAddCmd>
                }
                break;
 80108e0:	bf00      	nop
    while( macIndex < commandsSize )
 80108e2:	78fa      	ldrb	r2, [r7, #3]
 80108e4:	78bb      	ldrb	r3, [r7, #2]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	f4ff ab88 	bcc.w	800fffc <ProcessMacCommands+0x30>
 80108ec:	e002      	b.n	80108f4 <ProcessMacCommands+0x928>
            return;
 80108ee:	bf00      	nop
 80108f0:	e000      	b.n	80108f4 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80108f2:	bf00      	nop
        }
    }
}
 80108f4:	378c      	adds	r7, #140	; 0x8c
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd90      	pop	{r4, r7, pc}
 80108fa:	bf00      	nop
 80108fc:	12d53d80 	.word	0x12d53d80
 8010900:	2000302c 	.word	0x2000302c
 8010904:	20003b4c 	.word	0x20003b4c

08010908 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08e      	sub	sp, #56	; 0x38
 801090c:	af02      	add	r7, sp, #8
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	607a      	str	r2, [r7, #4]
 8010912:	461a      	mov	r2, r3
 8010914:	460b      	mov	r3, r1
 8010916:	72fb      	strb	r3, [r7, #11]
 8010918:	4613      	mov	r3, r2
 801091a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801091c:	2303      	movs	r3, #3
 801091e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010922:	4b65      	ldr	r3, [pc, #404]	; (8010ab8 <Send+0x1b0>)
 8010924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010928:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801092c:	4b62      	ldr	r3, [pc, #392]	; (8010ab8 <Send+0x1b0>)
 801092e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010932:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010936:	4b60      	ldr	r3, [pc, #384]	; (8010ab8 <Send+0x1b0>)
 8010938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801093a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801093c:	4b5e      	ldr	r3, [pc, #376]	; (8010ab8 <Send+0x1b0>)
 801093e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010946:	2307      	movs	r3, #7
 8010948:	e0b1      	b.n	8010aae <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801094a:	4b5b      	ldr	r3, [pc, #364]	; (8010ab8 <Send+0x1b0>)
 801094c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8010950:	2b00      	cmp	r3, #0
 8010952:	d102      	bne.n	801095a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010954:	4b58      	ldr	r3, [pc, #352]	; (8010ab8 <Send+0x1b0>)
 8010956:	2200      	movs	r2, #0
 8010958:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010964:	f36f 0303 	bfc	r3, #0, #4
 8010968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801096c:	4b52      	ldr	r3, [pc, #328]	; (8010ab8 <Send+0x1b0>)
 801096e:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8010972:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010976:	f362 13c7 	bfi	r3, r2, #7, #1
 801097a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801097e:	4b4e      	ldr	r3, [pc, #312]	; (8010ab8 <Send+0x1b0>)
 8010980:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010984:	2b01      	cmp	r3, #1
 8010986:	d106      	bne.n	8010996 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801098c:	f043 0310 	orr.w	r3, r3, #16
 8010990:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010994:	e005      	b.n	80109a2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010996:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801099a:	f36f 1304 	bfc	r3, #4, #1
 801099e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80109a2:	4b45      	ldr	r3, [pc, #276]	; (8010ab8 <Send+0x1b0>)
 80109a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d005      	beq.n	80109b8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80109ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109b0:	f043 0320 	orr.w	r3, r3, #32
 80109b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 80109b8:	4b3f      	ldr	r3, [pc, #252]	; (8010ab8 <Send+0x1b0>)
 80109ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80109be:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 80109c0:	2301      	movs	r3, #1
 80109c2:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80109c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80109c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bf14      	ite	ne
 80109d2:	2301      	movne	r3, #1
 80109d4:	2300      	moveq	r3, #0
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80109da:	4b37      	ldr	r3, [pc, #220]	; (8010ab8 <Send+0x1b0>)
 80109dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109de:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80109e0:	4b36      	ldr	r3, [pc, #216]	; (8010abc <Send+0x1b4>)
 80109e2:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80109e6:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80109e8:	4b34      	ldr	r3, [pc, #208]	; (8010abc <Send+0x1b4>)
 80109ea:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80109ee:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80109f0:	4b31      	ldr	r3, [pc, #196]	; (8010ab8 <Send+0x1b0>)
 80109f2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80109f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80109fa:	4b2f      	ldr	r3, [pc, #188]	; (8010ab8 <Send+0x1b0>)
 80109fc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a04:	4b2c      	ldr	r3, [pc, #176]	; (8010ab8 <Send+0x1b0>)
 8010a06:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010a0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010a0e:	4b2a      	ldr	r3, [pc, #168]	; (8010ab8 <Send+0x1b0>)
 8010a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a1c:	f107 0014 	add.w	r0, r7, #20
 8010a20:	4a27      	ldr	r2, [pc, #156]	; (8010ac0 <Send+0x1b8>)
 8010a22:	4928      	ldr	r1, [pc, #160]	; (8010ac4 <Send+0x1bc>)
 8010a24:	f002 fb7c 	bl	8013120 <LoRaMacAdrCalcNext>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010a30:	f362 1386 	bfi	r3, r2, #6, #1
 8010a34:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010a38:	7afa      	ldrb	r2, [r7, #11]
 8010a3a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010a3e:	893b      	ldrh	r3, [r7, #8]
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 fc21 	bl	801128c <PrepareFrame>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d003      	beq.n	8010a60 <Send+0x158>
 8010a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a5c:	2b0a      	cmp	r3, #10
 8010a5e:	d107      	bne.n	8010a70 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010a60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 f96d 	bl	8010d44 <ScheduleTx>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00a      	beq.n	8010a8e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010a78:	4a0f      	ldr	r2, [pc, #60]	; (8010ab8 <Send+0x1b0>)
 8010a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010a7e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010a82:	4a0d      	ldr	r2, [pc, #52]	; (8010ab8 <Send+0x1b0>)
 8010a84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a88:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010a8c:	e00d      	b.n	8010aaa <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010a8e:	4b0a      	ldr	r3, [pc, #40]	; (8010ab8 <Send+0x1b0>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a98:	4a07      	ldr	r2, [pc, #28]	; (8010ab8 <Send+0x1b0>)
 8010a9a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010a9c:	f002 fdd2 	bl	8013644 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010aa6:	2313      	movs	r3, #19
 8010aa8:	e001      	b.n	8010aae <Send+0x1a6>
        }
    }
    return status;
 8010aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3730      	adds	r7, #48	; 0x30
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	20003534 	.word	0x20003534
 8010abc:	2000302c 	.word	0x2000302c
 8010ac0:	2000356c 	.word	0x2000356c
 8010ac4:	2000356d 	.word	0x2000356d

08010ac8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	4603      	mov	r3, r0
 8010ad0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010ada:	2301      	movs	r3, #1
 8010adc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010ade:	79fb      	ldrb	r3, [r7, #7]
 8010ae0:	2bff      	cmp	r3, #255	; 0xff
 8010ae2:	d129      	bne.n	8010b38 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	f7ff f941 	bl	800fd6c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010aea:	4b1a      	ldr	r3, [pc, #104]	; (8010b54 <SendReJoinReq+0x8c>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010af2:	4b18      	ldr	r3, [pc, #96]	; (8010b54 <SendReJoinReq+0x8c>)
 8010af4:	4a18      	ldr	r2, [pc, #96]	; (8010b58 <SendReJoinReq+0x90>)
 8010af6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010afa:	4b16      	ldr	r3, [pc, #88]	; (8010b54 <SendReJoinReq+0x8c>)
 8010afc:	22ff      	movs	r2, #255	; 0xff
 8010afe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010b02:	7b3b      	ldrb	r3, [r7, #12]
 8010b04:	f36f 1347 	bfc	r3, #5, #3
 8010b08:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010b0a:	7b3a      	ldrb	r2, [r7, #12]
 8010b0c:	4b11      	ldr	r3, [pc, #68]	; (8010b54 <SendReJoinReq+0x8c>)
 8010b0e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010b12:	f7fc fc85 	bl	800d420 <SecureElementGetJoinEui>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2208      	movs	r2, #8
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	480f      	ldr	r0, [pc, #60]	; (8010b5c <SendReJoinReq+0x94>)
 8010b1e:	f008 f98a 	bl	8018e36 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010b22:	f7fc fc5b 	bl	800d3dc <SecureElementGetDevEui>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2208      	movs	r2, #8
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	480c      	ldr	r0, [pc, #48]	; (8010b60 <SendReJoinReq+0x98>)
 8010b2e:	f008 f982 	bl	8018e36 <memcpy1>

            allowDelayedTx = false;
 8010b32:	2300      	movs	r3, #0
 8010b34:	73fb      	strb	r3, [r7, #15]

            break;
 8010b36:	e002      	b.n	8010b3e <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010b38:	2302      	movs	r3, #2
 8010b3a:	73bb      	strb	r3, [r7, #14]
            break;
 8010b3c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010b3e:	7bfb      	ldrb	r3, [r7, #15]
 8010b40:	4618      	mov	r0, r3
 8010b42:	f000 f8ff 	bl	8010d44 <ScheduleTx>
 8010b46:	4603      	mov	r3, r0
 8010b48:	73bb      	strb	r3, [r7, #14]
    return status;
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	2000302c 	.word	0x2000302c
 8010b58:	2000302e 	.word	0x2000302e
 8010b5c:	2000313a 	.word	0x2000313a
 8010b60:	20003142 	.word	0x20003142

08010b64 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010b68:	f002 fb49 	bl	80131fe <LoRaMacClassBIsBeaconExpected>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010b72:	230e      	movs	r3, #14
 8010b74:	e013      	b.n	8010b9e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010b76:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <CheckForClassBCollision+0x40>)
 8010b78:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d10d      	bne.n	8010b9c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010b80:	f002 fb44 	bl	801320c <LoRaMacClassBIsPingExpected>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d001      	beq.n	8010b8e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010b8a:	230f      	movs	r3, #15
 8010b8c:	e007      	b.n	8010b9e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010b8e:	f002 fb44 	bl	801321a <LoRaMacClassBIsMulticastExpected>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010b98:	230f      	movs	r3, #15
 8010b9a:	e000      	b.n	8010b9e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	20003534 	.word	0x20003534

08010ba8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010bae:	4b2d      	ldr	r3, [pc, #180]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bb0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010bb4:	4b2b      	ldr	r3, [pc, #172]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bb6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010bba:	4b2a      	ldr	r3, [pc, #168]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bbc:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010bc0:	4b28      	ldr	r3, [pc, #160]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bc2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010bc6:	4b27      	ldr	r3, [pc, #156]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bc8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010bcc:	b25b      	sxtb	r3, r3
 8010bce:	f004 fc6d 	bl	80154ac <RegionApplyDrOffset>
 8010bd2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010bd4:	b259      	sxtb	r1, r3
 8010bd6:	4b23      	ldr	r3, [pc, #140]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bd8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010bdc:	4b21      	ldr	r3, [pc, #132]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010be0:	4821      	ldr	r0, [pc, #132]	; (8010c68 <ComputeRxWindowParameters+0xc0>)
 8010be2:	9000      	str	r0, [sp, #0]
 8010be4:	4620      	mov	r0, r4
 8010be6:	f004 fb0a 	bl	80151fe <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010bea:	4b1e      	ldr	r3, [pc, #120]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010bf0:	4b1c      	ldr	r3, [pc, #112]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bf2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010bf6:	b259      	sxtb	r1, r3
 8010bf8:	4b1a      	ldr	r3, [pc, #104]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010bfa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010bfe:	4b19      	ldr	r3, [pc, #100]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c02:	4c1a      	ldr	r4, [pc, #104]	; (8010c6c <ComputeRxWindowParameters+0xc4>)
 8010c04:	9400      	str	r4, [sp, #0]
 8010c06:	f004 fafa 	bl	80151fe <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010c0a:	4b16      	ldr	r3, [pc, #88]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c0e:	4a18      	ldr	r2, [pc, #96]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c10:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010c14:	4413      	add	r3, r2
 8010c16:	4a16      	ldr	r2, [pc, #88]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c18:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010c1c:	4b11      	ldr	r3, [pc, #68]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c20:	4a13      	ldr	r2, [pc, #76]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c22:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010c26:	4413      	add	r3, r2
 8010c28:	4a11      	ldr	r2, [pc, #68]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c2a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010c2e:	4b0d      	ldr	r3, [pc, #52]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c30:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d111      	bne.n	8010c5c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010c38:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c3c:	4a0c      	ldr	r2, [pc, #48]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c3e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010c42:	4413      	add	r3, r2
 8010c44:	4a0a      	ldr	r2, [pc, #40]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c46:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010c4a:	4b06      	ldr	r3, [pc, #24]	; (8010c64 <ComputeRxWindowParameters+0xbc>)
 8010c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c4e:	4a08      	ldr	r2, [pc, #32]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c50:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8010c54:	4413      	add	r3, r2
 8010c56:	4a06      	ldr	r2, [pc, #24]	; (8010c70 <ComputeRxWindowParameters+0xc8>)
 8010c58:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010c5c:	bf00      	nop
 8010c5e:	3704      	adds	r7, #4
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd90      	pop	{r4, r7, pc}
 8010c64:	20003534 	.word	0x20003534
 8010c68:	200033e4 	.word	0x200033e4
 8010c6c:	200033f8 	.word	0x200033f8
 8010c70:	2000302c 	.word	0x2000302c

08010c74 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010c7e:	4b13      	ldr	r3, [pc, #76]	; (8010ccc <VerifyTxFrame+0x58>)
 8010c80:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d01b      	beq.n	8010cc0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010c88:	1d3b      	adds	r3, r7, #4
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f002 fd20 	bl	80136d0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c96:	2313      	movs	r3, #19
 8010c98:	e013      	b.n	8010cc2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	; (8010cd0 <VerifyTxFrame+0x5c>)
 8010c9c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010ca0:	4a0a      	ldr	r2, [pc, #40]	; (8010ccc <VerifyTxFrame+0x58>)
 8010ca2:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	b2d2      	uxtb	r2, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff f956 	bl	800ff5c <ValidatePayloadLength>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	f083 0301 	eor.w	r3, r3, #1
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d001      	beq.n	8010cc0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010cbc:	2308      	movs	r3, #8
 8010cbe:	e000      	b.n	8010cc2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3708      	adds	r7, #8
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	20003534 	.word	0x20003534
 8010cd0:	2000302c 	.word	0x2000302c

08010cd4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010cda:	4b18      	ldr	r3, [pc, #96]	; (8010d3c <SerializeTxFrame+0x68>)
 8010cdc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <SerializeTxFrame+0x16>
 8010ce4:	2b04      	cmp	r3, #4
 8010ce6:	d011      	beq.n	8010d0c <SerializeTxFrame+0x38>
 8010ce8:	e021      	b.n	8010d2e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010cea:	4815      	ldr	r0, [pc, #84]	; (8010d40 <SerializeTxFrame+0x6c>)
 8010cec:	f004 f855 	bl	8014d9a <LoRaMacSerializerJoinRequest>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010cfa:	2311      	movs	r3, #17
 8010cfc:	e01a      	b.n	8010d34 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010cfe:	4b0f      	ldr	r3, [pc, #60]	; (8010d3c <SerializeTxFrame+0x68>)
 8010d00:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <SerializeTxFrame+0x68>)
 8010d08:	801a      	strh	r2, [r3, #0]
            break;
 8010d0a:	e012      	b.n	8010d32 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010d0c:	480c      	ldr	r0, [pc, #48]	; (8010d40 <SerializeTxFrame+0x6c>)
 8010d0e:	f004 f8c6 	bl	8014e9e <LoRaMacSerializerData>
 8010d12:	4603      	mov	r3, r0
 8010d14:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010d16:	79fb      	ldrb	r3, [r7, #7]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d1c:	2311      	movs	r3, #17
 8010d1e:	e009      	b.n	8010d34 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010d20:	4b06      	ldr	r3, [pc, #24]	; (8010d3c <SerializeTxFrame+0x68>)
 8010d22:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	4b04      	ldr	r3, [pc, #16]	; (8010d3c <SerializeTxFrame+0x68>)
 8010d2a:	801a      	strh	r2, [r3, #0]
            break;
 8010d2c:	e001      	b.n	8010d32 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d2e:	2303      	movs	r3, #3
 8010d30:	e000      	b.n	8010d34 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	2000302c 	.word	0x2000302c
 8010d40:	20003134 	.word	0x20003134

08010d44 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b090      	sub	sp, #64	; 0x40
 8010d48:	af02      	add	r7, sp, #8
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d4e:	2303      	movs	r3, #3
 8010d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010d54:	f7ff ff06 	bl	8010b64 <CheckForClassBCollision>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d002      	beq.n	8010d6c <ScheduleTx+0x28>
    {
        return status;
 8010d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d6a:	e08f      	b.n	8010e8c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010d6c:	f000 f8fa 	bl	8010f64 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010d70:	f7ff ffb0 	bl	8010cd4 <SerializeTxFrame>
 8010d74:	4603      	mov	r3, r0
 8010d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d002      	beq.n	8010d88 <ScheduleTx+0x44>
    {
        return status;
 8010d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d86:	e081      	b.n	8010e8c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010d88:	4b42      	ldr	r3, [pc, #264]	; (8010e94 <ScheduleTx+0x150>)
 8010d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d8c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d8e:	4b41      	ldr	r3, [pc, #260]	; (8010e94 <ScheduleTx+0x150>)
 8010d90:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010d94:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010d96:	4b3f      	ldr	r3, [pc, #252]	; (8010e94 <ScheduleTx+0x150>)
 8010d98:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010d9c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010da2:	4618      	mov	r0, r3
 8010da4:	f00b ff40 	bl	801cc28 <SysTimeGetMcuTime>
 8010da8:	4638      	mov	r0, r7
 8010daa:	4b3a      	ldr	r3, [pc, #232]	; (8010e94 <ScheduleTx+0x150>)
 8010dac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8010db0:	9200      	str	r2, [sp, #0]
 8010db2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8010db6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010dba:	ca06      	ldmia	r2, {r1, r2}
 8010dbc:	f00b fe95 	bl	801caea <SysTimeSub>
 8010dc0:	f107 0320 	add.w	r3, r7, #32
 8010dc4:	463a      	mov	r2, r7
 8010dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dca:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010dce:	4b31      	ldr	r3, [pc, #196]	; (8010e94 <ScheduleTx+0x150>)
 8010dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010dde:	4b2e      	ldr	r3, [pc, #184]	; (8010e98 <ScheduleTx+0x154>)
 8010de0:	881b      	ldrh	r3, [r3, #0]
 8010de2:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010de4:	4b2b      	ldr	r3, [pc, #172]	; (8010e94 <ScheduleTx+0x150>)
 8010de6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d104      	bne.n	8010df8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010dee:	2301      	movs	r3, #1
 8010df0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010df4:	2300      	movs	r3, #0
 8010df6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010df8:	4b26      	ldr	r3, [pc, #152]	; (8010e94 <ScheduleTx+0x150>)
 8010dfa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010dfe:	f107 0114 	add.w	r1, r7, #20
 8010e02:	4b26      	ldr	r3, [pc, #152]	; (8010e9c <ScheduleTx+0x158>)
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	4b26      	ldr	r3, [pc, #152]	; (8010ea0 <ScheduleTx+0x15c>)
 8010e08:	4a26      	ldr	r2, [pc, #152]	; (8010ea4 <ScheduleTx+0x160>)
 8010e0a:	f004 fb14 	bl	8015436 <RegionNextChannel>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d022      	beq.n	8010e62 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010e1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e20:	2b0b      	cmp	r3, #11
 8010e22:	d11b      	bne.n	8010e5c <ScheduleTx+0x118>
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d018      	beq.n	8010e5c <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010e2a:	4b1b      	ldr	r3, [pc, #108]	; (8010e98 <ScheduleTx+0x154>)
 8010e2c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d011      	beq.n	8010e58 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010e34:	4b18      	ldr	r3, [pc, #96]	; (8010e98 <ScheduleTx+0x154>)
 8010e36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010e3a:	f043 0320 	orr.w	r3, r3, #32
 8010e3e:	4a16      	ldr	r2, [pc, #88]	; (8010e98 <ScheduleTx+0x154>)
 8010e40:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010e44:	4b14      	ldr	r3, [pc, #80]	; (8010e98 <ScheduleTx+0x154>)
 8010e46:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	4816      	ldr	r0, [pc, #88]	; (8010ea8 <ScheduleTx+0x164>)
 8010e4e:	f00c f895 	bl	801cf7c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010e52:	4815      	ldr	r0, [pc, #84]	; (8010ea8 <ScheduleTx+0x164>)
 8010e54:	f00b ffb4 	bl	801cdc0 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	e017      	b.n	8010e8c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e60:	e014      	b.n	8010e8c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010e62:	f7ff fea1 	bl	8010ba8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010e66:	f7ff ff05 	bl	8010c74 <VerifyTxFrame>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <ScheduleTx+0x13a>
    {
        return status;
 8010e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e7c:	e006      	b.n	8010e8c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010e7e:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <ScheduleTx+0x154>)
 8010e80:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 fb1d 	bl	80114c4 <SendFrameOnChannel>
 8010e8a:	4603      	mov	r3, r0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3738      	adds	r7, #56	; 0x38
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	20003534 	.word	0x20003534
 8010e98:	2000302c 	.word	0x2000302c
 8010e9c:	20003564 	.word	0x20003564
 8010ea0:	200034b0 	.word	0x200034b0
 8010ea4:	20003441 	.word	0x20003441
 8010ea8:	20003394 	.word	0x20003394

08010eac <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	460a      	mov	r2, r1
 8010eb6:	71fb      	strb	r3, [r7, #7]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010ebc:	2313      	movs	r3, #19
 8010ebe:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010ec4:	4b25      	ldr	r3, [pc, #148]	; (8010f5c <SecureFrame+0xb0>)
 8010ec6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d002      	beq.n	8010ed4 <SecureFrame+0x28>
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	d011      	beq.n	8010ef6 <SecureFrame+0x4a>
 8010ed2:	e03b      	b.n	8010f4c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010ed4:	4822      	ldr	r0, [pc, #136]	; (8010f60 <SecureFrame+0xb4>)
 8010ed6:	f003 fb29 	bl	801452c <LoRaMacCryptoPrepareJoinRequest>
 8010eda:	4603      	mov	r3, r0
 8010edc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010ede:	7bfb      	ldrb	r3, [r7, #15]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ee4:	2311      	movs	r3, #17
 8010ee6:	e034      	b.n	8010f52 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010ee8:	4b1c      	ldr	r3, [pc, #112]	; (8010f5c <SecureFrame+0xb0>)
 8010eea:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	4b1a      	ldr	r3, [pc, #104]	; (8010f5c <SecureFrame+0xb0>)
 8010ef2:	801a      	strh	r2, [r3, #0]
            break;
 8010ef4:	e02c      	b.n	8010f50 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010ef6:	f107 0308 	add.w	r3, r7, #8
 8010efa:	4618      	mov	r0, r3
 8010efc:	f003 fa30 	bl	8014360 <LoRaMacCryptoGetFCntUp>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010f06:	2312      	movs	r3, #18
 8010f08:	e023      	b.n	8010f52 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8010f0a:	4b14      	ldr	r3, [pc, #80]	; (8010f5c <SecureFrame+0xb0>)
 8010f0c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d104      	bne.n	8010f1e <SecureFrame+0x72>
 8010f14:	4b11      	ldr	r3, [pc, #68]	; (8010f5c <SecureFrame+0xb0>)
 8010f16:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d902      	bls.n	8010f24 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010f24:	68b8      	ldr	r0, [r7, #8]
 8010f26:	79ba      	ldrb	r2, [r7, #6]
 8010f28:	79f9      	ldrb	r1, [r7, #7]
 8010f2a:	4b0d      	ldr	r3, [pc, #52]	; (8010f60 <SecureFrame+0xb4>)
 8010f2c:	f003 fc16 	bl	801475c <LoRaMacCryptoSecureMessage>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d001      	beq.n	8010f3e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f3a:	2311      	movs	r3, #17
 8010f3c:	e009      	b.n	8010f52 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010f3e:	4b07      	ldr	r3, [pc, #28]	; (8010f5c <SecureFrame+0xb0>)
 8010f40:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <SecureFrame+0xb0>)
 8010f48:	801a      	strh	r2, [r3, #0]
            break;
 8010f4a:	e001      	b.n	8010f50 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f4c:	2303      	movs	r3, #3
 8010f4e:	e000      	b.n	8010f52 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	2000302c 	.word	0x2000302c
 8010f60:	20003134 	.word	0x20003134

08010f64 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010f64:	b480      	push	{r7}
 8010f66:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010f68:	4b09      	ldr	r3, [pc, #36]	; (8010f90 <CalculateBackOff+0x2c>)
 8010f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10a      	bne.n	8010f86 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010f70:	4b07      	ldr	r3, [pc, #28]	; (8010f90 <CalculateBackOff+0x2c>)
 8010f72:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8010f76:	3b01      	subs	r3, #1
 8010f78:	4a06      	ldr	r2, [pc, #24]	; (8010f94 <CalculateBackOff+0x30>)
 8010f7a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 8010f7e:	fb02 f303 	mul.w	r3, r2, r3
 8010f82:	4a03      	ldr	r2, [pc, #12]	; (8010f90 <CalculateBackOff+0x2c>)
 8010f84:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010f86:	bf00      	nop
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bc80      	pop	{r7}
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	20003534 	.word	0x20003534
 8010f94:	2000302c 	.word	0x2000302c

08010f98 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	7139      	strb	r1, [r7, #4]
 8010fa2:	71fb      	strb	r3, [r7, #7]
 8010fa4:	4613      	mov	r3, r2
 8010fa6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010fa8:	79fb      	ldrb	r3, [r7, #7]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d002      	beq.n	8010fb4 <RemoveMacCommands+0x1c>
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d10d      	bne.n	8010fd0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010fb4:	79bb      	ldrb	r3, [r7, #6]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d108      	bne.n	8010fcc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010fba:	793b      	ldrb	r3, [r7, #4]
 8010fbc:	f003 0320 	and.w	r3, r3, #32
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d004      	beq.n	8010fd0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010fc6:	f002 fb61 	bl	801368c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010fca:	e001      	b.n	8010fd0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010fcc:	f002 fb5e 	bl	801368c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8010fd8:	b5b0      	push	{r4, r5, r7, lr}
 8010fda:	b08e      	sub	sp, #56	; 0x38
 8010fdc:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010fde:	4b68      	ldr	r3, [pc, #416]	; (8011180 <ResetMacParameters+0x1a8>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010fe6:	4b66      	ldr	r3, [pc, #408]	; (8011180 <ResetMacParameters+0x1a8>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010fec:	4b65      	ldr	r3, [pc, #404]	; (8011184 <ResetMacParameters+0x1ac>)
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8010ff4:	4b63      	ldr	r3, [pc, #396]	; (8011184 <ResetMacParameters+0x1ac>)
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010ffc:	4b61      	ldr	r3, [pc, #388]	; (8011184 <ResetMacParameters+0x1ac>)
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8011004:	4b5f      	ldr	r3, [pc, #380]	; (8011184 <ResetMacParameters+0x1ac>)
 8011006:	2200      	movs	r2, #0
 8011008:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 801100c:	4b5c      	ldr	r3, [pc, #368]	; (8011180 <ResetMacParameters+0x1a8>)
 801100e:	2200      	movs	r2, #0
 8011010:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011014:	4b5a      	ldr	r3, [pc, #360]	; (8011180 <ResetMacParameters+0x1a8>)
 8011016:	2201      	movs	r2, #1
 8011018:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801101c:	4b58      	ldr	r3, [pc, #352]	; (8011180 <ResetMacParameters+0x1a8>)
 801101e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8011022:	4b57      	ldr	r3, [pc, #348]	; (8011180 <ResetMacParameters+0x1a8>)
 8011024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011028:	4b55      	ldr	r3, [pc, #340]	; (8011180 <ResetMacParameters+0x1a8>)
 801102a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801102e:	4b54      	ldr	r3, [pc, #336]	; (8011180 <ResetMacParameters+0x1a8>)
 8011030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011034:	4b52      	ldr	r3, [pc, #328]	; (8011180 <ResetMacParameters+0x1a8>)
 8011036:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 801103a:	4b51      	ldr	r3, [pc, #324]	; (8011180 <ResetMacParameters+0x1a8>)
 801103c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011040:	4b4f      	ldr	r3, [pc, #316]	; (8011180 <ResetMacParameters+0x1a8>)
 8011042:	4a4f      	ldr	r2, [pc, #316]	; (8011180 <ResetMacParameters+0x1a8>)
 8011044:	3364      	adds	r3, #100	; 0x64
 8011046:	32a4      	adds	r2, #164	; 0xa4
 8011048:	e892 0003 	ldmia.w	r2, {r0, r1}
 801104c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011050:	4b4b      	ldr	r3, [pc, #300]	; (8011180 <ResetMacParameters+0x1a8>)
 8011052:	4a4b      	ldr	r2, [pc, #300]	; (8011180 <ResetMacParameters+0x1a8>)
 8011054:	336c      	adds	r3, #108	; 0x6c
 8011056:	32ac      	adds	r2, #172	; 0xac
 8011058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801105c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011060:	4b47      	ldr	r3, [pc, #284]	; (8011180 <ResetMacParameters+0x1a8>)
 8011062:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8011066:	4b46      	ldr	r3, [pc, #280]	; (8011180 <ResetMacParameters+0x1a8>)
 8011068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801106c:	4b44      	ldr	r3, [pc, #272]	; (8011180 <ResetMacParameters+0x1a8>)
 801106e:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8011072:	4b43      	ldr	r3, [pc, #268]	; (8011180 <ResetMacParameters+0x1a8>)
 8011074:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011078:	4b41      	ldr	r3, [pc, #260]	; (8011180 <ResetMacParameters+0x1a8>)
 801107a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801107e:	4a40      	ldr	r2, [pc, #256]	; (8011180 <ResetMacParameters+0x1a8>)
 8011080:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011082:	4b3f      	ldr	r3, [pc, #252]	; (8011180 <ResetMacParameters+0x1a8>)
 8011084:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011088:	4a3d      	ldr	r2, [pc, #244]	; (8011180 <ResetMacParameters+0x1a8>)
 801108a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 801108c:	4b3d      	ldr	r3, [pc, #244]	; (8011184 <ResetMacParameters+0x1ac>)
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8011094:	4b3a      	ldr	r3, [pc, #232]	; (8011180 <ResetMacParameters+0x1a8>)
 8011096:	2200      	movs	r2, #0
 8011098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801109c:	2301      	movs	r3, #1
 801109e:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80110a0:	4b39      	ldr	r3, [pc, #228]	; (8011188 <ResetMacParameters+0x1b0>)
 80110a2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80110a4:	4b39      	ldr	r3, [pc, #228]	; (801118c <ResetMacParameters+0x1b4>)
 80110a6:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80110a8:	4b35      	ldr	r3, [pc, #212]	; (8011180 <ResetMacParameters+0x1a8>)
 80110aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110ae:	1d3a      	adds	r2, r7, #4
 80110b0:	4611      	mov	r1, r2
 80110b2:	4618      	mov	r0, r3
 80110b4:	f004 f837 	bl	8015126 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80110b8:	4b32      	ldr	r3, [pc, #200]	; (8011184 <ResetMacParameters+0x1ac>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80110c0:	4b30      	ldr	r3, [pc, #192]	; (8011184 <ResetMacParameters+0x1ac>)
 80110c2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80110c6:	4b2f      	ldr	r3, [pc, #188]	; (8011184 <ResetMacParameters+0x1ac>)
 80110c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80110cc:	4b2c      	ldr	r3, [pc, #176]	; (8011180 <ResetMacParameters+0x1a8>)
 80110ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80110d0:	4a2c      	ldr	r2, [pc, #176]	; (8011184 <ResetMacParameters+0x1ac>)
 80110d2:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80110d6:	4b2a      	ldr	r3, [pc, #168]	; (8011180 <ResetMacParameters+0x1a8>)
 80110d8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80110dc:	4b29      	ldr	r3, [pc, #164]	; (8011184 <ResetMacParameters+0x1ac>)
 80110de:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80110e2:	4b27      	ldr	r3, [pc, #156]	; (8011180 <ResetMacParameters+0x1a8>)
 80110e4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80110e8:	4b26      	ldr	r3, [pc, #152]	; (8011184 <ResetMacParameters+0x1ac>)
 80110ea:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80110ee:	4b25      	ldr	r3, [pc, #148]	; (8011184 <ResetMacParameters+0x1ac>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80110f6:	4b23      	ldr	r3, [pc, #140]	; (8011184 <ResetMacParameters+0x1ac>)
 80110f8:	2201      	movs	r2, #1
 80110fa:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80110fe:	4a21      	ldr	r2, [pc, #132]	; (8011184 <ResetMacParameters+0x1ac>)
 8011100:	4b20      	ldr	r3, [pc, #128]	; (8011184 <ResetMacParameters+0x1ac>)
 8011102:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011106:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801110e:	682b      	ldr	r3, [r5, #0]
 8011110:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011112:	4b1c      	ldr	r3, [pc, #112]	; (8011184 <ResetMacParameters+0x1ac>)
 8011114:	2201      	movs	r2, #1
 8011116:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801111a:	4b1a      	ldr	r3, [pc, #104]	; (8011184 <ResetMacParameters+0x1ac>)
 801111c:	2202      	movs	r2, #2
 801111e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011122:	2300      	movs	r3, #0
 8011124:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8011126:	2300      	movs	r3, #0
 8011128:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801112a:	4b16      	ldr	r3, [pc, #88]	; (8011184 <ResetMacParameters+0x1ac>)
 801112c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011130:	2b00      	cmp	r3, #0
 8011132:	d009      	beq.n	8011148 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011134:	4b13      	ldr	r3, [pc, #76]	; (8011184 <ResetMacParameters+0x1ac>)
 8011136:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801113e:	4b11      	ldr	r3, [pc, #68]	; (8011184 <ResetMacParameters+0x1ac>)
 8011140:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011144:	691b      	ldr	r3, [r3, #16]
 8011146:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011148:	4b11      	ldr	r3, [pc, #68]	; (8011190 <ResetMacParameters+0x1b8>)
 801114a:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801114c:	4b11      	ldr	r3, [pc, #68]	; (8011194 <ResetMacParameters+0x1bc>)
 801114e:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011150:	4b11      	ldr	r3, [pc, #68]	; (8011198 <ResetMacParameters+0x1c0>)
 8011152:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011154:	4b11      	ldr	r3, [pc, #68]	; (801119c <ResetMacParameters+0x1c4>)
 8011156:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011158:	4b11      	ldr	r3, [pc, #68]	; (80111a0 <ResetMacParameters+0x1c8>)
 801115a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801115c:	4b11      	ldr	r3, [pc, #68]	; (80111a4 <ResetMacParameters+0x1cc>)
 801115e:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011160:	4b11      	ldr	r3, [pc, #68]	; (80111a8 <ResetMacParameters+0x1d0>)
 8011162:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011164:	4b11      	ldr	r3, [pc, #68]	; (80111ac <ResetMacParameters+0x1d4>)
 8011166:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011168:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801116c:	f107 0310 	add.w	r3, r7, #16
 8011170:	4a0f      	ldr	r2, [pc, #60]	; (80111b0 <ResetMacParameters+0x1d8>)
 8011172:	4618      	mov	r0, r3
 8011174:	f001 ffec 	bl	8013150 <LoRaMacClassBInit>
}
 8011178:	bf00      	nop
 801117a:	3738      	adds	r7, #56	; 0x38
 801117c:	46bd      	mov	sp, r7
 801117e:	bdb0      	pop	{r4, r5, r7, pc}
 8011180:	20003534 	.word	0x20003534
 8011184:	2000302c 	.word	0x2000302c
 8011188:	2000370c 	.word	0x2000370c
 801118c:	200037b0 	.word	0x200037b0
 8011190:	2000348c 	.word	0x2000348c
 8011194:	20003448 	.word	0x20003448
 8011198:	20003478 	.word	0x20003478
 801119c:	200034ad 	.word	0x200034ad
 80111a0:	20003600 	.word	0x20003600
 80111a4:	20003574 	.word	0x20003574
 80111a8:	20003578 	.word	0x20003578
 80111ac:	20003604 	.word	0x20003604
 80111b0:	20003b2c 	.word	0x20003b2c

080111b4 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f00b fe6c 	bl	801ce9c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80111c4:	4b0e      	ldr	r3, [pc, #56]	; (8011200 <RxWindowSetup+0x4c>)
 80111c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80111ca:	4b0e      	ldr	r3, [pc, #56]	; (8011204 <RxWindowSetup+0x50>)
 80111cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111d0:	4a0d      	ldr	r2, [pc, #52]	; (8011208 <RxWindowSetup+0x54>)
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f004 f836 	bl	8015246 <RegionRxConfig>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00a      	beq.n	80111f6 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <RxWindowSetup+0x4c>)
 80111e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e4:	4a07      	ldr	r2, [pc, #28]	; (8011204 <RxWindowSetup+0x50>)
 80111e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	7cda      	ldrb	r2, [r3, #19]
 80111f0:	4b06      	ldr	r3, [pc, #24]	; (801120c <RxWindowSetup+0x58>)
 80111f2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80111f6:	bf00      	nop
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	0801e648 	.word	0x0801e648
 8011204:	20003534 	.word	0x20003534
 8011208:	2000344c 	.word	0x2000344c
 801120c:	2000302c 	.word	0x2000302c

08011210 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011210:	b590      	push	{r4, r7, lr}
 8011212:	b083      	sub	sp, #12
 8011214:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011216:	4b18      	ldr	r3, [pc, #96]	; (8011278 <OpenContinuousRxCWindow+0x68>)
 8011218:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801121c:	4b16      	ldr	r3, [pc, #88]	; (8011278 <OpenContinuousRxCWindow+0x68>)
 801121e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011222:	b259      	sxtb	r1, r3
 8011224:	4b14      	ldr	r3, [pc, #80]	; (8011278 <OpenContinuousRxCWindow+0x68>)
 8011226:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801122a:	4b13      	ldr	r3, [pc, #76]	; (8011278 <OpenContinuousRxCWindow+0x68>)
 801122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801122e:	4c13      	ldr	r4, [pc, #76]	; (801127c <OpenContinuousRxCWindow+0x6c>)
 8011230:	9400      	str	r4, [sp, #0]
 8011232:	f003 ffe4 	bl	80151fe <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011236:	4b12      	ldr	r3, [pc, #72]	; (8011280 <OpenContinuousRxCWindow+0x70>)
 8011238:	2202      	movs	r2, #2
 801123a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801123e:	4b10      	ldr	r3, [pc, #64]	; (8011280 <OpenContinuousRxCWindow+0x70>)
 8011240:	2201      	movs	r2, #1
 8011242:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011246:	4b0c      	ldr	r3, [pc, #48]	; (8011278 <OpenContinuousRxCWindow+0x68>)
 8011248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801124c:	4a0d      	ldr	r2, [pc, #52]	; (8011284 <OpenContinuousRxCWindow+0x74>)
 801124e:	490b      	ldr	r1, [pc, #44]	; (801127c <OpenContinuousRxCWindow+0x6c>)
 8011250:	4618      	mov	r0, r3
 8011252:	f003 fff8 	bl	8015246 <RegionRxConfig>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d009      	beq.n	8011270 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 801125c:	4b0a      	ldr	r3, [pc, #40]	; (8011288 <OpenContinuousRxCWindow+0x78>)
 801125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011260:	2000      	movs	r0, #0
 8011262:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011264:	4b06      	ldr	r3, [pc, #24]	; (8011280 <OpenContinuousRxCWindow+0x70>)
 8011266:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801126a:	4b05      	ldr	r3, [pc, #20]	; (8011280 <OpenContinuousRxCWindow+0x70>)
 801126c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8011270:	bf00      	nop
 8011272:	3704      	adds	r7, #4
 8011274:	46bd      	mov	sp, r7
 8011276:	bd90      	pop	{r4, r7, pc}
 8011278:	20003534 	.word	0x20003534
 801127c:	2000340c 	.word	0x2000340c
 8011280:	2000302c 	.word	0x2000302c
 8011284:	2000344c 	.word	0x2000344c
 8011288:	0801e648 	.word	0x0801e648

0801128c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b088      	sub	sp, #32
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	4613      	mov	r3, r2
 801129a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801129c:	4b82      	ldr	r3, [pc, #520]	; (80114a8 <PrepareFrame+0x21c>)
 801129e:	2200      	movs	r2, #0
 80112a0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80112a2:	4b81      	ldr	r3, [pc, #516]	; (80114a8 <PrepareFrame+0x21c>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80112aa:	2300      	movs	r3, #0
 80112ac:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d101      	bne.n	80112c0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80112bc:	2300      	movs	r3, #0
 80112be:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80112c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80112c2:	461a      	mov	r2, r3
 80112c4:	6839      	ldr	r1, [r7, #0]
 80112c6:	4879      	ldr	r0, [pc, #484]	; (80114ac <PrepareFrame+0x220>)
 80112c8:	f007 fdb5 	bl	8018e36 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80112cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	4b75      	ldr	r3, [pc, #468]	; (80114a8 <PrepareFrame+0x21c>)
 80112d2:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	781a      	ldrb	r2, [r3, #0]
 80112da:	4b73      	ldr	r3, [pc, #460]	; (80114a8 <PrepareFrame+0x21c>)
 80112dc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b07      	cmp	r3, #7
 80112ea:	f000 80b9 	beq.w	8011460 <PrepareFrame+0x1d4>
 80112ee:	2b07      	cmp	r3, #7
 80112f0:	f300 80d0 	bgt.w	8011494 <PrepareFrame+0x208>
 80112f4:	2b02      	cmp	r3, #2
 80112f6:	d006      	beq.n	8011306 <PrepareFrame+0x7a>
 80112f8:	2b04      	cmp	r3, #4
 80112fa:	f040 80cb 	bne.w	8011494 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80112fe:	4b6a      	ldr	r3, [pc, #424]	; (80114a8 <PrepareFrame+0x21c>)
 8011300:	2201      	movs	r2, #1
 8011302:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011306:	4b68      	ldr	r3, [pc, #416]	; (80114a8 <PrepareFrame+0x21c>)
 8011308:	2204      	movs	r2, #4
 801130a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801130e:	4b66      	ldr	r3, [pc, #408]	; (80114a8 <PrepareFrame+0x21c>)
 8011310:	4a67      	ldr	r2, [pc, #412]	; (80114b0 <PrepareFrame+0x224>)
 8011312:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011316:	4b64      	ldr	r3, [pc, #400]	; (80114a8 <PrepareFrame+0x21c>)
 8011318:	22ff      	movs	r2, #255	; 0xff
 801131a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	781a      	ldrb	r2, [r3, #0]
 8011322:	4b61      	ldr	r3, [pc, #388]	; (80114a8 <PrepareFrame+0x21c>)
 8011324:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011328:	4a5f      	ldr	r2, [pc, #380]	; (80114a8 <PrepareFrame+0x21c>)
 801132a:	79fb      	ldrb	r3, [r7, #7]
 801132c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011330:	4b60      	ldr	r3, [pc, #384]	; (80114b4 <PrepareFrame+0x228>)
 8011332:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011336:	4a5c      	ldr	r2, [pc, #368]	; (80114a8 <PrepareFrame+0x21c>)
 8011338:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	781a      	ldrb	r2, [r3, #0]
 8011340:	4b59      	ldr	r3, [pc, #356]	; (80114a8 <PrepareFrame+0x21c>)
 8011342:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011346:	4b58      	ldr	r3, [pc, #352]	; (80114a8 <PrepareFrame+0x21c>)
 8011348:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 801134c:	4b56      	ldr	r3, [pc, #344]	; (80114a8 <PrepareFrame+0x21c>)
 801134e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011352:	4b55      	ldr	r3, [pc, #340]	; (80114a8 <PrepareFrame+0x21c>)
 8011354:	4a55      	ldr	r2, [pc, #340]	; (80114ac <PrepareFrame+0x220>)
 8011356:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801135a:	f107 0318 	add.w	r3, r7, #24
 801135e:	4618      	mov	r0, r3
 8011360:	f002 fffe 	bl	8014360 <LoRaMacCryptoGetFCntUp>
 8011364:	4603      	mov	r3, r0
 8011366:	2b00      	cmp	r3, #0
 8011368:	d001      	beq.n	801136e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801136a:	2312      	movs	r3, #18
 801136c:	e098      	b.n	80114a0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	b29a      	uxth	r2, r3
 8011372:	4b4d      	ldr	r3, [pc, #308]	; (80114a8 <PrepareFrame+0x21c>)
 8011374:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8011378:	4b4b      	ldr	r3, [pc, #300]	; (80114a8 <PrepareFrame+0x21c>)
 801137a:	2200      	movs	r2, #0
 801137c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8011380:	4b49      	ldr	r3, [pc, #292]	; (80114a8 <PrepareFrame+0x21c>)
 8011382:	2200      	movs	r2, #0
 8011384:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	4a47      	ldr	r2, [pc, #284]	; (80114a8 <PrepareFrame+0x21c>)
 801138c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011390:	f107 0314 	add.w	r3, r7, #20
 8011394:	4618      	mov	r0, r3
 8011396:	f002 f99b 	bl	80136d0 <LoRaMacCommandsGetSizeSerializedCmds>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d001      	beq.n	80113a4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113a0:	2313      	movs	r3, #19
 80113a2:	e07d      	b.n	80114a0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d076      	beq.n	8011498 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80113aa:	4b42      	ldr	r3, [pc, #264]	; (80114b4 <PrepareFrame+0x228>)
 80113ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fe fdab 	bl	800ff0c <GetMaxAppPayloadWithoutFOptsLength>
 80113b6:	4603      	mov	r3, r0
 80113b8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80113ba:	4b3b      	ldr	r3, [pc, #236]	; (80114a8 <PrepareFrame+0x21c>)
 80113bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d01d      	beq.n	8011400 <PrepareFrame+0x174>
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b0f      	cmp	r3, #15
 80113c8:	d81a      	bhi.n	8011400 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80113ca:	f107 0314 	add.w	r3, r7, #20
 80113ce:	4a3a      	ldr	r2, [pc, #232]	; (80114b8 <PrepareFrame+0x22c>)
 80113d0:	4619      	mov	r1, r3
 80113d2:	200f      	movs	r0, #15
 80113d4:	f002 f992 	bl	80136fc <LoRaMacCommandsSerializeCmds>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d001      	beq.n	80113e2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113de:	2313      	movs	r3, #19
 80113e0:	e05e      	b.n	80114a0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	f003 030f 	and.w	r3, r3, #15
 80113e8:	b2d9      	uxtb	r1, r3
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	7813      	ldrb	r3, [r2, #0]
 80113ee:	f361 0303 	bfi	r3, r1, #0, #4
 80113f2:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	781a      	ldrb	r2, [r3, #0]
 80113f8:	4b2b      	ldr	r3, [pc, #172]	; (80114a8 <PrepareFrame+0x21c>)
 80113fa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80113fe:	e04b      	b.n	8011498 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011400:	4b29      	ldr	r3, [pc, #164]	; (80114a8 <PrepareFrame+0x21c>)
 8011402:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011406:	2b00      	cmp	r3, #0
 8011408:	d010      	beq.n	801142c <PrepareFrame+0x1a0>
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b0f      	cmp	r3, #15
 801140e:	d90d      	bls.n	801142c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011410:	7ffb      	ldrb	r3, [r7, #31]
 8011412:	f107 0114 	add.w	r1, r7, #20
 8011416:	4a29      	ldr	r2, [pc, #164]	; (80114bc <PrepareFrame+0x230>)
 8011418:	4618      	mov	r0, r3
 801141a:	f002 f96f 	bl	80136fc <LoRaMacCommandsSerializeCmds>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011424:	2313      	movs	r3, #19
 8011426:	e03b      	b.n	80114a0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011428:	230a      	movs	r3, #10
 801142a:	e039      	b.n	80114a0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801142c:	7ffb      	ldrb	r3, [r7, #31]
 801142e:	f107 0114 	add.w	r1, r7, #20
 8011432:	4a22      	ldr	r2, [pc, #136]	; (80114bc <PrepareFrame+0x230>)
 8011434:	4618      	mov	r0, r3
 8011436:	f002 f961 	bl	80136fc <LoRaMacCommandsSerializeCmds>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011440:	2313      	movs	r3, #19
 8011442:	e02d      	b.n	80114a0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011444:	4b18      	ldr	r3, [pc, #96]	; (80114a8 <PrepareFrame+0x21c>)
 8011446:	2200      	movs	r2, #0
 8011448:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801144c:	4b16      	ldr	r3, [pc, #88]	; (80114a8 <PrepareFrame+0x21c>)
 801144e:	4a1b      	ldr	r2, [pc, #108]	; (80114bc <PrepareFrame+0x230>)
 8011450:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	b2da      	uxtb	r2, r3
 8011458:	4b13      	ldr	r3, [pc, #76]	; (80114a8 <PrepareFrame+0x21c>)
 801145a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801145e:	e01b      	b.n	8011498 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01a      	beq.n	801149c <PrepareFrame+0x210>
 8011466:	4b10      	ldr	r3, [pc, #64]	; (80114a8 <PrepareFrame+0x21c>)
 8011468:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801146c:	2b00      	cmp	r3, #0
 801146e:	d015      	beq.n	801149c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011470:	4813      	ldr	r0, [pc, #76]	; (80114c0 <PrepareFrame+0x234>)
 8011472:	4b0d      	ldr	r3, [pc, #52]	; (80114a8 <PrepareFrame+0x21c>)
 8011474:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011478:	b29b      	uxth	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	6839      	ldr	r1, [r7, #0]
 801147e:	f007 fcda 	bl	8018e36 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011482:	4b09      	ldr	r3, [pc, #36]	; (80114a8 <PrepareFrame+0x21c>)
 8011484:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011488:	b29b      	uxth	r3, r3
 801148a:	3301      	adds	r3, #1
 801148c:	b29a      	uxth	r2, r3
 801148e:	4b06      	ldr	r3, [pc, #24]	; (80114a8 <PrepareFrame+0x21c>)
 8011490:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011492:	e003      	b.n	801149c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011494:	2302      	movs	r3, #2
 8011496:	e003      	b.n	80114a0 <PrepareFrame+0x214>
            break;
 8011498:	bf00      	nop
 801149a:	e000      	b.n	801149e <PrepareFrame+0x212>
            break;
 801149c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3720      	adds	r7, #32
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	2000302c 	.word	0x2000302c
 80114ac:	20003164 	.word	0x20003164
 80114b0:	2000302e 	.word	0x2000302e
 80114b4:	20003534 	.word	0x20003534
 80114b8:	20003144 	.word	0x20003144
 80114bc:	200034b4 	.word	0x200034b4
 80114c0:	2000302f 	.word	0x2000302f

080114c4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08a      	sub	sp, #40	; 0x28
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114ce:	2303      	movs	r3, #3
 80114d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80114d8:	79fb      	ldrb	r3, [r7, #7]
 80114da:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80114dc:	4b47      	ldr	r3, [pc, #284]	; (80115fc <SendFrameOnChannel+0x138>)
 80114de:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80114e2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80114e4:	4b45      	ldr	r3, [pc, #276]	; (80115fc <SendFrameOnChannel+0x138>)
 80114e6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80114ea:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80114ec:	4b43      	ldr	r3, [pc, #268]	; (80115fc <SendFrameOnChannel+0x138>)
 80114ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114f0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114f2:	4b42      	ldr	r3, [pc, #264]	; (80115fc <SendFrameOnChannel+0x138>)
 80114f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80114f8:	4b41      	ldr	r3, [pc, #260]	; (8011600 <SendFrameOnChannel+0x13c>)
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80114fe:	4b3f      	ldr	r3, [pc, #252]	; (80115fc <SendFrameOnChannel+0x138>)
 8011500:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011504:	f107 020f 	add.w	r2, r7, #15
 8011508:	f107 0110 	add.w	r1, r7, #16
 801150c:	4b3d      	ldr	r3, [pc, #244]	; (8011604 <SendFrameOnChannel+0x140>)
 801150e:	f003 feb8 	bl	8015282 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011512:	4b3b      	ldr	r3, [pc, #236]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011514:	2201      	movs	r2, #1
 8011516:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801151a:	4b38      	ldr	r3, [pc, #224]	; (80115fc <SendFrameOnChannel+0x138>)
 801151c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011520:	b2da      	uxtb	r2, r3
 8011522:	4b37      	ldr	r3, [pc, #220]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011524:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011528:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801152c:	4b34      	ldr	r3, [pc, #208]	; (8011600 <SendFrameOnChannel+0x13c>)
 801152e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8011532:	79fb      	ldrb	r3, [r7, #7]
 8011534:	4a32      	ldr	r2, [pc, #200]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011536:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801153a:	4b31      	ldr	r3, [pc, #196]	; (8011600 <SendFrameOnChannel+0x13c>)
 801153c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011540:	4a2f      	ldr	r2, [pc, #188]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011542:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011546:	4b2e      	ldr	r3, [pc, #184]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011548:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801154c:	4a2c      	ldr	r2, [pc, #176]	; (8011600 <SendFrameOnChannel+0x13c>)
 801154e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011552:	f001 fe69 	bl	8013228 <LoRaMacClassBIsBeaconModeActive>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00b      	beq.n	8011574 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801155c:	4b28      	ldr	r3, [pc, #160]	; (8011600 <SendFrameOnChannel+0x13c>)
 801155e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011562:	4618      	mov	r0, r3
 8011564:	f001 fecb 	bl	80132fe <LoRaMacClassBIsUplinkCollision>
 8011568:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011570:	2310      	movs	r3, #16
 8011572:	e03e      	b.n	80115f2 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011574:	4b21      	ldr	r3, [pc, #132]	; (80115fc <SendFrameOnChannel+0x138>)
 8011576:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801157a:	2b01      	cmp	r3, #1
 801157c:	d101      	bne.n	8011582 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801157e:	f001 fec8 	bl	8013312 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011582:	f001 fe62 	bl	801324a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011586:	4b1d      	ldr	r3, [pc, #116]	; (80115fc <SendFrameOnChannel+0x138>)
 8011588:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801158c:	b2db      	uxtb	r3, r3
 801158e:	4a1c      	ldr	r2, [pc, #112]	; (8011600 <SendFrameOnChannel+0x13c>)
 8011590:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fc88 	bl	8010eac <SecureFrame>
 801159c:	4603      	mov	r3, r0
 801159e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80115a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <SendFrameOnChannel+0xec>
    {
        return status;
 80115aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115ae:	e020      	b.n	80115f2 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80115b0:	4b13      	ldr	r3, [pc, #76]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115b6:	f043 0302 	orr.w	r3, r3, #2
 80115ba:	4a11      	ldr	r2, [pc, #68]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115bc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80115c0:	4b0f      	ldr	r3, [pc, #60]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115c2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80115c6:	f083 0301 	eor.w	r3, r3, #1
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d007      	beq.n	80115e0 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80115d0:	4b0b      	ldr	r3, [pc, #44]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115d2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80115d6:	3301      	adds	r3, #1
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b09      	ldr	r3, [pc, #36]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115dc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80115e0:	4b09      	ldr	r3, [pc, #36]	; (8011608 <SendFrameOnChannel+0x144>)
 80115e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e4:	4a06      	ldr	r2, [pc, #24]	; (8011600 <SendFrameOnChannel+0x13c>)
 80115e6:	8812      	ldrh	r2, [r2, #0]
 80115e8:	b2d2      	uxtb	r2, r2
 80115ea:	4611      	mov	r1, r2
 80115ec:	4807      	ldr	r0, [pc, #28]	; (801160c <SendFrameOnChannel+0x148>)
 80115ee:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80115f0:	2300      	movs	r3, #0
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3728      	adds	r7, #40	; 0x28
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	20003534 	.word	0x20003534
 8011600:	2000302c 	.word	0x2000302c
 8011604:	20003444 	.word	0x20003444
 8011608:	0801e648 	.word	0x0801e648
 801160c:	2000302e 	.word	0x2000302e

08011610 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	4603      	mov	r3, r0
 8011618:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801161a:	4b15      	ldr	r3, [pc, #84]	; (8011670 <SetTxContinuousWave+0x60>)
 801161c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8011620:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011622:	4b14      	ldr	r3, [pc, #80]	; (8011674 <SetTxContinuousWave+0x64>)
 8011624:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011628:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801162a:	4b12      	ldr	r3, [pc, #72]	; (8011674 <SetTxContinuousWave+0x64>)
 801162c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011630:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011632:	4b10      	ldr	r3, [pc, #64]	; (8011674 <SetTxContinuousWave+0x64>)
 8011634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011636:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011638:	4b0e      	ldr	r3, [pc, #56]	; (8011674 <SetTxContinuousWave+0x64>)
 801163a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801163c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801163e:	88fb      	ldrh	r3, [r7, #6]
 8011640:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8011642:	4b0c      	ldr	r3, [pc, #48]	; (8011674 <SetTxContinuousWave+0x64>)
 8011644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011648:	f107 0208 	add.w	r2, r7, #8
 801164c:	4611      	mov	r1, r2
 801164e:	4618      	mov	r0, r3
 8011650:	f003 ff14 	bl	801547c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011654:	4b06      	ldr	r3, [pc, #24]	; (8011670 <SetTxContinuousWave+0x60>)
 8011656:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801165a:	f043 0302 	orr.w	r3, r3, #2
 801165e:	4a04      	ldr	r2, [pc, #16]	; (8011670 <SetTxContinuousWave+0x60>)
 8011660:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011664:	2300      	movs	r3, #0
}
 8011666:	4618      	mov	r0, r3
 8011668:	3718      	adds	r7, #24
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	2000302c 	.word	0x2000302c
 8011674:	20003534 	.word	0x20003534

08011678 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	6039      	str	r1, [r7, #0]
 8011682:	80fb      	strh	r3, [r7, #6]
 8011684:	4613      	mov	r3, r2
 8011686:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011688:	4b09      	ldr	r3, [pc, #36]	; (80116b0 <SetTxContinuousWave1+0x38>)
 801168a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801168c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011690:	88fa      	ldrh	r2, [r7, #6]
 8011692:	6838      	ldr	r0, [r7, #0]
 8011694:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011696:	4b07      	ldr	r3, [pc, #28]	; (80116b4 <SetTxContinuousWave1+0x3c>)
 8011698:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801169c:	f043 0302 	orr.w	r3, r3, #2
 80116a0:	4a04      	ldr	r2, [pc, #16]	; (80116b4 <SetTxContinuousWave1+0x3c>)
 80116a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	0801e648 	.word	0x0801e648
 80116b4:	2000302c 	.word	0x2000302c

080116b8 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 80116b8:	b480      	push	{r7}
 80116ba:	af00      	add	r7, sp, #0
    return &Nvm;
 80116bc:	4b02      	ldr	r3, [pc, #8]	; (80116c8 <GetNvmData+0x10>)
}
 80116be:	4618      	mov	r0, r3
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bc80      	pop	{r7}
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	20003534 	.word	0x20003534

080116cc <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d101      	bne.n	80116e2 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116de:	2303      	movs	r3, #3
 80116e0:	e09a      	b.n	8011818 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80116e2:	4b4f      	ldr	r3, [pc, #316]	; (8011820 <RestoreNvmData+0x154>)
 80116e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d001      	beq.n	80116f0 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 80116ec:	2301      	movs	r3, #1
 80116ee:	e093      	b.n	8011818 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2124      	movs	r1, #36	; 0x24
 80116f4:	4618      	mov	r0, r3
 80116f6:	f007 fbf3 	bl	8018ee0 <Crc32>
 80116fa:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011700:	68fa      	ldr	r2, [r7, #12]
 8011702:	429a      	cmp	r2, r3
 8011704:	d105      	bne.n	8011712 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2228      	movs	r2, #40	; 0x28
 801170a:	4619      	mov	r1, r3
 801170c:	4845      	ldr	r0, [pc, #276]	; (8011824 <RestoreNvmData+0x158>)
 801170e:	f007 fb92 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	3328      	adds	r3, #40	; 0x28
 8011716:	2114      	movs	r1, #20
 8011718:	4618      	mov	r0, r3
 801171a:	f007 fbe1 	bl	8018ee0 <Crc32>
 801171e:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	429a      	cmp	r2, r3
 8011728:	d106      	bne.n	8011738 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3328      	adds	r3, #40	; 0x28
 801172e:	2218      	movs	r2, #24
 8011730:	4619      	mov	r1, r3
 8011732:	483d      	ldr	r0, [pc, #244]	; (8011828 <RestoreNvmData+0x15c>)
 8011734:	f007 fb7f 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	3340      	adds	r3, #64	; 0x40
 801173c:	21d4      	movs	r1, #212	; 0xd4
 801173e:	4618      	mov	r0, r3
 8011740:	f007 fbce 	bl	8018ee0 <Crc32>
 8011744:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	429a      	cmp	r2, r3
 8011750:	d11f      	bne.n	8011792 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3340      	adds	r3, #64	; 0x40
 8011756:	22d8      	movs	r2, #216	; 0xd8
 8011758:	4619      	mov	r1, r3
 801175a:	4834      	ldr	r0, [pc, #208]	; (801182c <RestoreNvmData+0x160>)
 801175c:	f007 fb6b 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011760:	4b2f      	ldr	r3, [pc, #188]	; (8011820 <RestoreNvmData+0x154>)
 8011762:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8011766:	4b2e      	ldr	r3, [pc, #184]	; (8011820 <RestoreNvmData+0x154>)
 8011768:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801176c:	4b2d      	ldr	r3, [pc, #180]	; (8011824 <RestoreNvmData+0x158>)
 801176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011770:	4a2b      	ldr	r2, [pc, #172]	; (8011820 <RestoreNvmData+0x154>)
 8011772:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011776:	4b2b      	ldr	r3, [pc, #172]	; (8011824 <RestoreNvmData+0x158>)
 8011778:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801177c:	4b28      	ldr	r3, [pc, #160]	; (8011820 <RestoreNvmData+0x154>)
 801177e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011782:	4b27      	ldr	r3, [pc, #156]	; (8011820 <RestoreNvmData+0x154>)
 8011784:	2201      	movs	r2, #1
 8011786:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801178a:	4b25      	ldr	r3, [pc, #148]	; (8011820 <RestoreNvmData+0x154>)
 801178c:	2202      	movs	r2, #2
 801178e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8011798:	21bc      	movs	r1, #188	; 0xbc
 801179a:	4618      	mov	r0, r3
 801179c:	f007 fba0 	bl	8018ee0 <Crc32>
 80117a0:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80117a8:	68fa      	ldr	r2, [r7, #12]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d107      	bne.n	80117be <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80117b4:	22c0      	movs	r2, #192	; 0xc0
 80117b6:	4619      	mov	r1, r3
 80117b8:	481d      	ldr	r0, [pc, #116]	; (8011830 <RestoreNvmData+0x164>)
 80117ba:	f007 fb3c 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80117c4:	21a0      	movs	r1, #160	; 0xa0
 80117c6:	4618      	mov	r0, r3
 80117c8:	f007 fb8a 	bl	8018ee0 <Crc32>
 80117cc:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d107      	bne.n	80117ea <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80117e0:	22a4      	movs	r2, #164	; 0xa4
 80117e2:	4619      	mov	r1, r3
 80117e4:	4813      	ldr	r0, [pc, #76]	; (8011834 <RestoreNvmData+0x168>)
 80117e6:	f007 fb26 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 80117f0:	2114      	movs	r1, #20
 80117f2:	4618      	mov	r0, r3
 80117f4:	f007 fb74 	bl	8018ee0 <Crc32>
 80117f8:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8011800:	68fa      	ldr	r2, [r7, #12]
 8011802:	429a      	cmp	r2, r3
 8011804:	d107      	bne.n	8011816 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 801180c:	2218      	movs	r2, #24
 801180e:	4619      	mov	r1, r3
 8011810:	4809      	ldr	r0, [pc, #36]	; (8011838 <RestoreNvmData+0x16c>)
 8011812:	f007 fb10 	bl	8018e36 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8011816:	2300      	movs	r3, #0
}
 8011818:	4618      	mov	r0, r3
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	2000302c 	.word	0x2000302c
 8011824:	20003534 	.word	0x20003534
 8011828:	2000355c 	.word	0x2000355c
 801182c:	20003574 	.word	0x20003574
 8011830:	2000364c 	.word	0x2000364c
 8011834:	2000370c 	.word	0x2000370c
 8011838:	20003b2c 	.word	0x20003b2c

0801183c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801183c:	b480      	push	{r7}
 801183e:	b083      	sub	sp, #12
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <DetermineFrameType+0x16>
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d101      	bne.n	8011856 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011852:	2303      	movs	r3, #3
 8011854:	e03b      	b.n	80118ce <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	7b1b      	ldrb	r3, [r3, #12]
 801185a:	f003 030f 	and.w	r3, r3, #15
 801185e:	b2db      	uxtb	r3, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	d008      	beq.n	8011876 <DetermineFrameType+0x3a>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 3020 	ldrb.w	r3, [r3, #32]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d003      	beq.n	8011876 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2200      	movs	r2, #0
 8011872:	701a      	strb	r2, [r3, #0]
 8011874:	e02a      	b.n	80118cc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801187c:	2b00      	cmp	r3, #0
 801187e:	d103      	bne.n	8011888 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	2201      	movs	r2, #1
 8011884:	701a      	strb	r2, [r3, #0]
 8011886:	e021      	b.n	80118cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	7b1b      	ldrb	r3, [r3, #12]
 801188c:	f003 030f 	and.w	r3, r3, #15
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b00      	cmp	r3, #0
 8011894:	d108      	bne.n	80118a8 <DetermineFrameType+0x6c>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d103      	bne.n	80118a8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	2202      	movs	r2, #2
 80118a4:	701a      	strb	r2, [r3, #0]
 80118a6:	e011      	b.n	80118cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	7b1b      	ldrb	r3, [r3, #12]
 80118ac:	f003 030f 	and.w	r3, r3, #15
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d108      	bne.n	80118c8 <DetermineFrameType+0x8c>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d003      	beq.n	80118c8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	2203      	movs	r2, #3
 80118c4:	701a      	strb	r2, [r3, #0]
 80118c6:	e001      	b.n	80118cc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80118c8:	2317      	movs	r3, #23
 80118ca:	e000      	b.n	80118ce <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80118cc:	2300      	movs	r3, #0
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	370c      	adds	r7, #12
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bc80      	pop	{r7}
 80118d6:	4770      	bx	lr

080118d8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80118d8:	b480      	push	{r7}
 80118da:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80118dc:	4b12      	ldr	r3, [pc, #72]	; (8011928 <CheckRetransUnconfirmedUplink+0x50>)
 80118de:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80118e2:	4b12      	ldr	r3, [pc, #72]	; (801192c <CheckRetransUnconfirmedUplink+0x54>)
 80118e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d301      	bcc.n	80118f0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80118ec:	2301      	movs	r3, #1
 80118ee:	e016      	b.n	801191e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80118f0:	4b0d      	ldr	r3, [pc, #52]	; (8011928 <CheckRetransUnconfirmedUplink+0x50>)
 80118f2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80118f6:	f003 0302 	and.w	r3, r3, #2
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00d      	beq.n	801191c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011900:	4b0a      	ldr	r3, [pc, #40]	; (801192c <CheckRetransUnconfirmedUplink+0x54>)
 8011902:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011906:	2b00      	cmp	r3, #0
 8011908:	d101      	bne.n	801190e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801190a:	2301      	movs	r3, #1
 801190c:	e007      	b.n	801191e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801190e:	4b06      	ldr	r3, [pc, #24]	; (8011928 <CheckRetransUnconfirmedUplink+0x50>)
 8011910:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011914:	2b00      	cmp	r3, #0
 8011916:	d101      	bne.n	801191c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8011918:	2301      	movs	r3, #1
 801191a:	e000      	b.n	801191e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	46bd      	mov	sp, r7
 8011922:	bc80      	pop	{r7}
 8011924:	4770      	bx	lr
 8011926:	bf00      	nop
 8011928:	2000302c 	.word	0x2000302c
 801192c:	20003534 	.word	0x20003534

08011930 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011930:	b480      	push	{r7}
 8011932:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011934:	4b0e      	ldr	r3, [pc, #56]	; (8011970 <CheckRetransConfirmedUplink+0x40>)
 8011936:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801193a:	4b0d      	ldr	r3, [pc, #52]	; (8011970 <CheckRetransConfirmedUplink+0x40>)
 801193c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011940:	429a      	cmp	r2, r3
 8011942:	d301      	bcc.n	8011948 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011944:	2301      	movs	r3, #1
 8011946:	e00f      	b.n	8011968 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011948:	4b09      	ldr	r3, [pc, #36]	; (8011970 <CheckRetransConfirmedUplink+0x40>)
 801194a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801194e:	f003 0302 	and.w	r3, r3, #2
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d006      	beq.n	8011966 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011958:	4b05      	ldr	r3, [pc, #20]	; (8011970 <CheckRetransConfirmedUplink+0x40>)
 801195a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d001      	beq.n	8011966 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8011962:	2301      	movs	r3, #1
 8011964:	e000      	b.n	8011968 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8011966:	2300      	movs	r3, #0
}
 8011968:	4618      	mov	r0, r3
 801196a:	46bd      	mov	sp, r7
 801196c:	bc80      	pop	{r7}
 801196e:	4770      	bx	lr
 8011970:	2000302c 	.word	0x2000302c

08011974 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011974:	b480      	push	{r7}
 8011976:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011978:	4b1a      	ldr	r3, [pc, #104]	; (80119e4 <StopRetransmission+0x70>)
 801197a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801197e:	f003 0302 	and.w	r3, r3, #2
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d009      	beq.n	801199c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011988:	4b16      	ldr	r3, [pc, #88]	; (80119e4 <StopRetransmission+0x70>)
 801198a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00e      	beq.n	80119b0 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011992:	4b14      	ldr	r3, [pc, #80]	; (80119e4 <StopRetransmission+0x70>)
 8011994:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011998:	2b01      	cmp	r3, #1
 801199a:	d009      	beq.n	80119b0 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <StopRetransmission+0x74>)
 801199e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80119a6:	4b10      	ldr	r3, [pc, #64]	; (80119e8 <StopRetransmission+0x74>)
 80119a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119aa:	3301      	adds	r3, #1
 80119ac:	4a0e      	ldr	r2, [pc, #56]	; (80119e8 <StopRetransmission+0x74>)
 80119ae:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80119b0:	4b0c      	ldr	r3, [pc, #48]	; (80119e4 <StopRetransmission+0x70>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80119b8:	4b0a      	ldr	r3, [pc, #40]	; (80119e4 <StopRetransmission+0x70>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80119c0:	4b08      	ldr	r3, [pc, #32]	; (80119e4 <StopRetransmission+0x70>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80119c8:	4b06      	ldr	r3, [pc, #24]	; (80119e4 <StopRetransmission+0x70>)
 80119ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119ce:	f023 0302 	bic.w	r3, r3, #2
 80119d2:	4a04      	ldr	r2, [pc, #16]	; (80119e4 <StopRetransmission+0x70>)
 80119d4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80119d8:	2301      	movs	r3, #1
}
 80119da:	4618      	mov	r0, r3
 80119dc:	46bd      	mov	sp, r7
 80119de:	bc80      	pop	{r7}
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	2000302c 	.word	0x2000302c
 80119e8:	20003534 	.word	0x20003534

080119ec <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	4603      	mov	r3, r0
 80119f4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80119f6:	4b0b      	ldr	r3, [pc, #44]	; (8011a24 <CallNvmDataChangeCallback+0x38>)
 80119f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00c      	beq.n	8011a1a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011a00:	4b08      	ldr	r3, [pc, #32]	; (8011a24 <CallNvmDataChangeCallback+0x38>)
 8011a02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a06:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d006      	beq.n	8011a1a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011a0c:	4b05      	ldr	r3, [pc, #20]	; (8011a24 <CallNvmDataChangeCallback+0x38>)
 8011a0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	88fa      	ldrh	r2, [r7, #6]
 8011a16:	4610      	mov	r0, r2
 8011a18:	4798      	blx	r3
    }
}
 8011a1a:	bf00      	nop
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	2000302c 	.word	0x2000302c

08011a28 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011a2e:	4b1b      	ldr	r3, [pc, #108]	; (8011a9c <AckTimeoutRetriesProcess+0x74>)
 8011a30:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011a34:	4b19      	ldr	r3, [pc, #100]	; (8011a9c <AckTimeoutRetriesProcess+0x74>)
 8011a36:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d229      	bcs.n	8011a92 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011a3e:	4b17      	ldr	r3, [pc, #92]	; (8011a9c <AckTimeoutRetriesProcess+0x74>)
 8011a40:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011a44:	3301      	adds	r3, #1
 8011a46:	b2da      	uxtb	r2, r3
 8011a48:	4b14      	ldr	r3, [pc, #80]	; (8011a9c <AckTimeoutRetriesProcess+0x74>)
 8011a4a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011a4e:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <AckTimeoutRetriesProcess+0x74>)
 8011a50:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8011a54:	f003 0301 	and.w	r3, r3, #1
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d019      	beq.n	8011a92 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011a5e:	2322      	movs	r3, #34	; 0x22
 8011a60:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a62:	4b0f      	ldr	r3, [pc, #60]	; (8011aa0 <AckTimeoutRetriesProcess+0x78>)
 8011a64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011a68:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a6a:	4b0d      	ldr	r3, [pc, #52]	; (8011aa0 <AckTimeoutRetriesProcess+0x78>)
 8011a6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011a70:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a72:	4b0b      	ldr	r3, [pc, #44]	; (8011aa0 <AckTimeoutRetriesProcess+0x78>)
 8011a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a78:	f107 0208 	add.w	r2, r7, #8
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f003 fb19 	bl	80150b6 <RegionGetPhyParam>
 8011a84:	4603      	mov	r3, r0
 8011a86:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	b25a      	sxtb	r2, r3
 8011a8c:	4b04      	ldr	r3, [pc, #16]	; (8011aa0 <AckTimeoutRetriesProcess+0x78>)
 8011a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	2000302c 	.word	0x2000302c
 8011aa0:	20003534 	.word	0x20003534

08011aa4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011aaa:	4b14      	ldr	r3, [pc, #80]	; (8011afc <AckTimeoutRetriesFinalize+0x58>)
 8011aac:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011ab0:	f083 0301 	eor.w	r3, r3, #1
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d015      	beq.n	8011ae6 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011aba:	2302      	movs	r3, #2
 8011abc:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8011abe:	4b10      	ldr	r3, [pc, #64]	; (8011b00 <AckTimeoutRetriesFinalize+0x5c>)
 8011ac0:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8011ac2:	4b10      	ldr	r3, [pc, #64]	; (8011b04 <AckTimeoutRetriesFinalize+0x60>)
 8011ac4:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011ac6:	4b10      	ldr	r3, [pc, #64]	; (8011b08 <AckTimeoutRetriesFinalize+0x64>)
 8011ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011acc:	1d3a      	adds	r2, r7, #4
 8011ace:	4611      	mov	r1, r2
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f003 fb28 	bl	8015126 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011ad6:	4b09      	ldr	r3, [pc, #36]	; (8011afc <AckTimeoutRetriesFinalize+0x58>)
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8011ade:	4b07      	ldr	r3, [pc, #28]	; (8011afc <AckTimeoutRetriesFinalize+0x58>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011ae6:	4b05      	ldr	r3, [pc, #20]	; (8011afc <AckTimeoutRetriesFinalize+0x58>)
 8011ae8:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8011aec:	4b03      	ldr	r3, [pc, #12]	; (8011afc <AckTimeoutRetriesFinalize+0x58>)
 8011aee:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8011af2:	bf00      	nop
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	2000302c 	.word	0x2000302c
 8011b00:	2000370c 	.word	0x2000370c
 8011b04:	200037b0 	.word	0x200037b0
 8011b08:	20003534 	.word	0x20003534

08011b0c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b10:	4b0b      	ldr	r3, [pc, #44]	; (8011b40 <IsRequestPending+0x34>)
 8011b12:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d107      	bne.n	8011b30 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011b20:	4b07      	ldr	r3, [pc, #28]	; (8011b40 <IsRequestPending+0x34>)
 8011b22:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b26:	f003 0301 	and.w	r3, r3, #1
 8011b2a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d001      	beq.n	8011b34 <IsRequestPending+0x28>
    {
        return 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e000      	b.n	8011b36 <IsRequestPending+0x2a>
    }
    return 0;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bc80      	pop	{r7}
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop
 8011b40:	2000302c 	.word	0x2000302c

08011b44 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b08f      	sub	sp, #60	; 0x3c
 8011b48:	af02      	add	r7, sp, #8
 8011b4a:	6178      	str	r0, [r7, #20]
 8011b4c:	6139      	str	r1, [r7, #16]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d002      	beq.n	8011b5e <LoRaMacInitialization+0x1a>
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d101      	bne.n	8011b62 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e275      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00b      	beq.n	8011b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d007      	beq.n	8011b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d003      	beq.n	8011b82 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d101      	bne.n	8011b86 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b82:	2303      	movs	r3, #3
 8011b84:	e263      	b.n	801204e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011b86:	7bfb      	ldrb	r3, [r7, #15]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f003 fa7f 	bl	801508c <RegionIsActive>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	f083 0301 	eor.w	r3, r3, #1
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011b9a:	2309      	movs	r3, #9
 8011b9c:	e257      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011b9e:	6978      	ldr	r0, [r7, #20]
 8011ba0:	f001 fef6 	bl	8013990 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011ba4:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8011ba8:	2100      	movs	r1, #0
 8011baa:	48c7      	ldr	r0, [pc, #796]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011bac:	f007 f97e 	bl	8018eac <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011bb0:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8011bb4:	2100      	movs	r1, #0
 8011bb6:	48c5      	ldr	r0, [pc, #788]	; (8011ecc <LoRaMacInitialization+0x388>)
 8011bb8:	f007 f978 	bl	8018eac <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011bbc:	4bc3      	ldr	r3, [pc, #780]	; (8011ecc <LoRaMacInitialization+0x388>)
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8011bc4:	4bc1      	ldr	r3, [pc, #772]	; (8011ecc <LoRaMacInitialization+0x388>)
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8011bcc:	4abe      	ldr	r2, [pc, #760]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011bce:	7bfb      	ldrb	r3, [r7, #15]
 8011bd0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011bd4:	4bbc      	ldr	r3, [pc, #752]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011bdc:	4bba      	ldr	r3, [pc, #744]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011bde:	2200      	movs	r2, #0
 8011be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011be4:	4bb8      	ldr	r3, [pc, #736]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011be6:	4aba      	ldr	r2, [pc, #744]	; (8011ed0 <LoRaMacInitialization+0x38c>)
 8011be8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011bec:	230f      	movs	r3, #15
 8011bee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bf2:	4bb5      	ldr	r3, [pc, #724]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f003 fa59 	bl	80150b6 <RegionGetPhyParam>
 8011c04:	4603      	mov	r3, r0
 8011c06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	bf14      	ite	ne
 8011c0e:	2301      	movne	r3, #1
 8011c10:	2300      	moveq	r3, #0
 8011c12:	b2da      	uxtb	r2, r3
 8011c14:	4bac      	ldr	r3, [pc, #688]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c16:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011c1a:	230a      	movs	r3, #10
 8011c1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c20:	4ba9      	ldr	r3, [pc, #676]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f003 fa42 	bl	80150b6 <RegionGetPhyParam>
 8011c32:	4603      	mov	r3, r0
 8011c34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c38:	b25a      	sxtb	r2, r3
 8011c3a:	4ba3      	ldr	r3, [pc, #652]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c3c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011c40:	2306      	movs	r3, #6
 8011c42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c46:	4ba0      	ldr	r3, [pc, #640]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c50:	4611      	mov	r1, r2
 8011c52:	4618      	mov	r0, r3
 8011c54:	f003 fa2f 	bl	80150b6 <RegionGetPhyParam>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5e:	b25a      	sxtb	r2, r3
 8011c60:	4b99      	ldr	r3, [pc, #612]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c62:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011c66:	2310      	movs	r3, #16
 8011c68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c6c:	4b96      	ldr	r3, [pc, #600]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c76:	4611      	mov	r1, r2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f003 fa1c 	bl	80150b6 <RegionGetPhyParam>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c84:	4a90      	ldr	r2, [pc, #576]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011c8a:	2311      	movs	r3, #17
 8011c8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c90:	4b8d      	ldr	r3, [pc, #564]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f003 fa0a 	bl	80150b6 <RegionGetPhyParam>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	4a87      	ldr	r2, [pc, #540]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011cae:	2312      	movs	r3, #18
 8011cb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cb4:	4b84      	ldr	r3, [pc, #528]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f003 f9f8 	bl	80150b6 <RegionGetPhyParam>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	4a7e      	ldr	r2, [pc, #504]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011cd2:	2313      	movs	r3, #19
 8011cd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cd8:	4b7b      	ldr	r3, [pc, #492]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ce2:	4611      	mov	r1, r2
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f003 f9e6 	bl	80150b6 <RegionGetPhyParam>
 8011cea:	4603      	mov	r3, r0
 8011cec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	4a75      	ldr	r2, [pc, #468]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011cf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011cf6:	2314      	movs	r3, #20
 8011cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cfc:	4b72      	ldr	r3, [pc, #456]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d06:	4611      	mov	r1, r2
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f003 f9d4 	bl	80150b6 <RegionGetPhyParam>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	4a6c      	ldr	r2, [pc, #432]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011d1a:	2317      	movs	r3, #23
 8011d1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d20:	4b69      	ldr	r3, [pc, #420]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f003 f9c2 	bl	80150b6 <RegionGetPhyParam>
 8011d32:	4603      	mov	r3, r0
 8011d34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	4b63      	ldr	r3, [pc, #396]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011d40:	2318      	movs	r3, #24
 8011d42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d46:	4b60      	ldr	r3, [pc, #384]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d50:	4611      	mov	r1, r2
 8011d52:	4618      	mov	r0, r3
 8011d54:	f003 f9af 	bl	80150b6 <RegionGetPhyParam>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	4a5a      	ldr	r2, [pc, #360]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d60:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	4a58      	ldr	r2, [pc, #352]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d68:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011d6c:	2319      	movs	r3, #25
 8011d6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d72:	4b55      	ldr	r3, [pc, #340]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d7c:	4611      	mov	r1, r2
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f003 f999 	bl	80150b6 <RegionGetPhyParam>
 8011d84:	4603      	mov	r3, r0
 8011d86:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	4b4e      	ldr	r3, [pc, #312]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d8e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d94:	b2da      	uxtb	r2, r3
 8011d96:	4b4c      	ldr	r3, [pc, #304]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011d98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011d9c:	231e      	movs	r3, #30
 8011d9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011da2:	4b49      	ldr	r3, [pc, #292]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011da8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dac:	4611      	mov	r1, r2
 8011dae:	4618      	mov	r0, r3
 8011db0:	f003 f981 	bl	80150b6 <RegionGetPhyParam>
 8011db4:	4603      	mov	r3, r0
 8011db6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	b2da      	uxtb	r2, r3
 8011dbc:	4b42      	ldr	r3, [pc, #264]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011dbe:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011dc2:	231f      	movs	r3, #31
 8011dc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dc8:	4b3f      	ldr	r3, [pc, #252]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f003 f96e 	bl	80150b6 <RegionGetPhyParam>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	b2da      	uxtb	r2, r3
 8011de2:	4b39      	ldr	r3, [pc, #228]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011de4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011de8:	2320      	movs	r3, #32
 8011dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dee:	4b36      	ldr	r3, [pc, #216]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011df4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011df8:	4611      	mov	r1, r2
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f003 f95b 	bl	80150b6 <RegionGetPhyParam>
 8011e00:	4603      	mov	r3, r0
 8011e02:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e06:	4a30      	ldr	r2, [pc, #192]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e08:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011e0c:	2321      	movs	r3, #33	; 0x21
 8011e0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e12:	4b2d      	ldr	r3, [pc, #180]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f003 f949 	bl	80150b6 <RegionGetPhyParam>
 8011e24:	4603      	mov	r3, r0
 8011e26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	4a27      	ldr	r2, [pc, #156]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e2c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011e30:	230b      	movs	r3, #11
 8011e32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e36:	4b24      	ldr	r3, [pc, #144]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e40:	4611      	mov	r1, r2
 8011e42:	4618      	mov	r0, r3
 8011e44:	f003 f937 	bl	80150b6 <RegionGetPhyParam>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	4b1e      	ldr	r3, [pc, #120]	; (8011ecc <LoRaMacInitialization+0x388>)
 8011e52:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011e56:	230c      	movs	r3, #12
 8011e58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e5c:	4b1a      	ldr	r3, [pc, #104]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011e66:	4611      	mov	r1, r2
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f003 f924 	bl	80150b6 <RegionGetPhyParam>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8011e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	4b15      	ldr	r3, [pc, #84]	; (8011ecc <LoRaMacInitialization+0x388>)
 8011e78:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011e7c:	4b12      	ldr	r3, [pc, #72]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e7e:	2201      	movs	r2, #1
 8011e80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011e84:	4b10      	ldr	r3, [pc, #64]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e86:	220a      	movs	r2, #10
 8011e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011e8c:	4b0e      	ldr	r3, [pc, #56]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e8e:	2206      	movs	r2, #6
 8011e90:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011e94:	4b0c      	ldr	r3, [pc, #48]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e9a:	4a0b      	ldr	r2, [pc, #44]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011e9c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011e9e:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011ea0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011ea4:	4b08      	ldr	r3, [pc, #32]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011ea6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011eaa:	4b07      	ldr	r3, [pc, #28]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011eb0:	4a05      	ldr	r2, [pc, #20]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011eb4:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eba:	4a03      	ldr	r2, [pc, #12]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011ebc:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011ebe:	4b02      	ldr	r3, [pc, #8]	; (8011ec8 <LoRaMacInitialization+0x384>)
 8011ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ec4:	e006      	b.n	8011ed4 <LoRaMacInitialization+0x390>
 8011ec6:	bf00      	nop
 8011ec8:	20003534 	.word	0x20003534
 8011ecc:	2000302c 	.word	0x2000302c
 8011ed0:	01000300 	.word	0x01000300
 8011ed4:	4a60      	ldr	r2, [pc, #384]	; (8012058 <LoRaMacInitialization+0x514>)
 8011ed6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011ed8:	4b5f      	ldr	r3, [pc, #380]	; (8012058 <LoRaMacInitialization+0x514>)
 8011eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011ede:	4a5e      	ldr	r2, [pc, #376]	; (8012058 <LoRaMacInitialization+0x514>)
 8011ee0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011ee2:	4b5d      	ldr	r3, [pc, #372]	; (8012058 <LoRaMacInitialization+0x514>)
 8011ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011ee8:	4a5b      	ldr	r2, [pc, #364]	; (8012058 <LoRaMacInitialization+0x514>)
 8011eea:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011eec:	4b5a      	ldr	r3, [pc, #360]	; (8012058 <LoRaMacInitialization+0x514>)
 8011eee:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8011ef2:	4b59      	ldr	r3, [pc, #356]	; (8012058 <LoRaMacInitialization+0x514>)
 8011ef4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011efe:	4b57      	ldr	r3, [pc, #348]	; (801205c <LoRaMacInitialization+0x518>)
 8011f00:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011f02:	4b57      	ldr	r3, [pc, #348]	; (8012060 <LoRaMacInitialization+0x51c>)
 8011f04:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011f06:	4b54      	ldr	r3, [pc, #336]	; (8012058 <LoRaMacInitialization+0x514>)
 8011f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f0c:	f107 0218 	add.w	r2, r7, #24
 8011f10:	4611      	mov	r1, r2
 8011f12:	4618      	mov	r0, r3
 8011f14:	f003 f907 	bl	8015126 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8011f18:	4a52      	ldr	r2, [pc, #328]	; (8012064 <LoRaMacInitialization+0x520>)
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8011f20:	f7ff f85a 	bl	8010fd8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011f24:	4b4c      	ldr	r3, [pc, #304]	; (8012058 <LoRaMacInitialization+0x514>)
 8011f26:	2201      	movs	r2, #1
 8011f28:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8011f2c:	4a4d      	ldr	r2, [pc, #308]	; (8012064 <LoRaMacInitialization+0x520>)
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011f34:	4b4b      	ldr	r3, [pc, #300]	; (8012064 <LoRaMacInitialization+0x520>)
 8011f36:	2200      	movs	r2, #0
 8011f38:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8011f3c:	4b49      	ldr	r3, [pc, #292]	; (8012064 <LoRaMacInitialization+0x520>)
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011f44:	4b44      	ldr	r3, [pc, #272]	; (8012058 <LoRaMacInitialization+0x514>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011f4a:	4b43      	ldr	r3, [pc, #268]	; (8012058 <LoRaMacInitialization+0x514>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011f50:	2300      	movs	r3, #0
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	4b44      	ldr	r3, [pc, #272]	; (8012068 <LoRaMacInitialization+0x524>)
 8011f56:	2200      	movs	r2, #0
 8011f58:	f04f 31ff 	mov.w	r1, #4294967295
 8011f5c:	4843      	ldr	r0, [pc, #268]	; (801206c <LoRaMacInitialization+0x528>)
 8011f5e:	f00a fef9 	bl	801cd54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011f62:	2300      	movs	r3, #0
 8011f64:	9300      	str	r3, [sp, #0]
 8011f66:	4b42      	ldr	r3, [pc, #264]	; (8012070 <LoRaMacInitialization+0x52c>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8011f6e:	4841      	ldr	r0, [pc, #260]	; (8012074 <LoRaMacInitialization+0x530>)
 8011f70:	f00a fef0 	bl	801cd54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011f74:	2300      	movs	r3, #0
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	4b3f      	ldr	r3, [pc, #252]	; (8012078 <LoRaMacInitialization+0x534>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8011f80:	483e      	ldr	r0, [pc, #248]	; (801207c <LoRaMacInitialization+0x538>)
 8011f82:	f00a fee7 	bl	801cd54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011f86:	2300      	movs	r3, #0
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	4b3d      	ldr	r3, [pc, #244]	; (8012080 <LoRaMacInitialization+0x53c>)
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8011f92:	483c      	ldr	r0, [pc, #240]	; (8012084 <LoRaMacInitialization+0x540>)
 8011f94:	f00a fede 	bl	801cd54 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011f98:	4c2f      	ldr	r4, [pc, #188]	; (8012058 <LoRaMacInitialization+0x514>)
 8011f9a:	463b      	mov	r3, r7
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f00a fe43 	bl	801cc28 <SysTimeGetMcuTime>
 8011fa2:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8011fa6:	463a      	mov	r2, r7
 8011fa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fac:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011fb0:	4b2c      	ldr	r3, [pc, #176]	; (8012064 <LoRaMacInitialization+0x520>)
 8011fb2:	4a35      	ldr	r2, [pc, #212]	; (8012088 <LoRaMacInitialization+0x544>)
 8011fb4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011fb8:	4b2a      	ldr	r3, [pc, #168]	; (8012064 <LoRaMacInitialization+0x520>)
 8011fba:	4a34      	ldr	r2, [pc, #208]	; (801208c <LoRaMacInitialization+0x548>)
 8011fbc:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011fc0:	4b28      	ldr	r3, [pc, #160]	; (8012064 <LoRaMacInitialization+0x520>)
 8011fc2:	4a33      	ldr	r2, [pc, #204]	; (8012090 <LoRaMacInitialization+0x54c>)
 8011fc4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011fc8:	4b26      	ldr	r3, [pc, #152]	; (8012064 <LoRaMacInitialization+0x520>)
 8011fca:	4a32      	ldr	r2, [pc, #200]	; (8012094 <LoRaMacInitialization+0x550>)
 8011fcc:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011fd0:	4b24      	ldr	r3, [pc, #144]	; (8012064 <LoRaMacInitialization+0x520>)
 8011fd2:	4a31      	ldr	r2, [pc, #196]	; (8012098 <LoRaMacInitialization+0x554>)
 8011fd4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011fd8:	4b30      	ldr	r3, [pc, #192]	; (801209c <LoRaMacInitialization+0x558>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4830      	ldr	r0, [pc, #192]	; (80120a0 <LoRaMacInitialization+0x55c>)
 8011fde:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	482f      	ldr	r0, [pc, #188]	; (80120a4 <LoRaMacInitialization+0x560>)
 8011fe8:	f7fa ff3a 	bl	800ce60 <SecureElementInit>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d001      	beq.n	8011ff6 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ff2:	2311      	movs	r3, #17
 8011ff4:	e02b      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011ff6:	4818      	ldr	r0, [pc, #96]	; (8012058 <LoRaMacInitialization+0x514>)
 8011ff8:	f002 f976 	bl	80142e8 <LoRaMacCryptoInit>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d001      	beq.n	8012006 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012002:	2311      	movs	r3, #17
 8012004:	e023      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012006:	f001 fa95 	bl	8013534 <LoRaMacCommandsInit>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012010:	2313      	movs	r3, #19
 8012012:	e01c      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012014:	4824      	ldr	r0, [pc, #144]	; (80120a8 <LoRaMacInitialization+0x564>)
 8012016:	f002 fa31 	bl	801447c <LoRaMacCryptoSetMulticastReference>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d001      	beq.n	8012024 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012020:	2311      	movs	r3, #17
 8012022:	e014      	b.n	801204e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012024:	4b1d      	ldr	r3, [pc, #116]	; (801209c <LoRaMacInitialization+0x558>)
 8012026:	695b      	ldr	r3, [r3, #20]
 8012028:	4798      	blx	r3
 801202a:	4603      	mov	r3, r0
 801202c:	4618      	mov	r0, r3
 801202e:	f006 fedd 	bl	8018dec <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012032:	4b1a      	ldr	r3, [pc, #104]	; (801209c <LoRaMacInitialization+0x558>)
 8012034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012036:	4a08      	ldr	r2, [pc, #32]	; (8012058 <LoRaMacInitialization+0x514>)
 8012038:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801203c:	4610      	mov	r0, r2
 801203e:	4798      	blx	r3
    Radio.Sleep( );
 8012040:	4b16      	ldr	r3, [pc, #88]	; (801209c <LoRaMacInitialization+0x558>)
 8012042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012044:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012046:	2001      	movs	r0, #1
 8012048:	f7fd faaa 	bl	800f5a0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3734      	adds	r7, #52	; 0x34
 8012052:	46bd      	mov	sp, r7
 8012054:	bd90      	pop	{r4, r7, pc}
 8012056:	bf00      	nop
 8012058:	20003534 	.word	0x20003534
 801205c:	2000370c 	.word	0x2000370c
 8012060:	200037b0 	.word	0x200037b0
 8012064:	2000302c 	.word	0x2000302c
 8012068:	0800fb29 	.word	0x0800fb29
 801206c:	20003394 	.word	0x20003394
 8012070:	0800fb9d 	.word	0x0800fb9d
 8012074:	200033ac 	.word	0x200033ac
 8012078:	0800fc09 	.word	0x0800fc09
 801207c:	200033c4 	.word	0x200033c4
 8012080:	0800fc7d 	.word	0x0800fc7d
 8012084:	20003424 	.word	0x20003424
 8012088:	0800e72d 	.word	0x0800e72d
 801208c:	0800e7a5 	.word	0x0800e7a5
 8012090:	0800e87d 	.word	0x0800e87d
 8012094:	0800e831 	.word	0x0800e831
 8012098:	0800e8b9 	.word	0x0800e8b9
 801209c:	0801e648 	.word	0x0801e648
 80120a0:	20003378 	.word	0x20003378
 80120a4:	2000364c 	.word	0x2000364c
 80120a8:	20003604 	.word	0x20003604

080120ac <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80120ac:	b480      	push	{r7}
 80120ae:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80120b0:	4b04      	ldr	r3, [pc, #16]	; (80120c4 <LoRaMacStart+0x18>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	46bd      	mov	sp, r7
 80120be:	bc80      	pop	{r7}
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	2000302c 	.word	0x2000302c

080120c8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b08a      	sub	sp, #40	; 0x28
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	4603      	mov	r3, r0
 80120d0:	6039      	str	r1, [r7, #0]
 80120d2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80120d4:	4b3e      	ldr	r3, [pc, #248]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 80120d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120d8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80120da:	4b3d      	ldr	r3, [pc, #244]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 80120dc:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80120e0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80120e2:	4b3b      	ldr	r3, [pc, #236]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 80120e4:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80120e8:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 80120ea:	2300      	movs	r3, #0
 80120ec:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d101      	bne.n	80120f8 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120f4:	2303      	movs	r3, #3
 80120f6:	e066      	b.n	80121c6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 80120f8:	4b35      	ldr	r3, [pc, #212]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 80120fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80120fe:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8012100:	2300      	movs	r3, #0
 8012102:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012104:	4b32      	ldr	r3, [pc, #200]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 8012106:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801210a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801210c:	4b30      	ldr	r3, [pc, #192]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 801210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012110:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012112:	4b30      	ldr	r3, [pc, #192]	; (80121d4 <LoRaMacQueryTxPossible+0x10c>)
 8012114:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8012118:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801211a:	4b2e      	ldr	r3, [pc, #184]	; (80121d4 <LoRaMacQueryTxPossible+0x10c>)
 801211c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8012120:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012122:	4b2b      	ldr	r3, [pc, #172]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 8012124:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012128:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801212c:	4b28      	ldr	r3, [pc, #160]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 801212e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012136:	4b26      	ldr	r3, [pc, #152]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 8012138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801213c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012140:	4b23      	ldr	r3, [pc, #140]	; (80121d0 <LoRaMacQueryTxPossible+0x108>)
 8012142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801214a:	f107 0310 	add.w	r3, r7, #16
 801214e:	f107 020e 	add.w	r2, r7, #14
 8012152:	f107 010f 	add.w	r1, r7, #15
 8012156:	f107 0014 	add.w	r0, r7, #20
 801215a:	f000 ffe1 	bl	8013120 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012162:	4618      	mov	r0, r3
 8012164:	f7fd fed2 	bl	800ff0c <GetMaxAppPayloadWithoutFOptsLength>
 8012168:	4603      	mov	r3, r0
 801216a:	461a      	mov	r2, r3
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012170:	f107 0308 	add.w	r3, r7, #8
 8012174:	4618      	mov	r0, r3
 8012176:	f001 faab 	bl	80136d0 <LoRaMacCommandsGetSizeSerializedCmds>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012180:	2313      	movs	r3, #19
 8012182:	e020      	b.n	80121c6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	2b0f      	cmp	r3, #15
 8012188:	d819      	bhi.n	80121be <LoRaMacQueryTxPossible+0xf6>
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	785b      	ldrb	r3, [r3, #1]
 801218e:	461a      	mov	r2, r3
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	429a      	cmp	r2, r3
 8012194:	d313      	bcc.n	80121be <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	785a      	ldrb	r2, [r3, #1]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	b2db      	uxtb	r3, r3
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	785b      	ldrb	r3, [r3, #1]
 80121aa:	4619      	mov	r1, r3
 80121ac:	79fa      	ldrb	r2, [r7, #7]
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	4413      	add	r3, r2
 80121b2:	4299      	cmp	r1, r3
 80121b4:	d301      	bcc.n	80121ba <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e005      	b.n	80121c6 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80121ba:	2308      	movs	r3, #8
 80121bc:	e003      	b.n	80121c6 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2200      	movs	r2, #0
 80121c2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80121c4:	2308      	movs	r3, #8
    }
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3728      	adds	r7, #40	; 0x28
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	20003534 	.word	0x20003534
 80121d4:	2000302c 	.word	0x2000302c

080121d8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	b087      	sub	sp, #28
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80121e0:	2300      	movs	r3, #0
 80121e2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d101      	bne.n	80121ee <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121ea:	2303      	movs	r3, #3
 80121ec:	e14b      	b.n	8012486 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	2b28      	cmp	r3, #40	; 0x28
 80121f4:	f200 8140 	bhi.w	8012478 <LoRaMacMibGetRequestConfirm+0x2a0>
 80121f8:	a201      	add	r2, pc, #4	; (adr r2, 8012200 <LoRaMacMibGetRequestConfirm+0x28>)
 80121fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fe:	bf00      	nop
 8012200:	080122a5 	.word	0x080122a5
 8012204:	080122b1 	.word	0x080122b1
 8012208:	080122bd 	.word	0x080122bd
 801220c:	080122c9 	.word	0x080122c9
 8012210:	080122d5 	.word	0x080122d5
 8012214:	080122e1 	.word	0x080122e1
 8012218:	080122ed 	.word	0x080122ed
 801221c:	08012479 	.word	0x08012479
 8012220:	08012479 	.word	0x08012479
 8012224:	08012479 	.word	0x08012479
 8012228:	08012479 	.word	0x08012479
 801222c:	08012479 	.word	0x08012479
 8012230:	08012479 	.word	0x08012479
 8012234:	08012479 	.word	0x08012479
 8012238:	08012479 	.word	0x08012479
 801223c:	080122f9 	.word	0x080122f9
 8012240:	08012305 	.word	0x08012305
 8012244:	08012311 	.word	0x08012311
 8012248:	08012333 	.word	0x08012333
 801224c:	08012345 	.word	0x08012345
 8012250:	08012357 	.word	0x08012357
 8012254:	08012369 	.word	0x08012369
 8012258:	0801239d 	.word	0x0801239d
 801225c:	0801237b 	.word	0x0801237b
 8012260:	080123bf 	.word	0x080123bf
 8012264:	080123cb 	.word	0x080123cb
 8012268:	080123d5 	.word	0x080123d5
 801226c:	080123df 	.word	0x080123df
 8012270:	080123e9 	.word	0x080123e9
 8012274:	080123f3 	.word	0x080123f3
 8012278:	080123fd 	.word	0x080123fd
 801227c:	08012409 	.word	0x08012409
 8012280:	08012421 	.word	0x08012421
 8012284:	08012415 	.word	0x08012415
 8012288:	0801242d 	.word	0x0801242d
 801228c:	08012437 	.word	0x08012437
 8012290:	08012443 	.word	0x08012443
 8012294:	08012459 	.word	0x08012459
 8012298:	0801244d 	.word	0x0801244d
 801229c:	08012479 	.word	0x08012479
 80122a0:	08012465 	.word	0x08012465
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80122a4:	4b7a      	ldr	r3, [pc, #488]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122a6:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	711a      	strb	r2, [r3, #4]
            break;
 80122ae:	e0e9      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122b0:	4b77      	ldr	r3, [pc, #476]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122b2:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	711a      	strb	r2, [r3, #4]
            break;
 80122ba:	e0e3      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80122bc:	f7fb f88e 	bl	800d3dc <SecureElementGetDevEui>
 80122c0:	4602      	mov	r2, r0
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	605a      	str	r2, [r3, #4]
            break;
 80122c6:	e0dd      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80122c8:	f7fb f8aa 	bl	800d420 <SecureElementGetJoinEui>
 80122cc:	4602      	mov	r2, r0
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	605a      	str	r2, [r3, #4]
            break;
 80122d2:	e0d7      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80122d4:	4b6e      	ldr	r3, [pc, #440]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122d6:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	711a      	strb	r2, [r3, #4]
            break;
 80122de:	e0d1      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80122e0:	4b6b      	ldr	r3, [pc, #428]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	605a      	str	r2, [r3, #4]
            break;
 80122ea:	e0cb      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80122ec:	4b68      	ldr	r3, [pc, #416]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122ee:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	605a      	str	r2, [r3, #4]
            break;
 80122f6:	e0c5      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80122f8:	4b65      	ldr	r3, [pc, #404]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80122fa:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	711a      	strb	r2, [r3, #4]
            break;
 8012302:	e0bf      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012304:	4b62      	ldr	r3, [pc, #392]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012306:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	711a      	strb	r2, [r3, #4]
            break;
 801230e:	e0b9      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012310:	231d      	movs	r3, #29
 8012312:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012314:	4b5e      	ldr	r3, [pc, #376]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801231a:	f107 0210 	add.w	r2, r7, #16
 801231e:	4611      	mov	r1, r2
 8012320:	4618      	mov	r0, r3
 8012322:	f002 fec8 	bl	80150b6 <RegionGetPhyParam>
 8012326:	4603      	mov	r3, r0
 8012328:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	605a      	str	r2, [r3, #4]
            break;
 8012330:	e0a8      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4a56      	ldr	r2, [pc, #344]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012336:	3304      	adds	r3, #4
 8012338:	3264      	adds	r2, #100	; 0x64
 801233a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801233e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012342:	e09f      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a52      	ldr	r2, [pc, #328]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012348:	3304      	adds	r3, #4
 801234a:	32a4      	adds	r2, #164	; 0xa4
 801234c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012350:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012354:	e096      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4a4d      	ldr	r2, [pc, #308]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801235a:	3304      	adds	r3, #4
 801235c:	326c      	adds	r2, #108	; 0x6c
 801235e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012362:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012366:	e08d      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	4a49      	ldr	r2, [pc, #292]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801236c:	3304      	adds	r3, #4
 801236e:	32ac      	adds	r2, #172	; 0xac
 8012370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012374:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012378:	e084      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801237a:	231b      	movs	r3, #27
 801237c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801237e:	4b44      	ldr	r3, [pc, #272]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012384:	f107 0210 	add.w	r2, r7, #16
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f002 fe93 	bl	80150b6 <RegionGetPhyParam>
 8012390:	4603      	mov	r3, r0
 8012392:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	605a      	str	r2, [r3, #4]
            break;
 801239a:	e073      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801239c:	231a      	movs	r3, #26
 801239e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123a0:	4b3b      	ldr	r3, [pc, #236]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80123a6:	f107 0210 	add.w	r2, r7, #16
 80123aa:	4611      	mov	r1, r2
 80123ac:	4618      	mov	r0, r3
 80123ae:	f002 fe82 	bl	80150b6 <RegionGetPhyParam>
 80123b2:	4603      	mov	r3, r0
 80123b4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	605a      	str	r2, [r3, #4]
            break;
 80123bc:	e062      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80123be:	4b34      	ldr	r3, [pc, #208]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123c0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	711a      	strb	r2, [r3, #4]
            break;
 80123c8:	e05c      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80123ca:	4b31      	ldr	r3, [pc, #196]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	605a      	str	r2, [r3, #4]
            break;
 80123d2:	e057      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80123d4:	4b2e      	ldr	r3, [pc, #184]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	605a      	str	r2, [r3, #4]
            break;
 80123dc:	e052      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80123de:	4b2c      	ldr	r3, [pc, #176]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	605a      	str	r2, [r3, #4]
            break;
 80123e6:	e04d      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80123e8:	4b29      	ldr	r3, [pc, #164]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	605a      	str	r2, [r3, #4]
            break;
 80123f0:	e048      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80123f2:	4b27      	ldr	r3, [pc, #156]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	605a      	str	r2, [r3, #4]
            break;
 80123fa:	e043      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80123fc:	4b24      	ldr	r3, [pc, #144]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80123fe:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	711a      	strb	r2, [r3, #4]
            break;
 8012406:	e03d      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012408:	4b21      	ldr	r3, [pc, #132]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801240a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	711a      	strb	r2, [r3, #4]
            break;
 8012412:	e037      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012414:	4b1e      	ldr	r3, [pc, #120]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012416:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	711a      	strb	r2, [r3, #4]
            break;
 801241e:	e031      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012420:	4b1b      	ldr	r3, [pc, #108]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012422:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	711a      	strb	r2, [r3, #4]
            break;
 801242a:	e02b      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801242c:	4b18      	ldr	r3, [pc, #96]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801242e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	605a      	str	r2, [r3, #4]
            break;
 8012434:	e026      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012436:	4b16      	ldr	r3, [pc, #88]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012438:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	711a      	strb	r2, [r3, #4]
            break;
 8012440:	e020      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012442:	4b13      	ldr	r3, [pc, #76]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012444:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	605a      	str	r2, [r3, #4]
            break;
 801244a:	e01b      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 801244c:	f7ff f934 	bl	80116b8 <GetNvmData>
 8012450:	4602      	mov	r2, r0
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	605a      	str	r2, [r3, #4]
            break;
 8012456:	e015      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012458:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801245a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	605a      	str	r2, [r3, #4]
            break;
 8012462:	e00f      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	4a0a      	ldr	r2, [pc, #40]	; (8012490 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012468:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 801246c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801246e:	687c      	ldr	r4, [r7, #4]
 8012470:	f003 f84a 	bl	8015508 <RegionGetVersion>
 8012474:	60a0      	str	r0, [r4, #8]
            break;
 8012476:	e005      	b.n	8012484 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 fefd 	bl	8013278 <LoRaMacClassBMibGetRequestConfirm>
 801247e:	4603      	mov	r3, r0
 8012480:	75fb      	strb	r3, [r7, #23]
            break;
 8012482:	bf00      	nop
        }
    }
    return status;
 8012484:	7dfb      	ldrb	r3, [r7, #23]
}
 8012486:	4618      	mov	r0, r3
 8012488:	371c      	adds	r7, #28
 801248a:	46bd      	mov	sp, r7
 801248c:	bd90      	pop	{r4, r7, pc}
 801248e:	bf00      	nop
 8012490:	20003534 	.word	0x20003534

08012494 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801249c:	2300      	movs	r3, #0
 801249e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124a6:	2303      	movs	r3, #3
 80124a8:	e32b      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80124aa:	4bb4      	ldr	r3, [pc, #720]	; (801277c <LoRaMacMibSetRequestConfirm+0x2e8>)
 80124ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80124b0:	f003 0302 	and.w	r3, r3, #2
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80124b8:	2301      	movs	r3, #1
 80124ba:	e322      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	2b27      	cmp	r3, #39	; 0x27
 80124c2:	f200 82fc 	bhi.w	8012abe <LoRaMacMibSetRequestConfirm+0x62a>
 80124c6:	a201      	add	r2, pc, #4	; (adr r2, 80124cc <LoRaMacMibSetRequestConfirm+0x38>)
 80124c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124cc:	0801256d 	.word	0x0801256d
 80124d0:	0801257d 	.word	0x0801257d
 80124d4:	08012597 	.word	0x08012597
 80124d8:	080125af 	.word	0x080125af
 80124dc:	080125c7 	.word	0x080125c7
 80124e0:	080125d3 	.word	0x080125d3
 80124e4:	080125df 	.word	0x080125df
 80124e8:	080125eb 	.word	0x080125eb
 80124ec:	08012611 	.word	0x08012611
 80124f0:	08012637 	.word	0x08012637
 80124f4:	0801265d 	.word	0x0801265d
 80124f8:	08012683 	.word	0x08012683
 80124fc:	080126a9 	.word	0x080126a9
 8012500:	080126cf 	.word	0x080126cf
 8012504:	080126f5 	.word	0x080126f5
 8012508:	0801271b 	.word	0x0801271b
 801250c:	0801273b 	.word	0x0801273b
 8012510:	08012abf 	.word	0x08012abf
 8012514:	08012747 	.word	0x08012747
 8012518:	080127c5 	.word	0x080127c5
 801251c:	08012805 	.word	0x08012805
 8012520:	08012867 	.word	0x08012867
 8012524:	080128d7 	.word	0x080128d7
 8012528:	080128a7 	.word	0x080128a7
 801252c:	08012907 	.word	0x08012907
 8012530:	08012929 	.word	0x08012929
 8012534:	08012933 	.word	0x08012933
 8012538:	0801293d 	.word	0x0801293d
 801253c:	08012947 	.word	0x08012947
 8012540:	08012951 	.word	0x08012951
 8012544:	0801295b 	.word	0x0801295b
 8012548:	0801298d 	.word	0x0801298d
 801254c:	080129f9 	.word	0x080129f9
 8012550:	080129c7 	.word	0x080129c7
 8012554:	08012a2b 	.word	0x08012a2b
 8012558:	08012a41 	.word	0x08012a41
 801255c:	08012a61 	.word	0x08012a61
 8012560:	08012a6b 	.word	0x08012a6b
 8012564:	08012a77 	.word	0x08012a77
 8012568:	08012a95 	.word	0x08012a95
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	791b      	ldrb	r3, [r3, #4]
 8012570:	4618      	mov	r0, r3
 8012572:	f7fd fbfb 	bl	800fd6c <SwitchClass>
 8012576:	4603      	mov	r3, r0
 8012578:	75fb      	strb	r3, [r7, #23]
            break;
 801257a:	e2c1      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	791b      	ldrb	r3, [r3, #4]
 8012580:	2b02      	cmp	r3, #2
 8012582:	d005      	beq.n	8012590 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	791a      	ldrb	r2, [r3, #4]
 8012588:	4b7d      	ldr	r3, [pc, #500]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801258a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801258e:	e2b7      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012590:	2303      	movs	r3, #3
 8012592:	75fb      	strb	r3, [r7, #23]
            break;
 8012594:	e2b4      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	f7fa ff06 	bl	800d3ac <SecureElementSetDevEui>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 8291 	beq.w	8012aca <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125a8:	2303      	movs	r3, #3
 80125aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125ac:	e28d      	b.n	8012aca <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fa ff1c 	bl	800d3f0 <SecureElementSetJoinEui>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f000 8287 	beq.w	8012ace <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125c0:	2303      	movs	r3, #3
 80125c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125c4:	e283      	b.n	8012ace <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	791a      	ldrb	r2, [r3, #4]
 80125ca:	4b6d      	ldr	r3, [pc, #436]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80125cc:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80125d0:	e296      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	4a6a      	ldr	r2, [pc, #424]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80125d8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80125dc:	e290      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	4a67      	ldr	r2, [pc, #412]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80125e4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80125e8:	e28a      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00b      	beq.n	801260a <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	4619      	mov	r1, r3
 80125f8:	2000      	movs	r0, #0
 80125fa:	f001 ff67 	bl	80144cc <LoRaMacCryptoSetKey>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 8266 	beq.w	8012ad2 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012606:	2311      	movs	r3, #17
 8012608:	e27b      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801260a:	2303      	movs	r3, #3
 801260c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801260e:	e260      	b.n	8012ad2 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00b      	beq.n	8012630 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	4619      	mov	r1, r3
 801261e:	2001      	movs	r0, #1
 8012620:	f001 ff54 	bl	80144cc <LoRaMacCryptoSetKey>
 8012624:	4603      	mov	r3, r0
 8012626:	2b00      	cmp	r3, #0
 8012628:	f000 8255 	beq.w	8012ad6 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801262c:	2311      	movs	r3, #17
 801262e:	e268      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012630:	2303      	movs	r3, #3
 8012632:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012634:	e24f      	b.n	8012ad6 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00b      	beq.n	8012656 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	4619      	mov	r1, r3
 8012644:	2002      	movs	r0, #2
 8012646:	f001 ff41 	bl	80144cc <LoRaMacCryptoSetKey>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	f000 8244 	beq.w	8012ada <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012652:	2311      	movs	r3, #17
 8012654:	e255      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012656:	2303      	movs	r3, #3
 8012658:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801265a:	e23e      	b.n	8012ada <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d00b      	beq.n	801267c <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4619      	mov	r1, r3
 801266a:	2003      	movs	r0, #3
 801266c:	f001 ff2e 	bl	80144cc <LoRaMacCryptoSetKey>
 8012670:	4603      	mov	r3, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	f000 8233 	beq.w	8012ade <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012678:	2311      	movs	r3, #17
 801267a:	e242      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801267c:	2303      	movs	r3, #3
 801267e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012680:	e22d      	b.n	8012ade <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00b      	beq.n	80126a2 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	4619      	mov	r1, r3
 8012690:	207f      	movs	r0, #127	; 0x7f
 8012692:	f001 ff1b 	bl	80144cc <LoRaMacCryptoSetKey>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 8222 	beq.w	8012ae2 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801269e:	2311      	movs	r3, #17
 80126a0:	e22f      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126a2:	2303      	movs	r3, #3
 80126a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126a6:	e21c      	b.n	8012ae2 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00b      	beq.n	80126c8 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	4619      	mov	r1, r3
 80126b6:	2080      	movs	r0, #128	; 0x80
 80126b8:	f001 ff08 	bl	80144cc <LoRaMacCryptoSetKey>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f000 8211 	beq.w	8012ae6 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126c4:	2311      	movs	r3, #17
 80126c6:	e21c      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126c8:	2303      	movs	r3, #3
 80126ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126cc:	e20b      	b.n	8012ae6 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00b      	beq.n	80126ee <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4619      	mov	r1, r3
 80126dc:	2081      	movs	r0, #129	; 0x81
 80126de:	f001 fef5 	bl	80144cc <LoRaMacCryptoSetKey>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f000 8200 	beq.w	8012aea <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126ea:	2311      	movs	r3, #17
 80126ec:	e209      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126ee:	2303      	movs	r3, #3
 80126f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126f2:	e1fa      	b.n	8012aea <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00b      	beq.n	8012714 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	4619      	mov	r1, r3
 8012702:	2082      	movs	r0, #130	; 0x82
 8012704:	f001 fee2 	bl	80144cc <LoRaMacCryptoSetKey>
 8012708:	4603      	mov	r3, r0
 801270a:	2b00      	cmp	r3, #0
 801270c:	f000 81ef 	beq.w	8012aee <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012710:	2311      	movs	r3, #17
 8012712:	e1f6      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012714:	2303      	movs	r3, #3
 8012716:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012718:	e1e9      	b.n	8012aee <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	791a      	ldrb	r2, [r3, #4]
 801271e:	4b18      	ldr	r3, [pc, #96]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012720:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012724:	4b17      	ldr	r3, [pc, #92]	; (8012784 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012728:	4a15      	ldr	r2, [pc, #84]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801272a:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801272e:	4610      	mov	r0, r2
 8012730:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012732:	4b14      	ldr	r3, [pc, #80]	; (8012784 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012736:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012738:	e1e2      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	791a      	ldrb	r2, [r3, #4]
 801273e:	4b10      	ldr	r3, [pc, #64]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8012744:	e1dc      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	7a1b      	ldrb	r3, [r3, #8]
 801274a:	b25b      	sxtb	r3, r3
 801274c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801274e:	4b0c      	ldr	r3, [pc, #48]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012750:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012754:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012756:	4b0a      	ldr	r3, [pc, #40]	; (8012780 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801275c:	f107 0108 	add.w	r1, r7, #8
 8012760:	2207      	movs	r2, #7
 8012762:	4618      	mov	r0, r3
 8012764:	f002 fcf7 	bl	8015156 <RegionVerify>
 8012768:	4603      	mov	r3, r0
 801276a:	f083 0301 	eor.w	r3, r3, #1
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d009      	beq.n	8012788 <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012774:	2303      	movs	r3, #3
 8012776:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012778:	e1c2      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
 801277a:	bf00      	nop
 801277c:	2000302c 	.word	0x2000302c
 8012780:	20003534 	.word	0x20003534
 8012784:	0801e648 	.word	0x0801e648
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801278e:	4bb2      	ldr	r3, [pc, #712]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012794:	f107 0108 	add.w	r1, r7, #8
 8012798:	2200      	movs	r2, #0
 801279a:	4618      	mov	r0, r3
 801279c:	f002 fcdb 	bl	8015156 <RegionVerify>
 80127a0:	4603      	mov	r3, r0
 80127a2:	f083 0301 	eor.w	r3, r3, #1
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d002      	beq.n	80127b2 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127ac:	2303      	movs	r3, #3
 80127ae:	75fb      	strb	r3, [r7, #23]
            break;
 80127b0:	e1a6      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80127b2:	4ba9      	ldr	r3, [pc, #676]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	3364      	adds	r3, #100	; 0x64
 80127b8:	3204      	adds	r2, #4
 80127ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127be:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80127c2:	e19d      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	7a1b      	ldrb	r3, [r3, #8]
 80127c8:	b25b      	sxtb	r3, r3
 80127ca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127cc:	4ba2      	ldr	r3, [pc, #648]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80127ce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80127d2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80127d4:	4ba0      	ldr	r3, [pc, #640]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80127d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127da:	f107 0108 	add.w	r1, r7, #8
 80127de:	2207      	movs	r2, #7
 80127e0:	4618      	mov	r0, r3
 80127e2:	f002 fcb8 	bl	8015156 <RegionVerify>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d008      	beq.n	80127fe <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80127ec:	4b9a      	ldr	r3, [pc, #616]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	33a4      	adds	r3, #164	; 0xa4
 80127f2:	3204      	adds	r2, #4
 80127f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127f8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127fc:	e180      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127fe:	2303      	movs	r3, #3
 8012800:	75fb      	strb	r3, [r7, #23]
            break;
 8012802:	e17d      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7a1b      	ldrb	r3, [r3, #8]
 8012808:	b25b      	sxtb	r3, r3
 801280a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801280c:	4b92      	ldr	r3, [pc, #584]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801280e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012812:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012814:	4b90      	ldr	r3, [pc, #576]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801281a:	f107 0108 	add.w	r1, r7, #8
 801281e:	2207      	movs	r2, #7
 8012820:	4618      	mov	r0, r3
 8012822:	f002 fc98 	bl	8015156 <RegionVerify>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d019      	beq.n	8012860 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801282c:	4b8a      	ldr	r3, [pc, #552]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	336c      	adds	r3, #108	; 0x6c
 8012832:	3204      	adds	r2, #4
 8012834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012838:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801283c:	4b86      	ldr	r3, [pc, #536]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801283e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012842:	2b02      	cmp	r3, #2
 8012844:	f040 8155 	bne.w	8012af2 <LoRaMacMibSetRequestConfirm+0x65e>
 8012848:	4b83      	ldr	r3, [pc, #524]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801284a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 801284e:	2b00      	cmp	r3, #0
 8012850:	f000 814f 	beq.w	8012af2 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012854:	4b81      	ldr	r3, [pc, #516]	; (8012a5c <LoRaMacMibSetRequestConfirm+0x5c8>)
 8012856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012858:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801285a:	f7fe fcd9 	bl	8011210 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801285e:	e148      	b.n	8012af2 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012860:	2303      	movs	r3, #3
 8012862:	75fb      	strb	r3, [r7, #23]
            break;
 8012864:	e145      	b.n	8012af2 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7a1b      	ldrb	r3, [r3, #8]
 801286a:	b25b      	sxtb	r3, r3
 801286c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801286e:	4b7a      	ldr	r3, [pc, #488]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012870:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012874:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012876:	4b78      	ldr	r3, [pc, #480]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801287c:	f107 0108 	add.w	r1, r7, #8
 8012880:	2207      	movs	r2, #7
 8012882:	4618      	mov	r0, r3
 8012884:	f002 fc67 	bl	8015156 <RegionVerify>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d008      	beq.n	80128a0 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801288e:	4b72      	ldr	r3, [pc, #456]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	33ac      	adds	r3, #172	; 0xac
 8012894:	3204      	adds	r2, #4
 8012896:	e892 0003 	ldmia.w	r2, {r0, r1}
 801289a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801289e:	e12f      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128a0:	2303      	movs	r3, #3
 80128a2:	75fb      	strb	r3, [r7, #23]
            break;
 80128a4:	e12c      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80128ac:	2301      	movs	r3, #1
 80128ae:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80128b0:	4b69      	ldr	r3, [pc, #420]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128b6:	f107 020c 	add.w	r2, r7, #12
 80128ba:	4611      	mov	r1, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f002 fc83 	bl	80151c8 <RegionChanMaskSet>
 80128c2:	4603      	mov	r3, r0
 80128c4:	f083 0301 	eor.w	r3, r3, #1
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f000 8113 	beq.w	8012af6 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128d0:	2303      	movs	r3, #3
 80128d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128d4:	e10f      	b.n	8012af6 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80128dc:	2300      	movs	r3, #0
 80128de:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80128e0:	4b5d      	ldr	r3, [pc, #372]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80128e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128e6:	f107 020c 	add.w	r2, r7, #12
 80128ea:	4611      	mov	r1, r2
 80128ec:	4618      	mov	r0, r3
 80128ee:	f002 fc6b 	bl	80151c8 <RegionChanMaskSet>
 80128f2:	4603      	mov	r3, r0
 80128f4:	f083 0301 	eor.w	r3, r3, #1
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f000 80fd 	beq.w	8012afa <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012900:	2303      	movs	r3, #3
 8012902:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012904:	e0f9      	b.n	8012afa <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	791b      	ldrb	r3, [r3, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d009      	beq.n	8012922 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012912:	2b0f      	cmp	r3, #15
 8012914:	d805      	bhi.n	8012922 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	791a      	ldrb	r2, [r3, #4]
 801291a:	4b4f      	ldr	r3, [pc, #316]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801291c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012920:	e0ee      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012922:	2303      	movs	r3, #3
 8012924:	75fb      	strb	r3, [r7, #23]
            break;
 8012926:	e0eb      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	4a4a      	ldr	r2, [pc, #296]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801292e:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012930:	e0e6      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	4a48      	ldr	r2, [pc, #288]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012938:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801293a:	e0e1      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	4a45      	ldr	r2, [pc, #276]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012942:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012944:	e0dc      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	4a43      	ldr	r2, [pc, #268]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801294c:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 801294e:	e0d7      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	4a40      	ldr	r2, [pc, #256]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012956:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012958:	e0d2      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012960:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012962:	4b3d      	ldr	r3, [pc, #244]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012968:	f107 0108 	add.w	r1, r7, #8
 801296c:	2206      	movs	r2, #6
 801296e:	4618      	mov	r0, r3
 8012970:	f002 fbf1 	bl	8015156 <RegionVerify>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d005      	beq.n	8012986 <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801297a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801297e:	4b36      	ldr	r3, [pc, #216]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012980:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012984:	e0bc      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012986:	2303      	movs	r3, #3
 8012988:	75fb      	strb	r3, [r7, #23]
            break;
 801298a:	e0b9      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012992:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012994:	4b30      	ldr	r3, [pc, #192]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012996:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801299a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801299c:	4b2e      	ldr	r3, [pc, #184]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801299e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129a2:	f107 0108 	add.w	r1, r7, #8
 80129a6:	2205      	movs	r2, #5
 80129a8:	4618      	mov	r0, r3
 80129aa:	f002 fbd4 	bl	8015156 <RegionVerify>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d005      	beq.n	80129c0 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80129b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129b8:	4b27      	ldr	r3, [pc, #156]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129be:	e09f      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129c0:	2303      	movs	r3, #3
 80129c2:	75fb      	strb	r3, [r7, #23]
            break;
 80129c4:	e09c      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129cc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80129ce:	4b22      	ldr	r3, [pc, #136]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129d4:	f107 0108 	add.w	r1, r7, #8
 80129d8:	220a      	movs	r2, #10
 80129da:	4618      	mov	r0, r3
 80129dc:	f002 fbbb 	bl	8015156 <RegionVerify>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d005      	beq.n	80129f2 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80129e6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129ea:	4b1b      	ldr	r3, [pc, #108]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80129ec:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129f0:	e086      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129f2:	2303      	movs	r3, #3
 80129f4:	75fb      	strb	r3, [r7, #23]
            break;
 80129f6:	e083      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129fe:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012a00:	4b15      	ldr	r3, [pc, #84]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a06:	f107 0108 	add.w	r1, r7, #8
 8012a0a:	2209      	movs	r2, #9
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f002 fba2 	bl	8015156 <RegionVerify>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d005      	beq.n	8012a24 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012a18:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a1c:	4b0e      	ldr	r3, [pc, #56]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a22:	e06d      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a24:	2303      	movs	r3, #3
 8012a26:	75fb      	strb	r3, [r7, #23]
            break;
 8012a28:	e06a      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	4a0a      	ldr	r2, [pc, #40]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8012a34:	4b08      	ldr	r3, [pc, #32]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a3a:	4a07      	ldr	r2, [pc, #28]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a3c:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8012a3e:	e05f      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	791a      	ldrb	r2, [r3, #4]
 8012a44:	4b04      	ldr	r3, [pc, #16]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8012a4a:	4b03      	ldr	r3, [pc, #12]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a4c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012a50:	4b01      	ldr	r3, [pc, #4]	; (8012a58 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012a52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012a56:	e053      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
 8012a58:	20003534 	.word	0x20003534
 8012a5c:	0801e648 	.word	0x0801e648
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	4a29      	ldr	r2, [pc, #164]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x678>)
 8012a66:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8012a68:	e04a      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	4a27      	ldr	r2, [pc, #156]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x678>)
 8012a70:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8012a74:	e044      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d007      	beq.n	8012a8e <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe fe22 	bl	80116cc <RestoreNvmData>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a8c:	e038      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a8e:	2303      	movs	r3, #3
 8012a90:	75fb      	strb	r3, [r7, #23]
            break;
 8012a92:	e035      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	799b      	ldrb	r3, [r3, #6]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d80d      	bhi.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012a9c:	4a1b      	ldr	r2, [pc, #108]	; (8012b0c <LoRaMacMibSetRequestConfirm+0x678>)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6858      	ldr	r0, [r3, #4]
 8012aaa:	f001 fc49 	bl	8014340 <LoRaMacCryptoSetLrWanVersion>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d024      	beq.n	8012afe <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ab4:	2311      	movs	r3, #17
 8012ab6:	e024      	b.n	8012b02 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ab8:	2303      	movs	r3, #3
 8012aba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012abc:	e01f      	b.n	8012afe <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f000 fbe4 	bl	801328c <LoRaMacMibClassBSetRequestConfirm>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8012ac8:	e01a      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012aca:	bf00      	nop
 8012acc:	e018      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ace:	bf00      	nop
 8012ad0:	e016      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ad2:	bf00      	nop
 8012ad4:	e014      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ad6:	bf00      	nop
 8012ad8:	e012      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ada:	bf00      	nop
 8012adc:	e010      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ade:	bf00      	nop
 8012ae0:	e00e      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ae2:	bf00      	nop
 8012ae4:	e00c      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012ae6:	bf00      	nop
 8012ae8:	e00a      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012aea:	bf00      	nop
 8012aec:	e008      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012aee:	bf00      	nop
 8012af0:	e006      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012af2:	bf00      	nop
 8012af4:	e004      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012af6:	bf00      	nop
 8012af8:	e002      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012afa:	bf00      	nop
 8012afc:	e000      	b.n	8012b00 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8012afe:	bf00      	nop
        }
    }
    return status;
 8012b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	20003534 	.word	0x20003534

08012b10 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b18:	2302      	movs	r3, #2
 8012b1a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d101      	bne.n	8012b2a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b26:	2303      	movs	r3, #3
 8012b28:	e127      	b.n	8012d7a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8012b2a:	f7fc fd23 	bl	800f574 <LoRaMacIsBusy>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d001      	beq.n	8012b38 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012b34:	2301      	movs	r3, #1
 8012b36:	e120      	b.n	8012d7a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012b38:	f001 f8a6 	bl	8013c88 <LoRaMacConfirmQueueIsFull>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012b42:	2301      	movs	r3, #1
 8012b44:	e119      	b.n	8012d7a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012b46:	f001 f893 	bl	8013c70 <LoRaMacConfirmQueueGetCnt>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d104      	bne.n	8012b5a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012b50:	2214      	movs	r2, #20
 8012b52:	2100      	movs	r1, #0
 8012b54:	488b      	ldr	r0, [pc, #556]	; (8012d84 <LoRaMacMlmeRequest+0x274>)
 8012b56:	f006 f9a9 	bl	8018eac <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b5a:	4b8b      	ldr	r3, [pc, #556]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012b62:	4a89      	ldr	r2, [pc, #548]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012b64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012b68:	f043 0304 	orr.w	r3, r3, #4
 8012b6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b76:	2301      	movs	r3, #1
 8012b78:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	3b01      	subs	r3, #1
 8012b84:	2b0d      	cmp	r3, #13
 8012b86:	f200 80ce 	bhi.w	8012d26 <LoRaMacMlmeRequest+0x216>
 8012b8a:	a201      	add	r2, pc, #4	; (adr r2, 8012b90 <LoRaMacMlmeRequest+0x80>)
 8012b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b90:	08012bc9 	.word	0x08012bc9
 8012b94:	08012d27 	.word	0x08012d27
 8012b98:	08012d27 	.word	0x08012d27
 8012b9c:	08012c33 	.word	0x08012c33
 8012ba0:	08012c51 	.word	0x08012c51
 8012ba4:	08012c61 	.word	0x08012c61
 8012ba8:	08012d27 	.word	0x08012d27
 8012bac:	08012d27 	.word	0x08012d27
 8012bb0:	08012d27 	.word	0x08012d27
 8012bb4:	08012c7d 	.word	0x08012c7d
 8012bb8:	08012d27 	.word	0x08012d27
 8012bbc:	08012cfb 	.word	0x08012cfb
 8012bc0:	08012c9b 	.word	0x08012c9b
 8012bc4:	08012cdd 	.word	0x08012cdd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012bc8:	4b6f      	ldr	r3, [pc, #444]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012bca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012bce:	f003 0320 	and.w	r3, r3, #32
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d001      	beq.n	8012bda <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e0cf      	b.n	8012d7a <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8012bda:	f7fe f9fd 	bl	8010fd8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012bde:	4b6b      	ldr	r3, [pc, #428]	; (8012d8c <LoRaMacMlmeRequest+0x27c>)
 8012be0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	791b      	ldrb	r3, [r3, #4]
 8012be8:	b25b      	sxtb	r3, r3
 8012bea:	2200      	movs	r2, #0
 8012bec:	4619      	mov	r1, r3
 8012bee:	f002 fbfc 	bl	80153ea <RegionAlternateDr>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	4b65      	ldr	r3, [pc, #404]	; (8012d8c <LoRaMacMlmeRequest+0x27c>)
 8012bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012bfc:	2307      	movs	r3, #7
 8012bfe:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8012c00:	20ff      	movs	r0, #255	; 0xff
 8012c02:	f7fd ff61 	bl	8010ac8 <SendReJoinReq>
 8012c06:	4603      	mov	r3, r0
 8012c08:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8012c0a:	7dfb      	ldrb	r3, [r7, #23]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 808c 	beq.w	8012d2a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012c12:	4b5e      	ldr	r3, [pc, #376]	; (8012d8c <LoRaMacMlmeRequest+0x27c>)
 8012c14:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	791b      	ldrb	r3, [r3, #4]
 8012c1c:	b25b      	sxtb	r3, r3
 8012c1e:	2201      	movs	r2, #1
 8012c20:	4619      	mov	r1, r3
 8012c22:	f002 fbe2 	bl	80153ea <RegionAlternateDr>
 8012c26:	4603      	mov	r3, r0
 8012c28:	461a      	mov	r2, r3
 8012c2a:	4b58      	ldr	r3, [pc, #352]	; (8012d8c <LoRaMacMlmeRequest+0x27c>)
 8012c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8012c30:	e07b      	b.n	8012d2a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	2002      	movs	r0, #2
 8012c40:	f000 fc88 	bl	8013554 <LoRaMacCommandsAddCmd>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d071      	beq.n	8012d2e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c4a:	2313      	movs	r3, #19
 8012c4c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012c4e:	e06e      	b.n	8012d2e <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	889b      	ldrh	r3, [r3, #4]
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7fe fcdb 	bl	8011610 <SetTxContinuousWave>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	75fb      	strb	r3, [r7, #23]
            break;
 8012c5e:	e06d      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8898      	ldrh	r0, [r3, #4]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	6899      	ldr	r1, [r3, #8]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	461a      	mov	r2, r3
 8012c72:	f7fe fd01 	bl	8011678 <SetTxContinuousWave1>
 8012c76:	4603      	mov	r3, r0
 8012c78:	75fb      	strb	r3, [r7, #23]
            break;
 8012c7a:	e05f      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c80:	f107 030c 	add.w	r3, r7, #12
 8012c84:	2200      	movs	r2, #0
 8012c86:	4619      	mov	r1, r3
 8012c88:	200d      	movs	r0, #13
 8012c8a:	f000 fc63 	bl	8013554 <LoRaMacCommandsAddCmd>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d04e      	beq.n	8012d32 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c94:	2313      	movs	r3, #19
 8012c96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012c98:	e04b      	b.n	8012d32 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012c9a:	4b3c      	ldr	r3, [pc, #240]	; (8012d8c <LoRaMacMlmeRequest+0x27c>)
 8012c9c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d148      	bne.n	8012d36 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	791b      	ldrb	r3, [r3, #4]
 8012ca8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	791b      	ldrb	r3, [r3, #4]
 8012cae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 fabe 	bl	8013236 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012cba:	7dbb      	ldrb	r3, [r7, #22]
 8012cbc:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012cc2:	f107 030c 	add.w	r3, r7, #12
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	4619      	mov	r1, r3
 8012cca:	2010      	movs	r0, #16
 8012ccc:	f000 fc42 	bl	8013554 <LoRaMacCommandsAddCmd>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d02f      	beq.n	8012d36 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cd6:	2313      	movs	r3, #19
 8012cd8:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012cda:	e02c      	b.n	8012d36 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ce0:	f107 030c 	add.w	r3, r7, #12
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	2012      	movs	r0, #18
 8012cea:	f000 fc33 	bl	8013554 <LoRaMacCommandsAddCmd>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d022      	beq.n	8012d3a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cf4:	2313      	movs	r3, #19
 8012cf6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012cf8:	e01f      	b.n	8012d3a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012cfe:	f000 fa50 	bl	80131a2 <LoRaMacClassBIsAcquisitionInProgress>
 8012d02:	4603      	mov	r3, r0
 8012d04:	f083 0301 	eor.w	r3, r3, #1
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d008      	beq.n	8012d20 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012d0e:	2000      	movs	r0, #0
 8012d10:	f000 fa29 	bl	8013166 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012d14:	2000      	movs	r0, #0
 8012d16:	f000 fa4b 	bl	80131b0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012d1e:	e00d      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8012d20:	2301      	movs	r3, #1
 8012d22:	75fb      	strb	r3, [r7, #23]
            break;
 8012d24:	e00a      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012d26:	bf00      	nop
 8012d28:	e008      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
            break;
 8012d2a:	bf00      	nop
 8012d2c:	e006      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
            break;
 8012d2e:	bf00      	nop
 8012d30:	e004      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
            break;
 8012d32:	bf00      	nop
 8012d34:	e002      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
            break;
 8012d36:	bf00      	nop
 8012d38:	e000      	b.n	8012d3c <LoRaMacMlmeRequest+0x22c>
            break;
 8012d3a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012d3c:	4b12      	ldr	r3, [pc, #72]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012d3e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012d46:	7dfb      	ldrb	r3, [r7, #23]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d010      	beq.n	8012d6e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012d4c:	f000 ff90 	bl	8013c70 <LoRaMacConfirmQueueGetCnt>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d110      	bne.n	8012d78 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012d56:	4b0c      	ldr	r3, [pc, #48]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012d5e:	4a0a      	ldr	r2, [pc, #40]	; (8012d88 <LoRaMacMlmeRequest+0x278>)
 8012d60:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012d64:	f36f 0382 	bfc	r3, #2, #1
 8012d68:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8012d6c:	e004      	b.n	8012d78 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012d6e:	f107 0310 	add.w	r3, r7, #16
 8012d72:	4618      	mov	r0, r3
 8012d74:	f000 fe2e 	bl	80139d4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3718      	adds	r7, #24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	20003478 	.word	0x20003478
 8012d88:	2000302c 	.word	0x2000302c
 8012d8c:	20003534 	.word	0x20003534

08012d90 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b08c      	sub	sp, #48	; 0x30
 8012d94:	af02      	add	r7, sp, #8
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	460b      	mov	r3, r1
 8012d9a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d9c:	2302      	movs	r3, #2
 8012d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012da2:	2300      	movs	r3, #0
 8012da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012da8:	2300      	movs	r3, #0
 8012daa:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8012db0:	2300      	movs	r3, #0
 8012db2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d101      	bne.n	8012dbe <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012dba:	2303      	movs	r3, #3
 8012dbc:	e0d4      	b.n	8012f68 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8012dbe:	f7fc fbd9 	bl	800f574 <LoRaMacIsBusy>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e0cd      	b.n	8012f68 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012dd0:	2214      	movs	r2, #20
 8012dd2:	2100      	movs	r1, #0
 8012dd4:	4866      	ldr	r0, [pc, #408]	; (8012f70 <LoRaMacMcpsRequest+0x1e0>)
 8012dd6:	f006 f869 	bl	8018eac <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dda:	4b66      	ldr	r3, [pc, #408]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012ddc:	2201      	movs	r2, #1
 8012dde:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012de2:	4b64      	ldr	r3, [pc, #400]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012de4:	2201      	movs	r2, #1
 8012de6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b03      	cmp	r3, #3
 8012df0:	d03d      	beq.n	8012e6e <LoRaMacMcpsRequest+0xde>
 8012df2:	2b03      	cmp	r3, #3
 8012df4:	dc4f      	bgt.n	8012e96 <LoRaMacMcpsRequest+0x106>
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <LoRaMacMcpsRequest+0x70>
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d019      	beq.n	8012e32 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012dfe:	e04a      	b.n	8012e96 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8012e00:	2301      	movs	r3, #1
 8012e02:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012e04:	4b5b      	ldr	r3, [pc, #364]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012e06:	2201      	movs	r2, #1
 8012e08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012e0c:	7b3b      	ldrb	r3, [r7, #12]
 8012e0e:	2202      	movs	r2, #2
 8012e10:	f362 1347 	bfi	r3, r2, #5, #3
 8012e14:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	791b      	ldrb	r3, [r3, #4]
 8012e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	899b      	ldrh	r3, [r3, #12]
 8012e28:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	7b9b      	ldrb	r3, [r3, #14]
 8012e2e:	777b      	strb	r3, [r7, #29]
            break;
 8012e30:	e032      	b.n	8012e98 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012e32:	2301      	movs	r3, #1
 8012e34:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	7bdb      	ldrb	r3, [r3, #15]
 8012e3a:	2b08      	cmp	r3, #8
 8012e3c:	bf28      	it	cs
 8012e3e:	2308      	movcs	r3, #8
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	4b4c      	ldr	r3, [pc, #304]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012e44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012e48:	7b3b      	ldrb	r3, [r7, #12]
 8012e4a:	2204      	movs	r2, #4
 8012e4c:	f362 1347 	bfi	r3, r2, #5, #3
 8012e50:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	791b      	ldrb	r3, [r3, #4]
 8012e56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	689b      	ldr	r3, [r3, #8]
 8012e5e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	899b      	ldrh	r3, [r3, #12]
 8012e64:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	7b9b      	ldrb	r3, [r3, #14]
 8012e6a:	777b      	strb	r3, [r7, #29]
            break;
 8012e6c:	e014      	b.n	8012e98 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012e72:	4b40      	ldr	r3, [pc, #256]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012e74:	2201      	movs	r2, #1
 8012e76:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012e7a:	7b3b      	ldrb	r3, [r7, #12]
 8012e7c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012e80:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	891b      	ldrh	r3, [r3, #8]
 8012e8c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	7a9b      	ldrb	r3, [r3, #10]
 8012e92:	777b      	strb	r3, [r7, #29]
            break;
 8012e94:	e000      	b.n	8012e98 <LoRaMacMcpsRequest+0x108>
            break;
 8012e96:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012e98:	2302      	movs	r3, #2
 8012e9a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012e9c:	4b36      	ldr	r3, [pc, #216]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012e9e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012ea2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ea4:	4b34      	ldr	r3, [pc, #208]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012eaa:	f107 0214 	add.w	r2, r7, #20
 8012eae:	4611      	mov	r1, r2
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f002 f900 	bl	80150b6 <RegionGetPhyParam>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	b25b      	sxtb	r3, r3
 8012ebe:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	bfb8      	it	lt
 8012ec6:	4613      	movlt	r3, r2
 8012ec8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8012eca:	7f3b      	ldrb	r3, [r7, #28]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d044      	beq.n	8012f5a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8012ed0:	4b29      	ldr	r3, [pc, #164]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012ed2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8012ed6:	f083 0301 	eor.w	r3, r3, #1
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d019      	beq.n	8012f14 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8012ee0:	7f7b      	ldrb	r3, [r7, #29]
 8012ee2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012ee4:	4b24      	ldr	r3, [pc, #144]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012ee6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012eea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012eec:	4b22      	ldr	r3, [pc, #136]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012ef2:	f107 0108 	add.w	r1, r7, #8
 8012ef6:	2205      	movs	r2, #5
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f002 f92c 	bl	8015156 <RegionVerify>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d005      	beq.n	8012f10 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012f04:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012f08:	4b1b      	ldr	r3, [pc, #108]	; (8012f78 <LoRaMacMcpsRequest+0x1e8>)
 8012f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012f0e:	e001      	b.n	8012f14 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f10:	2303      	movs	r3, #3
 8012f12:	e029      	b.n	8012f68 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012f14:	8bfa      	ldrh	r2, [r7, #30]
 8012f16:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8012f1a:	f107 000c 	add.w	r0, r7, #12
 8012f1e:	78fb      	ldrb	r3, [r7, #3]
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	4613      	mov	r3, r2
 8012f24:	6a3a      	ldr	r2, [r7, #32]
 8012f26:	f7fd fcef 	bl	8010908 <Send>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8012f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10c      	bne.n	8012f52 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	781a      	ldrb	r2, [r3, #0]
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012f3e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012f42:	4a0c      	ldr	r2, [pc, #48]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012f44:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012f48:	f043 0301 	orr.w	r3, r3, #1
 8012f4c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8012f50:	e003      	b.n	8012f5a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012f52:	4b08      	ldr	r3, [pc, #32]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012f5a:	4b06      	ldr	r3, [pc, #24]	; (8012f74 <LoRaMacMcpsRequest+0x1e4>)
 8012f5c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	611a      	str	r2, [r3, #16]

    return status;
 8012f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3728      	adds	r7, #40	; 0x28
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	20003464 	.word	0x20003464
 8012f74:	2000302c 	.word	0x2000302c
 8012f78:	20003534 	.word	0x20003534

08012f7c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012f86:	79fb      	ldrb	r3, [r7, #7]
 8012f88:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012f8a:	4b0a      	ldr	r3, [pc, #40]	; (8012fb4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f90:	f107 010c 	add.w	r1, r7, #12
 8012f94:	220f      	movs	r2, #15
 8012f96:	4618      	mov	r0, r3
 8012f98:	f002 f8dd 	bl	8015156 <RegionVerify>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d003      	beq.n	8012faa <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012fa2:	4a04      	ldr	r2, [pc, #16]	; (8012fb4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012fa4:	79fb      	ldrb	r3, [r7, #7]
 8012fa6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8012faa:	bf00      	nop
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	20003534 	.word	0x20003534

08012fb8 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08c      	sub	sp, #48	; 0x30
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
 8012fc4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	7c1b      	ldrb	r3, [r3, #16]
 8012fd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	7c5b      	ldrb	r3, [r3, #17]
 8012fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	689a      	ldr	r2, [r3, #8]
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	795b      	ldrb	r3, [r3, #5]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f000 808b 	beq.w	8013104 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012fee:	2302      	movs	r3, #2
 8012ff0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	7c9b      	ldrb	r3, [r3, #18]
 8012ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	7cdb      	ldrb	r3, [r3, #19]
 8013000:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013004:	4611      	mov	r1, r2
 8013006:	4618      	mov	r0, r3
 8013008:	f002 f855 	bl	80150b6 <RegionGetPhyParam>
 801300c:	4603      	mov	r3, r0
 801300e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013010:	6a3b      	ldr	r3, [r7, #32]
 8013012:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013016:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801301a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801301e:	4293      	cmp	r3, r2
 8013020:	bfb8      	it	lt
 8013022:	4613      	movlt	r3, r2
 8013024:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8013028:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801302c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8013030:	429a      	cmp	r2, r3
 8013032:	d106      	bne.n	8013042 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801303a:	2300      	movs	r3, #0
 801303c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013040:	e060      	b.n	8013104 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	689b      	ldr	r3, [r3, #8]
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	8992      	ldrh	r2, [r2, #12]
 801304a:	4293      	cmp	r3, r2
 801304c:	d303      	bcc.n	8013056 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801304e:	2301      	movs	r3, #1
 8013050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013054:	e002      	b.n	801305c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8013056:	2300      	movs	r3, #0
 8013058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	8992      	ldrh	r2, [r2, #12]
 8013064:	4611      	mov	r1, r2
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	89d2      	ldrh	r2, [r2, #14]
 801306a:	440a      	add	r2, r1
 801306c:	4293      	cmp	r3, r2
 801306e:	d349      	bcc.n	8013104 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013070:	2308      	movs	r3, #8
 8013072:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	7cdb      	ldrb	r3, [r3, #19]
 801307a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801307e:	4611      	mov	r1, r2
 8013080:	4618      	mov	r0, r3
 8013082:	f002 f818 	bl	80150b6 <RegionGetPhyParam>
 8013086:	4603      	mov	r3, r0
 8013088:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801308a:	6a3b      	ldr	r3, [r7, #32]
 801308c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	689b      	ldr	r3, [r3, #8]
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	89d2      	ldrh	r2, [r2, #14]
 8013098:	fbb3 f1f2 	udiv	r1, r3, r2
 801309c:	fb01 f202 	mul.w	r2, r1, r2
 80130a0:	1a9b      	subs	r3, r3, r2
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d12e      	bne.n	8013104 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80130a6:	2322      	movs	r3, #34	; 0x22
 80130a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80130ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80130b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	7c9b      	ldrb	r3, [r3, #18]
 80130b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	7cdb      	ldrb	r3, [r3, #19]
 80130c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80130c4:	4611      	mov	r1, r2
 80130c6:	4618      	mov	r0, r3
 80130c8:	f001 fff5 	bl	80150b6 <RegionGetPhyParam>
 80130cc:	4603      	mov	r3, r0
 80130ce:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80130d6:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80130da:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80130de:	429a      	cmp	r2, r3
 80130e0:	d110      	bne.n	8013104 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80130e2:	2300      	movs	r3, #0
 80130e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	791b      	ldrb	r3, [r3, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d009      	beq.n	8013104 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80130f0:	2302      	movs	r3, #2
 80130f2:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	7cdb      	ldrb	r3, [r3, #19]
 80130f8:	f107 0214 	add.w	r2, r7, #20
 80130fc:	4611      	mov	r1, r2
 80130fe:	4618      	mov	r0, r3
 8013100:	f002 f811 	bl	8015126 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801310a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013112:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013118:	4618      	mov	r0, r3
 801311a:	3730      	adds	r7, #48	; 0x30
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
 801312c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	789b      	ldrb	r3, [r3, #2]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d107      	bne.n	8013146 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	68b9      	ldr	r1, [r7, #8]
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	f7ff ff3b 	bl	8012fb8 <CalcNextV10X>
 8013142:	4603      	mov	r3, r0
 8013144:	e000      	b.n	8013148 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013146:	2300      	movs	r3, #0
}
 8013148:	4618      	mov	r0, r3
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8013150:	b480      	push	{r7}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801315c:	bf00      	nop
 801315e:	3714      	adds	r7, #20
 8013160:	46bd      	mov	sp, r7
 8013162:	bc80      	pop	{r7}
 8013164:	4770      	bx	lr

08013166 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013166:	b480      	push	{r7}
 8013168:	b083      	sub	sp, #12
 801316a:	af00      	add	r7, sp, #0
 801316c:	4603      	mov	r3, r0
 801316e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013170:	bf00      	nop
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	bc80      	pop	{r7}
 8013178:	4770      	bx	lr

0801317a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801317a:	b480      	push	{r7}
 801317c:	b083      	sub	sp, #12
 801317e:	af00      	add	r7, sp, #0
 8013180:	4603      	mov	r3, r0
 8013182:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013184:	bf00      	nop
 8013186:	370c      	adds	r7, #12
 8013188:	46bd      	mov	sp, r7
 801318a:	bc80      	pop	{r7}
 801318c:	4770      	bx	lr

0801318e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801318e:	b480      	push	{r7}
 8013190:	b083      	sub	sp, #12
 8013192:	af00      	add	r7, sp, #0
 8013194:	4603      	mov	r3, r0
 8013196:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013198:	bf00      	nop
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	bc80      	pop	{r7}
 80131a0:	4770      	bx	lr

080131a2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80131a2:	b480      	push	{r7}
 80131a4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80131a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bc80      	pop	{r7}
 80131ae:	4770      	bx	lr

080131b0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	bc80      	pop	{r7}
 80131c0:	4770      	bx	lr

080131c2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80131c2:	b480      	push	{r7}
 80131c4:	b083      	sub	sp, #12
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131ca:	bf00      	nop
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bc80      	pop	{r7}
 80131d2:	4770      	bx	lr

080131d4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131dc:	bf00      	nop
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bc80      	pop	{r7}
 80131e4:	4770      	bx	lr

080131e6 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80131e6:	b480      	push	{r7}
 80131e8:	b083      	sub	sp, #12
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	460b      	mov	r3, r1
 80131f0:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80131f2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bc80      	pop	{r7}
 80131fc:	4770      	bx	lr

080131fe <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80131fe:	b480      	push	{r7}
 8013200:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013202:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013204:	4618      	mov	r0, r3
 8013206:	46bd      	mov	sp, r7
 8013208:	bc80      	pop	{r7}
 801320a:	4770      	bx	lr

0801320c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801320c:	b480      	push	{r7}
 801320e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013210:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013212:	4618      	mov	r0, r3
 8013214:	46bd      	mov	sp, r7
 8013216:	bc80      	pop	{r7}
 8013218:	4770      	bx	lr

0801321a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801321a:	b480      	push	{r7}
 801321c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801321e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013220:	4618      	mov	r0, r3
 8013222:	46bd      	mov	sp, r7
 8013224:	bc80      	pop	{r7}
 8013226:	4770      	bx	lr

08013228 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013228:	b480      	push	{r7}
 801322a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801322c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801322e:	4618      	mov	r0, r3
 8013230:	46bd      	mov	sp, r7
 8013232:	bc80      	pop	{r7}
 8013234:	4770      	bx	lr

08013236 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	4603      	mov	r3, r0
 801323e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013240:	bf00      	nop
 8013242:	370c      	adds	r7, #12
 8013244:	46bd      	mov	sp, r7
 8013246:	bc80      	pop	{r7}
 8013248:	4770      	bx	lr

0801324a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801324a:	b480      	push	{r7}
 801324c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801324e:	bf00      	nop
 8013250:	46bd      	mov	sp, r7
 8013252:	bc80      	pop	{r7}
 8013254:	4770      	bx	lr

08013256 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013256:	b480      	push	{r7}
 8013258:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801325a:	bf00      	nop
 801325c:	46bd      	mov	sp, r7
 801325e:	bc80      	pop	{r7}
 8013260:	4770      	bx	lr

08013262 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013262:	b480      	push	{r7}
 8013264:	b083      	sub	sp, #12
 8013266:	af00      	add	r7, sp, #0
 8013268:	4603      	mov	r3, r0
 801326a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801326c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801326e:	4618      	mov	r0, r3
 8013270:	370c      	adds	r7, #12
 8013272:	46bd      	mov	sp, r7
 8013274:	bc80      	pop	{r7}
 8013276:	4770      	bx	lr

08013278 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013280:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013282:	4618      	mov	r0, r3
 8013284:	370c      	adds	r7, #12
 8013286:	46bd      	mov	sp, r7
 8013288:	bc80      	pop	{r7}
 801328a:	4770      	bx	lr

0801328c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013294:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013296:	4618      	mov	r0, r3
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	bc80      	pop	{r7}
 801329e:	4770      	bx	lr

080132a0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80132a0:	b480      	push	{r7}
 80132a2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132a4:	bf00      	nop
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bc80      	pop	{r7}
 80132aa:	4770      	bx	lr

080132ac <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	4603      	mov	r3, r0
 80132b4:	6039      	str	r1, [r7, #0]
 80132b6:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80132b8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	370c      	adds	r7, #12
 80132be:	46bd      	mov	sp, r7
 80132c0:	bc80      	pop	{r7}
 80132c2:	4770      	bx	lr

080132c4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	4603      	mov	r3, r0
 80132cc:	603a      	str	r2, [r7, #0]
 80132ce:	80fb      	strh	r3, [r7, #6]
 80132d0:	460b      	mov	r3, r1
 80132d2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132d4:	bf00      	nop
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	bc80      	pop	{r7}
 80132dc:	4770      	bx	lr

080132de <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80132de:	b480      	push	{r7}
 80132e0:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132e2:	bf00      	nop
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bc80      	pop	{r7}
 80132e8:	4770      	bx	lr

080132ea <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80132ea:	b480      	push	{r7}
 80132ec:	b083      	sub	sp, #12
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80132f2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	370c      	adds	r7, #12
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bc80      	pop	{r7}
 80132fc:	4770      	bx	lr

080132fe <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80132fe:	b480      	push	{r7}
 8013300:	b083      	sub	sp, #12
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013306:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013308:	4618      	mov	r0, r3
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	bc80      	pop	{r7}
 8013310:	4770      	bx	lr

08013312 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013312:	b480      	push	{r7}
 8013314:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013316:	bf00      	nop
 8013318:	46bd      	mov	sp, r7
 801331a:	bc80      	pop	{r7}
 801331c:	4770      	bx	lr

0801331e <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801331e:	b480      	push	{r7}
 8013320:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013322:	bf00      	nop
 8013324:	46bd      	mov	sp, r7
 8013326:	bc80      	pop	{r7}
 8013328:	4770      	bx	lr

0801332a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801332a:	b480      	push	{r7}
 801332c:	b085      	sub	sp, #20
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013336:	2300      	movs	r3, #0
 8013338:	81fb      	strh	r3, [r7, #14]
 801333a:	e00a      	b.n	8013352 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801333c:	89fb      	ldrh	r3, [r7, #14]
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	4413      	add	r3, r2
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <IsSlotFree+0x22>
        {
            return false;
 8013348:	2300      	movs	r3, #0
 801334a:	e006      	b.n	801335a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801334c:	89fb      	ldrh	r3, [r7, #14]
 801334e:	3301      	adds	r3, #1
 8013350:	81fb      	strh	r3, [r7, #14]
 8013352:	89fb      	ldrh	r3, [r7, #14]
 8013354:	2b0f      	cmp	r3, #15
 8013356:	d9f1      	bls.n	801333c <IsSlotFree+0x12>
        }
    }
    return true;
 8013358:	2301      	movs	r3, #1
}
 801335a:	4618      	mov	r0, r3
 801335c:	3714      	adds	r7, #20
 801335e:	46bd      	mov	sp, r7
 8013360:	bc80      	pop	{r7}
 8013362:	4770      	bx	lr

08013364 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801336a:	2300      	movs	r3, #0
 801336c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801336e:	e007      	b.n	8013380 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	3301      	adds	r3, #1
 8013374:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013376:	79fb      	ldrb	r3, [r7, #7]
 8013378:	2b0f      	cmp	r3, #15
 801337a:	d101      	bne.n	8013380 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801337c:	2300      	movs	r3, #0
 801337e:	e012      	b.n	80133a6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	011b      	lsls	r3, r3, #4
 8013384:	3308      	adds	r3, #8
 8013386:	4a0a      	ldr	r2, [pc, #40]	; (80133b0 <MallocNewMacCommandSlot+0x4c>)
 8013388:	4413      	add	r3, r2
 801338a:	4618      	mov	r0, r3
 801338c:	f7ff ffcd 	bl	801332a <IsSlotFree>
 8013390:	4603      	mov	r3, r0
 8013392:	f083 0301 	eor.w	r3, r3, #1
 8013396:	b2db      	uxtb	r3, r3
 8013398:	2b00      	cmp	r3, #0
 801339a:	d1e9      	bne.n	8013370 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	011b      	lsls	r3, r3, #4
 80133a0:	3308      	adds	r3, #8
 80133a2:	4a03      	ldr	r2, [pc, #12]	; (80133b0 <MallocNewMacCommandSlot+0x4c>)
 80133a4:	4413      	add	r3, r2
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	20003b5c 	.word	0x20003b5c

080133b4 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d101      	bne.n	80133c6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80133c2:	2300      	movs	r3, #0
 80133c4:	e005      	b.n	80133d2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80133c6:	2210      	movs	r2, #16
 80133c8:	2100      	movs	r1, #0
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f005 fd6e 	bl	8018eac <memset1>

    return true;
 80133d0:	2301      	movs	r3, #1
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3708      	adds	r7, #8
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80133da:	b480      	push	{r7}
 80133dc:	b083      	sub	sp, #12
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d101      	bne.n	80133ec <LinkedListInit+0x12>
    {
        return false;
 80133e8:	2300      	movs	r3, #0
 80133ea:	e006      	b.n	80133fa <LinkedListInit+0x20>
    }

    list->First = NULL;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	605a      	str	r2, [r3, #4]

    return true;
 80133f8:	2301      	movs	r3, #1
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	370c      	adds	r7, #12
 80133fe:	46bd      	mov	sp, r7
 8013400:	bc80      	pop	{r7}
 8013402:	4770      	bx	lr

08013404 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013404:	b480      	push	{r7}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d002      	beq.n	801341a <LinkedListAdd+0x16>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d101      	bne.n	801341e <LinkedListAdd+0x1a>
    {
        return false;
 801341a:	2300      	movs	r3, #0
 801341c:	e015      	b.n	801344a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d102      	bne.n	801342c <LinkedListAdd+0x28>
    {
        list->First = element;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d003      	beq.n	801343c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	683a      	ldr	r2, [r7, #0]
 801343a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	2200      	movs	r2, #0
 8013440:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	605a      	str	r2, [r3, #4]

    return true;
 8013448:	2301      	movs	r3, #1
}
 801344a:	4618      	mov	r0, r3
 801344c:	370c      	adds	r7, #12
 801344e:	46bd      	mov	sp, r7
 8013450:	bc80      	pop	{r7}
 8013452:	4770      	bx	lr

08013454 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d002      	beq.n	801346a <LinkedListGetPrevious+0x16>
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801346a:	2300      	movs	r3, #0
 801346c:	e016      	b.n	801349c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	429a      	cmp	r2, r3
 801347a:	d00c      	beq.n	8013496 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801347c:	e002      	b.n	8013484 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d007      	beq.n	801349a <LinkedListGetPrevious+0x46>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	683a      	ldr	r2, [r7, #0]
 8013490:	429a      	cmp	r2, r3
 8013492:	d1f4      	bne.n	801347e <LinkedListGetPrevious+0x2a>
 8013494:	e001      	b.n	801349a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013496:	2300      	movs	r3, #0
 8013498:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801349a:	68fb      	ldr	r3, [r7, #12]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3714      	adds	r7, #20
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bc80      	pop	{r7}
 80134a4:	4770      	bx	lr

080134a6 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <LinkedListRemove+0x16>
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d101      	bne.n	80134c0 <LinkedListRemove+0x1a>
    {
        return false;
 80134bc:	2300      	movs	r3, #0
 80134be:	e020      	b.n	8013502 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80134c0:	6839      	ldr	r1, [r7, #0]
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7ff ffc6 	bl	8013454 <LinkedListGetPrevious>
 80134c8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d103      	bne.n	80134dc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d102      	bne.n	80134ec <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	68fa      	ldr	r2, [r7, #12]
 80134ea:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d003      	beq.n	80134fa <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	2200      	movs	r2, #0
 80134fe:	601a      	str	r2, [r3, #0]

    return true;
 8013500:	2301      	movs	r3, #1
}
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801350a:	b480      	push	{r7}
 801350c:	b083      	sub	sp, #12
 801350e:	af00      	add	r7, sp, #0
 8013510:	4603      	mov	r3, r0
 8013512:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	2b05      	cmp	r3, #5
 8013518:	d004      	beq.n	8013524 <IsSticky+0x1a>
 801351a:	2b05      	cmp	r3, #5
 801351c:	db04      	blt.n	8013528 <IsSticky+0x1e>
 801351e:	3b08      	subs	r3, #8
 8013520:	2b02      	cmp	r3, #2
 8013522:	d801      	bhi.n	8013528 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8013524:	2301      	movs	r3, #1
 8013526:	e000      	b.n	801352a <IsSticky+0x20>
        default:
            return false;
 8013528:	2300      	movs	r3, #0
    }
}
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	bc80      	pop	{r7}
 8013532:	4770      	bx	lr

08013534 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013534:	b580      	push	{r7, lr}
 8013536:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013538:	22fc      	movs	r2, #252	; 0xfc
 801353a:	2100      	movs	r1, #0
 801353c:	4804      	ldr	r0, [pc, #16]	; (8013550 <LoRaMacCommandsInit+0x1c>)
 801353e:	f005 fcb5 	bl	8018eac <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013542:	4803      	ldr	r0, [pc, #12]	; (8013550 <LoRaMacCommandsInit+0x1c>)
 8013544:	f7ff ff49 	bl	80133da <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013548:	2300      	movs	r3, #0
}
 801354a:	4618      	mov	r0, r3
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	20003b5c 	.word	0x20003b5c

08013554 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b086      	sub	sp, #24
 8013558:	af00      	add	r7, sp, #0
 801355a:	4603      	mov	r3, r0
 801355c:	60b9      	str	r1, [r7, #8]
 801355e:	607a      	str	r2, [r7, #4]
 8013560:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d101      	bne.n	801356c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013568:	2301      	movs	r3, #1
 801356a:	e033      	b.n	80135d4 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801356c:	f7ff fefa 	bl	8013364 <MallocNewMacCommandSlot>
 8013570:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013578:	2302      	movs	r3, #2
 801357a:	e02b      	b.n	80135d4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801357c:	6979      	ldr	r1, [r7, #20]
 801357e:	4817      	ldr	r0, [pc, #92]	; (80135dc <LoRaMacCommandsAddCmd+0x88>)
 8013580:	f7ff ff40 	bl	8013404 <LinkedListAdd>
 8013584:	4603      	mov	r3, r0
 8013586:	f083 0301 	eor.w	r3, r3, #1
 801358a:	b2db      	uxtb	r3, r3
 801358c:	2b00      	cmp	r3, #0
 801358e:	d001      	beq.n	8013594 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013590:	2305      	movs	r3, #5
 8013592:	e01f      	b.n	80135d4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	7bfa      	ldrb	r2, [r7, #15]
 8013598:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	3305      	adds	r3, #5
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	b292      	uxth	r2, r2
 80135a8:	68b9      	ldr	r1, [r7, #8]
 80135aa:	4618      	mov	r0, r3
 80135ac:	f005 fc43 	bl	8018e36 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff ffa9 	bl	801350a <IsSticky>
 80135b8:	4603      	mov	r3, r0
 80135ba:	461a      	mov	r2, r3
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80135c0:	4b06      	ldr	r3, [pc, #24]	; (80135dc <LoRaMacCommandsAddCmd+0x88>)
 80135c2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4413      	add	r3, r2
 80135ca:	3301      	adds	r3, #1
 80135cc:	4a03      	ldr	r2, [pc, #12]	; (80135dc <LoRaMacCommandsAddCmd+0x88>)
 80135ce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80135d2:	2300      	movs	r3, #0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3718      	adds	r7, #24
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	20003b5c 	.word	0x20003b5c

080135e0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d101      	bne.n	80135f2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80135ee:	2301      	movs	r3, #1
 80135f0:	e021      	b.n	8013636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	4812      	ldr	r0, [pc, #72]	; (8013640 <LoRaMacCommandsRemoveCmd+0x60>)
 80135f6:	f7ff ff56 	bl	80134a6 <LinkedListRemove>
 80135fa:	4603      	mov	r3, r0
 80135fc:	f083 0301 	eor.w	r3, r3, #1
 8013600:	b2db      	uxtb	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013606:	2303      	movs	r3, #3
 8013608:	e015      	b.n	8013636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801360a:	4b0d      	ldr	r3, [pc, #52]	; (8013640 <LoRaMacCommandsRemoveCmd+0x60>)
 801360c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	3b01      	subs	r3, #1
 8013618:	4a09      	ldr	r2, [pc, #36]	; (8013640 <LoRaMacCommandsRemoveCmd+0x60>)
 801361a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f7ff fec8 	bl	80133b4 <FreeMacCommandSlot>
 8013624:	4603      	mov	r3, r0
 8013626:	f083 0301 	eor.w	r3, r3, #1
 801362a:	b2db      	uxtb	r3, r3
 801362c:	2b00      	cmp	r3, #0
 801362e:	d001      	beq.n	8013634 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013630:	2305      	movs	r3, #5
 8013632:	e000      	b.n	8013636 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	3708      	adds	r7, #8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	20003b5c 	.word	0x20003b5c

08013644 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801364a:	4b0f      	ldr	r3, [pc, #60]	; (8013688 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013650:	e012      	b.n	8013678 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	7b1b      	ldrb	r3, [r3, #12]
 8013656:	f083 0301 	eor.w	r3, r3, #1
 801365a:	b2db      	uxtb	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d008      	beq.n	8013672 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f7ff ffba 	bl	80135e0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	607b      	str	r3, [r7, #4]
 8013670:	e002      	b.n	8013678 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1e9      	bne.n	8013652 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801367e:	2300      	movs	r3, #0
}
 8013680:	4618      	mov	r0, r3
 8013682:	3708      	adds	r7, #8
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	20003b5c 	.word	0x20003b5c

0801368c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013692:	4b0e      	ldr	r3, [pc, #56]	; (80136cc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013698:	e00f      	b.n	80136ba <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	791b      	ldrb	r3, [r3, #4]
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7ff ff30 	bl	801350a <IsSticky>
 80136aa:	4603      	mov	r3, r0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d002      	beq.n	80136b6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff ff95 	bl	80135e0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d1ec      	bne.n	801369a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3708      	adds	r7, #8
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	20003b5c 	.word	0x20003b5c

080136d0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80136d0:	b480      	push	{r7}
 80136d2:	b083      	sub	sp, #12
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d101      	bne.n	80136e2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80136de:	2301      	movs	r3, #1
 80136e0:	e005      	b.n	80136ee <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80136e2:	4b05      	ldr	r3, [pc, #20]	; (80136f8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80136e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	370c      	adds	r7, #12
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bc80      	pop	{r7}
 80136f6:	4770      	bx	lr
 80136f8:	20003b5c 	.word	0x20003b5c

080136fc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013708:	4b25      	ldr	r3, [pc, #148]	; (80137a0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <LoRaMacCommandsSerializeCmds+0x22>
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d126      	bne.n	801376c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801371e:	2301      	movs	r3, #1
 8013720:	e039      	b.n	8013796 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013722:	7efb      	ldrb	r3, [r7, #27]
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	1ad2      	subs	r2, r2, r3
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	689b      	ldr	r3, [r3, #8]
 801372c:	3301      	adds	r3, #1
 801372e:	429a      	cmp	r2, r3
 8013730:	d320      	bcc.n	8013774 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013732:	7efb      	ldrb	r3, [r7, #27]
 8013734:	1c5a      	adds	r2, r3, #1
 8013736:	76fa      	strb	r2, [r7, #27]
 8013738:	461a      	mov	r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	4413      	add	r3, r2
 801373e:	69fa      	ldr	r2, [r7, #28]
 8013740:	7912      	ldrb	r2, [r2, #4]
 8013742:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013744:	7efb      	ldrb	r3, [r7, #27]
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	18d0      	adds	r0, r2, r3
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	1d59      	adds	r1, r3, #5
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	689b      	ldr	r3, [r3, #8]
 8013752:	b29b      	uxth	r3, r3
 8013754:	461a      	mov	r2, r3
 8013756:	f005 fb6e 	bl	8018e36 <memcpy1>
            itr += curElement->PayloadSize;
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	689b      	ldr	r3, [r3, #8]
 801375e:	b2da      	uxtb	r2, r3
 8013760:	7efb      	ldrb	r3, [r7, #27]
 8013762:	4413      	add	r3, r2
 8013764:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1d7      	bne.n	8013722 <LoRaMacCommandsSerializeCmds+0x26>
 8013772:	e009      	b.n	8013788 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013774:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013776:	e007      	b.n	8013788 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801377e:	69f8      	ldr	r0, [r7, #28]
 8013780:	f7ff ff2e 	bl	80135e0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d1f4      	bne.n	8013778 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801378e:	68b8      	ldr	r0, [r7, #8]
 8013790:	f7ff ff9e 	bl	80136d0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013794:	2300      	movs	r3, #0
}
 8013796:	4618      	mov	r0, r3
 8013798:	3720      	adds	r7, #32
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	20003b5c 	.word	0x20003b5c

080137a4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80137a4:	b480      	push	{r7}
 80137a6:	b085      	sub	sp, #20
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137b2:	2301      	movs	r3, #1
 80137b4:	e016      	b.n	80137e4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80137b6:	4b0e      	ldr	r3, [pc, #56]	; (80137f0 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2200      	movs	r2, #0
 80137c0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80137c2:	e00b      	b.n	80137dc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	7b1b      	ldrb	r3, [r3, #12]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d004      	beq.n	80137d6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2201      	movs	r2, #1
 80137d0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80137d2:	2300      	movs	r3, #0
 80137d4:	e006      	b.n	80137e4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1f0      	bne.n	80137c4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80137e2:	2300      	movs	r3, #0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3714      	adds	r7, #20
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bc80      	pop	{r7}
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop
 80137f0:	20003b5c 	.word	0x20003b5c

080137f4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80137f4:	b480      	push	{r7}
 80137f6:	b085      	sub	sp, #20
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	4603      	mov	r3, r0
 80137fc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80137fe:	2300      	movs	r3, #0
 8013800:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013802:	79fb      	ldrb	r3, [r7, #7]
 8013804:	3b02      	subs	r3, #2
 8013806:	2b11      	cmp	r3, #17
 8013808:	d850      	bhi.n	80138ac <LoRaMacCommandsGetCmdSize+0xb8>
 801380a:	a201      	add	r2, pc, #4	; (adr r2, 8013810 <LoRaMacCommandsGetCmdSize+0x1c>)
 801380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013810:	08013859 	.word	0x08013859
 8013814:	0801385f 	.word	0x0801385f
 8013818:	08013865 	.word	0x08013865
 801381c:	0801386b 	.word	0x0801386b
 8013820:	08013871 	.word	0x08013871
 8013824:	08013877 	.word	0x08013877
 8013828:	0801387d 	.word	0x0801387d
 801382c:	08013883 	.word	0x08013883
 8013830:	08013889 	.word	0x08013889
 8013834:	080138ad 	.word	0x080138ad
 8013838:	080138ad 	.word	0x080138ad
 801383c:	0801388f 	.word	0x0801388f
 8013840:	080138ad 	.word	0x080138ad
 8013844:	080138ad 	.word	0x080138ad
 8013848:	08013895 	.word	0x08013895
 801384c:	0801389b 	.word	0x0801389b
 8013850:	080138a1 	.word	0x080138a1
 8013854:	080138a7 	.word	0x080138a7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013858:	2303      	movs	r3, #3
 801385a:	73fb      	strb	r3, [r7, #15]
            break;
 801385c:	e027      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801385e:	2305      	movs	r3, #5
 8013860:	73fb      	strb	r3, [r7, #15]
            break;
 8013862:	e024      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013864:	2302      	movs	r3, #2
 8013866:	73fb      	strb	r3, [r7, #15]
            break;
 8013868:	e021      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801386a:	2305      	movs	r3, #5
 801386c:	73fb      	strb	r3, [r7, #15]
            break;
 801386e:	e01e      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013870:	2301      	movs	r3, #1
 8013872:	73fb      	strb	r3, [r7, #15]
            break;
 8013874:	e01b      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013876:	2306      	movs	r3, #6
 8013878:	73fb      	strb	r3, [r7, #15]
            break;
 801387a:	e018      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801387c:	2302      	movs	r3, #2
 801387e:	73fb      	strb	r3, [r7, #15]
            break;
 8013880:	e015      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013882:	2302      	movs	r3, #2
 8013884:	73fb      	strb	r3, [r7, #15]
            break;
 8013886:	e012      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013888:	2305      	movs	r3, #5
 801388a:	73fb      	strb	r3, [r7, #15]
            break;
 801388c:	e00f      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801388e:	2306      	movs	r3, #6
 8013890:	73fb      	strb	r3, [r7, #15]
            break;
 8013892:	e00c      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013894:	2301      	movs	r3, #1
 8013896:	73fb      	strb	r3, [r7, #15]
            break;
 8013898:	e009      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801389a:	2305      	movs	r3, #5
 801389c:	73fb      	strb	r3, [r7, #15]
            break;
 801389e:	e006      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80138a0:	2304      	movs	r3, #4
 80138a2:	73fb      	strb	r3, [r7, #15]
            break;
 80138a4:	e003      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80138a6:	2304      	movs	r3, #4
 80138a8:	73fb      	strb	r3, [r7, #15]
            break;
 80138aa:	e000      	b.n	80138ae <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80138ac:	bf00      	nop
        }
    }
    return cidSize;
 80138ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3714      	adds	r7, #20
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bc80      	pop	{r7}
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop

080138bc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4a07      	ldr	r2, [pc, #28]	; (80138e4 <IncreaseBufferPointer+0x28>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d102      	bne.n	80138d2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80138cc:	4b06      	ldr	r3, [pc, #24]	; (80138e8 <IncreaseBufferPointer+0x2c>)
 80138ce:	607b      	str	r3, [r7, #4]
 80138d0:	e002      	b.n	80138d8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	3304      	adds	r3, #4
 80138d6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80138d8:	687b      	ldr	r3, [r7, #4]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	370c      	adds	r7, #12
 80138de:	46bd      	mov	sp, r7
 80138e0:	bc80      	pop	{r7}
 80138e2:	4770      	bx	lr
 80138e4:	20003c74 	.word	0x20003c74
 80138e8:	20003c64 	.word	0x20003c64

080138ec <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	4603      	mov	r3, r0
 80138f4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80138f6:	79fb      	ldrb	r3, [r7, #7]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d101      	bne.n	8013900 <IsListEmpty+0x14>
    {
        return true;
 80138fc:	2301      	movs	r3, #1
 80138fe:	e000      	b.n	8013902 <IsListEmpty+0x16>
    }
    return false;
 8013900:	2300      	movs	r3, #0
}
 8013902:	4618      	mov	r0, r3
 8013904:	370c      	adds	r7, #12
 8013906:	46bd      	mov	sp, r7
 8013908:	bc80      	pop	{r7}
 801390a:	4770      	bx	lr

0801390c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	4603      	mov	r3, r0
 8013914:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013916:	79fb      	ldrb	r3, [r7, #7]
 8013918:	2b04      	cmp	r3, #4
 801391a:	d901      	bls.n	8013920 <IsListFull+0x14>
    {
        return true;
 801391c:	2301      	movs	r3, #1
 801391e:	e000      	b.n	8013922 <IsListFull+0x16>
    }
    return false;
 8013920:	2300      	movs	r3, #0
}
 8013922:	4618      	mov	r0, r3
 8013924:	370c      	adds	r7, #12
 8013926:	46bd      	mov	sp, r7
 8013928:	bc80      	pop	{r7}
 801392a:	4770      	bx	lr

0801392c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b086      	sub	sp, #24
 8013930:	af00      	add	r7, sp, #0
 8013932:	4603      	mov	r3, r0
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
 8013938:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801393e:	4b13      	ldr	r3, [pc, #76]	; (801398c <GetElement+0x60>)
 8013940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013944:	4618      	mov	r0, r3
 8013946:	f7ff ffd1 	bl	80138ec <IsListEmpty>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d001      	beq.n	8013954 <GetElement+0x28>
    {
        return NULL;
 8013950:	2300      	movs	r3, #0
 8013952:	e017      	b.n	8013984 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013954:	2300      	movs	r3, #0
 8013956:	74fb      	strb	r3, [r7, #19]
 8013958:	e00d      	b.n	8013976 <GetElement+0x4a>
    {
        if( element->Request == request )
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	7bfa      	ldrb	r2, [r7, #15]
 8013960:	429a      	cmp	r2, r3
 8013962:	d101      	bne.n	8013968 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	e00d      	b.n	8013984 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013968:	6978      	ldr	r0, [r7, #20]
 801396a:	f7ff ffa7 	bl	80138bc <IncreaseBufferPointer>
 801396e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013970:	7cfb      	ldrb	r3, [r7, #19]
 8013972:	3301      	adds	r3, #1
 8013974:	74fb      	strb	r3, [r7, #19]
 8013976:	4b05      	ldr	r3, [pc, #20]	; (801398c <GetElement+0x60>)
 8013978:	f893 3020 	ldrb.w	r3, [r3, #32]
 801397c:	7cfa      	ldrb	r2, [r7, #19]
 801397e:	429a      	cmp	r2, r3
 8013980:	d3eb      	bcc.n	801395a <GetElement+0x2e>
    }

    return NULL;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	20003c58 	.word	0x20003c58

08013990 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013998:	4a0c      	ldr	r2, [pc, #48]	; (80139cc <LoRaMacConfirmQueueInit+0x3c>)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801399e:	4b0b      	ldr	r3, [pc, #44]	; (80139cc <LoRaMacConfirmQueueInit+0x3c>)
 80139a0:	2200      	movs	r2, #0
 80139a2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80139a6:	4b09      	ldr	r3, [pc, #36]	; (80139cc <LoRaMacConfirmQueueInit+0x3c>)
 80139a8:	4a09      	ldr	r2, [pc, #36]	; (80139d0 <LoRaMacConfirmQueueInit+0x40>)
 80139aa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80139ac:	4b07      	ldr	r3, [pc, #28]	; (80139cc <LoRaMacConfirmQueueInit+0x3c>)
 80139ae:	4a08      	ldr	r2, [pc, #32]	; (80139d0 <LoRaMacConfirmQueueInit+0x40>)
 80139b0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80139b2:	2214      	movs	r2, #20
 80139b4:	21ff      	movs	r1, #255	; 0xff
 80139b6:	4806      	ldr	r0, [pc, #24]	; (80139d0 <LoRaMacConfirmQueueInit+0x40>)
 80139b8:	f005 fa78 	bl	8018eac <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80139bc:	4b03      	ldr	r3, [pc, #12]	; (80139cc <LoRaMacConfirmQueueInit+0x3c>)
 80139be:	2201      	movs	r2, #1
 80139c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80139c4:	bf00      	nop
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	20003c58 	.word	0x20003c58
 80139d0:	20003c64 	.word	0x20003c64

080139d4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80139dc:	4b19      	ldr	r3, [pc, #100]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 80139de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7ff ff92 	bl	801390c <IsListFull>
 80139e8:	4603      	mov	r3, r0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d001      	beq.n	80139f2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80139ee:	2300      	movs	r3, #0
 80139f0:	e023      	b.n	8013a3a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80139f2:	4b14      	ldr	r3, [pc, #80]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 80139f4:	689b      	ldr	r3, [r3, #8]
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	7812      	ldrb	r2, [r2, #0]
 80139fa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80139fc:	4b11      	ldr	r3, [pc, #68]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	7852      	ldrb	r2, [r2, #1]
 8013a04:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013a06:	4b0f      	ldr	r3, [pc, #60]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	78d2      	ldrb	r2, [r2, #3]
 8013a0e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013a10:	4b0c      	ldr	r3, [pc, #48]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	2200      	movs	r2, #0
 8013a16:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013a18:	4b0a      	ldr	r3, [pc, #40]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	b2da      	uxtb	r2, r3
 8013a22:	4b08      	ldr	r3, [pc, #32]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a24:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013a28:	4b06      	ldr	r3, [pc, #24]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a2a:	689b      	ldr	r3, [r3, #8]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7ff ff45 	bl	80138bc <IncreaseBufferPointer>
 8013a32:	4603      	mov	r3, r0
 8013a34:	4a03      	ldr	r2, [pc, #12]	; (8013a44 <LoRaMacConfirmQueueAdd+0x70>)
 8013a36:	6093      	str	r3, [r2, #8]

    return true;
 8013a38:	2301      	movs	r3, #1
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	20003c58 	.word	0x20003c58

08013a48 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013a4c:	4b0e      	ldr	r3, [pc, #56]	; (8013a88 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff ff4a 	bl	80138ec <IsListEmpty>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	e010      	b.n	8013a84 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013a62:	4b09      	ldr	r3, [pc, #36]	; (8013a88 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	4b06      	ldr	r3, [pc, #24]	; (8013a88 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013a6e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013a72:	4b05      	ldr	r3, [pc, #20]	; (8013a88 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7ff ff20 	bl	80138bc <IncreaseBufferPointer>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	4a02      	ldr	r2, [pc, #8]	; (8013a88 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013a80:	6053      	str	r3, [r2, #4]

    return true;
 8013a82:	2301      	movs	r3, #1
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	20003c58 	.word	0x20003c58

08013a8c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	4603      	mov	r3, r0
 8013a94:	460a      	mov	r2, r1
 8013a96:	71fb      	strb	r3, [r7, #7]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013aa0:	4b10      	ldr	r3, [pc, #64]	; (8013ae4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7ff ff20 	bl	80138ec <IsListEmpty>
 8013aac:	4603      	mov	r3, r0
 8013aae:	f083 0301 	eor.w	r3, r3, #1
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d011      	beq.n	8013adc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013aba:	6859      	ldr	r1, [r3, #4]
 8013abc:	4b09      	ldr	r3, [pc, #36]	; (8013ae4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013abe:	689a      	ldr	r2, [r3, #8]
 8013ac0:	79bb      	ldrb	r3, [r7, #6]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff ff32 	bl	801392c <GetElement>
 8013ac8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d005      	beq.n	8013adc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	79fa      	ldrb	r2, [r7, #7]
 8013ad4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013adc:	bf00      	nop
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	20003c58 	.word	0x20003c58

08013ae8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	4603      	mov	r3, r0
 8013af0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013af2:	2300      	movs	r3, #0
 8013af4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013af6:	4b10      	ldr	r3, [pc, #64]	; (8013b38 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7ff fef5 	bl	80138ec <IsListEmpty>
 8013b02:	4603      	mov	r3, r0
 8013b04:	f083 0301 	eor.w	r3, r3, #1
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d00e      	beq.n	8013b2c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013b0e:	4b0a      	ldr	r3, [pc, #40]	; (8013b38 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013b10:	6859      	ldr	r1, [r3, #4]
 8013b12:	4b09      	ldr	r3, [pc, #36]	; (8013b38 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013b14:	689a      	ldr	r2, [r3, #8]
 8013b16:	79fb      	ldrb	r3, [r7, #7]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7ff ff07 	bl	801392c <GetElement>
 8013b1e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d002      	beq.n	8013b2c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	785b      	ldrb	r3, [r3, #1]
 8013b2a:	e000      	b.n	8013b2e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013b2c:	2301      	movs	r3, #1
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3710      	adds	r7, #16
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	20003c58 	.word	0x20003c58

08013b3c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	4603      	mov	r3, r0
 8013b44:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013b46:	4b16      	ldr	r3, [pc, #88]	; (8013ba0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013b4c:	4a14      	ldr	r2, [pc, #80]	; (8013ba0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013b4e:	79fb      	ldrb	r3, [r7, #7]
 8013b50:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013b54:	4b12      	ldr	r3, [pc, #72]	; (8013ba0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff fec6 	bl	80138ec <IsListEmpty>
 8013b60:	4603      	mov	r3, r0
 8013b62:	f083 0301 	eor.w	r3, r3, #1
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d015      	beq.n	8013b98 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	79fa      	ldrb	r2, [r7, #7]
 8013b70:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	78db      	ldrb	r3, [r3, #3]
 8013b76:	f083 0301 	eor.w	r3, r3, #1
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d002      	beq.n	8013b86 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2201      	movs	r2, #1
 8013b84:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f7ff fe98 	bl	80138bc <IncreaseBufferPointer>
 8013b8c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013b8e:	4b04      	ldr	r3, [pc, #16]	; (8013ba0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d1e9      	bne.n	8013b6c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013b98:	bf00      	nop
 8013b9a:	3710      	adds	r7, #16
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	20003c58 	.word	0x20003c58

08013ba4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	4603      	mov	r3, r0
 8013bac:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013bae:	4b09      	ldr	r3, [pc, #36]	; (8013bd4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013bb0:	6859      	ldr	r1, [r3, #4]
 8013bb2:	4b08      	ldr	r3, [pc, #32]	; (8013bd4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013bb4:	689a      	ldr	r2, [r3, #8]
 8013bb6:	79fb      	ldrb	r3, [r7, #7]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7ff feb7 	bl	801392c <GetElement>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d001      	beq.n	8013bc8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e000      	b.n	8013bca <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	20003c58 	.word	0x20003c58

08013bd8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013be0:	4b22      	ldr	r3, [pc, #136]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013be6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013be8:	2300      	movs	r3, #0
 8013bea:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013bec:	2300      	movs	r3, #0
 8013bee:	73fb      	strb	r3, [r7, #15]
 8013bf0:	e032      	b.n	8013c58 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013bf2:	4b1e      	ldr	r3, [pc, #120]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	781a      	ldrb	r2, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013bfc:	4b1b      	ldr	r3, [pc, #108]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	785a      	ldrb	r2, [r3, #1]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013c06:	4b19      	ldr	r3, [pc, #100]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	789b      	ldrb	r3, [r3, #2]
 8013c0c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013c0e:	7b7b      	ldrb	r3, [r7, #13]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d005      	beq.n	8013c20 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013c14:	4b15      	ldr	r3, [pc, #84]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	4798      	blx	r3
 8013c1e:	e00b      	b.n	8013c38 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013c20:	4b12      	ldr	r3, [pc, #72]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013c28:	4b10      	ldr	r3, [pc, #64]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	785b      	ldrb	r3, [r3, #1]
 8013c2e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013c30:	4b0e      	ldr	r3, [pc, #56]	; (8013c6c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	78db      	ldrb	r3, [r3, #3]
 8013c36:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013c38:	f7ff ff06 	bl	8013a48 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013c3c:	7b7b      	ldrb	r3, [r7, #13]
 8013c3e:	f083 0301 	eor.w	r3, r3, #1
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d004      	beq.n	8013c52 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013c48:	f107 0308 	add.w	r3, r7, #8
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7ff fec1 	bl	80139d4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013c52:	7bfb      	ldrb	r3, [r7, #15]
 8013c54:	3301      	adds	r3, #1
 8013c56:	73fb      	strb	r3, [r7, #15]
 8013c58:	7bfa      	ldrb	r2, [r7, #15]
 8013c5a:	7bbb      	ldrb	r3, [r7, #14]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d3c8      	bcc.n	8013bf2 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013c60:	bf00      	nop
 8013c62:	bf00      	nop
 8013c64:	3710      	adds	r7, #16
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	20003c58 	.word	0x20003c58

08013c70 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013c70:	b480      	push	{r7}
 8013c72:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013c74:	4b03      	ldr	r3, [pc, #12]	; (8013c84 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013c76:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bc80      	pop	{r7}
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	20003c58 	.word	0x20003c58

08013c88 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c8c:	4b06      	ldr	r3, [pc, #24]	; (8013ca8 <LoRaMacConfirmQueueIsFull+0x20>)
 8013c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff fe3a 	bl	801390c <IsListFull>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	e000      	b.n	8013ca4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013ca2:	2300      	movs	r3, #0
    }
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	20003c58 	.word	0x20003c58

08013cac <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b08e      	sub	sp, #56	; 0x38
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	607b      	str	r3, [r7, #4]
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	817b      	strh	r3, [r7, #10]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cc4:	230a      	movs	r3, #10
 8013cc6:	e086      	b.n	8013dd6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	623b      	str	r3, [r7, #32]
 8013cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013cda:	2200      	movs	r2, #0
 8013cdc:	601a      	str	r2, [r3, #0]
 8013cde:	605a      	str	r2, [r3, #4]
 8013ce0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	613b      	str	r3, [r7, #16]
 8013ce6:	f107 0314 	add.w	r3, r7, #20
 8013cea:	2200      	movs	r2, #0
 8013cec:	601a      	str	r2, [r3, #0]
 8013cee:	605a      	str	r2, [r3, #4]
 8013cf0:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013cf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013cfa:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	0a1b      	lsrs	r3, r3, #8
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	0c1b      	lsrs	r3, r3, #16
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	0e1b      	lsrs	r3, r3, #24
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d22:	0a1b      	lsrs	r3, r3, #8
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d2a:	0c1b      	lsrs	r3, r3, #16
 8013d2c:	b2db      	uxtb	r3, r3
 8013d2e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d32:	0e1b      	lsrs	r3, r3, #24
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013d38:	e048      	b.n	8013dcc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013d3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013d40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013d42:	3301      	adds	r3, #1
 8013d44:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013d46:	f107 0320 	add.w	r3, r7, #32
 8013d4a:	7a7a      	ldrb	r2, [r7, #9]
 8013d4c:	f107 0010 	add.w	r0, r7, #16
 8013d50:	2110      	movs	r1, #16
 8013d52:	f7f9 f9f0 	bl	800d136 <SecureElementAesEncrypt>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013d5c:	230f      	movs	r3, #15
 8013d5e:	e03a      	b.n	8013dd6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013d60:	2300      	movs	r3, #0
 8013d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013d66:	e01e      	b.n	8013da6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013d68:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d70:	4413      	add	r3, r2
 8013d72:	461a      	mov	r2, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	4413      	add	r3, r2
 8013d78:	7819      	ldrb	r1, [r3, #0]
 8013d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d7e:	3338      	adds	r3, #56	; 0x38
 8013d80:	443b      	add	r3, r7
 8013d82:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013d86:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d8e:	4403      	add	r3, r0
 8013d90:	4618      	mov	r0, r3
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	4403      	add	r3, r0
 8013d96:	404a      	eors	r2, r1
 8013d98:	b2d2      	uxtb	r2, r2
 8013d9a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013da0:	3301      	adds	r3, #1
 8013da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013daa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013dae:	2a10      	cmp	r2, #16
 8013db0:	bfa8      	it	ge
 8013db2:	2210      	movge	r2, #16
 8013db4:	b212      	sxth	r2, r2
 8013db6:	4293      	cmp	r3, r2
 8013db8:	dbd6      	blt.n	8013d68 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013dba:	897b      	ldrh	r3, [r7, #10]
 8013dbc:	3b10      	subs	r3, #16
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013dc6:	3310      	adds	r3, #16
 8013dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013dcc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	dcb2      	bgt.n	8013d3a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3738      	adds	r7, #56	; 0x38
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013dde:	b490      	push	{r4, r7}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	4604      	mov	r4, r0
 8013de6:	4608      	mov	r0, r1
 8013de8:	4611      	mov	r1, r2
 8013dea:	461a      	mov	r2, r3
 8013dec:	4623      	mov	r3, r4
 8013dee:	80fb      	strh	r3, [r7, #6]
 8013df0:	4603      	mov	r3, r0
 8013df2:	717b      	strb	r3, [r7, #5]
 8013df4:	460b      	mov	r3, r1
 8013df6:	713b      	strb	r3, [r7, #4]
 8013df8:	4613      	mov	r3, r2
 8013dfa:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d101      	bne.n	8013e06 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e02:	230a      	movs	r3, #10
 8013e04:	e04e      	b.n	8013ea4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	2249      	movs	r2, #73	; 0x49
 8013e0a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013e0c:	69bb      	ldr	r3, [r7, #24]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	2200      	movs	r2, #0
 8013e12:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	3302      	adds	r3, #2
 8013e18:	2200      	movs	r2, #0
 8013e1a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	3303      	adds	r3, #3
 8013e20:	2200      	movs	r2, #0
 8013e22:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013e24:	69bb      	ldr	r3, [r7, #24]
 8013e26:	3304      	adds	r3, #4
 8013e28:	2200      	movs	r2, #0
 8013e2a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	3305      	adds	r3, #5
 8013e30:	78fa      	ldrb	r2, [r7, #3]
 8013e32:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	3306      	adds	r3, #6
 8013e38:	693a      	ldr	r2, [r7, #16]
 8013e3a:	b2d2      	uxtb	r2, r2
 8013e3c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	0a1a      	lsrs	r2, r3, #8
 8013e42:	69bb      	ldr	r3, [r7, #24]
 8013e44:	3307      	adds	r3, #7
 8013e46:	b2d2      	uxtb	r2, r2
 8013e48:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	0c1a      	lsrs	r2, r3, #16
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	3308      	adds	r3, #8
 8013e52:	b2d2      	uxtb	r2, r2
 8013e54:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	0e1a      	lsrs	r2, r3, #24
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	3309      	adds	r3, #9
 8013e5e:	b2d2      	uxtb	r2, r2
 8013e60:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	330a      	adds	r3, #10
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	b2d2      	uxtb	r2, r2
 8013e6a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	0a1a      	lsrs	r2, r3, #8
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	330b      	adds	r3, #11
 8013e74:	b2d2      	uxtb	r2, r2
 8013e76:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	0c1a      	lsrs	r2, r3, #16
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	330c      	adds	r3, #12
 8013e80:	b2d2      	uxtb	r2, r2
 8013e82:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	0e1a      	lsrs	r2, r3, #24
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	330d      	adds	r3, #13
 8013e8c:	b2d2      	uxtb	r2, r2
 8013e8e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	330e      	adds	r3, #14
 8013e94:	2200      	movs	r2, #0
 8013e96:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	330f      	adds	r3, #15
 8013e9c:	88fa      	ldrh	r2, [r7, #6]
 8013e9e:	b2d2      	uxtb	r2, r2
 8013ea0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013ea2:	2300      	movs	r3, #0
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bc90      	pop	{r4, r7}
 8013eac:	4770      	bx	lr

08013eae <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013eae:	b590      	push	{r4, r7, lr}
 8013eb0:	b08b      	sub	sp, #44	; 0x2c
 8013eb2:	af04      	add	r7, sp, #16
 8013eb4:	6078      	str	r0, [r7, #4]
 8013eb6:	4608      	mov	r0, r1
 8013eb8:	4611      	mov	r1, r2
 8013eba:	461a      	mov	r2, r3
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	807b      	strh	r3, [r7, #2]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	707b      	strb	r3, [r7, #1]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d002      	beq.n	8013ed4 <ComputeCmacB0+0x26>
 8013ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d101      	bne.n	8013ed8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ed4:	230a      	movs	r3, #10
 8013ed6:	e024      	b.n	8013f22 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013ed8:	887b      	ldrh	r3, [r7, #2]
 8013eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ede:	d901      	bls.n	8013ee4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013ee0:	230e      	movs	r3, #14
 8013ee2:	e01e      	b.n	8013f22 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013ee4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8013ee8:	783a      	ldrb	r2, [r7, #0]
 8013eea:	7879      	ldrb	r1, [r7, #1]
 8013eec:	8878      	ldrh	r0, [r7, #2]
 8013eee:	f107 0308 	add.w	r3, r7, #8
 8013ef2:	9302      	str	r3, [sp, #8]
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef6:	9301      	str	r3, [sp, #4]
 8013ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	4623      	mov	r3, r4
 8013efe:	f7ff ff6e 	bl	8013dde <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013f02:	7879      	ldrb	r1, [r7, #1]
 8013f04:	887a      	ldrh	r2, [r7, #2]
 8013f06:	f107 0008 	add.w	r0, r7, #8
 8013f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f0c:	9300      	str	r3, [sp, #0]
 8013f0e:	460b      	mov	r3, r1
 8013f10:	6879      	ldr	r1, [r7, #4]
 8013f12:	f7f9 f8c3 	bl	800d09c <SecureElementComputeAesCmac>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d001      	beq.n	8013f20 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f1c:	230f      	movs	r3, #15
 8013f1e:	e000      	b.n	8013f22 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	371c      	adds	r7, #28
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd90      	pop	{r4, r7, pc}

08013f2a <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013f2a:	b590      	push	{r4, r7, lr}
 8013f2c:	b0cd      	sub	sp, #308	; 0x134
 8013f2e:	af04      	add	r7, sp, #16
 8013f30:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8013f34:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8013f38:	6020      	str	r0, [r4, #0]
 8013f3a:	460c      	mov	r4, r1
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	4619      	mov	r1, r3
 8013f40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f44:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013f48:	4622      	mov	r2, r4
 8013f4a:	801a      	strh	r2, [r3, #0]
 8013f4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f50:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013f54:	4602      	mov	r2, r0
 8013f56:	701a      	strb	r2, [r3, #0]
 8013f58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013f60:	460a      	mov	r2, r1
 8013f62:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013f64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f72:	230a      	movs	r3, #10
 8013f74:	e063      	b.n	801403e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013f76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f7a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013f7e:	881b      	ldrh	r3, [r3, #0]
 8013f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f84:	d901      	bls.n	8013f8a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013f86:	230e      	movs	r3, #14
 8013f88:	e059      	b.n	801403e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013f8a:	f107 030c 	add.w	r3, r7, #12
 8013f8e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013f92:	2100      	movs	r1, #0
 8013f94:	4618      	mov	r0, r3
 8013f96:	f004 ff89 	bl	8018eac <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013f9a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8013f9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fa2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013fa6:	781a      	ldrb	r2, [r3, #0]
 8013fa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fac:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013fb0:	7819      	ldrb	r1, [r3, #0]
 8013fb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013fb6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013fba:	8818      	ldrh	r0, [r3, #0]
 8013fbc:	f107 030c 	add.w	r3, r7, #12
 8013fc0:	9302      	str	r3, [sp, #8]
 8013fc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013fcc:	9300      	str	r3, [sp, #0]
 8013fce:	4623      	mov	r3, r4
 8013fd0:	f7ff ff05 	bl	8013dde <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013fd4:	f107 030c 	add.w	r3, r7, #12
 8013fd8:	3310      	adds	r3, #16
 8013fda:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8013fde:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8013fe2:	8812      	ldrh	r2, [r2, #0]
 8013fe4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8013fe8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8013fec:	6809      	ldr	r1, [r1, #0]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f004 ff21 	bl	8018e36 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013ff4:	2306      	movs	r3, #6
 8013ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013ffa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013ffe:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014002:	881b      	ldrh	r3, [r3, #0]
 8014004:	3310      	adds	r3, #16
 8014006:	b299      	uxth	r1, r3
 8014008:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801400c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	f107 000c 	add.w	r0, r7, #12
 8014016:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801401a:	f7f9 f85d 	bl	800d0d8 <SecureElementVerifyAesCmac>
 801401e:	4603      	mov	r3, r0
 8014020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014024:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014028:	2b00      	cmp	r3, #0
 801402a:	d101      	bne.n	8014030 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801402c:	2300      	movs	r3, #0
 801402e:	e006      	b.n	801403e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014034:	2b01      	cmp	r3, #1
 8014036:	d101      	bne.n	801403c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801403c:	230f      	movs	r3, #15
}
 801403e:	4618      	mov	r0, r3
 8014040:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014044:	46bd      	mov	sp, r7
 8014046:	bd90      	pop	{r4, r7, pc}

08014048 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014048:	b480      	push	{r7}
 801404a:	b085      	sub	sp, #20
 801404c:	af00      	add	r7, sp, #0
 801404e:	4603      	mov	r3, r0
 8014050:	6039      	str	r1, [r7, #0]
 8014052:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014054:	2300      	movs	r3, #0
 8014056:	73fb      	strb	r3, [r7, #15]
 8014058:	e011      	b.n	801407e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801405a:	7bfb      	ldrb	r3, [r7, #15]
 801405c:	4a0c      	ldr	r2, [pc, #48]	; (8014090 <GetKeyAddrItem+0x48>)
 801405e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014062:	79fa      	ldrb	r2, [r7, #7]
 8014064:	429a      	cmp	r2, r3
 8014066:	d107      	bne.n	8014078 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014068:	7bfb      	ldrb	r3, [r7, #15]
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	4a08      	ldr	r2, [pc, #32]	; (8014090 <GetKeyAddrItem+0x48>)
 801406e:	441a      	add	r2, r3
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014074:	2300      	movs	r3, #0
 8014076:	e006      	b.n	8014086 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014078:	7bfb      	ldrb	r3, [r7, #15]
 801407a:	3301      	adds	r3, #1
 801407c:	73fb      	strb	r3, [r7, #15]
 801407e:	7bfb      	ldrb	r3, [r7, #15]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d9ea      	bls.n	801405a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014084:	230c      	movs	r3, #12
}
 8014086:	4618      	mov	r0, r3
 8014088:	3714      	adds	r7, #20
 801408a:	46bd      	mov	sp, r7
 801408c:	bc80      	pop	{r7}
 801408e:	4770      	bx	lr
 8014090:	200000f8 	.word	0x200000f8

08014094 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b088      	sub	sp, #32
 8014098:	af00      	add	r7, sp, #0
 801409a:	60b9      	str	r1, [r7, #8]
 801409c:	607a      	str	r2, [r7, #4]
 801409e:	461a      	mov	r2, r3
 80140a0:	4603      	mov	r3, r0
 80140a2:	73fb      	strb	r3, [r7, #15]
 80140a4:	4613      	mov	r3, r2
 80140a6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80140a8:	2300      	movs	r3, #0
 80140aa:	613b      	str	r3, [r7, #16]
 80140ac:	f107 0314 	add.w	r3, r7, #20
 80140b0:	2200      	movs	r2, #0
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	605a      	str	r2, [r3, #4]
 80140b6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80140b8:	7bfb      	ldrb	r3, [r7, #15]
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d002      	beq.n	80140c4 <DeriveSessionKey10x+0x30>
 80140be:	2b03      	cmp	r3, #3
 80140c0:	d003      	beq.n	80140ca <DeriveSessionKey10x+0x36>
 80140c2:	e005      	b.n	80140d0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80140c4:	2301      	movs	r3, #1
 80140c6:	743b      	strb	r3, [r7, #16]
            break;
 80140c8:	e004      	b.n	80140d4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80140ca:	2302      	movs	r3, #2
 80140cc:	743b      	strb	r3, [r7, #16]
            break;
 80140ce:	e001      	b.n	80140d4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80140d0:	230b      	movs	r3, #11
 80140d2:	e02a      	b.n	801412a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	0a1b      	lsrs	r3, r3, #8
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	0c1b      	lsrs	r3, r3, #16
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	0a1b      	lsrs	r3, r3, #8
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	0c1b      	lsrs	r3, r3, #16
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014100:	89bb      	ldrh	r3, [r7, #12]
 8014102:	b2db      	uxtb	r3, r3
 8014104:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014106:	89bb      	ldrh	r3, [r7, #12]
 8014108:	0a1b      	lsrs	r3, r3, #8
 801410a:	b29b      	uxth	r3, r3
 801410c:	b2db      	uxtb	r3, r3
 801410e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014110:	7bfa      	ldrb	r2, [r7, #15]
 8014112:	f107 0310 	add.w	r3, r7, #16
 8014116:	2101      	movs	r1, #1
 8014118:	4618      	mov	r0, r3
 801411a:	f7f9 f873 	bl	800d204 <SecureElementDeriveAndStoreKey>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d001      	beq.n	8014128 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014124:	230f      	movs	r3, #15
 8014126:	e000      	b.n	801412a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014128:	2300      	movs	r3, #0
}
 801412a:	4618      	mov	r0, r3
 801412c:	3720      	adds	r7, #32
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
	...

08014134 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	4603      	mov	r3, r0
 801413c:	6039      	str	r1, [r7, #0]
 801413e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d101      	bne.n	801414a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014146:	230a      	movs	r3, #10
 8014148:	e03b      	b.n	80141c2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801414a:	79fb      	ldrb	r3, [r7, #7]
 801414c:	3b01      	subs	r3, #1
 801414e:	2b03      	cmp	r3, #3
 8014150:	d834      	bhi.n	80141bc <GetLastFcntDown+0x88>
 8014152:	a201      	add	r2, pc, #4	; (adr r2, 8014158 <GetLastFcntDown+0x24>)
 8014154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014158:	08014169 	.word	0x08014169
 801415c:	08014181 	.word	0x08014181
 8014160:	08014199 	.word	0x08014199
 8014164:	080141b1 	.word	0x080141b1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014168:	4b18      	ldr	r3, [pc, #96]	; (80141cc <GetLastFcntDown+0x98>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	691a      	ldr	r2, [r3, #16]
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014172:	4b16      	ldr	r3, [pc, #88]	; (80141cc <GetLastFcntDown+0x98>)
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	4b15      	ldr	r3, [pc, #84]	; (80141cc <GetLastFcntDown+0x98>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	6912      	ldr	r2, [r2, #16]
 801417c:	621a      	str	r2, [r3, #32]
            break;
 801417e:	e01f      	b.n	80141c0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014180:	4b12      	ldr	r3, [pc, #72]	; (80141cc <GetLastFcntDown+0x98>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	695a      	ldr	r2, [r3, #20]
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801418a:	4b10      	ldr	r3, [pc, #64]	; (80141cc <GetLastFcntDown+0x98>)
 801418c:	681a      	ldr	r2, [r3, #0]
 801418e:	4b0f      	ldr	r3, [pc, #60]	; (80141cc <GetLastFcntDown+0x98>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	6952      	ldr	r2, [r2, #20]
 8014194:	621a      	str	r2, [r3, #32]
            break;
 8014196:	e013      	b.n	80141c0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014198:	4b0c      	ldr	r3, [pc, #48]	; (80141cc <GetLastFcntDown+0x98>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	699a      	ldr	r2, [r3, #24]
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80141a2:	4b0a      	ldr	r3, [pc, #40]	; (80141cc <GetLastFcntDown+0x98>)
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	4b09      	ldr	r3, [pc, #36]	; (80141cc <GetLastFcntDown+0x98>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	6992      	ldr	r2, [r2, #24]
 80141ac:	621a      	str	r2, [r3, #32]
            break;
 80141ae:	e007      	b.n	80141c0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80141b0:	4b06      	ldr	r3, [pc, #24]	; (80141cc <GetLastFcntDown+0x98>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	69da      	ldr	r2, [r3, #28]
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	601a      	str	r2, [r3, #0]
            break;
 80141ba:	e001      	b.n	80141c0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80141bc:	2305      	movs	r3, #5
 80141be:	e000      	b.n	80141c2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	370c      	adds	r7, #12
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bc80      	pop	{r7}
 80141ca:	4770      	bx	lr
 80141cc:	20003c7c 	.word	0x20003c7c

080141d0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	4603      	mov	r3, r0
 80141d8:	6039      	str	r1, [r7, #0]
 80141da:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80141e0:	f107 020c 	add.w	r2, r7, #12
 80141e4:	79fb      	ldrb	r3, [r7, #7]
 80141e6:	4611      	mov	r1, r2
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7ff ffa3 	bl	8014134 <GetLastFcntDown>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d001      	beq.n	80141f8 <CheckFCntDown+0x28>
    {
        return false;
 80141f4:	2300      	movs	r3, #0
 80141f6:	e00a      	b.n	801420e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	683a      	ldr	r2, [r7, #0]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d803      	bhi.n	8014208 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014200:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014206:	d101      	bne.n	801420c <CheckFCntDown+0x3c>
    {
        return true;
 8014208:	2301      	movs	r3, #1
 801420a:	e000      	b.n	801420e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801420c:	2300      	movs	r3, #0
    }
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
	...

08014218 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	4603      	mov	r3, r0
 8014220:	6039      	str	r1, [r7, #0]
 8014222:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014224:	79fb      	ldrb	r3, [r7, #7]
 8014226:	3b01      	subs	r3, #1
 8014228:	2b03      	cmp	r3, #3
 801422a:	d81f      	bhi.n	801426c <UpdateFCntDown+0x54>
 801422c:	a201      	add	r2, pc, #4	; (adr r2, 8014234 <UpdateFCntDown+0x1c>)
 801422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014232:	bf00      	nop
 8014234:	08014245 	.word	0x08014245
 8014238:	0801424f 	.word	0x0801424f
 801423c:	08014259 	.word	0x08014259
 8014240:	08014263 	.word	0x08014263
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014244:	4b0c      	ldr	r3, [pc, #48]	; (8014278 <UpdateFCntDown+0x60>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	683a      	ldr	r2, [r7, #0]
 801424a:	611a      	str	r2, [r3, #16]
            break;
 801424c:	e00f      	b.n	801426e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801424e:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <UpdateFCntDown+0x60>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	683a      	ldr	r2, [r7, #0]
 8014254:	615a      	str	r2, [r3, #20]
            break;
 8014256:	e00a      	b.n	801426e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014258:	4b07      	ldr	r3, [pc, #28]	; (8014278 <UpdateFCntDown+0x60>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	683a      	ldr	r2, [r7, #0]
 801425e:	619a      	str	r2, [r3, #24]
            break;
 8014260:	e005      	b.n	801426e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014262:	4b05      	ldr	r3, [pc, #20]	; (8014278 <UpdateFCntDown+0x60>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	683a      	ldr	r2, [r7, #0]
 8014268:	61da      	str	r2, [r3, #28]
            break;
 801426a:	e000      	b.n	801426e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801426c:	bf00      	nop
    }
}
 801426e:	bf00      	nop
 8014270:	370c      	adds	r7, #12
 8014272:	46bd      	mov	sp, r7
 8014274:	bc80      	pop	{r7}
 8014276:	4770      	bx	lr
 8014278:	20003c7c 	.word	0x20003c7c

0801427c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801427c:	b480      	push	{r7}
 801427e:	b083      	sub	sp, #12
 8014280:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014282:	4b18      	ldr	r3, [pc, #96]	; (80142e4 <ResetFCnts+0x68>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	2200      	movs	r2, #0
 8014288:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801428a:	4b16      	ldr	r3, [pc, #88]	; (80142e4 <ResetFCnts+0x68>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f04f 32ff 	mov.w	r2, #4294967295
 8014292:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014294:	4b13      	ldr	r3, [pc, #76]	; (80142e4 <ResetFCnts+0x68>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f04f 32ff 	mov.w	r2, #4294967295
 801429c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801429e:	4b11      	ldr	r3, [pc, #68]	; (80142e4 <ResetFCnts+0x68>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	f04f 32ff 	mov.w	r2, #4294967295
 80142a6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80142a8:	4b0e      	ldr	r3, [pc, #56]	; (80142e4 <ResetFCnts+0x68>)
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	4b0d      	ldr	r3, [pc, #52]	; (80142e4 <ResetFCnts+0x68>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	6992      	ldr	r2, [r2, #24]
 80142b2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80142b4:	2300      	movs	r3, #0
 80142b6:	607b      	str	r3, [r7, #4]
 80142b8:	e00b      	b.n	80142d2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80142ba:	4b0a      	ldr	r3, [pc, #40]	; (80142e4 <ResetFCnts+0x68>)
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3306      	adds	r3, #6
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	4413      	add	r3, r2
 80142c6:	f04f 32ff 	mov.w	r2, #4294967295
 80142ca:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	3301      	adds	r3, #1
 80142d0:	607b      	str	r3, [r7, #4]
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	ddf0      	ble.n	80142ba <ResetFCnts+0x3e>
    }
}
 80142d8:	bf00      	nop
 80142da:	bf00      	nop
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	bc80      	pop	{r7}
 80142e2:	4770      	bx	lr
 80142e4:	20003c7c 	.word	0x20003c7c

080142e8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d101      	bne.n	80142fa <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80142f6:	2309      	movs	r3, #9
 80142f8:	e01c      	b.n	8014334 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80142fa:	4a10      	ldr	r2, [pc, #64]	; (801433c <LoRaMacCryptoInit+0x54>)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014300:	4b0e      	ldr	r3, [pc, #56]	; (801433c <LoRaMacCryptoInit+0x54>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2228      	movs	r2, #40	; 0x28
 8014306:	2100      	movs	r1, #0
 8014308:	4618      	mov	r0, r3
 801430a:	f004 fdcf 	bl	8018eac <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801430e:	4b0b      	ldr	r3, [pc, #44]	; (801433c <LoRaMacCryptoInit+0x54>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2201      	movs	r2, #1
 8014314:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014316:	4b09      	ldr	r3, [pc, #36]	; (801433c <LoRaMacCryptoInit+0x54>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2201      	movs	r2, #1
 801431c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801431e:	4b07      	ldr	r3, [pc, #28]	; (801433c <LoRaMacCryptoInit+0x54>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2201      	movs	r2, #1
 8014324:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014326:	4b05      	ldr	r3, [pc, #20]	; (801433c <LoRaMacCryptoInit+0x54>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2200      	movs	r2, #0
 801432c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801432e:	f7ff ffa5 	bl	801427c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	20003c7c 	.word	0x20003c7c

08014340 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014348:	4b04      	ldr	r3, [pc, #16]	; (801435c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	370c      	adds	r7, #12
 8014356:	46bd      	mov	sp, r7
 8014358:	bc80      	pop	{r7}
 801435a:	4770      	bx	lr
 801435c:	20003c7c 	.word	0x20003c7c

08014360 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d101      	bne.n	8014372 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801436e:	230a      	movs	r3, #10
 8014370:	e006      	b.n	8014380 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014372:	4b06      	ldr	r3, [pc, #24]	; (801438c <LoRaMacCryptoGetFCntUp+0x2c>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	1c5a      	adds	r2, r3, #1
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801437e:	2300      	movs	r3, #0
}
 8014380:	4618      	mov	r0, r3
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	bc80      	pop	{r7}
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop
 801438c:	20003c7c 	.word	0x20003c7c

08014390 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014394:	b08a      	sub	sp, #40	; 0x28
 8014396:	af00      	add	r7, sp, #0
 8014398:	613a      	str	r2, [r7, #16]
 801439a:	60fb      	str	r3, [r7, #12]
 801439c:	4603      	mov	r3, r0
 801439e:	75fb      	strb	r3, [r7, #23]
 80143a0:	460b      	mov	r3, r1
 80143a2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80143a4:	2300      	movs	r3, #0
 80143a6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80143a8:	2300      	movs	r3, #0
 80143aa:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80143ac:	2313      	movs	r3, #19
 80143ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d101      	bne.n	80143bc <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80143b8:	230a      	movs	r3, #10
 80143ba:	e057      	b.n	801446c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80143bc:	f107 021c 	add.w	r2, r7, #28
 80143c0:	7dfb      	ldrb	r3, [r7, #23]
 80143c2:	4611      	mov	r1, r2
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff feb5 	bl	8014134 <GetLastFcntDown>
 80143ca:	4603      	mov	r3, r0
 80143cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80143d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d002      	beq.n	80143de <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 80143d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80143dc:	e046      	b.n	801446c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143e4:	d103      	bne.n	80143ee <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	693a      	ldr	r2, [r7, #16]
 80143ea:	601a      	str	r2, [r3, #0]
 80143ec:	e01e      	b.n	801442c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80143ee:	69fb      	ldr	r3, [r7, #28]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	693a      	ldr	r2, [r7, #16]
 80143f4:	1ad3      	subs	r3, r2, r3
 80143f6:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	dd05      	ble.n	801440a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80143fe:	69fa      	ldr	r2, [r7, #28]
 8014400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014402:	441a      	add	r2, r3
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	601a      	str	r2, [r3, #0]
 8014408:	e010      	b.n	801442c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	2b00      	cmp	r3, #0
 801440e:	d104      	bne.n	801441a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014410:	69fa      	ldr	r2, [r7, #28]
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014416:	2307      	movs	r3, #7
 8014418:	e028      	b.n	801446c <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	0c1b      	lsrs	r3, r3, #16
 801441e:	041b      	lsls	r3, r3, #16
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	4413      	add	r3, r2
 8014424:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801442c:	4b12      	ldr	r3, [pc, #72]	; (8014478 <LoRaMacCryptoGetFCntDown+0xe8>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	789b      	ldrb	r3, [r3, #2]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d119      	bne.n	801446a <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2200      	movs	r2, #0
 801443c:	603b      	str	r3, [r7, #0]
 801443e:	607a      	str	r2, [r7, #4]
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	2200      	movs	r2, #0
 8014444:	469a      	mov	sl, r3
 8014446:	4693      	mov	fp, r2
 8014448:	e9d7 2300 	ldrd	r2, r3, [r7]
 801444c:	4611      	mov	r1, r2
 801444e:	ebb1 040a 	subs.w	r4, r1, sl
 8014452:	eb63 050b 	sbc.w	r5, r3, fp
 8014456:	8abb      	ldrh	r3, [r7, #20]
 8014458:	2200      	movs	r2, #0
 801445a:	4698      	mov	r8, r3
 801445c:	4691      	mov	r9, r2
 801445e:	4544      	cmp	r4, r8
 8014460:	eb75 0309 	sbcs.w	r3, r5, r9
 8014464:	db01      	blt.n	801446a <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8014466:	2308      	movs	r3, #8
 8014468:	e000      	b.n	801446c <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801446a:	2300      	movs	r3, #0
}
 801446c:	4618      	mov	r0, r3
 801446e:	3728      	adds	r7, #40	; 0x28
 8014470:	46bd      	mov	sp, r7
 8014472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014476:	bf00      	nop
 8014478:	20003c7c 	.word	0x20003c7c

0801447c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801447c:	b480      	push	{r7}
 801447e:	b085      	sub	sp, #20
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801448a:	230a      	movs	r3, #10
 801448c:	e017      	b.n	80144be <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801448e:	2300      	movs	r3, #0
 8014490:	60fb      	str	r3, [r7, #12]
 8014492:	e010      	b.n	80144b6 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014494:	4b0c      	ldr	r3, [pc, #48]	; (80144c8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014496:	6819      	ldr	r1, [r3, #0]
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	222c      	movs	r2, #44	; 0x2c
 801449c:	fb02 f303 	mul.w	r3, r2, r3
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	4413      	add	r3, r2
 80144a4:	68fa      	ldr	r2, [r7, #12]
 80144a6:	3206      	adds	r2, #6
 80144a8:	0092      	lsls	r2, r2, #2
 80144aa:	440a      	add	r2, r1
 80144ac:	3204      	adds	r2, #4
 80144ae:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	3301      	adds	r3, #1
 80144b4:	60fb      	str	r3, [r7, #12]
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	ddeb      	ble.n	8014494 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3714      	adds	r7, #20
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bc80      	pop	{r7}
 80144c6:	4770      	bx	lr
 80144c8:	20003c7c 	.word	0x20003c7c

080144cc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	4603      	mov	r3, r0
 80144d4:	6039      	str	r1, [r7, #0]
 80144d6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80144d8:	79fb      	ldrb	r3, [r7, #7]
 80144da:	6839      	ldr	r1, [r7, #0]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f8 fd7f 	bl	800cfe0 <SecureElementSetKey>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d001      	beq.n	80144ec <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80144e8:	230f      	movs	r3, #15
 80144ea:	e018      	b.n	801451e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d114      	bne.n	801451c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80144f2:	4b0d      	ldr	r3, [pc, #52]	; (8014528 <LoRaMacCryptoSetKey+0x5c>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	789b      	ldrb	r3, [r3, #2]
 80144f8:	79fa      	ldrb	r2, [r7, #7]
 80144fa:	4611      	mov	r1, r2
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 fa3f 	bl	8014980 <LoRaMacCryptoDeriveMcRootKey>
 8014502:	4603      	mov	r3, r0
 8014504:	2b00      	cmp	r3, #0
 8014506:	d001      	beq.n	801450c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014508:	230f      	movs	r3, #15
 801450a:	e008      	b.n	801451e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801450c:	2004      	movs	r0, #4
 801450e:	f000 fa62 	bl	80149d6 <LoRaMacCryptoDeriveMcKEKey>
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d001      	beq.n	801451c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014518:	230f      	movs	r3, #15
 801451a:	e000      	b.n	801451e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	20003c7c 	.word	0x20003c7c

0801452c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b086      	sub	sp, #24
 8014530:	af02      	add	r7, sp, #8
 8014532:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d101      	bne.n	801453e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801453a:	230a      	movs	r3, #10
 801453c:	e033      	b.n	80145a6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801453e:	2301      	movs	r3, #1
 8014540:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8014542:	2300      	movs	r3, #0
 8014544:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8014546:	f107 0308 	add.w	r3, r7, #8
 801454a:	4618      	mov	r0, r3
 801454c:	f7f8 ff18 	bl	800d380 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	4b17      	ldr	r3, [pc, #92]	; (80145b0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	b292      	uxth	r2, r2
 8014558:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801455a:	4b15      	ldr	r3, [pc, #84]	; (80145b0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	889a      	ldrh	r2, [r3, #4]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 fc18 	bl	8014d9a <LoRaMacSerializerJoinRequest>
 801456a:	4603      	mov	r3, r0
 801456c:	2b00      	cmp	r3, #0
 801456e:	d001      	beq.n	8014574 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014570:	2311      	movs	r3, #17
 8014572:	e018      	b.n	80145a6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6819      	ldr	r1, [r3, #0]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	3318      	adds	r3, #24
 801457c:	7bfa      	ldrb	r2, [r7, #15]
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	4613      	mov	r3, r2
 8014582:	2213      	movs	r2, #19
 8014584:	2000      	movs	r0, #0
 8014586:	f7f8 fd89 	bl	800d09c <SecureElementComputeAesCmac>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014590:	230f      	movs	r3, #15
 8014592:	e008      	b.n	80145a6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f000 fc00 	bl	8014d9a <LoRaMacSerializerJoinRequest>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d001      	beq.n	80145a4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80145a0:	2311      	movs	r3, #17
 80145a2:	e000      	b.n	80145a6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	20003c7c 	.word	0x20003c7c

080145b4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80145b4:	b590      	push	{r4, r7, lr}
 80145b6:	b097      	sub	sp, #92	; 0x5c
 80145b8:	af04      	add	r7, sp, #16
 80145ba:	4603      	mov	r3, r0
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
 80145c0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <LoRaMacCryptoHandleJoinAccept+0x1a>
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d101      	bne.n	80145d2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145ce:	230a      	movs	r3, #10
 80145d0:	e0bd      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80145d2:	2313      	movs	r3, #19
 80145d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80145d8:	2300      	movs	r3, #0
 80145da:	61bb      	str	r3, [r7, #24]
 80145dc:	f107 031c 	add.w	r3, r7, #28
 80145e0:	221d      	movs	r2, #29
 80145e2:	2100      	movs	r1, #0
 80145e4:	4618      	mov	r0, r3
 80145e6:	f009 f8d1 	bl	801d78c <memset>
    uint8_t versionMinor         = 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80145ee:	4b5a      	ldr	r3, [pc, #360]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	889b      	ldrh	r3, [r3, #4]
 80145f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681c      	ldr	r4, [r3, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	791b      	ldrb	r3, [r3, #4]
 8014600:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014604:	7bf8      	ldrb	r0, [r7, #15]
 8014606:	f107 0217 	add.w	r2, r7, #23
 801460a:	9202      	str	r2, [sp, #8]
 801460c:	f107 0218 	add.w	r2, r7, #24
 8014610:	9201      	str	r2, [sp, #4]
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	4623      	mov	r3, r4
 8014616:	460a      	mov	r2, r1
 8014618:	68b9      	ldr	r1, [r7, #8]
 801461a:	f7f8 fe33 	bl	800d284 <SecureElementProcessJoinAccept>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d001      	beq.n	8014628 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014624:	230f      	movs	r3, #15
 8014626:	e092      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6818      	ldr	r0, [r3, #0]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	791b      	ldrb	r3, [r3, #4]
 8014630:	b29a      	uxth	r2, r3
 8014632:	f107 0318 	add.w	r3, r7, #24
 8014636:	4619      	mov	r1, r3
 8014638:	f004 fbfd 	bl	8018e36 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f9ed 	bl	8014a1c <LoRaMacParserJoinAccept>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d001      	beq.n	801464c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014648:	2310      	movs	r3, #16
 801464a:	e080      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	799b      	ldrb	r3, [r3, #6]
 8014650:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	79db      	ldrb	r3, [r3, #7]
 8014656:	021b      	lsls	r3, r3, #8
 8014658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801465a:	4313      	orrs	r3, r2
 801465c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	7a1b      	ldrb	r3, [r3, #8]
 8014662:	041b      	lsls	r3, r3, #16
 8014664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014666:	4313      	orrs	r3, r2
 8014668:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801466a:	4b3b      	ldr	r3, [pc, #236]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	689b      	ldr	r3, [r3, #8]
 8014670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014672:	429a      	cmp	r2, r3
 8014674:	d010      	beq.n	8014698 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014676:	4b38      	ldr	r3, [pc, #224]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801467c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801467e:	7dfb      	ldrb	r3, [r7, #23]
 8014680:	2100      	movs	r1, #0
 8014682:	4618      	mov	r0, r3
 8014684:	f000 f97c 	bl	8014980 <LoRaMacCryptoDeriveMcRootKey>
 8014688:	4603      	mov	r3, r0
 801468a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801468e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014692:	2b00      	cmp	r3, #0
 8014694:	d005      	beq.n	80146a2 <LoRaMacCryptoHandleJoinAccept+0xee>
 8014696:	e001      	b.n	801469c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014698:	2303      	movs	r3, #3
 801469a:	e058      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 801469c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80146a0:	e055      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80146a2:	2004      	movs	r0, #4
 80146a4:	f000 f997 	bl	80149d6 <LoRaMacCryptoDeriveMcKEKey>
 80146a8:	4603      	mov	r3, r0
 80146aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80146ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d002      	beq.n	80146bc <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80146b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80146ba:	e048      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	7a5b      	ldrb	r3, [r3, #9]
 80146c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	7a9b      	ldrb	r3, [r3, #10]
 80146c6:	021b      	lsls	r3, r3, #8
 80146c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80146ca:	4313      	orrs	r3, r2
 80146cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	7adb      	ldrb	r3, [r3, #11]
 80146d2:	041b      	lsls	r3, r3, #16
 80146d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80146d6:	4313      	orrs	r3, r2
 80146d8:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80146da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80146de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80146e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80146e2:	2003      	movs	r0, #3
 80146e4:	f7ff fcd6 	bl	8014094 <DeriveSessionKey10x>
 80146e8:	4603      	mov	r3, r0
 80146ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80146ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d002      	beq.n	80146fc <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80146f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80146fa:	e028      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80146fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014704:	2002      	movs	r0, #2
 8014706:	f7ff fcc5 	bl	8014094 <DeriveSessionKey10x>
 801470a:	4603      	mov	r3, r0
 801470c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014710:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014718:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801471c:	e017      	b.n	801474e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801471e:	4b0e      	ldr	r3, [pc, #56]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	7dfa      	ldrb	r2, [r7, #23]
 8014724:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014726:	4b0c      	ldr	r3, [pc, #48]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	2200      	movs	r2, #0
 801472c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801472e:	4b0a      	ldr	r3, [pc, #40]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f04f 32ff 	mov.w	r2, #4294967295
 8014736:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014738:	4b07      	ldr	r3, [pc, #28]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	f04f 32ff 	mov.w	r2, #4294967295
 8014740:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014742:	4b05      	ldr	r3, [pc, #20]	; (8014758 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	f04f 32ff 	mov.w	r2, #4294967295
 801474a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	374c      	adds	r7, #76	; 0x4c
 8014752:	46bd      	mov	sp, r7
 8014754:	bd90      	pop	{r4, r7, pc}
 8014756:	bf00      	nop
 8014758:	20003c7c 	.word	0x20003c7c

0801475c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801475c:	b590      	push	{r4, r7, lr}
 801475e:	b08b      	sub	sp, #44	; 0x2c
 8014760:	af04      	add	r7, sp, #16
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	607b      	str	r3, [r7, #4]
 8014766:	460b      	mov	r3, r1
 8014768:	72fb      	strb	r3, [r7, #11]
 801476a:	4613      	mov	r3, r2
 801476c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801476e:	2313      	movs	r3, #19
 8014770:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014772:	2303      	movs	r3, #3
 8014774:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801477c:	230a      	movs	r3, #10
 801477e:	e05f      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014780:	4b31      	ldr	r3, [pc, #196]	; (8014848 <LoRaMacCryptoSecureMessage+0xec>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	429a      	cmp	r2, r3
 801478a:	d201      	bcs.n	8014790 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801478c:	2306      	movs	r3, #6
 801478e:	e057      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801479a:	2302      	movs	r3, #2
 801479c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801479e:	4b2a      	ldr	r3, [pc, #168]	; (8014848 <LoRaMacCryptoSecureMessage+0xec>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	68fa      	ldr	r2, [r7, #12]
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d916      	bls.n	80147d8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147b4:	b219      	sxth	r1, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	689c      	ldr	r4, [r3, #8]
 80147ba:	7dfa      	ldrb	r2, [r7, #23]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	9301      	str	r3, [sp, #4]
 80147c0:	2300      	movs	r3, #0
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	4623      	mov	r3, r4
 80147c6:	f7ff fa71 	bl	8013cac <PayloadEncrypt>
 80147ca:	4603      	mov	r3, r0
 80147cc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80147ce:	7dbb      	ldrb	r3, [r7, #22]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d001      	beq.n	80147d8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80147d4:	7dbb      	ldrb	r3, [r7, #22]
 80147d6:	e033      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 fb60 	bl	8014e9e <LoRaMacSerializerData>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d001      	beq.n	80147e8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80147e4:	2311      	movs	r3, #17
 80147e6:	e02b      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80147e8:	2302      	movs	r3, #2
 80147ea:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6818      	ldr	r0, [r3, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	791b      	ldrb	r3, [r3, #4]
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	3b04      	subs	r3, #4
 80147f8:	b299      	uxth	r1, r3
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	687a      	ldr	r2, [r7, #4]
 8014800:	322c      	adds	r2, #44	; 0x2c
 8014802:	7dfc      	ldrb	r4, [r7, #23]
 8014804:	9203      	str	r2, [sp, #12]
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	9202      	str	r2, [sp, #8]
 801480a:	9301      	str	r3, [sp, #4]
 801480c:	2300      	movs	r3, #0
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	2300      	movs	r3, #0
 8014812:	4622      	mov	r2, r4
 8014814:	f7ff fb4b 	bl	8013eae <ComputeCmacB0>
 8014818:	4603      	mov	r3, r0
 801481a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801481c:	7dbb      	ldrb	r3, [r7, #22]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d001      	beq.n	8014826 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014822:	7dbb      	ldrb	r3, [r7, #22]
 8014824:	e00c      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fb39 	bl	8014e9e <LoRaMacSerializerData>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d001      	beq.n	8014836 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014832:	2311      	movs	r3, #17
 8014834:	e004      	b.n	8014840 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014836:	4b04      	ldr	r3, [pc, #16]	; (8014848 <LoRaMacCryptoSecureMessage+0xec>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	68fa      	ldr	r2, [r7, #12]
 801483c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801483e:	2300      	movs	r3, #0
}
 8014840:	4618      	mov	r0, r3
 8014842:	371c      	adds	r7, #28
 8014844:	46bd      	mov	sp, r7
 8014846:	bd90      	pop	{r4, r7, pc}
 8014848:	20003c7c 	.word	0x20003c7c

0801484c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801484c:	b590      	push	{r4, r7, lr}
 801484e:	b08b      	sub	sp, #44	; 0x2c
 8014850:	af04      	add	r7, sp, #16
 8014852:	60b9      	str	r1, [r7, #8]
 8014854:	607b      	str	r3, [r7, #4]
 8014856:	4603      	mov	r3, r0
 8014858:	73fb      	strb	r3, [r7, #15]
 801485a:	4613      	mov	r3, r2
 801485c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014860:	2b00      	cmp	r3, #0
 8014862:	d101      	bne.n	8014868 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014864:	230a      	movs	r3, #10
 8014866:	e084      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014868:	7bbb      	ldrb	r3, [r7, #14]
 801486a:	6879      	ldr	r1, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	f7ff fcaf 	bl	80141d0 <CheckFCntDown>
 8014872:	4603      	mov	r3, r0
 8014874:	f083 0301 	eor.w	r3, r3, #1
 8014878:	b2db      	uxtb	r3, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	d001      	beq.n	8014882 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801487e:	2306      	movs	r3, #6
 8014880:	e077      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014882:	2313      	movs	r3, #19
 8014884:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014886:	2303      	movs	r3, #3
 8014888:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801488a:	2302      	movs	r3, #2
 801488c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801488e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014890:	f000 f98f 	bl	8014bb2 <LoRaMacParserData>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	d001      	beq.n	801489e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801489a:	2310      	movs	r3, #16
 801489c:	e069      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801489e:	f107 0210 	add.w	r2, r7, #16
 80148a2:	7bfb      	ldrb	r3, [r7, #15]
 80148a4:	4611      	mov	r1, r2
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7ff fbce 	bl	8014048 <GetKeyAddrItem>
 80148ac:	4603      	mov	r3, r0
 80148ae:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148b0:	7d7b      	ldrb	r3, [r7, #21]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d001      	beq.n	80148ba <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80148b6:	7d7b      	ldrb	r3, [r7, #21]
 80148b8:	e05b      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	785b      	ldrb	r3, [r3, #1]
 80148be:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	789b      	ldrb	r3, [r3, #2]
 80148c4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	68ba      	ldr	r2, [r7, #8]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d001      	beq.n	80148d4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80148d0:	2302      	movs	r3, #2
 80148d2:	e04e      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	7b1b      	ldrb	r3, [r3, #12]
 80148d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	2b00      	cmp	r3, #0
 80148e0:	bf14      	ite	ne
 80148e2:	2301      	movne	r3, #1
 80148e4:	2300      	moveq	r3, #0
 80148e6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80148e8:	4b24      	ldr	r3, [pc, #144]	; (801497c <LoRaMacCryptoUnsecureMessage+0x130>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	789b      	ldrb	r3, [r3, #2]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d101      	bne.n	80148f6 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80148f2:	2300      	movs	r3, #0
 80148f4:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80148f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f8:	6818      	ldr	r0, [r3, #0]
 80148fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fc:	791b      	ldrb	r3, [r3, #4]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	3b04      	subs	r3, #4
 8014902:	b299      	uxth	r1, r3
 8014904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014908:	7dbc      	ldrb	r4, [r7, #22]
 801490a:	7d3a      	ldrb	r2, [r7, #20]
 801490c:	9303      	str	r3, [sp, #12]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	9302      	str	r3, [sp, #8]
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	9301      	str	r3, [sp, #4]
 8014916:	2301      	movs	r3, #1
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	4623      	mov	r3, r4
 801491c:	f7ff fb05 	bl	8013f2a <VerifyCmacB0>
 8014920:	4603      	mov	r3, r0
 8014922:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014924:	7d7b      	ldrb	r3, [r7, #21]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d001      	beq.n	801492e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801492a:	7d7b      	ldrb	r3, [r7, #21]
 801492c:	e021      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014938:	2302      	movs	r3, #2
 801493a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014946:	b219      	sxth	r1, r3
 8014948:	7dfa      	ldrb	r2, [r7, #23]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	9301      	str	r3, [sp, #4]
 801494e:	2301      	movs	r3, #1
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	f7ff f9aa 	bl	8013cac <PayloadEncrypt>
 8014958:	4603      	mov	r3, r0
 801495a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801495c:	7d7b      	ldrb	r3, [r7, #21]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d001      	beq.n	8014966 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014962:	7d7b      	ldrb	r3, [r7, #21]
 8014964:	e005      	b.n	8014972 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014966:	7bbb      	ldrb	r3, [r7, #14]
 8014968:	6879      	ldr	r1, [r7, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fc54 	bl	8014218 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014970:	2300      	movs	r3, #0
}
 8014972:	4618      	mov	r0, r3
 8014974:	371c      	adds	r7, #28
 8014976:	46bd      	mov	sp, r7
 8014978:	bd90      	pop	{r4, r7, pc}
 801497a:	bf00      	nop
 801497c:	20003c7c 	.word	0x20003c7c

08014980 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b086      	sub	sp, #24
 8014984:	af00      	add	r7, sp, #0
 8014986:	4603      	mov	r3, r0
 8014988:	460a      	mov	r2, r1
 801498a:	71fb      	strb	r3, [r7, #7]
 801498c:	4613      	mov	r3, r2
 801498e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014990:	79bb      	ldrb	r3, [r7, #6]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d001      	beq.n	801499a <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014996:	230b      	movs	r3, #11
 8014998:	e019      	b.n	80149ce <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801499a:	2300      	movs	r3, #0
 801499c:	60bb      	str	r3, [r7, #8]
 801499e:	f107 030c 	add.w	r3, r7, #12
 80149a2:	2200      	movs	r2, #0
 80149a4:	601a      	str	r2, [r3, #0]
 80149a6:	605a      	str	r2, [r3, #4]
 80149a8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80149aa:	79fb      	ldrb	r3, [r7, #7]
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d101      	bne.n	80149b4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80149b0:	2320      	movs	r3, #32
 80149b2:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80149b4:	79b9      	ldrb	r1, [r7, #6]
 80149b6:	f107 0308 	add.w	r3, r7, #8
 80149ba:	2204      	movs	r2, #4
 80149bc:	4618      	mov	r0, r3
 80149be:	f7f8 fc21 	bl	800d204 <SecureElementDeriveAndStoreKey>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d001      	beq.n	80149cc <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80149c8:	230f      	movs	r3, #15
 80149ca:	e000      	b.n	80149ce <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80149cc:	2300      	movs	r3, #0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3718      	adds	r7, #24
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b086      	sub	sp, #24
 80149da:	af00      	add	r7, sp, #0
 80149dc:	4603      	mov	r3, r0
 80149de:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80149e0:	79fb      	ldrb	r3, [r7, #7]
 80149e2:	2b04      	cmp	r3, #4
 80149e4:	d001      	beq.n	80149ea <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80149e6:	230b      	movs	r3, #11
 80149e8:	e014      	b.n	8014a14 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80149ea:	2300      	movs	r3, #0
 80149ec:	60bb      	str	r3, [r7, #8]
 80149ee:	f107 030c 	add.w	r3, r7, #12
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	605a      	str	r2, [r3, #4]
 80149f8:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80149fa:	79f9      	ldrb	r1, [r7, #7]
 80149fc:	f107 0308 	add.w	r3, r7, #8
 8014a00:	227f      	movs	r2, #127	; 0x7f
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7f8 fbfe 	bl	800d204 <SecureElementDeriveAndStoreKey>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d001      	beq.n	8014a12 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a0e:	230f      	movs	r3, #15
 8014a10:	e000      	b.n	8014a14 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a12:	2300      	movs	r3, #0
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3718      	adds	r7, #24
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d003      	beq.n	8014a32 <LoRaMacParserJoinAccept+0x16>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d101      	bne.n	8014a36 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014a32:	2302      	movs	r3, #2
 8014a34:	e0b9      	b.n	8014baa <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	89fb      	ldrh	r3, [r7, #14]
 8014a40:	1c59      	adds	r1, r3, #1
 8014a42:	81f9      	strh	r1, [r7, #14]
 8014a44:	4413      	add	r3, r2
 8014a46:	781a      	ldrb	r2, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	1d98      	adds	r0, r3, #6
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	89fb      	ldrh	r3, [r7, #14]
 8014a56:	4413      	add	r3, r2
 8014a58:	2203      	movs	r2, #3
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	f004 f9eb 	bl	8018e36 <memcpy1>
    bufItr = bufItr + 3;
 8014a60:	89fb      	ldrh	r3, [r7, #14]
 8014a62:	3303      	adds	r3, #3
 8014a64:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f103 0009 	add.w	r0, r3, #9
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	89fb      	ldrh	r3, [r7, #14]
 8014a72:	4413      	add	r3, r2
 8014a74:	2203      	movs	r2, #3
 8014a76:	4619      	mov	r1, r3
 8014a78:	f004 f9dd 	bl	8018e36 <memcpy1>
    bufItr = bufItr + 3;
 8014a7c:	89fb      	ldrh	r3, [r7, #14]
 8014a7e:	3303      	adds	r3, #3
 8014a80:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681a      	ldr	r2, [r3, #0]
 8014a86:	89fb      	ldrh	r3, [r7, #14]
 8014a88:	1c59      	adds	r1, r3, #1
 8014a8a:	81f9      	strh	r1, [r7, #14]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	461a      	mov	r2, r3
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	89fb      	ldrh	r3, [r7, #14]
 8014a9c:	1c59      	adds	r1, r3, #1
 8014a9e:	81f9      	strh	r1, [r7, #14]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	021a      	lsls	r2, r3, #8
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	431a      	orrs	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	89fb      	ldrh	r3, [r7, #14]
 8014ab6:	1c59      	adds	r1, r3, #1
 8014ab8:	81f9      	strh	r1, [r7, #14]
 8014aba:	4413      	add	r3, r2
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	041a      	lsls	r2, r3, #16
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	431a      	orrs	r2, r3
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	89fb      	ldrh	r3, [r7, #14]
 8014ad0:	1c59      	adds	r1, r3, #1
 8014ad2:	81f9      	strh	r1, [r7, #14]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	781b      	ldrb	r3, [r3, #0]
 8014ad8:	061a      	lsls	r2, r3, #24
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	431a      	orrs	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	89fb      	ldrh	r3, [r7, #14]
 8014aea:	1c59      	adds	r1, r3, #1
 8014aec:	81f9      	strh	r1, [r7, #14]
 8014aee:	4413      	add	r3, r2
 8014af0:	781a      	ldrb	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	89fb      	ldrh	r3, [r7, #14]
 8014afc:	1c59      	adds	r1, r3, #1
 8014afe:	81f9      	strh	r1, [r7, #14]
 8014b00:	4413      	add	r3, r2
 8014b02:	781a      	ldrb	r2, [r3, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	791b      	ldrb	r3, [r3, #4]
 8014b0c:	1f1a      	subs	r2, r3, #4
 8014b0e:	89fb      	ldrh	r3, [r7, #14]
 8014b10:	1ad3      	subs	r3, r2, r3
 8014b12:	2b10      	cmp	r3, #16
 8014b14:	d10e      	bne.n	8014b34 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f103 0012 	add.w	r0, r3, #18
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	89fb      	ldrh	r3, [r7, #14]
 8014b22:	4413      	add	r3, r2
 8014b24:	2210      	movs	r2, #16
 8014b26:	4619      	mov	r1, r3
 8014b28:	f004 f985 	bl	8018e36 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014b2c:	89fb      	ldrh	r3, [r7, #14]
 8014b2e:	3310      	adds	r3, #16
 8014b30:	81fb      	strh	r3, [r7, #14]
 8014b32:	e008      	b.n	8014b46 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	791b      	ldrb	r3, [r3, #4]
 8014b38:	1f1a      	subs	r2, r3, #4
 8014b3a:	89fb      	ldrh	r3, [r7, #14]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	dd01      	ble.n	8014b46 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014b42:	2301      	movs	r3, #1
 8014b44:	e031      	b.n	8014baa <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	89fb      	ldrh	r3, [r7, #14]
 8014b4c:	1c59      	adds	r1, r3, #1
 8014b4e:	81f9      	strh	r1, [r7, #14]
 8014b50:	4413      	add	r3, r2
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	461a      	mov	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	89fb      	ldrh	r3, [r7, #14]
 8014b60:	1c59      	adds	r1, r3, #1
 8014b62:	81f9      	strh	r1, [r7, #14]
 8014b64:	4413      	add	r3, r2
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	021a      	lsls	r2, r3, #8
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b6e:	431a      	orrs	r2, r3
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	89fb      	ldrh	r3, [r7, #14]
 8014b7a:	1c59      	adds	r1, r3, #1
 8014b7c:	81f9      	strh	r1, [r7, #14]
 8014b7e:	4413      	add	r3, r2
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	041a      	lsls	r2, r3, #16
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b88:	431a      	orrs	r2, r3
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	89fb      	ldrh	r3, [r7, #14]
 8014b94:	1c59      	adds	r1, r3, #1
 8014b96:	81f9      	strh	r1, [r7, #14]
 8014b98:	4413      	add	r3, r2
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	061a      	lsls	r2, r3, #24
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba2:	431a      	orrs	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b084      	sub	sp, #16
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d003      	beq.n	8014bc8 <LoRaMacParserData+0x16>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d101      	bne.n	8014bcc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014bc8:	2302      	movs	r3, #2
 8014bca:	e0e2      	b.n	8014d92 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	89fb      	ldrh	r3, [r7, #14]
 8014bd6:	1c59      	adds	r1, r3, #1
 8014bd8:	81f9      	strh	r1, [r7, #14]
 8014bda:	4413      	add	r3, r2
 8014bdc:	781a      	ldrb	r2, [r3, #0]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681a      	ldr	r2, [r3, #0]
 8014be6:	89fb      	ldrh	r3, [r7, #14]
 8014be8:	1c59      	adds	r1, r3, #1
 8014bea:	81f9      	strh	r1, [r7, #14]
 8014bec:	4413      	add	r3, r2
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681a      	ldr	r2, [r3, #0]
 8014bfa:	89fb      	ldrh	r3, [r7, #14]
 8014bfc:	1c59      	adds	r1, r3, #1
 8014bfe:	81f9      	strh	r1, [r7, #14]
 8014c00:	4413      	add	r3, r2
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	021a      	lsls	r2, r3, #8
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	431a      	orrs	r2, r3
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681a      	ldr	r2, [r3, #0]
 8014c14:	89fb      	ldrh	r3, [r7, #14]
 8014c16:	1c59      	adds	r1, r3, #1
 8014c18:	81f9      	strh	r1, [r7, #14]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	041a      	lsls	r2, r3, #16
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	431a      	orrs	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	89fb      	ldrh	r3, [r7, #14]
 8014c30:	1c59      	adds	r1, r3, #1
 8014c32:	81f9      	strh	r1, [r7, #14]
 8014c34:	4413      	add	r3, r2
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	061a      	lsls	r2, r3, #24
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	689b      	ldr	r3, [r3, #8]
 8014c3e:	431a      	orrs	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	89fb      	ldrh	r3, [r7, #14]
 8014c4a:	1c59      	adds	r1, r3, #1
 8014c4c:	81f9      	strh	r1, [r7, #14]
 8014c4e:	4413      	add	r3, r2
 8014c50:	781a      	ldrb	r2, [r3, #0]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	89fb      	ldrh	r3, [r7, #14]
 8014c5c:	1c59      	adds	r1, r3, #1
 8014c5e:	81f9      	strh	r1, [r7, #14]
 8014c60:	4413      	add	r3, r2
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	89fb      	ldrh	r3, [r7, #14]
 8014c70:	1c59      	adds	r1, r3, #1
 8014c72:	81f9      	strh	r1, [r7, #14]
 8014c74:	4413      	add	r3, r2
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	0219      	lsls	r1, r3, #8
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	89db      	ldrh	r3, [r3, #14]
 8014c7e:	b21a      	sxth	r2, r3
 8014c80:	b20b      	sxth	r3, r1
 8014c82:	4313      	orrs	r3, r2
 8014c84:	b21b      	sxth	r3, r3
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f103 0010 	add.w	r0, r3, #16
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	89fb      	ldrh	r3, [r7, #14]
 8014c98:	18d1      	adds	r1, r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	7b1b      	ldrb	r3, [r3, #12]
 8014c9e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f004 f8c5 	bl	8018e36 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	7b1b      	ldrb	r3, [r3, #12]
 8014cb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	89fb      	ldrh	r3, [r7, #14]
 8014cba:	4413      	add	r3, r2
 8014cbc:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	791b      	ldrb	r3, [r3, #4]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	89fb      	ldrh	r3, [r7, #14]
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	2b04      	cmp	r3, #4
 8014cda:	dd28      	ble.n	8014d2e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	89fb      	ldrh	r3, [r7, #14]
 8014ce2:	1c59      	adds	r1, r3, #1
 8014ce4:	81f9      	strh	r1, [r7, #14]
 8014ce6:	4413      	add	r3, r2
 8014ce8:	781a      	ldrb	r2, [r3, #0]
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	791a      	ldrb	r2, [r3, #4]
 8014cf4:	89fb      	ldrh	r3, [r7, #14]
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	1ad3      	subs	r3, r2, r3
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	3b04      	subs	r3, #4
 8014cfe:	b2da      	uxtb	r2, r3
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681a      	ldr	r2, [r3, #0]
 8014d0e:	89fb      	ldrh	r3, [r7, #14]
 8014d10:	18d1      	adds	r1, r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	f004 f88b 	bl	8018e36 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d26:	b29a      	uxth	r2, r3
 8014d28:	89fb      	ldrh	r3, [r7, #14]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	791b      	ldrb	r3, [r3, #4]
 8014d36:	3b04      	subs	r3, #4
 8014d38:	4413      	add	r3, r2
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6819      	ldr	r1, [r3, #0]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	791b      	ldrb	r3, [r3, #4]
 8014d4e:	3b03      	subs	r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	781b      	ldrb	r3, [r3, #0]
 8014d54:	021b      	lsls	r3, r3, #8
 8014d56:	431a      	orrs	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6819      	ldr	r1, [r3, #0]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	791b      	ldrb	r3, [r3, #4]
 8014d68:	3b02      	subs	r3, #2
 8014d6a:	440b      	add	r3, r1
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	041b      	lsls	r3, r3, #16
 8014d70:	431a      	orrs	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6819      	ldr	r1, [r3, #0]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	791b      	ldrb	r3, [r3, #4]
 8014d82:	3b01      	subs	r3, #1
 8014d84:	440b      	add	r3, r1
 8014d86:	781b      	ldrb	r3, [r3, #0]
 8014d88:	061b      	lsls	r3, r3, #24
 8014d8a:	431a      	orrs	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014d90:	2300      	movs	r3, #0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}

08014d9a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b084      	sub	sp, #16
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d003      	beq.n	8014db0 <LoRaMacSerializerJoinRequest+0x16>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d101      	bne.n	8014db4 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014db0:	2301      	movs	r3, #1
 8014db2:	e070      	b.n	8014e96 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014db4:	2300      	movs	r3, #0
 8014db6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	791b      	ldrb	r3, [r3, #4]
 8014dbc:	2b16      	cmp	r3, #22
 8014dbe:	d801      	bhi.n	8014dc4 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014dc0:	2302      	movs	r3, #2
 8014dc2:	e068      	b.n	8014e96 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	89fb      	ldrh	r3, [r7, #14]
 8014dca:	1c59      	adds	r1, r3, #1
 8014dcc:	81f9      	strh	r1, [r7, #14]
 8014dce:	4413      	add	r3, r2
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	7952      	ldrb	r2, [r2, #5]
 8014dd4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	89fb      	ldrh	r3, [r7, #14]
 8014ddc:	18d0      	adds	r0, r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	3306      	adds	r3, #6
 8014de2:	2208      	movs	r2, #8
 8014de4:	4619      	mov	r1, r3
 8014de6:	f004 f841 	bl	8018e6c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014dea:	89fb      	ldrh	r3, [r7, #14]
 8014dec:	3308      	adds	r3, #8
 8014dee:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	89fb      	ldrh	r3, [r7, #14]
 8014df6:	18d0      	adds	r0, r2, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	330e      	adds	r3, #14
 8014dfc:	2208      	movs	r2, #8
 8014dfe:	4619      	mov	r1, r3
 8014e00:	f004 f834 	bl	8018e6c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014e04:	89fb      	ldrh	r3, [r7, #14]
 8014e06:	3308      	adds	r3, #8
 8014e08:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8ad9      	ldrh	r1, [r3, #22]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	89fb      	ldrh	r3, [r7, #14]
 8014e14:	1c58      	adds	r0, r3, #1
 8014e16:	81f8      	strh	r0, [r7, #14]
 8014e18:	4413      	add	r3, r2
 8014e1a:	b2ca      	uxtb	r2, r1
 8014e1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	8adb      	ldrh	r3, [r3, #22]
 8014e22:	0a1b      	lsrs	r3, r3, #8
 8014e24:	b299      	uxth	r1, r3
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681a      	ldr	r2, [r3, #0]
 8014e2a:	89fb      	ldrh	r3, [r7, #14]
 8014e2c:	1c58      	adds	r0, r3, #1
 8014e2e:	81f8      	strh	r0, [r7, #14]
 8014e30:	4413      	add	r3, r2
 8014e32:	b2ca      	uxtb	r2, r1
 8014e34:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6999      	ldr	r1, [r3, #24]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	89fb      	ldrh	r3, [r7, #14]
 8014e40:	1c58      	adds	r0, r3, #1
 8014e42:	81f8      	strh	r0, [r7, #14]
 8014e44:	4413      	add	r3, r2
 8014e46:	b2ca      	uxtb	r2, r1
 8014e48:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	699b      	ldr	r3, [r3, #24]
 8014e4e:	0a19      	lsrs	r1, r3, #8
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681a      	ldr	r2, [r3, #0]
 8014e54:	89fb      	ldrh	r3, [r7, #14]
 8014e56:	1c58      	adds	r0, r3, #1
 8014e58:	81f8      	strh	r0, [r7, #14]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	b2ca      	uxtb	r2, r1
 8014e5e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	699b      	ldr	r3, [r3, #24]
 8014e64:	0c19      	lsrs	r1, r3, #16
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681a      	ldr	r2, [r3, #0]
 8014e6a:	89fb      	ldrh	r3, [r7, #14]
 8014e6c:	1c58      	adds	r0, r3, #1
 8014e6e:	81f8      	strh	r0, [r7, #14]
 8014e70:	4413      	add	r3, r2
 8014e72:	b2ca      	uxtb	r2, r1
 8014e74:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	699b      	ldr	r3, [r3, #24]
 8014e7a:	0e19      	lsrs	r1, r3, #24
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	89fb      	ldrh	r3, [r7, #14]
 8014e82:	1c58      	adds	r0, r3, #1
 8014e84:	81f8      	strh	r0, [r7, #14]
 8014e86:	4413      	add	r3, r2
 8014e88:	b2ca      	uxtb	r2, r1
 8014e8a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014e8c:	89fb      	ldrh	r3, [r7, #14]
 8014e8e:	b2da      	uxtb	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d003      	beq.n	8014eb4 <LoRaMacSerializerData+0x16>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d101      	bne.n	8014eb8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	e0e5      	b.n	8015084 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014ebc:	2308      	movs	r3, #8
 8014ebe:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	7b1b      	ldrb	r3, [r3, #12]
 8014ec4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	89bb      	ldrh	r3, [r7, #12]
 8014ece:	4413      	add	r3, r2
 8014ed0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d002      	beq.n	8014ee2 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014edc:	89bb      	ldrh	r3, [r7, #12]
 8014ede:	3301      	adds	r3, #1
 8014ee0:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	89bb      	ldrh	r3, [r7, #12]
 8014eec:	4413      	add	r3, r2
 8014eee:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014ef0:	89bb      	ldrh	r3, [r7, #12]
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	791b      	ldrb	r3, [r3, #4]
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	89ba      	ldrh	r2, [r7, #12]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d901      	bls.n	8014f06 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014f02:	2302      	movs	r3, #2
 8014f04:	e0be      	b.n	8015084 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681a      	ldr	r2, [r3, #0]
 8014f0a:	89fb      	ldrh	r3, [r7, #14]
 8014f0c:	1c59      	adds	r1, r3, #1
 8014f0e:	81f9      	strh	r1, [r7, #14]
 8014f10:	4413      	add	r3, r2
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	7952      	ldrb	r2, [r2, #5]
 8014f16:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	6899      	ldr	r1, [r3, #8]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	89fb      	ldrh	r3, [r7, #14]
 8014f22:	1c58      	adds	r0, r3, #1
 8014f24:	81f8      	strh	r0, [r7, #14]
 8014f26:	4413      	add	r3, r2
 8014f28:	b2ca      	uxtb	r2, r1
 8014f2a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	0a19      	lsrs	r1, r3, #8
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681a      	ldr	r2, [r3, #0]
 8014f36:	89fb      	ldrh	r3, [r7, #14]
 8014f38:	1c58      	adds	r0, r3, #1
 8014f3a:	81f8      	strh	r0, [r7, #14]
 8014f3c:	4413      	add	r3, r2
 8014f3e:	b2ca      	uxtb	r2, r1
 8014f40:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	0c19      	lsrs	r1, r3, #16
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681a      	ldr	r2, [r3, #0]
 8014f4c:	89fb      	ldrh	r3, [r7, #14]
 8014f4e:	1c58      	adds	r0, r3, #1
 8014f50:	81f8      	strh	r0, [r7, #14]
 8014f52:	4413      	add	r3, r2
 8014f54:	b2ca      	uxtb	r2, r1
 8014f56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	689b      	ldr	r3, [r3, #8]
 8014f5c:	0e19      	lsrs	r1, r3, #24
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	89fb      	ldrh	r3, [r7, #14]
 8014f64:	1c58      	adds	r0, r3, #1
 8014f66:	81f8      	strh	r0, [r7, #14]
 8014f68:	4413      	add	r3, r2
 8014f6a:	b2ca      	uxtb	r2, r1
 8014f6c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	89fb      	ldrh	r3, [r7, #14]
 8014f74:	1c59      	adds	r1, r3, #1
 8014f76:	81f9      	strh	r1, [r7, #14]
 8014f78:	4413      	add	r3, r2
 8014f7a:	687a      	ldr	r2, [r7, #4]
 8014f7c:	7b12      	ldrb	r2, [r2, #12]
 8014f7e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	89d9      	ldrh	r1, [r3, #14]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	89fb      	ldrh	r3, [r7, #14]
 8014f8a:	1c58      	adds	r0, r3, #1
 8014f8c:	81f8      	strh	r0, [r7, #14]
 8014f8e:	4413      	add	r3, r2
 8014f90:	b2ca      	uxtb	r2, r1
 8014f92:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	89db      	ldrh	r3, [r3, #14]
 8014f98:	0a1b      	lsrs	r3, r3, #8
 8014f9a:	b299      	uxth	r1, r3
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	89fb      	ldrh	r3, [r7, #14]
 8014fa2:	1c58      	adds	r0, r3, #1
 8014fa4:	81f8      	strh	r0, [r7, #14]
 8014fa6:	4413      	add	r3, r2
 8014fa8:	b2ca      	uxtb	r2, r1
 8014faa:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	89fb      	ldrh	r3, [r7, #14]
 8014fb2:	18d0      	adds	r0, r2, r3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f103 0110 	add.w	r1, r3, #16
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	7b1b      	ldrb	r3, [r3, #12]
 8014fbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	461a      	mov	r2, r3
 8014fc8:	f003 ff35 	bl	8018e36 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	7b1b      	ldrb	r3, [r3, #12]
 8014fd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	b29a      	uxth	r2, r3
 8014fd8:	89fb      	ldrh	r3, [r7, #14]
 8014fda:	4413      	add	r3, r2
 8014fdc:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d009      	beq.n	8014ffc <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	89fb      	ldrh	r3, [r7, #14]
 8014fee:	1c59      	adds	r1, r3, #1
 8014ff0:	81f9      	strh	r1, [r7, #14]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	687a      	ldr	r2, [r7, #4]
 8014ff6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014ffa:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	89fb      	ldrh	r3, [r7, #14]
 8015002:	18d0      	adds	r0, r2, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801500e:	b29b      	uxth	r3, r3
 8015010:	461a      	mov	r2, r3
 8015012:	f003 ff10 	bl	8018e36 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801501c:	b29a      	uxth	r2, r3
 801501e:	89fb      	ldrh	r3, [r7, #14]
 8015020:	4413      	add	r3, r2
 8015022:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	89fb      	ldrh	r3, [r7, #14]
 801502e:	1c58      	adds	r0, r3, #1
 8015030:	81f8      	strh	r0, [r7, #14]
 8015032:	4413      	add	r3, r2
 8015034:	b2ca      	uxtb	r2, r1
 8015036:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801503c:	0a19      	lsrs	r1, r3, #8
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	89fb      	ldrh	r3, [r7, #14]
 8015044:	1c58      	adds	r0, r3, #1
 8015046:	81f8      	strh	r0, [r7, #14]
 8015048:	4413      	add	r3, r2
 801504a:	b2ca      	uxtb	r2, r1
 801504c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015052:	0c19      	lsrs	r1, r3, #16
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	89fb      	ldrh	r3, [r7, #14]
 801505a:	1c58      	adds	r0, r3, #1
 801505c:	81f8      	strh	r0, [r7, #14]
 801505e:	4413      	add	r3, r2
 8015060:	b2ca      	uxtb	r2, r1
 8015062:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015068:	0e19      	lsrs	r1, r3, #24
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681a      	ldr	r2, [r3, #0]
 801506e:	89fb      	ldrh	r3, [r7, #14]
 8015070:	1c58      	adds	r0, r3, #1
 8015072:	81f8      	strh	r0, [r7, #14]
 8015074:	4413      	add	r3, r2
 8015076:	b2ca      	uxtb	r2, r1
 8015078:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801507a:	89fb      	ldrh	r3, [r7, #14]
 801507c:	b2da      	uxtb	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015082:	2300      	movs	r3, #0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3710      	adds	r7, #16
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801508c:	b480      	push	{r7}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	4603      	mov	r3, r0
 8015094:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015096:	79fb      	ldrb	r3, [r7, #7]
 8015098:	2b05      	cmp	r3, #5
 801509a:	d002      	beq.n	80150a2 <RegionIsActive+0x16>
 801509c:	2b08      	cmp	r3, #8
 801509e:	d002      	beq.n	80150a6 <RegionIsActive+0x1a>
 80150a0:	e003      	b.n	80150aa <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80150a2:	2301      	movs	r3, #1
 80150a4:	e002      	b.n	80150ac <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80150a6:	2301      	movs	r3, #1
 80150a8:	e000      	b.n	80150ac <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80150aa:	2300      	movs	r3, #0
        }
    }
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	370c      	adds	r7, #12
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bc80      	pop	{r7}
 80150b4:	4770      	bx	lr

080150b6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80150b6:	b580      	push	{r7, lr}
 80150b8:	b084      	sub	sp, #16
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	4603      	mov	r3, r0
 80150be:	6039      	str	r1, [r7, #0]
 80150c0:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80150c2:	2300      	movs	r3, #0
 80150c4:	60bb      	str	r3, [r7, #8]
    switch( region )
 80150c6:	79fb      	ldrb	r3, [r7, #7]
 80150c8:	2b05      	cmp	r3, #5
 80150ca:	d002      	beq.n	80150d2 <RegionGetPhyParam+0x1c>
 80150cc:	2b08      	cmp	r3, #8
 80150ce:	d006      	beq.n	80150de <RegionGetPhyParam+0x28>
 80150d0:	e00b      	b.n	80150ea <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80150d2:	6838      	ldr	r0, [r7, #0]
 80150d4:	f001 fae8 	bl	80166a8 <RegionEU868GetPhyParam>
 80150d8:	4603      	mov	r3, r0
 80150da:	60fb      	str	r3, [r7, #12]
 80150dc:	e007      	b.n	80150ee <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80150de:	6838      	ldr	r0, [r7, #0]
 80150e0:	f002 fca6 	bl	8017a30 <RegionUS915GetPhyParam>
 80150e4:	4603      	mov	r3, r0
 80150e6:	60fb      	str	r3, [r7, #12]
 80150e8:	e001      	b.n	80150ee <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	4618      	mov	r0, r3
 80150f2:	3710      	adds	r7, #16
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4603      	mov	r3, r0
 8015100:	6039      	str	r1, [r7, #0]
 8015102:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015104:	79fb      	ldrb	r3, [r7, #7]
 8015106:	2b05      	cmp	r3, #5
 8015108:	d002      	beq.n	8015110 <RegionSetBandTxDone+0x18>
 801510a:	2b08      	cmp	r3, #8
 801510c:	d004      	beq.n	8015118 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801510e:	e007      	b.n	8015120 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8015110:	6838      	ldr	r0, [r7, #0]
 8015112:	f001 fc15 	bl	8016940 <RegionEU868SetBandTxDone>
 8015116:	e003      	b.n	8015120 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8015118:	6838      	ldr	r0, [r7, #0]
 801511a:	f002 fdeb 	bl	8017cf4 <RegionUS915SetBandTxDone>
 801511e:	bf00      	nop
        }
    }
}
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b082      	sub	sp, #8
 801512a:	af00      	add	r7, sp, #0
 801512c:	4603      	mov	r3, r0
 801512e:	6039      	str	r1, [r7, #0]
 8015130:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015132:	79fb      	ldrb	r3, [r7, #7]
 8015134:	2b05      	cmp	r3, #5
 8015136:	d002      	beq.n	801513e <RegionInitDefaults+0x18>
 8015138:	2b08      	cmp	r3, #8
 801513a:	d004      	beq.n	8015146 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801513c:	e007      	b.n	801514e <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 801513e:	6838      	ldr	r0, [r7, #0]
 8015140:	f001 fc2a 	bl	8016998 <RegionEU868InitDefaults>
 8015144:	e003      	b.n	801514e <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8015146:	6838      	ldr	r0, [r7, #0]
 8015148:	f002 fe00 	bl	8017d4c <RegionUS915InitDefaults>
 801514c:	bf00      	nop
        }
    }
}
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b082      	sub	sp, #8
 801515a:	af00      	add	r7, sp, #0
 801515c:	4603      	mov	r3, r0
 801515e:	6039      	str	r1, [r7, #0]
 8015160:	71fb      	strb	r3, [r7, #7]
 8015162:	4613      	mov	r3, r2
 8015164:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015166:	79fb      	ldrb	r3, [r7, #7]
 8015168:	2b05      	cmp	r3, #5
 801516a:	d002      	beq.n	8015172 <RegionVerify+0x1c>
 801516c:	2b08      	cmp	r3, #8
 801516e:	d007      	beq.n	8015180 <RegionVerify+0x2a>
 8015170:	e00d      	b.n	801518e <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8015172:	79bb      	ldrb	r3, [r7, #6]
 8015174:	4619      	mov	r1, r3
 8015176:	6838      	ldr	r0, [r7, #0]
 8015178:	f001 fc9c 	bl	8016ab4 <RegionEU868Verify>
 801517c:	4603      	mov	r3, r0
 801517e:	e007      	b.n	8015190 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8015180:	79bb      	ldrb	r3, [r7, #6]
 8015182:	4619      	mov	r1, r3
 8015184:	6838      	ldr	r0, [r7, #0]
 8015186:	f002 ff13 	bl	8017fb0 <RegionUS915Verify>
 801518a:	4603      	mov	r3, r0
 801518c:	e000      	b.n	8015190 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 801518e:	2300      	movs	r3, #0
        }
    }
}
 8015190:	4618      	mov	r0, r3
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	4603      	mov	r3, r0
 80151a0:	6039      	str	r1, [r7, #0]
 80151a2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80151a4:	79fb      	ldrb	r3, [r7, #7]
 80151a6:	2b05      	cmp	r3, #5
 80151a8:	d002      	beq.n	80151b0 <RegionApplyCFList+0x18>
 80151aa:	2b08      	cmp	r3, #8
 80151ac:	d004      	beq.n	80151b8 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80151ae:	e007      	b.n	80151c0 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 80151b0:	6838      	ldr	r0, [r7, #0]
 80151b2:	f001 fcfb 	bl	8016bac <RegionEU868ApplyCFList>
 80151b6:	e003      	b.n	80151c0 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 80151b8:	6838      	ldr	r0, [r7, #0]
 80151ba:	f002 ff61 	bl	8018080 <RegionUS915ApplyCFList>
 80151be:	bf00      	nop
        }
    }
}
 80151c0:	bf00      	nop
 80151c2:	3708      	adds	r7, #8
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	4603      	mov	r3, r0
 80151d0:	6039      	str	r1, [r7, #0]
 80151d2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80151d4:	79fb      	ldrb	r3, [r7, #7]
 80151d6:	2b05      	cmp	r3, #5
 80151d8:	d002      	beq.n	80151e0 <RegionChanMaskSet+0x18>
 80151da:	2b08      	cmp	r3, #8
 80151dc:	d005      	beq.n	80151ea <RegionChanMaskSet+0x22>
 80151de:	e009      	b.n	80151f4 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80151e0:	6838      	ldr	r0, [r7, #0]
 80151e2:	f001 fd57 	bl	8016c94 <RegionEU868ChanMaskSet>
 80151e6:	4603      	mov	r3, r0
 80151e8:	e005      	b.n	80151f6 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80151ea:	6838      	ldr	r0, [r7, #0]
 80151ec:	f002 ffbe 	bl	801816c <RegionUS915ChanMaskSet>
 80151f0:	4603      	mov	r3, r0
 80151f2:	e000      	b.n	80151f6 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80151f4:	2300      	movs	r3, #0
        }
    }
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	603b      	str	r3, [r7, #0]
 8015206:	4603      	mov	r3, r0
 8015208:	71fb      	strb	r3, [r7, #7]
 801520a:	460b      	mov	r3, r1
 801520c:	71bb      	strb	r3, [r7, #6]
 801520e:	4613      	mov	r3, r2
 8015210:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015212:	79fb      	ldrb	r3, [r7, #7]
 8015214:	2b05      	cmp	r3, #5
 8015216:	d002      	beq.n	801521e <RegionComputeRxWindowParameters+0x20>
 8015218:	2b08      	cmp	r3, #8
 801521a:	d008      	beq.n	801522e <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801521c:	e00f      	b.n	801523e <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801521e:	7979      	ldrb	r1, [r7, #5]
 8015220:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	683a      	ldr	r2, [r7, #0]
 8015228:	f001 fd5e 	bl	8016ce8 <RegionEU868ComputeRxWindowParameters>
 801522c:	e007      	b.n	801523e <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801522e:	7979      	ldrb	r1, [r7, #5]
 8015230:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	683a      	ldr	r2, [r7, #0]
 8015238:	f003 f802 	bl	8018240 <RegionUS915ComputeRxWindowParameters>
 801523c:	bf00      	nop
        }
    }
}
 801523e:	bf00      	nop
 8015240:	3708      	adds	r7, #8
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015246:	b580      	push	{r7, lr}
 8015248:	b084      	sub	sp, #16
 801524a:	af00      	add	r7, sp, #0
 801524c:	4603      	mov	r3, r0
 801524e:	60b9      	str	r1, [r7, #8]
 8015250:	607a      	str	r2, [r7, #4]
 8015252:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015254:	7bfb      	ldrb	r3, [r7, #15]
 8015256:	2b05      	cmp	r3, #5
 8015258:	d002      	beq.n	8015260 <RegionRxConfig+0x1a>
 801525a:	2b08      	cmp	r3, #8
 801525c:	d006      	beq.n	801526c <RegionRxConfig+0x26>
 801525e:	e00b      	b.n	8015278 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8015260:	6879      	ldr	r1, [r7, #4]
 8015262:	68b8      	ldr	r0, [r7, #8]
 8015264:	f001 fd9a 	bl	8016d9c <RegionEU868RxConfig>
 8015268:	4603      	mov	r3, r0
 801526a:	e006      	b.n	801527a <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 801526c:	6879      	ldr	r1, [r7, #4]
 801526e:	68b8      	ldr	r0, [r7, #8]
 8015270:	f003 f830 	bl	80182d4 <RegionUS915RxConfig>
 8015274:	4603      	mov	r3, r0
 8015276:	e000      	b.n	801527a <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015278:	2300      	movs	r3, #0
        }
    }
}
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b084      	sub	sp, #16
 8015286:	af00      	add	r7, sp, #0
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	603b      	str	r3, [r7, #0]
 801528e:	4603      	mov	r3, r0
 8015290:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015292:	7bfb      	ldrb	r3, [r7, #15]
 8015294:	2b05      	cmp	r3, #5
 8015296:	d002      	beq.n	801529e <RegionTxConfig+0x1c>
 8015298:	2b08      	cmp	r3, #8
 801529a:	d007      	beq.n	80152ac <RegionTxConfig+0x2a>
 801529c:	e00d      	b.n	80152ba <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	6879      	ldr	r1, [r7, #4]
 80152a2:	68b8      	ldr	r0, [r7, #8]
 80152a4:	f001 fe4a 	bl	8016f3c <RegionEU868TxConfig>
 80152a8:	4603      	mov	r3, r0
 80152aa:	e007      	b.n	80152bc <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80152ac:	683a      	ldr	r2, [r7, #0]
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	68b8      	ldr	r0, [r7, #8]
 80152b2:	f003 f893 	bl	80183dc <RegionUS915TxConfig>
 80152b6:	4603      	mov	r3, r0
 80152b8:	e000      	b.n	80152bc <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80152ba:	2300      	movs	r3, #0
        }
    }
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}

080152c4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b086      	sub	sp, #24
 80152c8:	af02      	add	r7, sp, #8
 80152ca:	60b9      	str	r1, [r7, #8]
 80152cc:	607a      	str	r2, [r7, #4]
 80152ce:	603b      	str	r3, [r7, #0]
 80152d0:	4603      	mov	r3, r0
 80152d2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80152d4:	7bfb      	ldrb	r3, [r7, #15]
 80152d6:	2b05      	cmp	r3, #5
 80152d8:	d002      	beq.n	80152e0 <RegionLinkAdrReq+0x1c>
 80152da:	2b08      	cmp	r3, #8
 80152dc:	d00a      	beq.n	80152f4 <RegionLinkAdrReq+0x30>
 80152de:	e013      	b.n	8015308 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	683a      	ldr	r2, [r7, #0]
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	68b8      	ldr	r0, [r7, #8]
 80152ec:	f001 fef6 	bl	80170dc <RegionEU868LinkAdrReq>
 80152f0:	4603      	mov	r3, r0
 80152f2:	e00a      	b.n	801530a <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	69bb      	ldr	r3, [r7, #24]
 80152fa:	683a      	ldr	r2, [r7, #0]
 80152fc:	6879      	ldr	r1, [r7, #4]
 80152fe:	68b8      	ldr	r0, [r7, #8]
 8015300:	f003 f918 	bl	8018534 <RegionUS915LinkAdrReq>
 8015304:	4603      	mov	r3, r0
 8015306:	e000      	b.n	801530a <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015308:	2300      	movs	r3, #0
        }
    }
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b082      	sub	sp, #8
 8015316:	af00      	add	r7, sp, #0
 8015318:	4603      	mov	r3, r0
 801531a:	6039      	str	r1, [r7, #0]
 801531c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801531e:	79fb      	ldrb	r3, [r7, #7]
 8015320:	2b05      	cmp	r3, #5
 8015322:	d002      	beq.n	801532a <RegionRxParamSetupReq+0x18>
 8015324:	2b08      	cmp	r3, #8
 8015326:	d005      	beq.n	8015334 <RegionRxParamSetupReq+0x22>
 8015328:	e009      	b.n	801533e <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801532a:	6838      	ldr	r0, [r7, #0]
 801532c:	f001 fff8 	bl	8017320 <RegionEU868RxParamSetupReq>
 8015330:	4603      	mov	r3, r0
 8015332:	e005      	b.n	8015340 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8015334:	6838      	ldr	r0, [r7, #0]
 8015336:	f003 fb21 	bl	801897c <RegionUS915RxParamSetupReq>
 801533a:	4603      	mov	r3, r0
 801533c:	e000      	b.n	8015340 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801533e:	2300      	movs	r3, #0
        }
    }
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	4603      	mov	r3, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015354:	79fb      	ldrb	r3, [r7, #7]
 8015356:	2b05      	cmp	r3, #5
 8015358:	d002      	beq.n	8015360 <RegionNewChannelReq+0x18>
 801535a:	2b08      	cmp	r3, #8
 801535c:	d005      	beq.n	801536a <RegionNewChannelReq+0x22>
 801535e:	e009      	b.n	8015374 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015360:	6838      	ldr	r0, [r7, #0]
 8015362:	f002 f81b 	bl	801739c <RegionEU868NewChannelReq>
 8015366:	4603      	mov	r3, r0
 8015368:	e005      	b.n	8015376 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 801536a:	6838      	ldr	r0, [r7, #0]
 801536c:	f003 fb52 	bl	8018a14 <RegionUS915NewChannelReq>
 8015370:	4603      	mov	r3, r0
 8015372:	e000      	b.n	8015376 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015374:	2300      	movs	r3, #0
        }
    }
}
 8015376:	4618      	mov	r0, r3
 8015378:	3708      	adds	r7, #8
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b082      	sub	sp, #8
 8015382:	af00      	add	r7, sp, #0
 8015384:	4603      	mov	r3, r0
 8015386:	6039      	str	r1, [r7, #0]
 8015388:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801538a:	79fb      	ldrb	r3, [r7, #7]
 801538c:	2b05      	cmp	r3, #5
 801538e:	d002      	beq.n	8015396 <RegionTxParamSetupReq+0x18>
 8015390:	2b08      	cmp	r3, #8
 8015392:	d005      	beq.n	80153a0 <RegionTxParamSetupReq+0x22>
 8015394:	e009      	b.n	80153aa <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8015396:	6838      	ldr	r0, [r7, #0]
 8015398:	f002 f85e 	bl	8017458 <RegionEU868TxParamSetupReq>
 801539c:	4603      	mov	r3, r0
 801539e:	e005      	b.n	80153ac <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80153a0:	6838      	ldr	r0, [r7, #0]
 80153a2:	f003 fb42 	bl	8018a2a <RegionUS915TxParamSetupReq>
 80153a6:	4603      	mov	r3, r0
 80153a8:	e000      	b.n	80153ac <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80153aa:	2300      	movs	r3, #0
        }
    }
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3708      	adds	r7, #8
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4603      	mov	r3, r0
 80153bc:	6039      	str	r1, [r7, #0]
 80153be:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	2b05      	cmp	r3, #5
 80153c4:	d002      	beq.n	80153cc <RegionDlChannelReq+0x18>
 80153c6:	2b08      	cmp	r3, #8
 80153c8:	d005      	beq.n	80153d6 <RegionDlChannelReq+0x22>
 80153ca:	e009      	b.n	80153e0 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80153cc:	6838      	ldr	r0, [r7, #0]
 80153ce:	f002 f84f 	bl	8017470 <RegionEU868DlChannelReq>
 80153d2:	4603      	mov	r3, r0
 80153d4:	e005      	b.n	80153e2 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80153d6:	6838      	ldr	r0, [r7, #0]
 80153d8:	f003 fb32 	bl	8018a40 <RegionUS915DlChannelReq>
 80153dc:	4603      	mov	r3, r0
 80153de:	e000      	b.n	80153e2 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80153e0:	2300      	movs	r3, #0
        }
    }
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}

080153ea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80153ea:	b580      	push	{r7, lr}
 80153ec:	b082      	sub	sp, #8
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	4603      	mov	r3, r0
 80153f2:	71fb      	strb	r3, [r7, #7]
 80153f4:	460b      	mov	r3, r1
 80153f6:	71bb      	strb	r3, [r7, #6]
 80153f8:	4613      	mov	r3, r2
 80153fa:	717b      	strb	r3, [r7, #5]
    switch( region )
 80153fc:	79fb      	ldrb	r3, [r7, #7]
 80153fe:	2b05      	cmp	r3, #5
 8015400:	d002      	beq.n	8015408 <RegionAlternateDr+0x1e>
 8015402:	2b08      	cmp	r3, #8
 8015404:	d009      	beq.n	801541a <RegionAlternateDr+0x30>
 8015406:	e011      	b.n	801542c <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8015408:	797a      	ldrb	r2, [r7, #5]
 801540a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801540e:	4611      	mov	r1, r2
 8015410:	4618      	mov	r0, r3
 8015412:	f002 f871 	bl	80174f8 <RegionEU868AlternateDr>
 8015416:	4603      	mov	r3, r0
 8015418:	e009      	b.n	801542e <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 801541a:	797a      	ldrb	r2, [r7, #5]
 801541c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015420:	4611      	mov	r1, r2
 8015422:	4618      	mov	r0, r3
 8015424:	f003 fb18 	bl	8018a58 <RegionUS915AlternateDr>
 8015428:	4603      	mov	r3, r0
 801542a:	e000      	b.n	801542e <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801542c:	2300      	movs	r3, #0
        }
    }
}
 801542e:	4618      	mov	r0, r3
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
 8015440:	603b      	str	r3, [r7, #0]
 8015442:	4603      	mov	r3, r0
 8015444:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015446:	7bfb      	ldrb	r3, [r7, #15]
 8015448:	2b05      	cmp	r3, #5
 801544a:	d002      	beq.n	8015452 <RegionNextChannel+0x1c>
 801544c:	2b08      	cmp	r3, #8
 801544e:	d008      	beq.n	8015462 <RegionNextChannel+0x2c>
 8015450:	e00f      	b.n	8015472 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8015452:	69bb      	ldr	r3, [r7, #24]
 8015454:	683a      	ldr	r2, [r7, #0]
 8015456:	6879      	ldr	r1, [r7, #4]
 8015458:	68b8      	ldr	r0, [r7, #8]
 801545a:	f002 f85d 	bl	8017518 <RegionEU868NextChannel>
 801545e:	4603      	mov	r3, r0
 8015460:	e008      	b.n	8015474 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	68b8      	ldr	r0, [r7, #8]
 801546a:	f003 fb31 	bl	8018ad0 <RegionUS915NextChannel>
 801546e:	4603      	mov	r3, r0
 8015470:	e000      	b.n	8015474 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015472:	2309      	movs	r3, #9
        }
    }
}
 8015474:	4618      	mov	r0, r3
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	4603      	mov	r3, r0
 8015484:	6039      	str	r1, [r7, #0]
 8015486:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015488:	79fb      	ldrb	r3, [r7, #7]
 801548a:	2b05      	cmp	r3, #5
 801548c:	d002      	beq.n	8015494 <RegionSetContinuousWave+0x18>
 801548e:	2b08      	cmp	r3, #8
 8015490:	d004      	beq.n	801549c <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015492:	e007      	b.n	80154a4 <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 8015494:	6838      	ldr	r0, [r7, #0]
 8015496:	f002 f9b9 	bl	801780c <RegionEU868SetContinuousWave>
 801549a:	e003      	b.n	80154a4 <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 801549c:	6838      	ldr	r0, [r7, #0]
 801549e:	f003 fc0b 	bl	8018cb8 <RegionUS915SetContinuousWave>
 80154a2:	bf00      	nop
        }
    }
}
 80154a4:	bf00      	nop
 80154a6:	3708      	adds	r7, #8
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}

080154ac <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80154ac:	b590      	push	{r4, r7, lr}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	4604      	mov	r4, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	4611      	mov	r1, r2
 80154b8:	461a      	mov	r2, r3
 80154ba:	4623      	mov	r3, r4
 80154bc:	71fb      	strb	r3, [r7, #7]
 80154be:	4603      	mov	r3, r0
 80154c0:	71bb      	strb	r3, [r7, #6]
 80154c2:	460b      	mov	r3, r1
 80154c4:	717b      	strb	r3, [r7, #5]
 80154c6:	4613      	mov	r3, r2
 80154c8:	713b      	strb	r3, [r7, #4]
    switch( region )
 80154ca:	79fb      	ldrb	r3, [r7, #7]
 80154cc:	2b05      	cmp	r3, #5
 80154ce:	d002      	beq.n	80154d6 <RegionApplyDrOffset+0x2a>
 80154d0:	2b08      	cmp	r3, #8
 80154d2:	d00a      	beq.n	80154ea <RegionApplyDrOffset+0x3e>
 80154d4:	e013      	b.n	80154fe <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80154d6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80154da:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80154de:	79bb      	ldrb	r3, [r7, #6]
 80154e0:	4618      	mov	r0, r3
 80154e2:	f002 f9e1 	bl	80178a8 <RegionEU868ApplyDrOffset>
 80154e6:	4603      	mov	r3, r0
 80154e8:	e00a      	b.n	8015500 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80154ea:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80154ee:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80154f2:	79bb      	ldrb	r3, [r7, #6]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f003 fc35 	bl	8018d64 <RegionUS915ApplyDrOffset>
 80154fa:	4603      	mov	r3, r0
 80154fc:	e000      	b.n	8015500 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80154fe:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015500:	4618      	mov	r0, r3
 8015502:	370c      	adds	r7, #12
 8015504:	46bd      	mov	sp, r7
 8015506:	bd90      	pop	{r4, r7, pc}

08015508 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801550e:	4b04      	ldr	r3, [pc, #16]	; (8015520 <RegionGetVersion+0x18>)
 8015510:	607b      	str	r3, [r7, #4]

    return version;
 8015512:	687b      	ldr	r3, [r7, #4]
}
 8015514:	4618      	mov	r0, r3
 8015516:	370c      	adds	r7, #12
 8015518:	46bd      	mov	sp, r7
 801551a:	bc80      	pop	{r7}
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	01000300 	.word	0x01000300

08015524 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8015524:	b480      	push	{r7}
 8015526:	b087      	sub	sp, #28
 8015528:	af00      	add	r7, sp, #0
 801552a:	4603      	mov	r3, r0
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d002      	beq.n	801553e <FindAvailable125kHzChannels+0x1a>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d101      	bne.n	8015542 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801553e:	2303      	movs	r3, #3
 8015540:	e021      	b.n	8015586 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2200      	movs	r2, #0
 8015546:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015548:	2300      	movs	r3, #0
 801554a:	75fb      	strb	r3, [r7, #23]
 801554c:	e017      	b.n	801557e <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801554e:	89fa      	ldrh	r2, [r7, #14]
 8015550:	7dfb      	ldrb	r3, [r7, #23]
 8015552:	fa42 f303 	asr.w	r3, r2, r3
 8015556:	f003 0301 	and.w	r3, r3, #1
 801555a:	2b00      	cmp	r3, #0
 801555c:	d00c      	beq.n	8015578 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	461a      	mov	r2, r3
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	4413      	add	r3, r2
 8015568:	7dfa      	ldrb	r2, [r7, #23]
 801556a:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	3301      	adds	r3, #1
 8015572:	b2da      	uxtb	r2, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015578:	7dfb      	ldrb	r3, [r7, #23]
 801557a:	3301      	adds	r3, #1
 801557c:	75fb      	strb	r3, [r7, #23]
 801557e:	7dfb      	ldrb	r3, [r7, #23]
 8015580:	2b07      	cmp	r3, #7
 8015582:	d9e4      	bls.n	801554e <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015584:	2300      	movs	r3, #0
}
 8015586:	4618      	mov	r0, r3
 8015588:	371c      	adds	r7, #28
 801558a:	46bd      	mov	sp, r7
 801558c:	bc80      	pop	{r7}
 801558e:	4770      	bx	lr

08015590 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b089      	sub	sp, #36	; 0x24
 8015594:	af00      	add	r7, sp, #0
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801559c:	2300      	movs	r3, #0
 801559e:	617b      	str	r3, [r7, #20]
 80155a0:	2300      	movs	r3, #0
 80155a2:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 80155a4:	2300      	movs	r3, #0
 80155a6:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d005      	beq.n	80155ba <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d002      	beq.n	80155ba <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d101      	bne.n	80155be <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80155ba:	2303      	movs	r3, #3
 80155bc:	e055      	b.n	801566a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80155c4:	7f7b      	ldrb	r3, [r7, #29]
 80155c6:	085b      	lsrs	r3, r3, #1
 80155c8:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80155ca:	7f7b      	ldrb	r3, [r7, #29]
 80155cc:	f003 0301 	and.w	r3, r3, #1
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d107      	bne.n	80155e6 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80155d6:	7f3b      	ldrb	r3, [r7, #28]
 80155d8:	005b      	lsls	r3, r3, #1
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	4413      	add	r3, r2
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	b2db      	uxtb	r3, r3
 80155e2:	83fb      	strh	r3, [r7, #30]
 80155e4:	e006      	b.n	80155f4 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80155e6:	7f3b      	ldrb	r3, [r7, #28]
 80155e8:	005b      	lsls	r3, r3, #1
 80155ea:	68fa      	ldr	r2, [r7, #12]
 80155ec:	4413      	add	r3, r2
 80155ee:	881b      	ldrh	r3, [r3, #0]
 80155f0:	0a1b      	lsrs	r3, r3, #8
 80155f2:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80155f4:	f107 0213 	add.w	r2, r7, #19
 80155f8:	f107 0114 	add.w	r1, r7, #20
 80155fc:	8bfb      	ldrh	r3, [r7, #30]
 80155fe:	4618      	mov	r0, r3
 8015600:	f7ff ff90 	bl	8015524 <FindAvailable125kHzChannels>
 8015604:	4603      	mov	r3, r0
 8015606:	2b03      	cmp	r3, #3
 8015608:	d101      	bne.n	801560e <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801560a:	2303      	movs	r3, #3
 801560c:	e02d      	b.n	801566a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801560e:	7cfb      	ldrb	r3, [r7, #19]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d011      	beq.n	8015638 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015614:	7f7b      	ldrb	r3, [r7, #29]
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	b2dc      	uxtb	r4, r3
 801561a:	7cfb      	ldrb	r3, [r7, #19]
 801561c:	3b01      	subs	r3, #1
 801561e:	4619      	mov	r1, r3
 8015620:	2000      	movs	r0, #0
 8015622:	f003 fbf1 	bl	8018e08 <randr>
 8015626:	4603      	mov	r3, r0
 8015628:	3320      	adds	r3, #32
 801562a:	443b      	add	r3, r7
 801562c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8015630:	4423      	add	r3, r4
 8015632:	b2da      	uxtb	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015638:	7f7b      	ldrb	r3, [r7, #29]
 801563a:	3301      	adds	r3, #1
 801563c:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801563e:	7f7b      	ldrb	r3, [r7, #29]
 8015640:	2b07      	cmp	r3, #7
 8015642:	d901      	bls.n	8015648 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8015644:	2300      	movs	r3, #0
 8015646:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015648:	7cfb      	ldrb	r3, [r7, #19]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d104      	bne.n	8015658 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	7f7a      	ldrb	r2, [r7, #29]
 8015654:	429a      	cmp	r2, r3
 8015656:	d1b5      	bne.n	80155c4 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015658:	7cfb      	ldrb	r3, [r7, #19]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d004      	beq.n	8015668 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	7f7a      	ldrb	r2, [r7, #29]
 8015662:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015664:	2300      	movs	r3, #0
 8015666:	e000      	b.n	801566a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015668:	2303      	movs	r3, #3
}
 801566a:	4618      	mov	r0, r3
 801566c:	3724      	adds	r7, #36	; 0x24
 801566e:	46bd      	mov	sp, r7
 8015670:	bd90      	pop	{r4, r7, pc}

08015672 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8015672:	b480      	push	{r7}
 8015674:	b085      	sub	sp, #20
 8015676:	af00      	add	r7, sp, #0
 8015678:	4603      	mov	r3, r0
 801567a:	60b9      	str	r1, [r7, #8]
 801567c:	607a      	str	r2, [r7, #4]
 801567e:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8015680:	7bfb      	ldrb	r3, [r7, #15]
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	fb03 f202 	mul.w	r2, r3, r2
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	4413      	add	r3, r2
}
 801568c:	4618      	mov	r0, r3
 801568e:	3714      	adds	r7, #20
 8015690:	46bd      	mov	sp, r7
 8015692:	bc80      	pop	{r7}
 8015694:	4770      	bx	lr

08015696 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015696:	b480      	push	{r7}
 8015698:	b087      	sub	sp, #28
 801569a:	af00      	add	r7, sp, #0
 801569c:	60f8      	str	r0, [r7, #12]
 801569e:	4608      	mov	r0, r1
 80156a0:	4639      	mov	r1, r7
 80156a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80156a6:	4603      	mov	r3, r0
 80156a8:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	881b      	ldrh	r3, [r3, #0]
 80156ae:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80156b0:	7afb      	ldrb	r3, [r7, #11]
 80156b2:	f083 0301 	eor.w	r3, r3, #1
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d01b      	beq.n	80156f4 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80156bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80156c0:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80156c8:	d202      	bcs.n	80156d0 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80156ca:	2364      	movs	r3, #100	; 0x64
 80156cc:	82bb      	strh	r3, [r7, #20]
 80156ce:	e00b      	b.n	80156e8 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d803      	bhi.n	80156e2 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80156da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80156de:	82bb      	strh	r3, [r7, #20]
 80156e0:	e002      	b.n	80156e8 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80156e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80156e6:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80156e8:	8aba      	ldrh	r2, [r7, #20]
 80156ea:	8afb      	ldrh	r3, [r7, #22]
 80156ec:	4293      	cmp	r3, r2
 80156ee:	bf38      	it	cc
 80156f0:	4613      	movcc	r3, r2
 80156f2:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80156f4:	8afb      	ldrh	r3, [r7, #22]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d101      	bne.n	80156fe <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80156fa:	2301      	movs	r3, #1
 80156fc:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80156fe:	8afb      	ldrh	r3, [r7, #22]
}
 8015700:	4618      	mov	r0, r3
 8015702:	371c      	adds	r7, #28
 8015704:	46bd      	mov	sp, r7
 8015706:	bc80      	pop	{r7}
 8015708:	4770      	bx	lr
	...

0801570c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b08e      	sub	sp, #56	; 0x38
 8015710:	af02      	add	r7, sp, #8
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	4608      	mov	r0, r1
 8015716:	4639      	mov	r1, r7
 8015718:	e881 000c 	stmia.w	r1, {r2, r3}
 801571c:	4603      	mov	r3, r0
 801571e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	881b      	ldrh	r3, [r3, #0]
 8015724:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015726:	4b4b      	ldr	r3, [pc, #300]	; (8015854 <SetMaxTimeCredits+0x148>)
 8015728:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801572a:	463b      	mov	r3, r7
 801572c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015730:	f007 fa9a 	bl	801cc68 <SysTimeToMs>
 8015734:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015736:	f107 0314 	add.w	r3, r7, #20
 801573a:	2200      	movs	r2, #0
 801573c:	601a      	str	r2, [r3, #0]
 801573e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015740:	7af9      	ldrb	r1, [r7, #11]
 8015742:	463b      	mov	r3, r7
 8015744:	cb0c      	ldmia	r3, {r2, r3}
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f7ff ffa5 	bl	8015696 <GetDutyCycle>
 801574c:	4603      	mov	r3, r0
 801574e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015750:	7afb      	ldrb	r3, [r7, #11]
 8015752:	f083 0301 	eor.w	r3, r3, #1
 8015756:	b2db      	uxtb	r3, r3
 8015758:	2b00      	cmp	r3, #0
 801575a:	d062      	beq.n	8015822 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801575c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801575e:	2b64      	cmp	r3, #100	; 0x64
 8015760:	d105      	bne.n	801576e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015762:	4b3c      	ldr	r3, [pc, #240]	; (8015854 <SetMaxTimeCredits+0x148>)
 8015764:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801576a:	609a      	str	r2, [r3, #8]
 801576c:	e00b      	b.n	8015786 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801576e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015774:	d105      	bne.n	8015782 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015776:	4b38      	ldr	r3, [pc, #224]	; (8015858 <SetMaxTimeCredits+0x14c>)
 8015778:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801577e:	609a      	str	r2, [r3, #8]
 8015780:	e001      	b.n	8015786 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015782:	4b36      	ldr	r3, [pc, #216]	; (801585c <SetMaxTimeCredits+0x150>)
 8015784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	689a      	ldr	r2, [r3, #8]
 801578a:	f107 031c 	add.w	r3, r7, #28
 801578e:	4611      	mov	r1, r2
 8015790:	4618      	mov	r0, r3
 8015792:	f007 fa91 	bl	801ccb8 <SysTimeFromMs>
 8015796:	f107 0014 	add.w	r0, r7, #20
 801579a:	6a3b      	ldr	r3, [r7, #32]
 801579c:	9300      	str	r3, [sp, #0]
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	463a      	mov	r2, r7
 80157a2:	ca06      	ldmia	r2, {r1, r2}
 80157a4:	f007 f9a1 	bl	801caea <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80157a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80157ac:	f083 0301 	eor.w	r3, r3, #1
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d006      	beq.n	80157c4 <SetMaxTimeCredits+0xb8>
 80157b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80157ba:	f083 0301 	eor.w	r3, r3, #1
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d108      	bne.n	80157d6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80157c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d103      	bne.n	80157d6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80157ce:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80157d0:	4a23      	ldr	r2, [pc, #140]	; (8015860 <SetMaxTimeCredits+0x154>)
 80157d2:	4293      	cmp	r3, r2
 80157d4:	d92f      	bls.n	8015836 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157da:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	4a21      	ldr	r2, [pc, #132]	; (8015864 <SetMaxTimeCredits+0x158>)
 80157e0:	4293      	cmp	r3, r2
 80157e2:	d928      	bls.n	8015836 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80157ea:	3b30      	subs	r3, #48	; 0x30
 80157ec:	4a1e      	ldr	r2, [pc, #120]	; (8015868 <SetMaxTimeCredits+0x15c>)
 80157ee:	fba2 2303 	umull	r2, r3, r2, r3
 80157f2:	0c1b      	lsrs	r3, r3, #16
 80157f4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	4a1c      	ldr	r2, [pc, #112]	; (801586c <SetMaxTimeCredits+0x160>)
 80157fa:	fb02 f303 	mul.w	r3, r2, r3
 80157fe:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015806:	3330      	adds	r3, #48	; 0x30
 8015808:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801580a:	2300      	movs	r3, #0
 801580c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801580e:	f107 0314 	add.w	r3, r7, #20
 8015812:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015816:	f007 fa27 	bl	801cc68 <SysTimeToMs>
 801581a:	4602      	mov	r2, r0
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	609a      	str	r2, [r3, #8]
 8015820:	e009      	b.n	8015836 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015822:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015826:	f083 0301 	eor.w	r3, r3, #1
 801582a:	b2db      	uxtb	r3, r3
 801582c:	2b00      	cmp	r3, #0
 801582e:	d002      	beq.n	8015836 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015834:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d102      	bne.n	8015844 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015842:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015848:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801584a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801584c:	4618      	mov	r0, r3
 801584e:	3730      	adds	r7, #48	; 0x30
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	001b7740 	.word	0x001b7740
 8015858:	0112a880 	.word	0x0112a880
 801585c:	02932e00 	.word	0x02932e00
 8015860:	0001517f 	.word	0x0001517f
 8015864:	0001ec2f 	.word	0x0001ec2f
 8015868:	c22e4507 	.word	0xc22e4507
 801586c:	00015180 	.word	0x00015180

08015870 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b086      	sub	sp, #24
 8015874:	af02      	add	r7, sp, #8
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	4608      	mov	r0, r1
 801587a:	4611      	mov	r1, r2
 801587c:	461a      	mov	r2, r3
 801587e:	4603      	mov	r3, r0
 8015880:	70fb      	strb	r3, [r7, #3]
 8015882:	460b      	mov	r3, r1
 8015884:	70bb      	strb	r3, [r7, #2]
 8015886:	4613      	mov	r3, r2
 8015888:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801588a:	78f9      	ldrb	r1, [r7, #3]
 801588c:	787b      	ldrb	r3, [r7, #1]
 801588e:	9301      	str	r3, [sp, #4]
 8015890:	78bb      	ldrb	r3, [r7, #2]
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	f107 0318 	add.w	r3, r7, #24
 8015898:	cb0c      	ldmia	r3, {r2, r3}
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f7ff ff36 	bl	801570c <SetMaxTimeCredits>
 80158a0:	4603      	mov	r3, r0
 80158a2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80158a4:	78fb      	ldrb	r3, [r7, #3]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d00a      	beq.n	80158c0 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f007 fc20 	bl	801d0f4 <UTIL_TIMER_GetElapsedTime>
 80158b4:	4602      	mov	r2, r0
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	441a      	add	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	68da      	ldr	r2, [r3, #12]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d903      	bls.n	80158d4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	691a      	ldr	r2, [r3, #16]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6a3a      	ldr	r2, [r7, #32]
 80158d8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80158da:	89fb      	ldrh	r3, [r7, #14]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3710      	adds	r7, #16
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80158e4:	b480      	push	{r7}
 80158e6:	b085      	sub	sp, #20
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	4603      	mov	r3, r0
 80158ec:	460a      	mov	r2, r1
 80158ee:	80fb      	strh	r3, [r7, #6]
 80158f0:	4613      	mov	r3, r2
 80158f2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80158f4:	2300      	movs	r3, #0
 80158f6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80158f8:	2300      	movs	r3, #0
 80158fa:	73bb      	strb	r3, [r7, #14]
 80158fc:	e011      	b.n	8015922 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80158fe:	88fa      	ldrh	r2, [r7, #6]
 8015900:	7bbb      	ldrb	r3, [r7, #14]
 8015902:	2101      	movs	r1, #1
 8015904:	fa01 f303 	lsl.w	r3, r1, r3
 8015908:	401a      	ands	r2, r3
 801590a:	7bbb      	ldrb	r3, [r7, #14]
 801590c:	2101      	movs	r1, #1
 801590e:	fa01 f303 	lsl.w	r3, r1, r3
 8015912:	429a      	cmp	r2, r3
 8015914:	d102      	bne.n	801591c <CountChannels+0x38>
        {
            nbActiveBits++;
 8015916:	7bfb      	ldrb	r3, [r7, #15]
 8015918:	3301      	adds	r3, #1
 801591a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801591c:	7bbb      	ldrb	r3, [r7, #14]
 801591e:	3301      	adds	r3, #1
 8015920:	73bb      	strb	r3, [r7, #14]
 8015922:	7bba      	ldrb	r2, [r7, #14]
 8015924:	797b      	ldrb	r3, [r7, #5]
 8015926:	429a      	cmp	r2, r3
 8015928:	d3e9      	bcc.n	80158fe <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801592a:	7bfb      	ldrb	r3, [r7, #15]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3714      	adds	r7, #20
 8015930:	46bd      	mov	sp, r7
 8015932:	bc80      	pop	{r7}
 8015934:	4770      	bx	lr

08015936 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015936:	b580      	push	{r7, lr}
 8015938:	b084      	sub	sp, #16
 801593a:	af00      	add	r7, sp, #0
 801593c:	6039      	str	r1, [r7, #0]
 801593e:	4611      	mov	r1, r2
 8015940:	461a      	mov	r2, r3
 8015942:	4603      	mov	r3, r0
 8015944:	71fb      	strb	r3, [r7, #7]
 8015946:	460b      	mov	r3, r1
 8015948:	71bb      	strb	r3, [r7, #6]
 801594a:	4613      	mov	r3, r2
 801594c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801594e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015952:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015956:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801595a:	4618      	mov	r0, r3
 801595c:	f000 f85d 	bl	8015a1a <RegionCommonValueInRange>
 8015960:	4603      	mov	r3, r0
 8015962:	2b00      	cmp	r3, #0
 8015964:	d101      	bne.n	801596a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015966:	2300      	movs	r3, #0
 8015968:	e053      	b.n	8015a12 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801596a:	2300      	movs	r3, #0
 801596c:	73fb      	strb	r3, [r7, #15]
 801596e:	2300      	movs	r3, #0
 8015970:	73bb      	strb	r3, [r7, #14]
 8015972:	e049      	b.n	8015a08 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015974:	2300      	movs	r3, #0
 8015976:	737b      	strb	r3, [r7, #13]
 8015978:	e03d      	b.n	80159f6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801597a:	7bbb      	ldrb	r3, [r7, #14]
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	683a      	ldr	r2, [r7, #0]
 8015980:	4413      	add	r3, r2
 8015982:	881b      	ldrh	r3, [r3, #0]
 8015984:	461a      	mov	r2, r3
 8015986:	7b7b      	ldrb	r3, [r7, #13]
 8015988:	fa42 f303 	asr.w	r3, r2, r3
 801598c:	f003 0301 	and.w	r3, r3, #1
 8015990:	2b00      	cmp	r3, #0
 8015992:	d02d      	beq.n	80159f0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015994:	7bfa      	ldrb	r2, [r7, #15]
 8015996:	7b7b      	ldrb	r3, [r7, #13]
 8015998:	4413      	add	r3, r2
 801599a:	461a      	mov	r2, r3
 801599c:	4613      	mov	r3, r2
 801599e:	005b      	lsls	r3, r3, #1
 80159a0:	4413      	add	r3, r2
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	461a      	mov	r2, r3
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	4413      	add	r3, r2
 80159aa:	7a1b      	ldrb	r3, [r3, #8]
 80159ac:	f343 0303 	sbfx	r3, r3, #0, #4
 80159b0:	b25b      	sxtb	r3, r3
 80159b2:	f003 030f 	and.w	r3, r3, #15
 80159b6:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80159b8:	7bfa      	ldrb	r2, [r7, #15]
 80159ba:	7b7b      	ldrb	r3, [r7, #13]
 80159bc:	4413      	add	r3, r2
 80159be:	461a      	mov	r2, r3
 80159c0:	4613      	mov	r3, r2
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	4413      	add	r3, r2
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	461a      	mov	r2, r3
 80159ca:	69fb      	ldr	r3, [r7, #28]
 80159cc:	4413      	add	r3, r2
 80159ce:	7a1b      	ldrb	r3, [r3, #8]
 80159d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80159d4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80159d6:	f003 030f 	and.w	r3, r3, #15
 80159da:	b25a      	sxtb	r2, r3
 80159dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 f81a 	bl	8015a1a <RegionCommonValueInRange>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2b01      	cmp	r3, #1
 80159ea:	d101      	bne.n	80159f0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80159ec:	2301      	movs	r3, #1
 80159ee:	e010      	b.n	8015a12 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80159f0:	7b7b      	ldrb	r3, [r7, #13]
 80159f2:	3301      	adds	r3, #1
 80159f4:	737b      	strb	r3, [r7, #13]
 80159f6:	7b7b      	ldrb	r3, [r7, #13]
 80159f8:	2b0f      	cmp	r3, #15
 80159fa:	d9be      	bls.n	801597a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159fc:	7bfb      	ldrb	r3, [r7, #15]
 80159fe:	3310      	adds	r3, #16
 8015a00:	73fb      	strb	r3, [r7, #15]
 8015a02:	7bbb      	ldrb	r3, [r7, #14]
 8015a04:	3301      	adds	r3, #1
 8015a06:	73bb      	strb	r3, [r7, #14]
 8015a08:	7bfa      	ldrb	r2, [r7, #15]
 8015a0a:	79fb      	ldrb	r3, [r7, #7]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d3b1      	bcc.n	8015974 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015a10:	2300      	movs	r3, #0
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3710      	adds	r7, #16
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015a1a:	b480      	push	{r7}
 8015a1c:	b083      	sub	sp, #12
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	4603      	mov	r3, r0
 8015a22:	71fb      	strb	r3, [r7, #7]
 8015a24:	460b      	mov	r3, r1
 8015a26:	71bb      	strb	r3, [r7, #6]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015a2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015a30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	db07      	blt.n	8015a48 <RegionCommonValueInRange+0x2e>
 8015a38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015a3c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	dc01      	bgt.n	8015a48 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015a44:	2301      	movs	r3, #1
 8015a46:	e000      	b.n	8015a4a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bc80      	pop	{r7}
 8015a52:	4770      	bx	lr

08015a54 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	70fb      	strb	r3, [r7, #3]
 8015a60:	4613      	mov	r3, r2
 8015a62:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015a64:	78fb      	ldrb	r3, [r7, #3]
 8015a66:	091b      	lsrs	r3, r3, #4
 8015a68:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015a6a:	78bb      	ldrb	r3, [r7, #2]
 8015a6c:	091b      	lsrs	r3, r3, #4
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	7bfa      	ldrb	r2, [r7, #15]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d803      	bhi.n	8015a7e <RegionCommonChanDisable+0x2a>
 8015a76:	78fa      	ldrb	r2, [r7, #3]
 8015a78:	78bb      	ldrb	r3, [r7, #2]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d301      	bcc.n	8015a82 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e017      	b.n	8015ab2 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015a82:	7bfb      	ldrb	r3, [r7, #15]
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	4413      	add	r3, r2
 8015a8a:	881b      	ldrh	r3, [r3, #0]
 8015a8c:	b21a      	sxth	r2, r3
 8015a8e:	78fb      	ldrb	r3, [r7, #3]
 8015a90:	f003 030f 	and.w	r3, r3, #15
 8015a94:	2101      	movs	r1, #1
 8015a96:	fa01 f303 	lsl.w	r3, r1, r3
 8015a9a:	b21b      	sxth	r3, r3
 8015a9c:	43db      	mvns	r3, r3
 8015a9e:	b21b      	sxth	r3, r3
 8015aa0:	4013      	ands	r3, r2
 8015aa2:	b219      	sxth	r1, r3
 8015aa4:	7bfb      	ldrb	r3, [r7, #15]
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	4413      	add	r3, r2
 8015aac:	b28a      	uxth	r2, r1
 8015aae:	801a      	strh	r2, [r3, #0]

    return true;
 8015ab0:	2301      	movs	r3, #1
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3714      	adds	r7, #20
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bc80      	pop	{r7}
 8015aba:	4770      	bx	lr

08015abc <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	70fb      	strb	r3, [r7, #3]
 8015ac8:	4613      	mov	r3, r2
 8015aca:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015acc:	2300      	movs	r3, #0
 8015ace:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d101      	bne.n	8015ada <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	e018      	b.n	8015b0c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ada:	78fb      	ldrb	r3, [r7, #3]
 8015adc:	73bb      	strb	r3, [r7, #14]
 8015ade:	e010      	b.n	8015b02 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015ae0:	7bbb      	ldrb	r3, [r7, #14]
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	4413      	add	r3, r2
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	2110      	movs	r1, #16
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7ff fef9 	bl	80158e4 <CountChannels>
 8015af2:	4603      	mov	r3, r0
 8015af4:	461a      	mov	r2, r3
 8015af6:	7bfb      	ldrb	r3, [r7, #15]
 8015af8:	4413      	add	r3, r2
 8015afa:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	3301      	adds	r3, #1
 8015b00:	73bb      	strb	r3, [r7, #14]
 8015b02:	7bba      	ldrb	r2, [r7, #14]
 8015b04:	78bb      	ldrb	r3, [r7, #2]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d3ea      	bcc.n	8015ae0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3710      	adds	r7, #16
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015b14:	b480      	push	{r7}
 8015b16:	b087      	sub	sp, #28
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	60f8      	str	r0, [r7, #12]
 8015b1c:	60b9      	str	r1, [r7, #8]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d016      	beq.n	8015b56 <RegionCommonChanMaskCopy+0x42>
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d013      	beq.n	8015b56 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015b2e:	2300      	movs	r3, #0
 8015b30:	75fb      	strb	r3, [r7, #23]
 8015b32:	e00c      	b.n	8015b4e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015b34:	7dfb      	ldrb	r3, [r7, #23]
 8015b36:	005b      	lsls	r3, r3, #1
 8015b38:	68ba      	ldr	r2, [r7, #8]
 8015b3a:	441a      	add	r2, r3
 8015b3c:	7dfb      	ldrb	r3, [r7, #23]
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	68f9      	ldr	r1, [r7, #12]
 8015b42:	440b      	add	r3, r1
 8015b44:	8812      	ldrh	r2, [r2, #0]
 8015b46:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015b48:	7dfb      	ldrb	r3, [r7, #23]
 8015b4a:	3301      	adds	r3, #1
 8015b4c:	75fb      	strb	r3, [r7, #23]
 8015b4e:	7dfa      	ldrb	r2, [r7, #23]
 8015b50:	79fb      	ldrb	r3, [r7, #7]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d3ee      	bcc.n	8015b34 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015b56:	bf00      	nop
 8015b58:	371c      	adds	r7, #28
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bc80      	pop	{r7}
 8015b5e:	4770      	bx	lr

08015b60 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015b60:	b082      	sub	sp, #8
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b086      	sub	sp, #24
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	60f8      	str	r0, [r7, #12]
 8015b6a:	60b9      	str	r1, [r7, #8]
 8015b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8015b6e:	4613      	mov	r3, r2
 8015b70:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015b72:	79f9      	ldrb	r1, [r7, #7]
 8015b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b78:	cb0c      	ldmia	r3, {r2, r3}
 8015b7a:	68f8      	ldr	r0, [r7, #12]
 8015b7c:	f7ff fd8b 	bl	8015696 <GetDutyCycle>
 8015b80:	4603      	mov	r3, r0
 8015b82:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	68da      	ldr	r2, [r3, #12]
 8015b88:	8afb      	ldrh	r3, [r7, #22]
 8015b8a:	68b9      	ldr	r1, [r7, #8]
 8015b8c:	fb01 f303 	mul.w	r3, r1, r3
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d909      	bls.n	8015ba8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	68da      	ldr	r2, [r3, #12]
 8015b98:	8afb      	ldrh	r3, [r7, #22]
 8015b9a:	68b9      	ldr	r1, [r7, #8]
 8015b9c:	fb01 f303 	mul.w	r3, r1, r3
 8015ba0:	1ad2      	subs	r2, r2, r3
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015ba6:	e002      	b.n	8015bae <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	2200      	movs	r2, #0
 8015bac:	60da      	str	r2, [r3, #12]
}
 8015bae:	bf00      	nop
 8015bb0:	3718      	adds	r7, #24
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015bb8:	b002      	add	sp, #8
 8015bba:	4770      	bx	lr

08015bbc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bbe:	b08f      	sub	sp, #60	; 0x3c
 8015bc0:	af04      	add	r7, sp, #16
 8015bc2:	6039      	str	r1, [r7, #0]
 8015bc4:	4611      	mov	r1, r2
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	4603      	mov	r3, r0
 8015bca:	71fb      	strb	r3, [r7, #7]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	71bb      	strb	r3, [r7, #6]
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bd8:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015bda:	f007 fa79 	bl	801d0d0 <UTIL_TIMER_GetCurrentTime>
 8015bde:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015be0:	2300      	movs	r3, #0
 8015be2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015be4:	2301      	movs	r3, #1
 8015be6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015be8:	2300      	movs	r3, #0
 8015bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015bee:	2300      	movs	r3, #0
 8015bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015bf4:	e0ba      	b.n	8015d6c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015bf6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015bfa:	4613      	mov	r3, r2
 8015bfc:	005b      	lsls	r3, r3, #1
 8015bfe:	4413      	add	r3, r2
 8015c00:	00db      	lsls	r3, r3, #3
 8015c02:	461a      	mov	r2, r3
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	189c      	adds	r4, r3, r2
 8015c08:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015c0c:	797a      	ldrb	r2, [r7, #5]
 8015c0e:	79fd      	ldrb	r5, [r7, #7]
 8015c10:	69fb      	ldr	r3, [r7, #28]
 8015c12:	9302      	str	r3, [sp, #8]
 8015c14:	46ec      	mov	ip, sp
 8015c16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c22:	4633      	mov	r3, r6
 8015c24:	4629      	mov	r1, r5
 8015c26:	4620      	mov	r0, r4
 8015c28:	f7ff fe22 	bl	8015870 <UpdateTimeCredits>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015c30:	8afa      	ldrh	r2, [r7, #22]
 8015c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c34:	fb02 f303 	mul.w	r3, r2, r3
 8015c38:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015c3a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c3e:	4613      	mov	r3, r2
 8015c40:	005b      	lsls	r3, r3, #1
 8015c42:	4413      	add	r3, r2
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	461a      	mov	r2, r3
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	4413      	add	r3, r2
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	69ba      	ldr	r2, [r7, #24]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d308      	bcc.n	8015c66 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015c54:	797b      	ldrb	r3, [r7, #5]
 8015c56:	f083 0301 	eor.w	r3, r3, #1
 8015c5a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d013      	beq.n	8015c88 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015c60:	79fb      	ldrb	r3, [r7, #7]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d010      	beq.n	8015c88 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015c66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c6a:	4613      	mov	r3, r2
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	4413      	add	r3, r2
 8015c70:	00db      	lsls	r3, r3, #3
 8015c72:	461a      	mov	r2, r3
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	4413      	add	r3, r2
 8015c78:	2201      	movs	r2, #1
 8015c7a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c80:	3301      	adds	r3, #1
 8015c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015c86:	e06c      	b.n	8015d62 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015c88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	005b      	lsls	r3, r3, #1
 8015c90:	4413      	add	r3, r2
 8015c92:	00db      	lsls	r3, r3, #3
 8015c94:	461a      	mov	r2, r3
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	4413      	add	r3, r2
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015c9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	4413      	add	r3, r2
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	461a      	mov	r2, r3
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	4413      	add	r3, r2
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	69ba      	ldr	r2, [r7, #24]
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d215      	bcs.n	8015ce4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015cb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	4413      	add	r3, r2
 8015cc2:	00db      	lsls	r3, r3, #3
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	4413      	add	r3, r2
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	69ba      	ldr	r2, [r7, #24]
 8015cce:	1ad3      	subs	r3, r2, r3
 8015cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	bf28      	it	cs
 8015cd6:	4613      	movcs	r3, r2
 8015cd8:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cde:	3301      	adds	r3, #1
 8015ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015ce4:	79fb      	ldrb	r3, [r7, #7]
 8015ce6:	f083 0301 	eor.w	r3, r3, #1
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d038      	beq.n	8015d62 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	60fb      	str	r3, [r7, #12]
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015cf8:	8afb      	ldrh	r3, [r7, #22]
 8015cfa:	2b64      	cmp	r3, #100	; 0x64
 8015cfc:	d103      	bne.n	8015d06 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015cfe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015d02:	60fb      	str	r3, [r7, #12]
 8015d04:	e009      	b.n	8015d1a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015d06:	8afb      	ldrh	r3, [r7, #22]
 8015d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015d0c:	d103      	bne.n	8015d16 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015d0e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015d12:	60fb      	str	r3, [r7, #12]
 8015d14:	e001      	b.n	8015d1a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015d16:	4b1e      	ldr	r3, [pc, #120]	; (8015d90 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d18:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d1c:	4a1c      	ldr	r2, [pc, #112]	; (8015d90 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	d90e      	bls.n	8015d40 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015d22:	68fa      	ldr	r2, [r7, #12]
 8015d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d26:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015d2a:	3b30      	subs	r3, #48	; 0x30
 8015d2c:	4919      	ldr	r1, [pc, #100]	; (8015d94 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015d2e:	fba1 1303 	umull	r1, r3, r1, r3
 8015d32:	0c1b      	lsrs	r3, r3, #16
 8015d34:	3301      	adds	r3, #1
 8015d36:	4918      	ldr	r1, [pc, #96]	; (8015d98 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015d38:	fb01 f303 	mul.w	r3, r1, r3
 8015d3c:	4413      	add	r3, r2
 8015d3e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015d40:	f107 000c 	add.w	r0, r7, #12
 8015d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d4a:	f107 020c 	add.w	r2, r7, #12
 8015d4e:	ca06      	ldmia	r2, {r1, r2}
 8015d50:	f006 fecb 	bl	801caea <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015d54:	f107 030c 	add.w	r3, r7, #12
 8015d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d5c:	f006 ff84 	bl	801cc68 <SysTimeToMs>
 8015d60:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015d62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015d66:	3301      	adds	r3, #1
 8015d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015d6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d70:	79bb      	ldrb	r3, [r7, #6]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	f4ff af3f 	bcc.w	8015bf6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8015d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d102      	bne.n	8015d86 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015d80:	f04f 33ff 	mov.w	r3, #4294967295
 8015d84:	e000      	b.n	8015d88 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	372c      	adds	r7, #44	; 0x2c
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d90:	0001ec30 	.word	0x0001ec30
 8015d94:	c22e4507 	.word	0xc22e4507
 8015d98:	00015180 	.word	0x00015180

08015d9c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b085      	sub	sp, #20
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	2b03      	cmp	r3, #3
 8015db0:	d13f      	bne.n	8015e32 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	3301      	adds	r3, #1
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	b25a      	sxtb	r2, r3
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dc4:	f003 030f 	and.w	r3, r3, #15
 8015dc8:	b25a      	sxtb	r2, r3
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	091b      	lsrs	r3, r3, #4
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	b25a      	sxtb	r2, r3
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3302      	adds	r3, #2
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	889b      	ldrh	r3, [r3, #4]
 8015df0:	b21a      	sxth	r2, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	3303      	adds	r3, #3
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	021b      	lsls	r3, r3, #8
 8015dfa:	b21b      	sxth	r3, r3
 8015dfc:	4313      	orrs	r3, r2
 8015dfe:	b21b      	sxth	r3, r3
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	791a      	ldrb	r2, [r3, #4]
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	091b      	lsrs	r3, r3, #4
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	f003 0307 	and.w	r3, r3, #7
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	f003 030f 	and.w	r3, r3, #15
 8015e28:	b2da      	uxtb	r2, r3
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015e2e:	2305      	movs	r3, #5
 8015e30:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3714      	adds	r7, #20
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bc80      	pop	{r7}
 8015e3c:	4770      	bx	lr

08015e3e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015e3e:	b5b0      	push	{r4, r5, r7, lr}
 8015e40:	b088      	sub	sp, #32
 8015e42:	af02      	add	r7, sp, #8
 8015e44:	60f8      	str	r0, [r7, #12]
 8015e46:	60b9      	str	r1, [r7, #8]
 8015e48:	607a      	str	r2, [r7, #4]
 8015e4a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	791b      	ldrb	r3, [r3, #4]
 8015e50:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	799b      	ldrb	r3, [r3, #6]
 8015e56:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	79db      	ldrb	r3, [r3, #7]
 8015e5c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	7a1b      	ldrb	r3, [r3, #8]
 8015e62:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	795b      	ldrb	r3, [r3, #5]
 8015e68:	f083 0301 	eor.w	r3, r3, #1
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d008      	beq.n	8015e84 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	7adb      	ldrb	r3, [r3, #11]
 8015e76:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	7a5b      	ldrb	r3, [r3, #9]
 8015e7c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	7a9b      	ldrb	r3, [r3, #10]
 8015e82:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015e84:	7dfb      	ldrb	r3, [r7, #23]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d03a      	beq.n	8015f00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	7b18      	ldrb	r0, [r3, #12]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6919      	ldr	r1, [r3, #16]
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015e9e:	68fa      	ldr	r2, [r7, #12]
 8015ea0:	6992      	ldr	r2, [r2, #24]
 8015ea2:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015ea6:	9201      	str	r2, [sp, #4]
 8015ea8:	9300      	str	r3, [sp, #0]
 8015eaa:	462b      	mov	r3, r5
 8015eac:	4622      	mov	r2, r4
 8015eae:	f7ff fd42 	bl	8015936 <RegionCommonChanVerifyDr>
 8015eb2:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015eb4:	f083 0301 	eor.w	r3, r3, #1
 8015eb8:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d003      	beq.n	8015ec6 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8015ebe:	7dfb      	ldrb	r3, [r7, #23]
 8015ec0:	f023 0302 	bic.w	r3, r3, #2
 8015ec4:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015ed2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7ff fd9f 	bl	8015a1a <RegionCommonValueInRange>
 8015edc:	4603      	mov	r3, r0
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d10e      	bne.n	8015f00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015ee8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	da03      	bge.n	8015ef8 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	7f5b      	ldrb	r3, [r3, #29]
 8015ef4:	757b      	strb	r3, [r7, #21]
 8015ef6:	e003      	b.n	8015f00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015ef8:	7dfb      	ldrb	r3, [r7, #23]
 8015efa:	f023 0304 	bic.w	r3, r3, #4
 8015efe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015f00:	7dfb      	ldrb	r3, [r7, #23]
 8015f02:	2b07      	cmp	r3, #7
 8015f04:	d105      	bne.n	8015f12 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8015f06:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d101      	bne.n	8015f12 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8015f0e:	2301      	movs	r3, #1
 8015f10:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	7dba      	ldrb	r2, [r7, #22]
 8015f16:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	7d7a      	ldrb	r2, [r7, #21]
 8015f1c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015f1e:	7d3a      	ldrb	r2, [r7, #20]
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	701a      	strb	r2, [r3, #0]

    return status;
 8015f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3718      	adds	r7, #24
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015f30 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	4603      	mov	r3, r0
 8015f38:	6039      	str	r1, [r7, #0]
 8015f3a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015f3c:	79fb      	ldrb	r3, [r7, #7]
 8015f3e:	4a06      	ldr	r2, [pc, #24]	; (8015f58 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015f40:	fa02 f303 	lsl.w	r3, r2, r3
 8015f44:	461a      	mov	r2, r3
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	370c      	adds	r7, #12
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bc80      	pop	{r7}
 8015f54:	4770      	bx	lr
 8015f56:	bf00      	nop
 8015f58:	000f4240 	.word	0x000f4240

08015f5c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	4603      	mov	r3, r0
 8015f64:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015f66:	79fb      	ldrb	r3, [r7, #7]
 8015f68:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015f6c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bc80      	pop	{r7}
 8015f78:	4770      	bx	lr
	...

08015f7c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b085      	sub	sp, #20
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	607a      	str	r2, [r7, #4]
 8015f86:	603b      	str	r3, [r7, #0]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015f8c:	7afa      	ldrb	r2, [r7, #11]
 8015f8e:	7afb      	ldrb	r3, [r7, #11]
 8015f90:	3b04      	subs	r3, #4
 8015f92:	4619      	mov	r1, r3
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	fb03 f101 	mul.w	r1, r3, r1
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fa0:	fb00 f303 	mul.w	r3, r0, r3
 8015fa4:	440b      	add	r3, r1
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d013      	beq.n	8015fd4 <RegionCommonComputeRxWindowParameters+0x58>
 8015fac:	7afb      	ldrb	r3, [r7, #11]
 8015fae:	3b04      	subs	r3, #4
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	fb03 f101 	mul.w	r1, r3, r1
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fbe:	fb00 f303 	mul.w	r3, r0, r3
 8015fc2:	440b      	add	r3, r1
 8015fc4:	0059      	lsls	r1, r3, #1
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	440b      	add	r3, r1
 8015fca:	1e59      	subs	r1, r3, #1
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8015fd2:	e00f      	b.n	8015ff4 <RegionCommonComputeRxWindowParameters+0x78>
 8015fd4:	7afb      	ldrb	r3, [r7, #11]
 8015fd6:	3b04      	subs	r3, #4
 8015fd8:	4619      	mov	r1, r3
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	fb03 f101 	mul.w	r1, r3, r1
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015fe6:	fb00 f303 	mul.w	r3, r0, r3
 8015fea:	440b      	add	r3, r1
 8015fec:	0059      	lsls	r1, r3, #1
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8015ff4:	429a      	cmp	r2, r3
 8015ff6:	bf38      	it	cc
 8015ff8:	461a      	movcc	r2, r3
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	009b      	lsls	r3, r3, #2
 8016002:	4619      	mov	r1, r3
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	fb02 f303 	mul.w	r3, r2, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d007      	beq.n	8016022 <RegionCommonComputeRxWindowParameters+0xa6>
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	68fa      	ldr	r2, [r7, #12]
 8016018:	fb02 f303 	mul.w	r3, r2, r3
 801601c:	3301      	adds	r3, #1
 801601e:	085b      	lsrs	r3, r3, #1
 8016020:	e005      	b.n	801602e <RegionCommonComputeRxWindowParameters+0xb2>
 8016022:	69bb      	ldr	r3, [r7, #24]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	68fa      	ldr	r2, [r7, #12]
 8016028:	fb02 f303 	mul.w	r3, r2, r3
 801602c:	085b      	lsrs	r3, r3, #1
 801602e:	1acb      	subs	r3, r1, r3
 8016030:	683a      	ldr	r2, [r7, #0]
 8016032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016036:	fb01 f202 	mul.w	r2, r1, r2
 801603a:	1a9b      	subs	r3, r3, r2
 801603c:	2b00      	cmp	r3, #0
 801603e:	dd27      	ble.n	8016090 <RegionCommonComputeRxWindowParameters+0x114>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	009b      	lsls	r3, r3, #2
 8016044:	4619      	mov	r1, r3
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	fb02 f303 	mul.w	r3, r2, r3
 8016050:	2b00      	cmp	r3, #0
 8016052:	d007      	beq.n	8016064 <RegionCommonComputeRxWindowParameters+0xe8>
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	fb02 f303 	mul.w	r3, r2, r3
 801605e:	3301      	adds	r3, #1
 8016060:	085b      	lsrs	r3, r3, #1
 8016062:	e005      	b.n	8016070 <RegionCommonComputeRxWindowParameters+0xf4>
 8016064:	69bb      	ldr	r3, [r7, #24]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	68fa      	ldr	r2, [r7, #12]
 801606a:	fb02 f303 	mul.w	r3, r2, r3
 801606e:	085b      	lsrs	r3, r3, #1
 8016070:	1acb      	subs	r3, r1, r3
 8016072:	683a      	ldr	r2, [r7, #0]
 8016074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016078:	fb01 f202 	mul.w	r2, r1, r2
 801607c:	1a9b      	subs	r3, r3, r2
 801607e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8016082:	4a19      	ldr	r2, [pc, #100]	; (80160e8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016084:	fb82 1203 	smull	r1, r2, r2, r3
 8016088:	1192      	asrs	r2, r2, #6
 801608a:	17db      	asrs	r3, r3, #31
 801608c:	1ad3      	subs	r3, r2, r3
 801608e:	e024      	b.n	80160da <RegionCommonComputeRxWindowParameters+0x15e>
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	4619      	mov	r1, r3
 8016096:	69bb      	ldr	r3, [r7, #24]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	68fa      	ldr	r2, [r7, #12]
 801609c:	fb02 f303 	mul.w	r3, r2, r3
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d007      	beq.n	80160b4 <RegionCommonComputeRxWindowParameters+0x138>
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	68fa      	ldr	r2, [r7, #12]
 80160aa:	fb02 f303 	mul.w	r3, r2, r3
 80160ae:	3301      	adds	r3, #1
 80160b0:	085b      	lsrs	r3, r3, #1
 80160b2:	e005      	b.n	80160c0 <RegionCommonComputeRxWindowParameters+0x144>
 80160b4:	69bb      	ldr	r3, [r7, #24]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	68fa      	ldr	r2, [r7, #12]
 80160ba:	fb02 f303 	mul.w	r3, r2, r3
 80160be:	085b      	lsrs	r3, r3, #1
 80160c0:	1acb      	subs	r3, r1, r3
 80160c2:	683a      	ldr	r2, [r7, #0]
 80160c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160c8:	fb01 f202 	mul.w	r2, r1, r2
 80160cc:	1a9b      	subs	r3, r3, r2
 80160ce:	4a06      	ldr	r2, [pc, #24]	; (80160e8 <RegionCommonComputeRxWindowParameters+0x16c>)
 80160d0:	fb82 1203 	smull	r1, r2, r2, r3
 80160d4:	1192      	asrs	r2, r2, #6
 80160d6:	17db      	asrs	r3, r3, #31
 80160d8:	1ad3      	subs	r3, r2, r3
 80160da:	69fa      	ldr	r2, [r7, #28]
 80160dc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80160de:	bf00      	nop
 80160e0:	3714      	adds	r7, #20
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bc80      	pop	{r7}
 80160e6:	4770      	bx	lr
 80160e8:	10624dd3 	.word	0x10624dd3

080160ec <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	4603      	mov	r3, r0
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
 80160f8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80160fa:	2300      	movs	r3, #0
 80160fc:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80160fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016102:	005b      	lsls	r3, r3, #1
 8016104:	4618      	mov	r0, r3
 8016106:	f7ea fb65 	bl	80007d4 <__aeabi_ui2f>
 801610a:	4603      	mov	r3, r0
 801610c:	4619      	mov	r1, r3
 801610e:	68b8      	ldr	r0, [r7, #8]
 8016110:	f7ea faae 	bl	8000670 <__aeabi_fsub>
 8016114:	4603      	mov	r3, r0
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	4618      	mov	r0, r3
 801611a:	f7ea faa9 	bl	8000670 <__aeabi_fsub>
 801611e:	4603      	mov	r3, r0
 8016120:	4618      	mov	r0, r3
 8016122:	f7ea f999 	bl	8000458 <__aeabi_f2d>
 8016126:	4602      	mov	r2, r0
 8016128:	460b      	mov	r3, r1
 801612a:	4610      	mov	r0, r2
 801612c:	4619      	mov	r1, r3
 801612e:	f007 fb37 	bl	801d7a0 <floor>
 8016132:	4602      	mov	r2, r0
 8016134:	460b      	mov	r3, r1
 8016136:	4610      	mov	r0, r2
 8016138:	4619      	mov	r1, r3
 801613a:	f7ea fa6d 	bl	8000618 <__aeabi_d2iz>
 801613e:	4603      	mov	r3, r0
 8016140:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016142:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016146:	4618      	mov	r0, r3
 8016148:	3718      	adds	r7, #24
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}

0801614e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801614e:	b590      	push	{r4, r7, lr}
 8016150:	b087      	sub	sp, #28
 8016152:	af00      	add	r7, sp, #0
 8016154:	60f8      	str	r0, [r7, #12]
 8016156:	60b9      	str	r1, [r7, #8]
 8016158:	607a      	str	r2, [r7, #4]
 801615a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801615c:	2300      	movs	r3, #0
 801615e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016160:	2300      	movs	r3, #0
 8016162:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016164:	2300      	movs	r3, #0
 8016166:	757b      	strb	r3, [r7, #21]
 8016168:	2300      	movs	r3, #0
 801616a:	753b      	strb	r3, [r7, #20]
 801616c:	e09c      	b.n	80162a8 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801616e:	2300      	movs	r3, #0
 8016170:	74fb      	strb	r3, [r7, #19]
 8016172:	e08f      	b.n	8016294 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	685a      	ldr	r2, [r3, #4]
 8016178:	7d3b      	ldrb	r3, [r7, #20]
 801617a:	005b      	lsls	r3, r3, #1
 801617c:	4413      	add	r3, r2
 801617e:	881b      	ldrh	r3, [r3, #0]
 8016180:	461a      	mov	r2, r3
 8016182:	7cfb      	ldrb	r3, [r7, #19]
 8016184:	fa42 f303 	asr.w	r3, r2, r3
 8016188:	f003 0301 	and.w	r3, r3, #1
 801618c:	2b00      	cmp	r3, #0
 801618e:	d07e      	beq.n	801628e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	689a      	ldr	r2, [r3, #8]
 8016194:	7d79      	ldrb	r1, [r7, #21]
 8016196:	7cfb      	ldrb	r3, [r7, #19]
 8016198:	440b      	add	r3, r1
 801619a:	4619      	mov	r1, r3
 801619c:	460b      	mov	r3, r1
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	440b      	add	r3, r1
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	4413      	add	r3, r2
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d06b      	beq.n	8016284 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	781b      	ldrb	r3, [r3, #0]
 80161b0:	f083 0301 	eor.w	r3, r3, #1
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d011      	beq.n	80161de <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d00d      	beq.n	80161de <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	695a      	ldr	r2, [r3, #20]
 80161c6:	7d3b      	ldrb	r3, [r7, #20]
 80161c8:	005b      	lsls	r3, r3, #1
 80161ca:	4413      	add	r3, r2
 80161cc:	881b      	ldrh	r3, [r3, #0]
 80161ce:	461a      	mov	r2, r3
 80161d0:	7cfb      	ldrb	r3, [r7, #19]
 80161d2:	fa42 f303 	asr.w	r3, r2, r3
 80161d6:	f003 0301 	and.w	r3, r3, #1
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d054      	beq.n	8016288 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	785b      	ldrb	r3, [r3, #1]
 80161e2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	689a      	ldr	r2, [r3, #8]
 80161e8:	7d79      	ldrb	r1, [r7, #21]
 80161ea:	7cfb      	ldrb	r3, [r7, #19]
 80161ec:	440b      	add	r3, r1
 80161ee:	4619      	mov	r1, r3
 80161f0:	460b      	mov	r3, r1
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	440b      	add	r3, r1
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	4413      	add	r3, r2
 80161fa:	7a1b      	ldrb	r3, [r3, #8]
 80161fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8016200:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016202:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	689a      	ldr	r2, [r3, #8]
 8016208:	7d79      	ldrb	r1, [r7, #21]
 801620a:	7cfb      	ldrb	r3, [r7, #19]
 801620c:	440b      	add	r3, r1
 801620e:	4619      	mov	r1, r3
 8016210:	460b      	mov	r3, r1
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	440b      	add	r3, r1
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	4413      	add	r3, r2
 801621a:	7a1b      	ldrb	r3, [r3, #8]
 801621c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016220:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016222:	461a      	mov	r2, r3
 8016224:	4621      	mov	r1, r4
 8016226:	f7ff fbf8 	bl	8015a1a <RegionCommonValueInRange>
 801622a:	4603      	mov	r3, r0
 801622c:	2b00      	cmp	r3, #0
 801622e:	d02d      	beq.n	801628c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	68da      	ldr	r2, [r3, #12]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	6899      	ldr	r1, [r3, #8]
 8016238:	7d78      	ldrb	r0, [r7, #21]
 801623a:	7cfb      	ldrb	r3, [r7, #19]
 801623c:	4403      	add	r3, r0
 801623e:	4618      	mov	r0, r3
 8016240:	4603      	mov	r3, r0
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4403      	add	r3, r0
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	440b      	add	r3, r1
 801624a:	7a5b      	ldrb	r3, [r3, #9]
 801624c:	4619      	mov	r1, r3
 801624e:	460b      	mov	r3, r1
 8016250:	005b      	lsls	r3, r3, #1
 8016252:	440b      	add	r3, r1
 8016254:	00db      	lsls	r3, r3, #3
 8016256:	4413      	add	r3, r2
 8016258:	7d1b      	ldrb	r3, [r3, #20]
 801625a:	f083 0301 	eor.w	r3, r3, #1
 801625e:	b2db      	uxtb	r3, r3
 8016260:	2b00      	cmp	r3, #0
 8016262:	d003      	beq.n	801626c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016264:	7dbb      	ldrb	r3, [r7, #22]
 8016266:	3301      	adds	r3, #1
 8016268:	75bb      	strb	r3, [r7, #22]
                    continue;
 801626a:	e010      	b.n	801628e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801626c:	7dfb      	ldrb	r3, [r7, #23]
 801626e:	1c5a      	adds	r2, r3, #1
 8016270:	75fa      	strb	r2, [r7, #23]
 8016272:	461a      	mov	r2, r3
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	4413      	add	r3, r2
 8016278:	7d79      	ldrb	r1, [r7, #21]
 801627a:	7cfa      	ldrb	r2, [r7, #19]
 801627c:	440a      	add	r2, r1
 801627e:	b2d2      	uxtb	r2, r2
 8016280:	701a      	strb	r2, [r3, #0]
 8016282:	e004      	b.n	801628e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016284:	bf00      	nop
 8016286:	e002      	b.n	801628e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016288:	bf00      	nop
 801628a:	e000      	b.n	801628e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801628c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801628e:	7cfb      	ldrb	r3, [r7, #19]
 8016290:	3301      	adds	r3, #1
 8016292:	74fb      	strb	r3, [r7, #19]
 8016294:	7cfb      	ldrb	r3, [r7, #19]
 8016296:	2b0f      	cmp	r3, #15
 8016298:	f67f af6c 	bls.w	8016174 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801629c:	7d7b      	ldrb	r3, [r7, #21]
 801629e:	3310      	adds	r3, #16
 80162a0:	757b      	strb	r3, [r7, #21]
 80162a2:	7d3b      	ldrb	r3, [r7, #20]
 80162a4:	3301      	adds	r3, #1
 80162a6:	753b      	strb	r3, [r7, #20]
 80162a8:	7d7b      	ldrb	r3, [r7, #21]
 80162aa:	b29a      	uxth	r2, r3
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	8a1b      	ldrh	r3, [r3, #16]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	f4ff af5c 	bcc.w	801616e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	7dfa      	ldrb	r2, [r7, #23]
 80162ba:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	7dba      	ldrb	r2, [r7, #22]
 80162c0:	701a      	strb	r2, [r3, #0]
}
 80162c2:	bf00      	nop
 80162c4:	371c      	adds	r7, #28
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd90      	pop	{r4, r7, pc}

080162ca <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80162ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162cc:	b08b      	sub	sp, #44	; 0x2c
 80162ce:	af04      	add	r7, sp, #16
 80162d0:	60f8      	str	r0, [r7, #12]
 80162d2:	60b9      	str	r1, [r7, #8]
 80162d4:	607a      	str	r2, [r7, #4]
 80162d6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	4618      	mov	r0, r3
 80162de:	f006 ff09 	bl	801d0f4 <UTIL_TIMER_GetElapsedTime>
 80162e2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681a      	ldr	r2, [r3, #0]
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	1ad2      	subs	r2, r2, r3
 80162ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ee:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80162f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f2:	2201      	movs	r2, #1
 80162f4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	2200      	movs	r2, #0
 80162fa:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d004      	beq.n	801630e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016308:	697a      	ldr	r2, [r7, #20]
 801630a:	429a      	cmp	r2, r3
 801630c:	d32b      	bcc.n	8016366 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	69db      	ldr	r3, [r3, #28]
 8016318:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801631e:	68dd      	ldr	r5, [r3, #12]
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	7a5e      	ldrb	r6, [r3, #9]
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f893 c008 	ldrb.w	ip, [r3, #8]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	7d1b      	ldrb	r3, [r3, #20]
 801632e:	68fa      	ldr	r2, [r7, #12]
 8016330:	6992      	ldr	r2, [r2, #24]
 8016332:	9203      	str	r2, [sp, #12]
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	f10d 0e04 	add.w	lr, sp, #4
 801633a:	320c      	adds	r2, #12
 801633c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016340:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016344:	9300      	str	r3, [sp, #0]
 8016346:	4663      	mov	r3, ip
 8016348:	4632      	mov	r2, r6
 801634a:	4629      	mov	r1, r5
 801634c:	4620      	mov	r0, r4
 801634e:	f7ff fc35 	bl	8015bbc <RegionCommonUpdateBandTimeOff>
 8016352:	4602      	mov	r2, r0
 8016354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016356:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	69d8      	ldr	r0, [r3, #28]
 801635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635e:	683a      	ldr	r2, [r7, #0]
 8016360:	6879      	ldr	r1, [r7, #4]
 8016362:	f7ff fef4 	bl	801614e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d004      	beq.n	8016378 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016370:	2200      	movs	r2, #0
 8016372:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016374:	2300      	movs	r3, #0
 8016376:	e006      	b.n	8016386 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d001      	beq.n	8016384 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016380:	230b      	movs	r3, #11
 8016382:	e000      	b.n	8016386 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016384:	230c      	movs	r3, #12
    }
}
 8016386:	4618      	mov	r0, r3
 8016388:	371c      	adds	r7, #28
 801638a:	46bd      	mov	sp, r7
 801638c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801638e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801638e:	b5b0      	push	{r4, r5, r7, lr}
 8016390:	b086      	sub	sp, #24
 8016392:	af02      	add	r7, sp, #8
 8016394:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	781b      	ldrb	r3, [r3, #0]
 801639a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f993 2000 	ldrsb.w	r2, [r3]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d103      	bne.n	80163b4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80163b2:	e026      	b.n	8016402 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80163b4:	7bfb      	ldrb	r3, [r7, #15]
 80163b6:	3b01      	subs	r3, #1
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80163c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d019      	beq.n	80163fe <RegionCommonGetNextLowerTxDr+0x70>
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	78d8      	ldrb	r0, [r3, #3]
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6859      	ldr	r1, [r3, #4]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	6892      	ldr	r2, [r2, #8]
 80163e2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80163e6:	9201      	str	r2, [sp, #4]
 80163e8:	9300      	str	r3, [sp, #0]
 80163ea:	462b      	mov	r3, r5
 80163ec:	4622      	mov	r2, r4
 80163ee:	f7ff faa2 	bl	8015936 <RegionCommonChanVerifyDr>
 80163f2:	4603      	mov	r3, r0
 80163f4:	f083 0301 	eor.w	r3, r3, #1
 80163f8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d1da      	bne.n	80163b4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80163fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bdb0      	pop	{r4, r5, r7, pc}

0801640a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801640a:	b480      	push	{r7}
 801640c:	b083      	sub	sp, #12
 801640e:	af00      	add	r7, sp, #0
 8016410:	4603      	mov	r3, r0
 8016412:	460a      	mov	r2, r1
 8016414:	71fb      	strb	r3, [r7, #7]
 8016416:	4613      	mov	r3, r2
 8016418:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801641a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801641e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016422:	4293      	cmp	r3, r2
 8016424:	bfb8      	it	lt
 8016426:	4613      	movlt	r3, r2
 8016428:	b25b      	sxtb	r3, r3
}
 801642a:	4618      	mov	r0, r3
 801642c:	370c      	adds	r7, #12
 801642e:	46bd      	mov	sp, r7
 8016430:	bc80      	pop	{r7}
 8016432:	4770      	bx	lr

08016434 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	4413      	add	r3, r2
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4a07      	ldr	r2, [pc, #28]	; (8016468 <RegionCommonGetBandwidth+0x34>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d004      	beq.n	8016458 <RegionCommonGetBandwidth+0x24>
 801644e:	4a07      	ldr	r2, [pc, #28]	; (801646c <RegionCommonGetBandwidth+0x38>)
 8016450:	4293      	cmp	r3, r2
 8016452:	d003      	beq.n	801645c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016454:	2300      	movs	r3, #0
 8016456:	e002      	b.n	801645e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016458:	2301      	movs	r3, #1
 801645a:	e000      	b.n	801645e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801645c:	2302      	movs	r3, #2
    }
}
 801645e:	4618      	mov	r0, r3
 8016460:	370c      	adds	r7, #12
 8016462:	46bd      	mov	sp, r7
 8016464:	bc80      	pop	{r7}
 8016466:	4770      	bx	lr
 8016468:	0003d090 	.word	0x0003d090
 801646c:	0007a120 	.word	0x0007a120

08016470 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016470:	b5b0      	push	{r4, r5, r7, lr}
 8016472:	b08c      	sub	sp, #48	; 0x30
 8016474:	af04      	add	r7, sp, #16
 8016476:	4603      	mov	r3, r0
 8016478:	6039      	str	r1, [r7, #0]
 801647a:	71fb      	strb	r3, [r7, #7]
 801647c:	4613      	mov	r3, r2
 801647e:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8016480:	4b17      	ldr	r3, [pc, #92]	; (80164e0 <RegionCommonRxConfigPrint+0x70>)
 8016482:	f107 0408 	add.w	r4, r7, #8
 8016486:	461d      	mov	r5, r3
 8016488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801648c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016490:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8016494:	79fb      	ldrb	r3, [r7, #7]
 8016496:	2b05      	cmp	r3, #5
 8016498:	d812      	bhi.n	80164c0 <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 801649a:	79fb      	ldrb	r3, [r7, #7]
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	3320      	adds	r3, #32
 80164a0:	443b      	add	r3, r7
 80164a2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80164a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80164aa:	9202      	str	r2, [sp, #8]
 80164ac:	683a      	ldr	r2, [r7, #0]
 80164ae:	9201      	str	r2, [sp, #4]
 80164b0:	9300      	str	r3, [sp, #0]
 80164b2:	4b0c      	ldr	r3, [pc, #48]	; (80164e4 <RegionCommonRxConfigPrint+0x74>)
 80164b4:	2201      	movs	r2, #1
 80164b6:	2100      	movs	r1, #0
 80164b8:	2002      	movs	r0, #2
 80164ba:	f005 fe0f 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80164be:	e00a      	b.n	80164d6 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80164c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80164c4:	9301      	str	r3, [sp, #4]
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	4b07      	ldr	r3, [pc, #28]	; (80164e8 <RegionCommonRxConfigPrint+0x78>)
 80164cc:	2201      	movs	r2, #1
 80164ce:	2100      	movs	r1, #0
 80164d0:	2002      	movs	r0, #2
 80164d2:	f005 fe03 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 80164d6:	bf00      	nop
 80164d8:	3720      	adds	r7, #32
 80164da:	46bd      	mov	sp, r7
 80164dc:	bdb0      	pop	{r4, r5, r7, pc}
 80164de:	bf00      	nop
 80164e0:	0801df78 	.word	0x0801df78
 80164e4:	0801df3c 	.word	0x0801df3c
 80164e8:	0801df5c 	.word	0x0801df5c

080164ec <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af02      	add	r7, sp, #8
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	460b      	mov	r3, r1
 80164f6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80164f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80164fc:	9301      	str	r3, [sp, #4]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	9300      	str	r3, [sp, #0]
 8016502:	4b05      	ldr	r3, [pc, #20]	; (8016518 <RegionCommonTxConfigPrint+0x2c>)
 8016504:	2201      	movs	r2, #1
 8016506:	2100      	movs	r1, #0
 8016508:	2002      	movs	r0, #2
 801650a:	f005 fde7 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
}
 801650e:	bf00      	nop
 8016510:	3708      	adds	r7, #8
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}
 8016516:	bf00      	nop
 8016518:	0801df90 	.word	0x0801df90

0801651c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b082      	sub	sp, #8
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016526:	4b2d      	ldr	r3, [pc, #180]	; (80165dc <VerifyRfFreq+0xc0>)
 8016528:	6a1b      	ldr	r3, [r3, #32]
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	4798      	blx	r3
 801652e:	4603      	mov	r3, r0
 8016530:	f083 0301 	eor.w	r3, r3, #1
 8016534:	b2db      	uxtb	r3, r3
 8016536:	2b00      	cmp	r3, #0
 8016538:	d001      	beq.n	801653e <VerifyRfFreq+0x22>
    {
        return false;
 801653a:	2300      	movs	r3, #0
 801653c:	e04a      	b.n	80165d4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	4a27      	ldr	r2, [pc, #156]	; (80165e0 <VerifyRfFreq+0xc4>)
 8016542:	4293      	cmp	r3, r2
 8016544:	d307      	bcc.n	8016556 <VerifyRfFreq+0x3a>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	4a26      	ldr	r2, [pc, #152]	; (80165e4 <VerifyRfFreq+0xc8>)
 801654a:	4293      	cmp	r3, r2
 801654c:	d803      	bhi.n	8016556 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	2202      	movs	r2, #2
 8016552:	701a      	strb	r2, [r3, #0]
 8016554:	e03d      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	4a22      	ldr	r2, [pc, #136]	; (80165e4 <VerifyRfFreq+0xc8>)
 801655a:	4293      	cmp	r3, r2
 801655c:	d907      	bls.n	801656e <VerifyRfFreq+0x52>
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	4a21      	ldr	r2, [pc, #132]	; (80165e8 <VerifyRfFreq+0xcc>)
 8016562:	4293      	cmp	r3, r2
 8016564:	d803      	bhi.n	801656e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	2200      	movs	r2, #0
 801656a:	701a      	strb	r2, [r3, #0]
 801656c:	e031      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	4a1d      	ldr	r2, [pc, #116]	; (80165e8 <VerifyRfFreq+0xcc>)
 8016572:	4293      	cmp	r3, r2
 8016574:	d907      	bls.n	8016586 <VerifyRfFreq+0x6a>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	4a1c      	ldr	r2, [pc, #112]	; (80165ec <VerifyRfFreq+0xd0>)
 801657a:	4293      	cmp	r3, r2
 801657c:	d803      	bhi.n	8016586 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	2201      	movs	r2, #1
 8016582:	701a      	strb	r2, [r3, #0]
 8016584:	e025      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	4a19      	ldr	r2, [pc, #100]	; (80165f0 <VerifyRfFreq+0xd4>)
 801658a:	4293      	cmp	r3, r2
 801658c:	d907      	bls.n	801659e <VerifyRfFreq+0x82>
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	4a18      	ldr	r2, [pc, #96]	; (80165f4 <VerifyRfFreq+0xd8>)
 8016592:	4293      	cmp	r3, r2
 8016594:	d803      	bhi.n	801659e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	2205      	movs	r2, #5
 801659a:	701a      	strb	r2, [r3, #0]
 801659c:	e019      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	4a15      	ldr	r2, [pc, #84]	; (80165f8 <VerifyRfFreq+0xdc>)
 80165a2:	4293      	cmp	r3, r2
 80165a4:	d907      	bls.n	80165b6 <VerifyRfFreq+0x9a>
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	4a14      	ldr	r2, [pc, #80]	; (80165fc <VerifyRfFreq+0xe0>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d803      	bhi.n	80165b6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	2203      	movs	r2, #3
 80165b2:	701a      	strb	r2, [r3, #0]
 80165b4:	e00d      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	4a11      	ldr	r2, [pc, #68]	; (8016600 <VerifyRfFreq+0xe4>)
 80165ba:	4293      	cmp	r3, r2
 80165bc:	d307      	bcc.n	80165ce <VerifyRfFreq+0xb2>
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	4a10      	ldr	r2, [pc, #64]	; (8016604 <VerifyRfFreq+0xe8>)
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d803      	bhi.n	80165ce <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	2204      	movs	r2, #4
 80165ca:	701a      	strb	r2, [r3, #0]
 80165cc:	e001      	b.n	80165d2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e000      	b.n	80165d4 <VerifyRfFreq+0xb8>
    }
    return true;
 80165d2:	2301      	movs	r3, #1
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3708      	adds	r7, #8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	0801e648 	.word	0x0801e648
 80165e0:	337055c0 	.word	0x337055c0
 80165e4:	338eda3f 	.word	0x338eda3f
 80165e8:	33bca100 	.word	0x33bca100
 80165ec:	33c5c8c0 	.word	0x33c5c8c0
 80165f0:	33c74f5f 	.word	0x33c74f5f
 80165f4:	33cef080 	.word	0x33cef080
 80165f8:	33d1fdbf 	.word	0x33d1fdbf
 80165fc:	33d5ce50 	.word	0x33d5ce50
 8016600:	33d691a0 	.word	0x33d691a0
 8016604:	33db2580 	.word	0x33db2580

08016608 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016608:	b590      	push	{r4, r7, lr}
 801660a:	b08b      	sub	sp, #44	; 0x2c
 801660c:	af04      	add	r7, sp, #16
 801660e:	4603      	mov	r3, r0
 8016610:	460a      	mov	r2, r1
 8016612:	71fb      	strb	r3, [r7, #7]
 8016614:	4613      	mov	r3, r2
 8016616:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801661c:	4a1f      	ldr	r2, [pc, #124]	; (801669c <GetTimeOnAir+0x94>)
 801661e:	5cd3      	ldrb	r3, [r2, r3]
 8016620:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8016622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016626:	491e      	ldr	r1, [pc, #120]	; (80166a0 <GetTimeOnAir+0x98>)
 8016628:	4618      	mov	r0, r3
 801662a:	f7ff ff03 	bl	8016434 <RegionCommonGetBandwidth>
 801662e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016630:	2300      	movs	r3, #0
 8016632:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016638:	2b07      	cmp	r3, #7
 801663a:	d118      	bne.n	801666e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801663c:	4b19      	ldr	r3, [pc, #100]	; (80166a4 <GetTimeOnAir+0x9c>)
 801663e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016640:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016648:	fb02 f303 	mul.w	r3, r2, r3
 801664c:	4619      	mov	r1, r3
 801664e:	88bb      	ldrh	r3, [r7, #4]
 8016650:	b2db      	uxtb	r3, r3
 8016652:	2201      	movs	r2, #1
 8016654:	9203      	str	r2, [sp, #12]
 8016656:	9302      	str	r3, [sp, #8]
 8016658:	2300      	movs	r3, #0
 801665a:	9301      	str	r3, [sp, #4]
 801665c:	2305      	movs	r3, #5
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	2300      	movs	r3, #0
 8016662:	460a      	mov	r2, r1
 8016664:	68f9      	ldr	r1, [r7, #12]
 8016666:	2000      	movs	r0, #0
 8016668:	47a0      	blx	r4
 801666a:	6178      	str	r0, [r7, #20]
 801666c:	e011      	b.n	8016692 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801666e:	4b0d      	ldr	r3, [pc, #52]	; (80166a4 <GetTimeOnAir+0x9c>)
 8016670:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016672:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016676:	88bb      	ldrh	r3, [r7, #4]
 8016678:	b2db      	uxtb	r3, r3
 801667a:	2101      	movs	r1, #1
 801667c:	9103      	str	r1, [sp, #12]
 801667e:	9302      	str	r3, [sp, #8]
 8016680:	2300      	movs	r3, #0
 8016682:	9301      	str	r3, [sp, #4]
 8016684:	2308      	movs	r3, #8
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	2301      	movs	r3, #1
 801668a:	68f9      	ldr	r1, [r7, #12]
 801668c:	2001      	movs	r0, #1
 801668e:	47a0      	blx	r4
 8016690:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016692:	697b      	ldr	r3, [r7, #20]
}
 8016694:	4618      	mov	r0, r3
 8016696:	371c      	adds	r7, #28
 8016698:	46bd      	mov	sp, r7
 801669a:	bd90      	pop	{r4, r7, pc}
 801669c:	0801e58c 	.word	0x0801e58c
 80166a0:	0801e594 	.word	0x0801e594
 80166a4:	0801e648 	.word	0x0801e648

080166a8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b088      	sub	sp, #32
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80166b0:	2300      	movs	r3, #0
 80166b2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	3b01      	subs	r3, #1
 80166ba:	2b38      	cmp	r3, #56	; 0x38
 80166bc:	f200 8128 	bhi.w	8016910 <RegionEU868GetPhyParam+0x268>
 80166c0:	a201      	add	r2, pc, #4	; (adr r2, 80166c8 <RegionEU868GetPhyParam+0x20>)
 80166c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166c6:	bf00      	nop
 80166c8:	080167ad 	.word	0x080167ad
 80166cc:	080167b3 	.word	0x080167b3
 80166d0:	08016911 	.word	0x08016911
 80166d4:	08016911 	.word	0x08016911
 80166d8:	08016911 	.word	0x08016911
 80166dc:	080167b9 	.word	0x080167b9
 80166e0:	08016911 	.word	0x08016911
 80166e4:	080167f3 	.word	0x080167f3
 80166e8:	08016911 	.word	0x08016911
 80166ec:	080167f9 	.word	0x080167f9
 80166f0:	080167ff 	.word	0x080167ff
 80166f4:	08016805 	.word	0x08016805
 80166f8:	0801680b 	.word	0x0801680b
 80166fc:	0801681b 	.word	0x0801681b
 8016700:	0801682b 	.word	0x0801682b
 8016704:	08016831 	.word	0x08016831
 8016708:	08016839 	.word	0x08016839
 801670c:	08016841 	.word	0x08016841
 8016710:	08016849 	.word	0x08016849
 8016714:	08016851 	.word	0x08016851
 8016718:	08016859 	.word	0x08016859
 801671c:	08016861 	.word	0x08016861
 8016720:	08016875 	.word	0x08016875
 8016724:	0801687b 	.word	0x0801687b
 8016728:	08016881 	.word	0x08016881
 801672c:	08016887 	.word	0x08016887
 8016730:	08016893 	.word	0x08016893
 8016734:	0801689f 	.word	0x0801689f
 8016738:	080168a5 	.word	0x080168a5
 801673c:	080168ad 	.word	0x080168ad
 8016740:	080168b3 	.word	0x080168b3
 8016744:	080168b9 	.word	0x080168b9
 8016748:	080168c1 	.word	0x080168c1
 801674c:	080167bf 	.word	0x080167bf
 8016750:	08016911 	.word	0x08016911
 8016754:	08016911 	.word	0x08016911
 8016758:	08016911 	.word	0x08016911
 801675c:	08016911 	.word	0x08016911
 8016760:	08016911 	.word	0x08016911
 8016764:	08016911 	.word	0x08016911
 8016768:	08016911 	.word	0x08016911
 801676c:	08016911 	.word	0x08016911
 8016770:	08016911 	.word	0x08016911
 8016774:	08016911 	.word	0x08016911
 8016778:	08016911 	.word	0x08016911
 801677c:	08016911 	.word	0x08016911
 8016780:	08016911 	.word	0x08016911
 8016784:	080168c7 	.word	0x080168c7
 8016788:	080168cd 	.word	0x080168cd
 801678c:	080168db 	.word	0x080168db
 8016790:	08016911 	.word	0x08016911
 8016794:	08016911 	.word	0x08016911
 8016798:	080168e1 	.word	0x080168e1
 801679c:	080168e7 	.word	0x080168e7
 80167a0:	08016911 	.word	0x08016911
 80167a4:	080168ed 	.word	0x080168ed
 80167a8:	080168fd 	.word	0x080168fd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80167ac:	2300      	movs	r3, #0
 80167ae:	61bb      	str	r3, [r7, #24]
            break;
 80167b0:	e0af      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80167b2:	2300      	movs	r3, #0
 80167b4:	61bb      	str	r3, [r7, #24]
            break;
 80167b6:	e0ac      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80167b8:	2300      	movs	r3, #0
 80167ba:	61bb      	str	r3, [r7, #24]
            break;
 80167bc:	e0a9      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167c4:	733b      	strb	r3, [r7, #12]
 80167c6:	2307      	movs	r3, #7
 80167c8:	737b      	strb	r3, [r7, #13]
 80167ca:	2300      	movs	r3, #0
 80167cc:	73bb      	strb	r3, [r7, #14]
 80167ce:	2310      	movs	r3, #16
 80167d0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80167d2:	4b53      	ldr	r3, [pc, #332]	; (8016920 <RegionEU868GetPhyParam+0x278>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167da:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80167dc:	4b50      	ldr	r3, [pc, #320]	; (8016920 <RegionEU868GetPhyParam+0x278>)
 80167de:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80167e0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80167e2:	f107 030c 	add.w	r3, r7, #12
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7ff fdd1 	bl	801638e <RegionCommonGetNextLowerTxDr>
 80167ec:	4603      	mov	r3, r0
 80167ee:	61bb      	str	r3, [r7, #24]
            break;
 80167f0:	e08f      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80167f2:	230e      	movs	r3, #14
 80167f4:	61bb      	str	r3, [r7, #24]
            break;
 80167f6:	e08c      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80167f8:	2300      	movs	r3, #0
 80167fa:	61bb      	str	r3, [r7, #24]
            break;
 80167fc:	e089      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80167fe:	2340      	movs	r3, #64	; 0x40
 8016800:	61bb      	str	r3, [r7, #24]
            break;
 8016802:	e086      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016804:	2320      	movs	r3, #32
 8016806:	61bb      	str	r3, [r7, #24]
            break;
 8016808:	e083      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016810:	461a      	mov	r2, r3
 8016812:	4b44      	ldr	r3, [pc, #272]	; (8016924 <RegionEU868GetPhyParam+0x27c>)
 8016814:	5c9b      	ldrb	r3, [r3, r2]
 8016816:	61bb      	str	r3, [r7, #24]
            break;
 8016818:	e07b      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016820:	461a      	mov	r2, r3
 8016822:	4b41      	ldr	r3, [pc, #260]	; (8016928 <RegionEU868GetPhyParam+0x280>)
 8016824:	5c9b      	ldrb	r3, [r3, r2]
 8016826:	61bb      	str	r3, [r7, #24]
            break;
 8016828:	e073      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801682a:	2301      	movs	r3, #1
 801682c:	61bb      	str	r3, [r7, #24]
            break;
 801682e:	e070      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016830:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016834:	61bb      	str	r3, [r7, #24]
            break;
 8016836:	e06c      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801683c:	61bb      	str	r3, [r7, #24]
            break;
 801683e:	e068      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016840:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016844:	61bb      	str	r3, [r7, #24]
            break;
 8016846:	e064      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016848:	f241 3388 	movw	r3, #5000	; 0x1388
 801684c:	61bb      	str	r3, [r7, #24]
            break;
 801684e:	e060      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016850:	f241 7370 	movw	r3, #6000	; 0x1770
 8016854:	61bb      	str	r3, [r7, #24]
            break;
 8016856:	e05c      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8016858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801685c:	61bb      	str	r3, [r7, #24]
            break;
 801685e:	e058      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8016860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016864:	4831      	ldr	r0, [pc, #196]	; (801692c <RegionEU868GetPhyParam+0x284>)
 8016866:	f002 facf 	bl	8018e08 <randr>
 801686a:	4603      	mov	r3, r0
 801686c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016870:	61bb      	str	r3, [r7, #24]
            break;
 8016872:	e04e      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016874:	2300      	movs	r3, #0
 8016876:	61bb      	str	r3, [r7, #24]
            break;
 8016878:	e04b      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801687a:	4b2d      	ldr	r3, [pc, #180]	; (8016930 <RegionEU868GetPhyParam+0x288>)
 801687c:	61bb      	str	r3, [r7, #24]
            break;
 801687e:	e048      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016880:	2300      	movs	r3, #0
 8016882:	61bb      	str	r3, [r7, #24]
            break;
 8016884:	e045      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016886:	4b26      	ldr	r3, [pc, #152]	; (8016920 <RegionEU868GetPhyParam+0x278>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801688e:	61bb      	str	r3, [r7, #24]
            break;
 8016890:	e03f      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016892:	4b23      	ldr	r3, [pc, #140]	; (8016920 <RegionEU868GetPhyParam+0x278>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801689a:	61bb      	str	r3, [r7, #24]
            break;
 801689c:	e039      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801689e:	2310      	movs	r3, #16
 80168a0:	61bb      	str	r3, [r7, #24]
            break;
 80168a2:	e036      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80168a4:	4b1e      	ldr	r3, [pc, #120]	; (8016920 <RegionEU868GetPhyParam+0x278>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	61bb      	str	r3, [r7, #24]
            break;
 80168aa:	e032      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80168ac:	2300      	movs	r3, #0
 80168ae:	61bb      	str	r3, [r7, #24]
            break;
 80168b0:	e02f      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80168b2:	2300      	movs	r3, #0
 80168b4:	61bb      	str	r3, [r7, #24]
            break;
 80168b6:	e02c      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80168b8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80168bc:	61bb      	str	r3, [r7, #24]
            break;
 80168be:	e028      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80168c0:	4b1c      	ldr	r3, [pc, #112]	; (8016934 <RegionEU868GetPhyParam+0x28c>)
 80168c2:	61bb      	str	r3, [r7, #24]
            break;
 80168c4:	e025      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80168c6:	4b1a      	ldr	r3, [pc, #104]	; (8016930 <RegionEU868GetPhyParam+0x288>)
 80168c8:	61bb      	str	r3, [r7, #24]
            break;
 80168ca:	e022      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80168cc:	2311      	movs	r3, #17
 80168ce:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80168d0:	2302      	movs	r3, #2
 80168d2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80168d4:	2300      	movs	r3, #0
 80168d6:	76bb      	strb	r3, [r7, #26]
            break;
 80168d8:	e01b      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80168da:	2303      	movs	r3, #3
 80168dc:	61bb      	str	r3, [r7, #24]
            break;
 80168de:	e018      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80168e0:	4b13      	ldr	r3, [pc, #76]	; (8016930 <RegionEU868GetPhyParam+0x288>)
 80168e2:	61bb      	str	r3, [r7, #24]
            break;
 80168e4:	e015      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80168e6:	2303      	movs	r3, #3
 80168e8:	61bb      	str	r3, [r7, #24]
            break;
 80168ea:	e012      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168f2:	461a      	mov	r2, r3
 80168f4:	4b10      	ldr	r3, [pc, #64]	; (8016938 <RegionEU868GetPhyParam+0x290>)
 80168f6:	5c9b      	ldrb	r3, [r3, r2]
 80168f8:	61bb      	str	r3, [r7, #24]
            break;
 80168fa:	e00a      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016902:	490e      	ldr	r1, [pc, #56]	; (801693c <RegionEU868GetPhyParam+0x294>)
 8016904:	4618      	mov	r0, r3
 8016906:	f7ff fd95 	bl	8016434 <RegionCommonGetBandwidth>
 801690a:	4603      	mov	r3, r0
 801690c:	61bb      	str	r3, [r7, #24]
            break;
 801690e:	e000      	b.n	8016912 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8016910:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	61fb      	str	r3, [r7, #28]
 8016916:	69fb      	ldr	r3, [r7, #28]
}
 8016918:	4618      	mov	r0, r3
 801691a:	3720      	adds	r7, #32
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	20003c84 	.word	0x20003c84
 8016924:	0801e5b4 	.word	0x0801e5b4
 8016928:	0801e5bc 	.word	0x0801e5bc
 801692c:	fffffc18 	.word	0xfffffc18
 8016930:	33d3e608 	.word	0x33d3e608
 8016934:	4009999a 	.word	0x4009999a
 8016938:	0801e58c 	.word	0x0801e58c
 801693c:	0801e594 	.word	0x0801e594

08016940 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016940:	b590      	push	{r4, r7, lr}
 8016942:	b085      	sub	sp, #20
 8016944:	af02      	add	r7, sp, #8
 8016946:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016948:	4b11      	ldr	r3, [pc, #68]	; (8016990 <RegionEU868SetBandTxDone+0x50>)
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	4b11      	ldr	r3, [pc, #68]	; (8016994 <RegionEU868SetBandTxDone+0x54>)
 801694e:	6819      	ldr	r1, [r3, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	4618      	mov	r0, r3
 8016956:	4603      	mov	r3, r0
 8016958:	005b      	lsls	r3, r3, #1
 801695a:	4403      	add	r3, r0
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	440b      	add	r3, r1
 8016960:	3309      	adds	r3, #9
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	4619      	mov	r1, r3
 8016966:	460b      	mov	r3, r1
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	440b      	add	r3, r1
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	18d0      	adds	r0, r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6899      	ldr	r1, [r3, #8]
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	785c      	ldrb	r4, [r3, #1]
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	691a      	ldr	r2, [r3, #16]
 801697c:	9200      	str	r2, [sp, #0]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	4622      	mov	r2, r4
 8016982:	f7ff f8ed 	bl	8015b60 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8016986:	bf00      	nop
 8016988:	370c      	adds	r7, #12
 801698a:	46bd      	mov	sp, r7
 801698c:	bd90      	pop	{r4, r7, pc}
 801698e:	bf00      	nop
 8016990:	20003c80 	.word	0x20003c80
 8016994:	20003c84 	.word	0x20003c84

08016998 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b0b0      	sub	sp, #192	; 0xc0
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80169a0:	4a3e      	ldr	r2, [pc, #248]	; (8016a9c <RegionEU868InitDefaults+0x104>)
 80169a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80169a6:	4611      	mov	r1, r2
 80169a8:	2290      	movs	r2, #144	; 0x90
 80169aa:	4618      	mov	r0, r3
 80169ac:	f006 fee0 	bl	801d770 <memcpy>
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	7a1b      	ldrb	r3, [r3, #8]
 80169b4:	2b02      	cmp	r3, #2
 80169b6:	d05e      	beq.n	8016a76 <RegionEU868InitDefaults+0xde>
 80169b8:	2b02      	cmp	r3, #2
 80169ba:	dc6b      	bgt.n	8016a94 <RegionEU868InitDefaults+0xfc>
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d002      	beq.n	80169c6 <RegionEU868InitDefaults+0x2e>
 80169c0:	2b01      	cmp	r3, #1
 80169c2:	d03f      	beq.n	8016a44 <RegionEU868InitDefaults+0xac>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80169c4:	e066      	b.n	8016a94 <RegionEU868InitDefaults+0xfc>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d063      	beq.n	8016a96 <RegionEU868InitDefaults+0xfe>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d05f      	beq.n	8016a96 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4a31      	ldr	r2, [pc, #196]	; (8016aa0 <RegionEU868InitDefaults+0x108>)
 80169dc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	4a30      	ldr	r2, [pc, #192]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 80169e4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80169e6:	4b2e      	ldr	r3, [pc, #184]	; (8016aa0 <RegionEU868InitDefaults+0x108>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80169f0:	2290      	movs	r2, #144	; 0x90
 80169f2:	4619      	mov	r1, r3
 80169f4:	f002 fa1f 	bl	8018e36 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80169f8:	4b2a      	ldr	r3, [pc, #168]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4a2a      	ldr	r2, [pc, #168]	; (8016aa8 <RegionEU868InitDefaults+0x110>)
 80169fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016a04:	4b27      	ldr	r3, [pc, #156]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	4a28      	ldr	r2, [pc, #160]	; (8016aac <RegionEU868InitDefaults+0x114>)
 8016a0a:	330c      	adds	r3, #12
 8016a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016a12:	4b24      	ldr	r3, [pc, #144]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4a26      	ldr	r2, [pc, #152]	; (8016ab0 <RegionEU868InitDefaults+0x118>)
 8016a18:	3318      	adds	r3, #24
 8016a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016a20:	4b20      	ldr	r3, [pc, #128]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2207      	movs	r2, #7
 8016a26:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016a2a:	4b1e      	ldr	r3, [pc, #120]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016a32:	4b1c      	ldr	r3, [pc, #112]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	f7ff f869 	bl	8015b14 <RegionCommonChanMaskCopy>
 8016a42:	e028      	b.n	8016a96 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016a44:	4b17      	ldr	r3, [pc, #92]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016a4c:	4b15      	ldr	r3, [pc, #84]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2200      	movs	r2, #0
 8016a52:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016a54:	4b13      	ldr	r3, [pc, #76]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016a5c:	4b11      	ldr	r3, [pc, #68]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016a64:	4b0f      	ldr	r3, [pc, #60]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	4619      	mov	r1, r3
 8016a70:	f7ff f850 	bl	8015b14 <RegionCommonChanMaskCopy>
            break;
 8016a74:	e00f      	b.n	8016a96 <RegionEU868InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016a76:	4b0b      	ldr	r3, [pc, #44]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016a7e:	4b09      	ldr	r3, [pc, #36]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016a86:	4b07      	ldr	r3, [pc, #28]	; (8016aa4 <RegionEU868InitDefaults+0x10c>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	430a      	orrs	r2, r1
 8016a8c:	b292      	uxth	r2, r2
 8016a8e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016a92:	e000      	b.n	8016a96 <RegionEU868InitDefaults+0xfe>
            break;
 8016a94:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016a96:	37c0      	adds	r7, #192	; 0xc0
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	0801dfac 	.word	0x0801dfac
 8016aa0:	20003c80 	.word	0x20003c80
 8016aa4:	20003c84 	.word	0x20003c84
 8016aa8:	0801e03c 	.word	0x0801e03c
 8016aac:	0801e048 	.word	0x0801e048
 8016ab0:	0801e054 	.word	0x0801e054

08016ab4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b084      	sub	sp, #16
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	460b      	mov	r3, r1
 8016abe:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016ac0:	78fb      	ldrb	r3, [r7, #3]
 8016ac2:	2b0f      	cmp	r3, #15
 8016ac4:	d86c      	bhi.n	8016ba0 <RegionEU868Verify+0xec>
 8016ac6:	a201      	add	r2, pc, #4	; (adr r2, 8016acc <RegionEU868Verify+0x18>)
 8016ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016acc:	08016b0d 	.word	0x08016b0d
 8016ad0:	08016ba1 	.word	0x08016ba1
 8016ad4:	08016ba1 	.word	0x08016ba1
 8016ad8:	08016ba1 	.word	0x08016ba1
 8016adc:	08016ba1 	.word	0x08016ba1
 8016ae0:	08016b25 	.word	0x08016b25
 8016ae4:	08016b43 	.word	0x08016b43
 8016ae8:	08016b61 	.word	0x08016b61
 8016aec:	08016ba1 	.word	0x08016ba1
 8016af0:	08016b7f 	.word	0x08016b7f
 8016af4:	08016b7f 	.word	0x08016b7f
 8016af8:	08016ba1 	.word	0x08016ba1
 8016afc:	08016ba1 	.word	0x08016ba1
 8016b00:	08016ba1 	.word	0x08016ba1
 8016b04:	08016ba1 	.word	0x08016ba1
 8016b08:	08016b9d 	.word	0x08016b9d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	f107 020f 	add.w	r2, r7, #15
 8016b18:	4611      	mov	r1, r2
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fcfe 	bl	801651c <VerifyRfFreq>
 8016b20:	4603      	mov	r3, r0
 8016b22:	e03e      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f993 3000 	ldrsb.w	r3, [r3]
 8016b2a:	2207      	movs	r2, #7
 8016b2c:	2100      	movs	r1, #0
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7fe ff73 	bl	8015a1a <RegionCommonValueInRange>
 8016b34:	4603      	mov	r3, r0
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	bf14      	ite	ne
 8016b3a:	2301      	movne	r3, #1
 8016b3c:	2300      	moveq	r3, #0
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	e02f      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f993 3000 	ldrsb.w	r3, [r3]
 8016b48:	2205      	movs	r2, #5
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7fe ff64 	bl	8015a1a <RegionCommonValueInRange>
 8016b52:	4603      	mov	r3, r0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	bf14      	ite	ne
 8016b58:	2301      	movne	r3, #1
 8016b5a:	2300      	moveq	r3, #0
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	e020      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f993 3000 	ldrsb.w	r3, [r3]
 8016b66:	2207      	movs	r2, #7
 8016b68:	2100      	movs	r1, #0
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7fe ff55 	bl	8015a1a <RegionCommonValueInRange>
 8016b70:	4603      	mov	r3, r0
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	bf14      	ite	ne
 8016b76:	2301      	movne	r3, #1
 8016b78:	2300      	moveq	r3, #0
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	e011      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f993 3000 	ldrsb.w	r3, [r3]
 8016b84:	2207      	movs	r2, #7
 8016b86:	210e      	movs	r1, #14
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7fe ff46 	bl	8015a1a <RegionCommonValueInRange>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	bf14      	ite	ne
 8016b94:	2301      	movne	r3, #1
 8016b96:	2300      	moveq	r3, #0
 8016b98:	b2db      	uxtb	r3, r3
 8016b9a:	e002      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	e000      	b.n	8016ba2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016ba0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop

08016bac <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b08a      	sub	sp, #40	; 0x28
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016bb4:	2350      	movs	r3, #80	; 0x50
 8016bb6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	791b      	ldrb	r3, [r3, #4]
 8016bbe:	2b10      	cmp	r3, #16
 8016bc0:	d162      	bne.n	8016c88 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	330f      	adds	r3, #15
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d15e      	bne.n	8016c8c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016bce:	2300      	movs	r3, #0
 8016bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bd4:	2303      	movs	r3, #3
 8016bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bda:	e050      	b.n	8016c7e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016be0:	2b07      	cmp	r3, #7
 8016be2:	d824      	bhi.n	8016c2e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bec:	4413      	add	r3, r2
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016bf2:	69ba      	ldr	r2, [r7, #24]
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6819      	ldr	r1, [r3, #0]
 8016bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bfc:	3301      	adds	r3, #1
 8016bfe:	440b      	add	r3, r1
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	021b      	lsls	r3, r3, #8
 8016c04:	4313      	orrs	r3, r2
 8016c06:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016c08:	69ba      	ldr	r2, [r7, #24]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	6819      	ldr	r1, [r3, #0]
 8016c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c12:	3302      	adds	r3, #2
 8016c14:	440b      	add	r3, r1
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	041b      	lsls	r3, r3, #16
 8016c1a:	4313      	orrs	r3, r2
 8016c1c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016c1e:	69bb      	ldr	r3, [r7, #24]
 8016c20:	2264      	movs	r2, #100	; 0x64
 8016c22:	fb02 f303 	mul.w	r3, r2, r3
 8016c26:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	61fb      	str	r3, [r7, #28]
 8016c2c:	e006      	b.n	8016c3c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016c32:	2300      	movs	r3, #0
 8016c34:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d00b      	beq.n	8016c5a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016c42:	f107 0318 	add.w	r3, r7, #24
 8016c46:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016c48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c4c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016c4e:	f107 0310 	add.w	r3, r7, #16
 8016c52:	4618      	mov	r0, r3
 8016c54:	f000 fd0e 	bl	8017674 <RegionEU868ChannelAdd>
 8016c58:	e007      	b.n	8016c6a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016c5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c5e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016c60:	f107 030c 	add.w	r3, r7, #12
 8016c64:	4618      	mov	r0, r3
 8016c66:	f000 fda7 	bl	80177b8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c6e:	3303      	adds	r3, #3
 8016c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c78:	3301      	adds	r3, #1
 8016c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c82:	2b0f      	cmp	r3, #15
 8016c84:	d9aa      	bls.n	8016bdc <RegionEU868ApplyCFList+0x30>
 8016c86:	e002      	b.n	8016c8e <RegionEU868ApplyCFList+0xe2>
        return;
 8016c88:	bf00      	nop
 8016c8a:	e000      	b.n	8016c8e <RegionEU868ApplyCFList+0xe2>
        return;
 8016c8c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016c8e:	3728      	adds	r7, #40	; 0x28
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	791b      	ldrb	r3, [r3, #4]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d002      	beq.n	8016caa <RegionEU868ChanMaskSet+0x16>
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d00b      	beq.n	8016cc0 <RegionEU868ChanMaskSet+0x2c>
 8016ca8:	e015      	b.n	8016cd6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016caa:	4b0e      	ldr	r3, [pc, #56]	; (8016ce4 <RegionEU868ChanMaskSet+0x50>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	4619      	mov	r1, r3
 8016cba:	f7fe ff2b 	bl	8015b14 <RegionCommonChanMaskCopy>
            break;
 8016cbe:	e00c      	b.n	8016cda <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016cc0:	4b08      	ldr	r3, [pc, #32]	; (8016ce4 <RegionEU868ChanMaskSet+0x50>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	2201      	movs	r2, #1
 8016cce:	4619      	mov	r1, r3
 8016cd0:	f7fe ff20 	bl	8015b14 <RegionCommonChanMaskCopy>
            break;
 8016cd4:	e001      	b.n	8016cda <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e000      	b.n	8016cdc <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016cda:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	20003c84 	.word	0x20003c84

08016ce8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b088      	sub	sp, #32
 8016cec:	af02      	add	r7, sp, #8
 8016cee:	60ba      	str	r2, [r7, #8]
 8016cf0:	607b      	str	r3, [r7, #4]
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	73fb      	strb	r3, [r7, #15]
 8016cf6:	460b      	mov	r3, r1
 8016cf8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d02:	2b07      	cmp	r3, #7
 8016d04:	bfa8      	it	ge
 8016d06:	2307      	movge	r3, #7
 8016d08:	b25a      	sxtb	r2, r3
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d14:	491e      	ldr	r1, [pc, #120]	; (8016d90 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7ff fb8c 	bl	8016434 <RegionCommonGetBandwidth>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	b2da      	uxtb	r2, r3
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d2a:	2b07      	cmp	r3, #7
 8016d2c:	d10a      	bne.n	8016d44 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d34:	461a      	mov	r2, r3
 8016d36:	4b17      	ldr	r3, [pc, #92]	; (8016d94 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016d38:	5c9b      	ldrb	r3, [r3, r2]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7ff f90e 	bl	8015f5c <RegionCommonComputeSymbolTimeFsk>
 8016d40:	6178      	str	r0, [r7, #20]
 8016d42:	e011      	b.n	8016d68 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	4b11      	ldr	r3, [pc, #68]	; (8016d94 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016d4e:	5c9a      	ldrb	r2, [r3, r2]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016d56:	4619      	mov	r1, r3
 8016d58:	4b0d      	ldr	r3, [pc, #52]	; (8016d90 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016d5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d5e:	4619      	mov	r1, r3
 8016d60:	4610      	mov	r0, r2
 8016d62:	f7ff f8e5 	bl	8015f30 <RegionCommonComputeSymbolTimeLoRa>
 8016d66:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016d68:	4b0b      	ldr	r3, [pc, #44]	; (8016d98 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d6c:	4798      	blx	r3
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	3308      	adds	r3, #8
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	320c      	adds	r2, #12
 8016d76:	7bb9      	ldrb	r1, [r7, #14]
 8016d78:	9201      	str	r2, [sp, #4]
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	68ba      	ldr	r2, [r7, #8]
 8016d80:	6978      	ldr	r0, [r7, #20]
 8016d82:	f7ff f8fb 	bl	8015f7c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016d86:	bf00      	nop
 8016d88:	3718      	adds	r7, #24
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop
 8016d90:	0801e594 	.word	0x0801e594
 8016d94:	0801e58c 	.word	0x0801e58c
 8016d98:	0801e648 	.word	0x0801e648

08016d9c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016d9c:	b5b0      	push	{r4, r5, r7, lr}
 8016d9e:	b090      	sub	sp, #64	; 0x40
 8016da0:	af0a      	add	r7, sp, #40	; 0x28
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	785b      	ldrb	r3, [r3, #1]
 8016daa:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016db0:	2300      	movs	r3, #0
 8016db2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016dba:	4b5a      	ldr	r3, [pc, #360]	; (8016f24 <RegionEU868RxConfig+0x188>)
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	4798      	blx	r3
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d001      	beq.n	8016dca <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e0a8      	b.n	8016f1c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	7cdb      	ldrb	r3, [r3, #19]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d126      	bne.n	8016e20 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016dd2:	4b55      	ldr	r3, [pc, #340]	; (8016f28 <RegionEU868RxConfig+0x18c>)
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	4619      	mov	r1, r3
 8016ddc:	460b      	mov	r3, r1
 8016dde:	005b      	lsls	r3, r3, #1
 8016de0:	440b      	add	r3, r1
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	4413      	add	r3, r2
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016dea:	4b4f      	ldr	r3, [pc, #316]	; (8016f28 <RegionEU868RxConfig+0x18c>)
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	4619      	mov	r1, r3
 8016df4:	460b      	mov	r3, r1
 8016df6:	005b      	lsls	r3, r3, #1
 8016df8:	440b      	add	r3, r1
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	4413      	add	r3, r2
 8016dfe:	3304      	adds	r3, #4
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d00c      	beq.n	8016e20 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016e06:	4b48      	ldr	r3, [pc, #288]	; (8016f28 <RegionEU868RxConfig+0x18c>)
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	4619      	mov	r1, r3
 8016e10:	460b      	mov	r3, r1
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	440b      	add	r3, r1
 8016e16:	009b      	lsls	r3, r3, #2
 8016e18:	4413      	add	r3, r2
 8016e1a:	3304      	adds	r3, #4
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e24:	4a41      	ldr	r2, [pc, #260]	; (8016f2c <RegionEU868RxConfig+0x190>)
 8016e26:	5cd3      	ldrb	r3, [r2, r3]
 8016e28:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016e2a:	4b3e      	ldr	r3, [pc, #248]	; (8016f24 <RegionEU868RxConfig+0x188>)
 8016e2c:	68db      	ldr	r3, [r3, #12]
 8016e2e:	6938      	ldr	r0, [r7, #16]
 8016e30:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e36:	2b07      	cmp	r3, #7
 8016e38:	d128      	bne.n	8016e8c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016e3e:	4b39      	ldr	r3, [pc, #228]	; (8016f24 <RegionEU868RxConfig+0x188>)
 8016e40:	699c      	ldr	r4, [r3, #24]
 8016e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016e4a:	fb02 f303 	mul.w	r3, r2, r3
 8016e4e:	4619      	mov	r1, r3
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	687a      	ldr	r2, [r7, #4]
 8016e58:	7c92      	ldrb	r2, [r2, #18]
 8016e5a:	7df8      	ldrb	r0, [r7, #23]
 8016e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8016e5e:	2200      	movs	r2, #0
 8016e60:	9208      	str	r2, [sp, #32]
 8016e62:	2200      	movs	r2, #0
 8016e64:	9207      	str	r2, [sp, #28]
 8016e66:	2200      	movs	r2, #0
 8016e68:	9206      	str	r2, [sp, #24]
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	9205      	str	r2, [sp, #20]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	9204      	str	r2, [sp, #16]
 8016e72:	2200      	movs	r2, #0
 8016e74:	9203      	str	r2, [sp, #12]
 8016e76:	9302      	str	r3, [sp, #8]
 8016e78:	2305      	movs	r3, #5
 8016e7a:	9301      	str	r3, [sp, #4]
 8016e7c:	4b2c      	ldr	r3, [pc, #176]	; (8016f30 <RegionEU868RxConfig+0x194>)
 8016e7e:	9300      	str	r3, [sp, #0]
 8016e80:	2300      	movs	r3, #0
 8016e82:	460a      	mov	r2, r1
 8016e84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016e88:	47a0      	blx	r4
 8016e8a:	e024      	b.n	8016ed6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016e90:	4b24      	ldr	r3, [pc, #144]	; (8016f24 <RegionEU868RxConfig+0x188>)
 8016e92:	699c      	ldr	r4, [r3, #24]
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	789b      	ldrb	r3, [r3, #2]
 8016e98:	461d      	mov	r5, r3
 8016e9a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	689b      	ldr	r3, [r3, #8]
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	687a      	ldr	r2, [r7, #4]
 8016ea6:	7c92      	ldrb	r2, [r2, #18]
 8016ea8:	7df8      	ldrb	r0, [r7, #23]
 8016eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8016eac:	2201      	movs	r2, #1
 8016eae:	9208      	str	r2, [sp, #32]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	9207      	str	r2, [sp, #28]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	9206      	str	r2, [sp, #24]
 8016eb8:	2200      	movs	r2, #0
 8016eba:	9205      	str	r2, [sp, #20]
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	9204      	str	r2, [sp, #16]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	9203      	str	r2, [sp, #12]
 8016ec4:	9302      	str	r3, [sp, #8]
 8016ec6:	2308      	movs	r3, #8
 8016ec8:	9301      	str	r3, [sp, #4]
 8016eca:	2300      	movs	r3, #0
 8016ecc:	9300      	str	r3, [sp, #0]
 8016ece:	2301      	movs	r3, #1
 8016ed0:	460a      	mov	r2, r1
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	7c5b      	ldrb	r3, [r3, #17]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d005      	beq.n	8016eea <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ee2:	4a14      	ldr	r2, [pc, #80]	; (8016f34 <RegionEU868RxConfig+0x198>)
 8016ee4:	5cd3      	ldrb	r3, [r2, r3]
 8016ee6:	75bb      	strb	r3, [r7, #22]
 8016ee8:	e004      	b.n	8016ef4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eee:	4a12      	ldr	r2, [pc, #72]	; (8016f38 <RegionEU868RxConfig+0x19c>)
 8016ef0:	5cd3      	ldrb	r3, [r2, r3]
 8016ef2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016ef4:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <RegionEU868RxConfig+0x188>)
 8016ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ef8:	7dba      	ldrb	r2, [r7, #22]
 8016efa:	320d      	adds	r2, #13
 8016efc:	b2d1      	uxtb	r1, r2
 8016efe:	7dfa      	ldrb	r2, [r7, #23]
 8016f00:	4610      	mov	r0, r2
 8016f02:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	7cdb      	ldrb	r3, [r3, #19]
 8016f08:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016f0c:	6939      	ldr	r1, [r7, #16]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ff faae 	bl	8016470 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	7bfa      	ldrb	r2, [r7, #15]
 8016f18:	701a      	strb	r2, [r3, #0]
    return true;
 8016f1a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3718      	adds	r7, #24
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bdb0      	pop	{r4, r5, r7, pc}
 8016f24:	0801e648 	.word	0x0801e648
 8016f28:	20003c84 	.word	0x20003c84
 8016f2c:	0801e58c 	.word	0x0801e58c
 8016f30:	00014585 	.word	0x00014585
 8016f34:	0801e5bc 	.word	0x0801e5bc
 8016f38:	0801e5b4 	.word	0x0801e5b4

08016f3c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016f3c:	b590      	push	{r4, r7, lr}
 8016f3e:	b093      	sub	sp, #76	; 0x4c
 8016f40:	af0a      	add	r7, sp, #40	; 0x28
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	4b5d      	ldr	r3, [pc, #372]	; (80170c8 <RegionEU868TxConfig+0x18c>)
 8016f52:	5c9b      	ldrb	r3, [r3, r2]
 8016f54:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016f5c:	4b5b      	ldr	r3, [pc, #364]	; (80170cc <RegionEU868TxConfig+0x190>)
 8016f5e:	681a      	ldr	r2, [r3, #0]
 8016f60:	4b5b      	ldr	r3, [pc, #364]	; (80170d0 <RegionEU868TxConfig+0x194>)
 8016f62:	6819      	ldr	r1, [r3, #0]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	461c      	mov	r4, r3
 8016f6a:	4623      	mov	r3, r4
 8016f6c:	005b      	lsls	r3, r3, #1
 8016f6e:	4423      	add	r3, r4
 8016f70:	009b      	lsls	r3, r3, #2
 8016f72:	440b      	add	r3, r1
 8016f74:	3309      	adds	r3, #9
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	4619      	mov	r1, r3
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	440b      	add	r3, r1
 8016f80:	00db      	lsls	r3, r3, #3
 8016f82:	4413      	add	r3, r2
 8016f84:	3302      	adds	r3, #2
 8016f86:	f993 3000 	ldrsb.w	r3, [r3]
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	f7ff fa3d 	bl	801640a <RegionCommonLimitTxPower>
 8016f90:	4603      	mov	r3, r0
 8016f92:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f9a:	494e      	ldr	r1, [pc, #312]	; (80170d4 <RegionEU868TxConfig+0x198>)
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7ff fa49 	bl	8016434 <RegionCommonGetBandwidth>
 8016fa2:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	6859      	ldr	r1, [r3, #4]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	689a      	ldr	r2, [r3, #8]
 8016fb0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7ff f899 	bl	80160ec <RegionCommonComputeTxPower>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016fbe:	4b46      	ldr	r3, [pc, #280]	; (80170d8 <RegionEU868TxConfig+0x19c>)
 8016fc0:	68da      	ldr	r2, [r3, #12]
 8016fc2:	4b43      	ldr	r3, [pc, #268]	; (80170d0 <RegionEU868TxConfig+0x194>)
 8016fc4:	6819      	ldr	r1, [r3, #0]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	4603      	mov	r3, r0
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	4403      	add	r3, r0
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	440b      	add	r3, r1
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fe2:	2b07      	cmp	r3, #7
 8016fe4:	d124      	bne.n	8017030 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016fea:	4b3b      	ldr	r3, [pc, #236]	; (80170d8 <RegionEU868TxConfig+0x19c>)
 8016fec:	69dc      	ldr	r4, [r3, #28]
 8016fee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016ff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ff6:	fb02 f303 	mul.w	r3, r2, r3
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017000:	7ff8      	ldrb	r0, [r7, #31]
 8017002:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017006:	9308      	str	r3, [sp, #32]
 8017008:	2300      	movs	r3, #0
 801700a:	9307      	str	r3, [sp, #28]
 801700c:	2300      	movs	r3, #0
 801700e:	9306      	str	r3, [sp, #24]
 8017010:	2300      	movs	r3, #0
 8017012:	9305      	str	r3, [sp, #20]
 8017014:	2301      	movs	r3, #1
 8017016:	9304      	str	r3, [sp, #16]
 8017018:	2300      	movs	r3, #0
 801701a:	9303      	str	r3, [sp, #12]
 801701c:	2305      	movs	r3, #5
 801701e:	9302      	str	r3, [sp, #8]
 8017020:	2300      	movs	r3, #0
 8017022:	9301      	str	r3, [sp, #4]
 8017024:	9200      	str	r2, [sp, #0]
 8017026:	69bb      	ldr	r3, [r7, #24]
 8017028:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801702c:	47a0      	blx	r4
 801702e:	e01d      	b.n	801706c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8017030:	2301      	movs	r3, #1
 8017032:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017034:	4b28      	ldr	r3, [pc, #160]	; (80170d8 <RegionEU868TxConfig+0x19c>)
 8017036:	69dc      	ldr	r4, [r3, #28]
 8017038:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801703c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017040:	7ff8      	ldrb	r0, [r7, #31]
 8017042:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017046:	9208      	str	r2, [sp, #32]
 8017048:	2200      	movs	r2, #0
 801704a:	9207      	str	r2, [sp, #28]
 801704c:	2200      	movs	r2, #0
 801704e:	9206      	str	r2, [sp, #24]
 8017050:	2200      	movs	r2, #0
 8017052:	9205      	str	r2, [sp, #20]
 8017054:	2201      	movs	r2, #1
 8017056:	9204      	str	r2, [sp, #16]
 8017058:	2200      	movs	r2, #0
 801705a:	9203      	str	r2, [sp, #12]
 801705c:	2208      	movs	r2, #8
 801705e:	9202      	str	r2, [sp, #8]
 8017060:	2201      	movs	r2, #1
 8017062:	9201      	str	r2, [sp, #4]
 8017064:	9300      	str	r3, [sp, #0]
 8017066:	69bb      	ldr	r3, [r7, #24]
 8017068:	2200      	movs	r2, #0
 801706a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801706c:	4b18      	ldr	r3, [pc, #96]	; (80170d0 <RegionEU868TxConfig+0x194>)
 801706e:	681a      	ldr	r2, [r3, #0]
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	4619      	mov	r1, r3
 8017076:	460b      	mov	r3, r1
 8017078:	005b      	lsls	r3, r3, #1
 801707a:	440b      	add	r3, r1
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	4413      	add	r3, r2
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017088:	4619      	mov	r1, r3
 801708a:	4610      	mov	r0, r2
 801708c:	f7ff fa2e 	bl	80164ec <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	899b      	ldrh	r3, [r3, #12]
 801709a:	4619      	mov	r1, r3
 801709c:	4610      	mov	r0, r2
 801709e:	f7ff fab3 	bl	8016608 <GetTimeOnAir>
 80170a2:	4602      	mov	r2, r0
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80170a8:	4b0b      	ldr	r3, [pc, #44]	; (80170d8 <RegionEU868TxConfig+0x19c>)
 80170aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170ac:	68fa      	ldr	r2, [r7, #12]
 80170ae:	8992      	ldrh	r2, [r2, #12]
 80170b0:	b2d1      	uxtb	r1, r2
 80170b2:	7ffa      	ldrb	r2, [r7, #31]
 80170b4:	4610      	mov	r0, r2
 80170b6:	4798      	blx	r3

    *txPower = txPowerLimited;
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	7f7a      	ldrb	r2, [r7, #29]
 80170bc:	701a      	strb	r2, [r3, #0]
    return true;
 80170be:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80170c0:	4618      	mov	r0, r3
 80170c2:	3724      	adds	r7, #36	; 0x24
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd90      	pop	{r4, r7, pc}
 80170c8:	0801e58c 	.word	0x0801e58c
 80170cc:	20003c80 	.word	0x20003c80
 80170d0:	20003c84 	.word	0x20003c84
 80170d4:	0801e594 	.word	0x0801e594
 80170d8:	0801e648 	.word	0x0801e648

080170dc <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80170dc:	b590      	push	{r4, r7, lr}
 80170de:	b093      	sub	sp, #76	; 0x4c
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	607a      	str	r2, [r7, #4]
 80170e8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80170ea:	2307      	movs	r3, #7
 80170ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80170f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]
 80170f8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80170fa:	2300      	movs	r3, #0
 80170fc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017100:	2300      	movs	r3, #0
 8017102:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017106:	2300      	movs	r3, #0
 8017108:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801710a:	e085      	b.n	8017218 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	685a      	ldr	r2, [r3, #4]
 8017110:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017114:	4413      	add	r3, r2
 8017116:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801711a:	4611      	mov	r1, r2
 801711c:	4618      	mov	r0, r3
 801711e:	f7fe fe3d 	bl	8015d9c <RegionCommonParseLinkAdrReq>
 8017122:	4603      	mov	r3, r0
 8017124:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017128:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801712c:	2b00      	cmp	r3, #0
 801712e:	d07b      	beq.n	8017228 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017130:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017134:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017138:	4413      	add	r3, r2
 801713a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801713e:	2307      	movs	r3, #7
 8017140:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017144:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017148:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801714a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801714e:	2b00      	cmp	r3, #0
 8017150:	d109      	bne.n	8017166 <RegionEU868LinkAdrReq+0x8a>
 8017152:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017154:	2b00      	cmp	r3, #0
 8017156:	d106      	bne.n	8017166 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017158:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801715c:	f023 0301 	bic.w	r3, r3, #1
 8017160:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017164:	e058      	b.n	8017218 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801716a:	2b00      	cmp	r3, #0
 801716c:	d003      	beq.n	8017176 <RegionEU868LinkAdrReq+0x9a>
 801716e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017172:	2b05      	cmp	r3, #5
 8017174:	d903      	bls.n	801717e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017176:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801717a:	2b06      	cmp	r3, #6
 801717c:	d906      	bls.n	801718c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801717e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017182:	f023 0301 	bic.w	r3, r3, #1
 8017186:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801718a:	e045      	b.n	8017218 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801718c:	2300      	movs	r3, #0
 801718e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017192:	e03d      	b.n	8017210 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017194:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017198:	2b06      	cmp	r3, #6
 801719a:	d118      	bne.n	80171ce <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801719c:	4b5f      	ldr	r3, [pc, #380]	; (801731c <RegionEU868LinkAdrReq+0x240>)
 801719e:	6819      	ldr	r1, [r3, #0]
 80171a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80171a4:	4613      	mov	r3, r2
 80171a6:	005b      	lsls	r3, r3, #1
 80171a8:	4413      	add	r3, r2
 80171aa:	009b      	lsls	r3, r3, #2
 80171ac:	440b      	add	r3, r1
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d028      	beq.n	8017206 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80171b4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80171b8:	2201      	movs	r2, #1
 80171ba:	fa02 f303 	lsl.w	r3, r2, r3
 80171be:	b21a      	sxth	r2, r3
 80171c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171c2:	b21b      	sxth	r3, r3
 80171c4:	4313      	orrs	r3, r2
 80171c6:	b21b      	sxth	r3, r3
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	877b      	strh	r3, [r7, #58]	; 0x3a
 80171cc:	e01b      	b.n	8017206 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80171ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171d0:	461a      	mov	r2, r3
 80171d2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80171d6:	fa42 f303 	asr.w	r3, r2, r3
 80171da:	f003 0301 	and.w	r3, r3, #1
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d011      	beq.n	8017206 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80171e2:	4b4e      	ldr	r3, [pc, #312]	; (801731c <RegionEU868LinkAdrReq+0x240>)
 80171e4:	6819      	ldr	r1, [r3, #0]
 80171e6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80171ea:	4613      	mov	r3, r2
 80171ec:	005b      	lsls	r3, r3, #1
 80171ee:	4413      	add	r3, r2
 80171f0:	009b      	lsls	r3, r3, #2
 80171f2:	440b      	add	r3, r1
 80171f4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d105      	bne.n	8017206 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80171fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171fe:	f023 0301 	bic.w	r3, r3, #1
 8017202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017206:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801720a:	3301      	adds	r3, #1
 801720c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017210:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017214:	2b0f      	cmp	r3, #15
 8017216:	d9bd      	bls.n	8017194 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	7a1b      	ldrb	r3, [r3, #8]
 801721c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017220:	429a      	cmp	r2, r3
 8017222:	f4ff af73 	bcc.w	801710c <RegionEU868LinkAdrReq+0x30>
 8017226:	e000      	b.n	801722a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017228:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801722a:	2302      	movs	r3, #2
 801722c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	7a5b      	ldrb	r3, [r3, #9]
 8017234:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017238:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801723c:	4618      	mov	r0, r3
 801723e:	f7ff fa33 	bl	80166a8 <RegionEU868GetPhyParam>
 8017242:	4603      	mov	r3, r0
 8017244:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017246:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801724a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	7a9b      	ldrb	r3, [r3, #10]
 8017250:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017252:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017256:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017258:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801725c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801725e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017262:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801726a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017272:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	7b5b      	ldrb	r3, [r3, #13]
 8017278:	b25b      	sxtb	r3, r3
 801727a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801727c:	2310      	movs	r3, #16
 801727e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017280:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017284:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017288:	b25b      	sxtb	r3, r3
 801728a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801728e:	2307      	movs	r3, #7
 8017290:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017294:	4b21      	ldr	r3, [pc, #132]	; (801731c <RegionEU868LinkAdrReq+0x240>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801729a:	2307      	movs	r3, #7
 801729c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80172a0:	230e      	movs	r3, #14
 80172a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80172ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80172b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172b4:	1c9a      	adds	r2, r3, #2
 80172b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80172ba:	1c59      	adds	r1, r3, #1
 80172bc:	f107 0010 	add.w	r0, r7, #16
 80172c0:	4623      	mov	r3, r4
 80172c2:	f7fe fdbc 	bl	8015e3e <RegionCommonLinkAdrReqVerifyParams>
 80172c6:	4603      	mov	r3, r0
 80172c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80172cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80172d0:	2b07      	cmp	r3, #7
 80172d2:	d10d      	bne.n	80172f0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80172d4:	4b11      	ldr	r3, [pc, #68]	; (801731c <RegionEU868LinkAdrReq+0x240>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80172dc:	220c      	movs	r2, #12
 80172de:	2100      	movs	r1, #0
 80172e0:	4618      	mov	r0, r3
 80172e2:	f001 fde3 	bl	8018eac <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80172e6:	4b0d      	ldr	r3, [pc, #52]	; (801731c <RegionEU868LinkAdrReq+0x240>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172ec:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80172f0:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80172f8:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017300:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801730a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801730e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8017310:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017314:	4618      	mov	r0, r3
 8017316:	374c      	adds	r7, #76	; 0x4c
 8017318:	46bd      	mov	sp, r7
 801731a:	bd90      	pop	{r4, r7, pc}
 801731c:	20003c84 	.word	0x20003c84

08017320 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b084      	sub	sp, #16
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017328:	2307      	movs	r3, #7
 801732a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801732c:	2300      	movs	r3, #0
 801732e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	f107 020e 	add.w	r2, r7, #14
 8017338:	4611      	mov	r1, r2
 801733a:	4618      	mov	r0, r3
 801733c:	f7ff f8ee 	bl	801651c <VerifyRfFreq>
 8017340:	4603      	mov	r3, r0
 8017342:	f083 0301 	eor.w	r3, r3, #1
 8017346:	b2db      	uxtb	r3, r3
 8017348:	2b00      	cmp	r3, #0
 801734a:	d003      	beq.n	8017354 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801734c:	7bfb      	ldrb	r3, [r7, #15]
 801734e:	f023 0301 	bic.w	r3, r3, #1
 8017352:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f993 3000 	ldrsb.w	r3, [r3]
 801735a:	2207      	movs	r2, #7
 801735c:	2100      	movs	r1, #0
 801735e:	4618      	mov	r0, r3
 8017360:	f7fe fb5b 	bl	8015a1a <RegionCommonValueInRange>
 8017364:	4603      	mov	r3, r0
 8017366:	2b00      	cmp	r3, #0
 8017368:	d103      	bne.n	8017372 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801736a:	7bfb      	ldrb	r3, [r7, #15]
 801736c:	f023 0302 	bic.w	r3, r3, #2
 8017370:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017378:	2205      	movs	r2, #5
 801737a:	2100      	movs	r1, #0
 801737c:	4618      	mov	r0, r3
 801737e:	f7fe fb4c 	bl	8015a1a <RegionCommonValueInRange>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d103      	bne.n	8017390 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017388:	7bfb      	ldrb	r3, [r7, #15]
 801738a:	f023 0304 	bic.w	r3, r3, #4
 801738e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017390:	7bfb      	ldrb	r3, [r7, #15]
}
 8017392:	4618      	mov	r0, r3
 8017394:	3710      	adds	r7, #16
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
	...

0801739c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b086      	sub	sp, #24
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80173a4:	2303      	movs	r3, #3
 80173a6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d114      	bne.n	80173dc <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80173bc:	f107 0308 	add.w	r3, r7, #8
 80173c0:	4618      	mov	r0, r3
 80173c2:	f000 f9f9 	bl	80177b8 <RegionEU868ChannelsRemove>
 80173c6:	4603      	mov	r3, r0
 80173c8:	f083 0301 	eor.w	r3, r3, #1
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d03b      	beq.n	801744a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80173d2:	7dfb      	ldrb	r3, [r7, #23]
 80173d4:	f023 0303 	bic.w	r3, r3, #3
 80173d8:	75fb      	strb	r3, [r7, #23]
 80173da:	e036      	b.n	801744a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80173e8:	b2db      	uxtb	r3, r3
 80173ea:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80173ec:	f107 030c 	add.w	r3, r7, #12
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 f93f 	bl	8017674 <RegionEU868ChannelAdd>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b06      	cmp	r3, #6
 80173fa:	d820      	bhi.n	801743e <RegionEU868NewChannelReq+0xa2>
 80173fc:	a201      	add	r2, pc, #4	; (adr r2, 8017404 <RegionEU868NewChannelReq+0x68>)
 80173fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017402:	bf00      	nop
 8017404:	08017449 	.word	0x08017449
 8017408:	0801743f 	.word	0x0801743f
 801740c:	0801743f 	.word	0x0801743f
 8017410:	0801743f 	.word	0x0801743f
 8017414:	08017421 	.word	0x08017421
 8017418:	0801742b 	.word	0x0801742b
 801741c:	08017435 	.word	0x08017435
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017420:	7dfb      	ldrb	r3, [r7, #23]
 8017422:	f023 0301 	bic.w	r3, r3, #1
 8017426:	75fb      	strb	r3, [r7, #23]
                break;
 8017428:	e00f      	b.n	801744a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801742a:	7dfb      	ldrb	r3, [r7, #23]
 801742c:	f023 0302 	bic.w	r3, r3, #2
 8017430:	75fb      	strb	r3, [r7, #23]
                break;
 8017432:	e00a      	b.n	801744a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017434:	7dfb      	ldrb	r3, [r7, #23]
 8017436:	f023 0303 	bic.w	r3, r3, #3
 801743a:	75fb      	strb	r3, [r7, #23]
                break;
 801743c:	e005      	b.n	801744a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801743e:	7dfb      	ldrb	r3, [r7, #23]
 8017440:	f023 0303 	bic.w	r3, r3, #3
 8017444:	75fb      	strb	r3, [r7, #23]
                break;
 8017446:	e000      	b.n	801744a <RegionEU868NewChannelReq+0xae>
                break;
 8017448:	bf00      	nop
            }
        }
    }

    return status;
 801744a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801744e:	4618      	mov	r0, r3
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop

08017458 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017458:	b480      	push	{r7}
 801745a:	b083      	sub	sp, #12
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017464:	4618      	mov	r0, r3
 8017466:	370c      	adds	r7, #12
 8017468:	46bd      	mov	sp, r7
 801746a:	bc80      	pop	{r7}
 801746c:	4770      	bx	lr
	...

08017470 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017478:	2303      	movs	r3, #3
 801747a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801747c:	2300      	movs	r3, #0
 801747e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	f107 020e 	add.w	r2, r7, #14
 8017488:	4611      	mov	r1, r2
 801748a:	4618      	mov	r0, r3
 801748c:	f7ff f846 	bl	801651c <VerifyRfFreq>
 8017490:	4603      	mov	r3, r0
 8017492:	f083 0301 	eor.w	r3, r3, #1
 8017496:	b2db      	uxtb	r3, r3
 8017498:	2b00      	cmp	r3, #0
 801749a:	d003      	beq.n	80174a4 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801749c:	7bfb      	ldrb	r3, [r7, #15]
 801749e:	f023 0301 	bic.w	r3, r3, #1
 80174a2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80174a4:	4b13      	ldr	r3, [pc, #76]	; (80174f4 <RegionEU868DlChannelReq+0x84>)
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	4619      	mov	r1, r3
 80174ae:	460b      	mov	r3, r1
 80174b0:	005b      	lsls	r3, r3, #1
 80174b2:	440b      	add	r3, r1
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	4413      	add	r3, r2
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80174be:	7bfb      	ldrb	r3, [r7, #15]
 80174c0:	f023 0302 	bic.w	r3, r3, #2
 80174c4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80174c6:	7bfb      	ldrb	r3, [r7, #15]
 80174c8:	2b03      	cmp	r3, #3
 80174ca:	d10d      	bne.n	80174e8 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80174cc:	4b09      	ldr	r3, [pc, #36]	; (80174f4 <RegionEU868DlChannelReq+0x84>)
 80174ce:	6819      	ldr	r1, [r3, #0]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	781b      	ldrb	r3, [r3, #0]
 80174d4:	4618      	mov	r0, r3
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	685a      	ldr	r2, [r3, #4]
 80174da:	4603      	mov	r3, r0
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	4403      	add	r3, r0
 80174e0:	009b      	lsls	r3, r3, #2
 80174e2:	440b      	add	r3, r1
 80174e4:	3304      	adds	r3, #4
 80174e6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80174e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174ec:	4618      	mov	r0, r3
 80174ee:	3710      	adds	r7, #16
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}
 80174f4:	20003c84 	.word	0x20003c84

080174f8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80174f8:	b480      	push	{r7}
 80174fa:	b083      	sub	sp, #12
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	4603      	mov	r3, r0
 8017500:	460a      	mov	r2, r1
 8017502:	71fb      	strb	r3, [r7, #7]
 8017504:	4613      	mov	r3, r2
 8017506:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017508:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801750c:	4618      	mov	r0, r3
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	bc80      	pop	{r7}
 8017514:	4770      	bx	lr
	...

08017518 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b09a      	sub	sp, #104	; 0x68
 801751c:	af02      	add	r7, sp, #8
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	607a      	str	r2, [r7, #4]
 8017524:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017526:	2300      	movs	r3, #0
 8017528:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801752c:	2300      	movs	r3, #0
 801752e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8017532:	2300      	movs	r3, #0
 8017534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017536:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801753a:	2200      	movs	r2, #0
 801753c:	601a      	str	r2, [r3, #0]
 801753e:	605a      	str	r2, [r3, #4]
 8017540:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017542:	230c      	movs	r3, #12
 8017544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017548:	2307      	movs	r3, #7
 801754a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801754c:	4b47      	ldr	r3, [pc, #284]	; (801766c <RegionEU868NextChannel+0x154>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017554:	2201      	movs	r2, #1
 8017556:	2100      	movs	r1, #0
 8017558:	4618      	mov	r0, r3
 801755a:	f7fe faaf 	bl	8015abc <RegionCommonCountChannels>
 801755e:	4603      	mov	r3, r0
 8017560:	2b00      	cmp	r3, #0
 8017562:	d10a      	bne.n	801757a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017564:	4b41      	ldr	r3, [pc, #260]	; (801766c <RegionEU868NextChannel+0x154>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801756c:	4b3f      	ldr	r3, [pc, #252]	; (801766c <RegionEU868NextChannel+0x154>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f042 0207 	orr.w	r2, r2, #7
 8017574:	b292      	uxth	r2, r2
 8017576:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	7a5b      	ldrb	r3, [r3, #9]
 801757e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017586:	b2db      	uxtb	r3, r3
 8017588:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801758a:	4b38      	ldr	r3, [pc, #224]	; (801766c <RegionEU868NextChannel+0x154>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017592:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017594:	4b35      	ldr	r3, [pc, #212]	; (801766c <RegionEU868NextChannel+0x154>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801759a:	4b35      	ldr	r3, [pc, #212]	; (8017670 <RegionEU868NextChannel+0x158>)
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80175a0:	2310      	movs	r3, #16
 80175a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80175a4:	f107 0312 	add.w	r3, r7, #18
 80175a8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	685b      	ldr	r3, [r3, #4]
 80175b4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	7a9b      	ldrb	r3, [r3, #10]
 80175ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80175be:	2306      	movs	r3, #6
 80175c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80175c4:	68fa      	ldr	r2, [r7, #12]
 80175c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175ca:	320c      	adds	r2, #12
 80175cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175d0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	7d1b      	ldrb	r3, [r3, #20]
 80175d8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	8adb      	ldrh	r3, [r3, #22]
 80175e6:	4619      	mov	r1, r3
 80175e8:	4610      	mov	r0, r2
 80175ea:	f7ff f80d 	bl	8016608 <GetTimeOnAir>
 80175ee:	4603      	mov	r3, r0
 80175f0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80175f2:	f107 0314 	add.w	r3, r7, #20
 80175f6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80175f8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80175fc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017600:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	9301      	str	r3, [sp, #4]
 8017608:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	460b      	mov	r3, r1
 8017610:	6839      	ldr	r1, [r7, #0]
 8017612:	f7fe fe5a 	bl	80162ca <RegionCommonIdentifyChannels>
 8017616:	4603      	mov	r3, r0
 8017618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801761c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017620:	2b00      	cmp	r3, #0
 8017622:	d10e      	bne.n	8017642 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017624:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017628:	3b01      	subs	r3, #1
 801762a:	4619      	mov	r1, r3
 801762c:	2000      	movs	r0, #0
 801762e:	f001 fbeb 	bl	8018e08 <randr>
 8017632:	4603      	mov	r3, r0
 8017634:	3360      	adds	r3, #96	; 0x60
 8017636:	443b      	add	r3, r7
 8017638:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	701a      	strb	r2, [r3, #0]
 8017640:	e00e      	b.n	8017660 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8017642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017646:	2b0c      	cmp	r3, #12
 8017648:	d10a      	bne.n	8017660 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801764a:	4b08      	ldr	r3, [pc, #32]	; (801766c <RegionEU868NextChannel+0x154>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017652:	4b06      	ldr	r3, [pc, #24]	; (801766c <RegionEU868NextChannel+0x154>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	f042 0207 	orr.w	r2, r2, #7
 801765a:	b292      	uxth	r2, r2
 801765c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8017660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017664:	4618      	mov	r0, r3
 8017666:	3760      	adds	r7, #96	; 0x60
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}
 801766c:	20003c84 	.word	0x20003c84
 8017670:	20003c80 	.word	0x20003c80

08017674 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b084      	sub	sp, #16
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017680:	2300      	movs	r3, #0
 8017682:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017684:	2300      	movs	r3, #0
 8017686:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	791b      	ldrb	r3, [r3, #4]
 801768c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801768e:	7b7b      	ldrb	r3, [r7, #13]
 8017690:	2b02      	cmp	r3, #2
 8017692:	d801      	bhi.n	8017698 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017694:	2306      	movs	r3, #6
 8017696:	e089      	b.n	80177ac <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017698:	7b7b      	ldrb	r3, [r7, #13]
 801769a:	2b0f      	cmp	r3, #15
 801769c:	d901      	bls.n	80176a2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801769e:	2303      	movs	r3, #3
 80176a0:	e084      	b.n	80177ac <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	7a1b      	ldrb	r3, [r3, #8]
 80176a8:	f343 0303 	sbfx	r3, r3, #0, #4
 80176ac:	b25b      	sxtb	r3, r3
 80176ae:	2207      	movs	r2, #7
 80176b0:	2100      	movs	r1, #0
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7fe f9b1 	bl	8015a1a <RegionCommonValueInRange>
 80176b8:	4603      	mov	r3, r0
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d101      	bne.n	80176c2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80176be:	2301      	movs	r3, #1
 80176c0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	7a1b      	ldrb	r3, [r3, #8]
 80176c8:	f343 1303 	sbfx	r3, r3, #4, #4
 80176cc:	b25b      	sxtb	r3, r3
 80176ce:	2207      	movs	r2, #7
 80176d0:	2100      	movs	r1, #0
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7fe f9a1 	bl	8015a1a <RegionCommonValueInRange>
 80176d8:	4603      	mov	r3, r0
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d101      	bne.n	80176e2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80176de:	2301      	movs	r3, #1
 80176e0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	7a1b      	ldrb	r3, [r3, #8]
 80176e8:	f343 0303 	sbfx	r3, r3, #0, #4
 80176ec:	b25a      	sxtb	r2, r3
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	7a1b      	ldrb	r3, [r3, #8]
 80176f4:	f343 1303 	sbfx	r3, r3, #4, #4
 80176f8:	b25b      	sxtb	r3, r3
 80176fa:	429a      	cmp	r2, r3
 80176fc:	dd01      	ble.n	8017702 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80176fe:	2301      	movs	r3, #1
 8017700:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017702:	7bbb      	ldrb	r3, [r7, #14]
 8017704:	f083 0301 	eor.w	r3, r3, #1
 8017708:	b2db      	uxtb	r3, r3
 801770a:	2b00      	cmp	r3, #0
 801770c:	d010      	beq.n	8017730 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	f107 020c 	add.w	r2, r7, #12
 8017718:	4611      	mov	r1, r2
 801771a:	4618      	mov	r0, r3
 801771c:	f7fe fefe 	bl	801651c <VerifyRfFreq>
 8017720:	4603      	mov	r3, r0
 8017722:	f083 0301 	eor.w	r3, r3, #1
 8017726:	b2db      	uxtb	r3, r3
 8017728:	2b00      	cmp	r3, #0
 801772a:	d001      	beq.n	8017730 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801772c:	2301      	movs	r3, #1
 801772e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017730:	7bfb      	ldrb	r3, [r7, #15]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d004      	beq.n	8017740 <RegionEU868ChannelAdd+0xcc>
 8017736:	7bbb      	ldrb	r3, [r7, #14]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d001      	beq.n	8017740 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801773c:	2306      	movs	r3, #6
 801773e:	e035      	b.n	80177ac <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017740:	7bfb      	ldrb	r3, [r7, #15]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d001      	beq.n	801774a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017746:	2305      	movs	r3, #5
 8017748:	e030      	b.n	80177ac <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801774a:	7bbb      	ldrb	r3, [r7, #14]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d001      	beq.n	8017754 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017750:	2304      	movs	r3, #4
 8017752:	e02b      	b.n	80177ac <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017754:	4b17      	ldr	r3, [pc, #92]	; (80177b4 <RegionEU868ChannelAdd+0x140>)
 8017756:	6819      	ldr	r1, [r3, #0]
 8017758:	7b7a      	ldrb	r2, [r7, #13]
 801775a:	4613      	mov	r3, r2
 801775c:	005b      	lsls	r3, r3, #1
 801775e:	4413      	add	r3, r2
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	18c8      	adds	r0, r1, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	220c      	movs	r2, #12
 801776a:	4619      	mov	r1, r3
 801776c:	f001 fb63 	bl	8018e36 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017770:	4b10      	ldr	r3, [pc, #64]	; (80177b4 <RegionEU868ChannelAdd+0x140>)
 8017772:	6819      	ldr	r1, [r3, #0]
 8017774:	7b7a      	ldrb	r2, [r7, #13]
 8017776:	7b38      	ldrb	r0, [r7, #12]
 8017778:	4613      	mov	r3, r2
 801777a:	005b      	lsls	r3, r3, #1
 801777c:	4413      	add	r3, r2
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	440b      	add	r3, r1
 8017782:	3309      	adds	r3, #9
 8017784:	4602      	mov	r2, r0
 8017786:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017788:	4b0a      	ldr	r3, [pc, #40]	; (80177b4 <RegionEU868ChannelAdd+0x140>)
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017790:	b21a      	sxth	r2, r3
 8017792:	7b7b      	ldrb	r3, [r7, #13]
 8017794:	2101      	movs	r1, #1
 8017796:	fa01 f303 	lsl.w	r3, r1, r3
 801779a:	b21b      	sxth	r3, r3
 801779c:	4313      	orrs	r3, r2
 801779e:	b21a      	sxth	r2, r3
 80177a0:	4b04      	ldr	r3, [pc, #16]	; (80177b4 <RegionEU868ChannelAdd+0x140>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	b292      	uxth	r2, r2
 80177a6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 80177aa:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3710      	adds	r7, #16
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	20003c84 	.word	0x20003c84

080177b8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b086      	sub	sp, #24
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80177c6:	7dfb      	ldrb	r3, [r7, #23]
 80177c8:	2b02      	cmp	r3, #2
 80177ca:	d801      	bhi.n	80177d0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80177cc:	2300      	movs	r3, #0
 80177ce:	e016      	b.n	80177fe <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80177d0:	4b0d      	ldr	r3, [pc, #52]	; (8017808 <RegionEU868ChannelsRemove+0x50>)
 80177d2:	6819      	ldr	r1, [r3, #0]
 80177d4:	7dfa      	ldrb	r2, [r7, #23]
 80177d6:	4613      	mov	r3, r2
 80177d8:	005b      	lsls	r3, r3, #1
 80177da:	4413      	add	r3, r2
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	440b      	add	r3, r1
 80177e0:	461a      	mov	r2, r3
 80177e2:	2300      	movs	r3, #0
 80177e4:	6013      	str	r3, [r2, #0]
 80177e6:	6053      	str	r3, [r2, #4]
 80177e8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80177ea:	4b07      	ldr	r3, [pc, #28]	; (8017808 <RegionEU868ChannelsRemove+0x50>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80177f2:	7df9      	ldrb	r1, [r7, #23]
 80177f4:	2210      	movs	r2, #16
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7fe f92c 	bl	8015a54 <RegionCommonChanDisable>
 80177fc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3718      	adds	r7, #24
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	20003c84 	.word	0x20003c84

0801780c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801780c:	b590      	push	{r4, r7, lr}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801781a:	4b20      	ldr	r3, [pc, #128]	; (801789c <RegionEU868SetContinuousWave+0x90>)
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	4b20      	ldr	r3, [pc, #128]	; (80178a0 <RegionEU868SetContinuousWave+0x94>)
 8017820:	6819      	ldr	r1, [r3, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	461c      	mov	r4, r3
 8017828:	4623      	mov	r3, r4
 801782a:	005b      	lsls	r3, r3, #1
 801782c:	4423      	add	r3, r4
 801782e:	009b      	lsls	r3, r3, #2
 8017830:	440b      	add	r3, r1
 8017832:	3309      	adds	r3, #9
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	4619      	mov	r1, r3
 8017838:	460b      	mov	r3, r1
 801783a:	005b      	lsls	r3, r3, #1
 801783c:	440b      	add	r3, r1
 801783e:	00db      	lsls	r3, r3, #3
 8017840:	4413      	add	r3, r2
 8017842:	3302      	adds	r3, #2
 8017844:	f993 3000 	ldrsb.w	r3, [r3]
 8017848:	4619      	mov	r1, r3
 801784a:	f7fe fdde 	bl	801640a <RegionCommonLimitTxPower>
 801784e:	4603      	mov	r3, r0
 8017850:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017852:	2300      	movs	r3, #0
 8017854:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8017856:	4b12      	ldr	r3, [pc, #72]	; (80178a0 <RegionEU868SetContinuousWave+0x94>)
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	781b      	ldrb	r3, [r3, #0]
 801785e:	4619      	mov	r1, r3
 8017860:	460b      	mov	r3, r1
 8017862:	005b      	lsls	r3, r3, #1
 8017864:	440b      	add	r3, r1
 8017866:	009b      	lsls	r3, r3, #2
 8017868:	4413      	add	r3, r2
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6859      	ldr	r1, [r3, #4]
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	689a      	ldr	r2, [r3, #8]
 8017876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801787a:	4618      	mov	r0, r3
 801787c:	f7fe fc36 	bl	80160ec <RegionCommonComputeTxPower>
 8017880:	4603      	mov	r3, r0
 8017882:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017884:	4b07      	ldr	r3, [pc, #28]	; (80178a4 <RegionEU868SetContinuousWave+0x98>)
 8017886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017888:	687a      	ldr	r2, [r7, #4]
 801788a:	8992      	ldrh	r2, [r2, #12]
 801788c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017890:	68b8      	ldr	r0, [r7, #8]
 8017892:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8017894:	bf00      	nop
 8017896:	3714      	adds	r7, #20
 8017898:	46bd      	mov	sp, r7
 801789a:	bd90      	pop	{r4, r7, pc}
 801789c:	20003c80 	.word	0x20003c80
 80178a0:	20003c84 	.word	0x20003c84
 80178a4:	0801e648 	.word	0x0801e648

080178a8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80178a8:	b480      	push	{r7}
 80178aa:	b085      	sub	sp, #20
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	4603      	mov	r3, r0
 80178b0:	71fb      	strb	r3, [r7, #7]
 80178b2:	460b      	mov	r3, r1
 80178b4:	71bb      	strb	r3, [r7, #6]
 80178b6:	4613      	mov	r3, r2
 80178b8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80178ba:	79ba      	ldrb	r2, [r7, #6]
 80178bc:	797b      	ldrb	r3, [r7, #5]
 80178be:	1ad3      	subs	r3, r2, r3
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80178c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	da01      	bge.n	80178d0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80178cc:	2300      	movs	r3, #0
 80178ce:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80178d0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80178d2:	4618      	mov	r0, r3
 80178d4:	3714      	adds	r7, #20
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bc80      	pop	{r7}
 80178da:	4770      	bx	lr

080178dc <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	603b      	str	r3, [r7, #0]
 80178e4:	4603      	mov	r3, r0
 80178e6:	71fb      	strb	r3, [r7, #7]
 80178e8:	460b      	mov	r3, r1
 80178ea:	71bb      	strb	r3, [r7, #6]
 80178ec:	4613      	mov	r3, r2
 80178ee:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80178f0:	79fb      	ldrb	r3, [r7, #7]
 80178f2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80178f4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80178f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178fc:	4611      	mov	r1, r2
 80178fe:	4618      	mov	r0, r3
 8017900:	f7fe fd83 	bl	801640a <RegionCommonLimitTxPower>
 8017904:	4603      	mov	r3, r0
 8017906:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017908:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801790c:	2b04      	cmp	r3, #4
 801790e:	d106      	bne.n	801791e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017914:	2b02      	cmp	r3, #2
 8017916:	bfb8      	it	lt
 8017918:	2302      	movlt	r3, #2
 801791a:	73fb      	strb	r3, [r7, #15]
 801791c:	e00d      	b.n	801793a <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801791e:	2204      	movs	r2, #4
 8017920:	2100      	movs	r1, #0
 8017922:	6838      	ldr	r0, [r7, #0]
 8017924:	f7fe f8ca 	bl	8015abc <RegionCommonCountChannels>
 8017928:	4603      	mov	r3, r0
 801792a:	2b31      	cmp	r3, #49	; 0x31
 801792c:	d805      	bhi.n	801793a <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801792e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017932:	2b05      	cmp	r3, #5
 8017934:	bfb8      	it	lt
 8017936:	2305      	movlt	r3, #5
 8017938:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801793a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801793e:	4618      	mov	r0, r3
 8017940:	3710      	adds	r7, #16
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
	...

08017948 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b082      	sub	sp, #8
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017950:	4b18      	ldr	r3, [pc, #96]	; (80179b4 <VerifyRfFreq+0x6c>)
 8017952:	6a1b      	ldr	r3, [r3, #32]
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	4798      	blx	r3
 8017958:	4603      	mov	r3, r0
 801795a:	f083 0301 	eor.w	r3, r3, #1
 801795e:	b2db      	uxtb	r3, r3
 8017960:	2b00      	cmp	r3, #0
 8017962:	d001      	beq.n	8017968 <VerifyRfFreq+0x20>
    {
        return false;
 8017964:	2300      	movs	r3, #0
 8017966:	e021      	b.n	80179ac <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	4a13      	ldr	r2, [pc, #76]	; (80179b8 <VerifyRfFreq+0x70>)
 801796c:	4293      	cmp	r3, r2
 801796e:	d910      	bls.n	8017992 <VerifyRfFreq+0x4a>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	4a12      	ldr	r2, [pc, #72]	; (80179bc <VerifyRfFreq+0x74>)
 8017974:	4293      	cmp	r3, r2
 8017976:	d80c      	bhi.n	8017992 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	4b11      	ldr	r3, [pc, #68]	; (80179c0 <VerifyRfFreq+0x78>)
 801797c:	4413      	add	r3, r2
 801797e:	4a11      	ldr	r2, [pc, #68]	; (80179c4 <VerifyRfFreq+0x7c>)
 8017980:	fba2 1203 	umull	r1, r2, r2, r3
 8017984:	0c92      	lsrs	r2, r2, #18
 8017986:	4910      	ldr	r1, [pc, #64]	; (80179c8 <VerifyRfFreq+0x80>)
 8017988:	fb01 f202 	mul.w	r2, r1, r2
 801798c:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801798e:	2a00      	cmp	r2, #0
 8017990:	d001      	beq.n	8017996 <VerifyRfFreq+0x4e>
    {
        return false;
 8017992:	2300      	movs	r3, #0
 8017994:	e00a      	b.n	80179ac <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4a0c      	ldr	r2, [pc, #48]	; (80179cc <VerifyRfFreq+0x84>)
 801799a:	4293      	cmp	r3, r2
 801799c:	d903      	bls.n	80179a6 <VerifyRfFreq+0x5e>
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	4a06      	ldr	r2, [pc, #24]	; (80179bc <VerifyRfFreq+0x74>)
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d901      	bls.n	80179aa <VerifyRfFreq+0x62>
    {
        return false;
 80179a6:	2300      	movs	r3, #0
 80179a8:	e000      	b.n	80179ac <VerifyRfFreq+0x64>
    }
    return true;
 80179aa:	2301      	movs	r3, #1
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	3708      	adds	r7, #8
 80179b0:	46bd      	mov	sp, r7
 80179b2:	bd80      	pop	{r7, pc}
 80179b4:	0801e648 	.word	0x0801e648
 80179b8:	3708709f 	.word	0x3708709f
 80179bc:	374886e0 	.word	0x374886e0
 80179c0:	c8f78f60 	.word	0xc8f78f60
 80179c4:	6fd91d85 	.word	0x6fd91d85
 80179c8:	000927c0 	.word	0x000927c0
 80179cc:	35c8015f 	.word	0x35c8015f

080179d0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80179d0:	b590      	push	{r4, r7, lr}
 80179d2:	b089      	sub	sp, #36	; 0x24
 80179d4:	af04      	add	r7, sp, #16
 80179d6:	4603      	mov	r3, r0
 80179d8:	460a      	mov	r2, r1
 80179da:	71fb      	strb	r3, [r7, #7]
 80179dc:	4613      	mov	r3, r2
 80179de:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80179e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179e4:	4a0f      	ldr	r2, [pc, #60]	; (8017a24 <GetTimeOnAir+0x54>)
 80179e6:	5cd3      	ldrb	r3, [r2, r3]
 80179e8:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80179ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179ee:	490e      	ldr	r1, [pc, #56]	; (8017a28 <GetTimeOnAir+0x58>)
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7fe fd1f 	bl	8016434 <RegionCommonGetBandwidth>
 80179f6:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80179f8:	4b0c      	ldr	r3, [pc, #48]	; (8017a2c <GetTimeOnAir+0x5c>)
 80179fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80179fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017a00:	88bb      	ldrh	r3, [r7, #4]
 8017a02:	b2db      	uxtb	r3, r3
 8017a04:	2101      	movs	r1, #1
 8017a06:	9103      	str	r1, [sp, #12]
 8017a08:	9302      	str	r3, [sp, #8]
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	9301      	str	r3, [sp, #4]
 8017a0e:	2308      	movs	r3, #8
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	2301      	movs	r3, #1
 8017a14:	68b9      	ldr	r1, [r7, #8]
 8017a16:	2001      	movs	r0, #1
 8017a18:	47a0      	blx	r4
 8017a1a:	4603      	mov	r3, r0
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3714      	adds	r7, #20
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd90      	pop	{r4, r7, pc}
 8017a24:	0801e5c4 	.word	0x0801e5c4
 8017a28:	0801e5d4 	.word	0x0801e5d4
 8017a2c:	0801e648 	.word	0x0801e648

08017a30 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b088      	sub	sp, #32
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017a38:	2300      	movs	r3, #0
 8017a3a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	3b01      	subs	r3, #1
 8017a42:	2b38      	cmp	r3, #56	; 0x38
 8017a44:	f200 813c 	bhi.w	8017cc0 <RegionUS915GetPhyParam+0x290>
 8017a48:	a201      	add	r2, pc, #4	; (adr r2, 8017a50 <RegionUS915GetPhyParam+0x20>)
 8017a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a4e:	bf00      	nop
 8017a50:	08017b35 	.word	0x08017b35
 8017a54:	08017b3b 	.word	0x08017b3b
 8017a58:	08017cc1 	.word	0x08017cc1
 8017a5c:	08017cc1 	.word	0x08017cc1
 8017a60:	08017cc1 	.word	0x08017cc1
 8017a64:	08017b41 	.word	0x08017b41
 8017a68:	08017cc1 	.word	0x08017cc1
 8017a6c:	08017b7b 	.word	0x08017b7b
 8017a70:	08017cc1 	.word	0x08017cc1
 8017a74:	08017b81 	.word	0x08017b81
 8017a78:	08017b87 	.word	0x08017b87
 8017a7c:	08017b8d 	.word	0x08017b8d
 8017a80:	08017b93 	.word	0x08017b93
 8017a84:	08017ba3 	.word	0x08017ba3
 8017a88:	08017bb3 	.word	0x08017bb3
 8017a8c:	08017bb9 	.word	0x08017bb9
 8017a90:	08017bc1 	.word	0x08017bc1
 8017a94:	08017bc9 	.word	0x08017bc9
 8017a98:	08017bd1 	.word	0x08017bd1
 8017a9c:	08017bd9 	.word	0x08017bd9
 8017aa0:	08017be1 	.word	0x08017be1
 8017aa4:	08017be9 	.word	0x08017be9
 8017aa8:	08017bfd 	.word	0x08017bfd
 8017aac:	08017c03 	.word	0x08017c03
 8017ab0:	08017c09 	.word	0x08017c09
 8017ab4:	08017c0f 	.word	0x08017c0f
 8017ab8:	08017c1b 	.word	0x08017c1b
 8017abc:	08017c27 	.word	0x08017c27
 8017ac0:	08017c2d 	.word	0x08017c2d
 8017ac4:	08017c35 	.word	0x08017c35
 8017ac8:	08017c3b 	.word	0x08017c3b
 8017acc:	08017c41 	.word	0x08017c41
 8017ad0:	08017c47 	.word	0x08017c47
 8017ad4:	08017b47 	.word	0x08017b47
 8017ad8:	08017cc1 	.word	0x08017cc1
 8017adc:	08017cc1 	.word	0x08017cc1
 8017ae0:	08017cc1 	.word	0x08017cc1
 8017ae4:	08017cc1 	.word	0x08017cc1
 8017ae8:	08017cc1 	.word	0x08017cc1
 8017aec:	08017cc1 	.word	0x08017cc1
 8017af0:	08017cc1 	.word	0x08017cc1
 8017af4:	08017cc1 	.word	0x08017cc1
 8017af8:	08017cc1 	.word	0x08017cc1
 8017afc:	08017cc1 	.word	0x08017cc1
 8017b00:	08017cc1 	.word	0x08017cc1
 8017b04:	08017cc1 	.word	0x08017cc1
 8017b08:	08017cc1 	.word	0x08017cc1
 8017b0c:	08017c4f 	.word	0x08017c4f
 8017b10:	08017c63 	.word	0x08017c63
 8017b14:	08017c71 	.word	0x08017c71
 8017b18:	08017c77 	.word	0x08017c77
 8017b1c:	08017cc1 	.word	0x08017cc1
 8017b20:	08017c7d 	.word	0x08017c7d
 8017b24:	08017c91 	.word	0x08017c91
 8017b28:	08017c97 	.word	0x08017c97
 8017b2c:	08017c9d 	.word	0x08017c9d
 8017b30:	08017cad 	.word	0x08017cad
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017b34:	2308      	movs	r3, #8
 8017b36:	61bb      	str	r3, [r7, #24]
            break;
 8017b38:	e0c3      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	61bb      	str	r3, [r7, #24]
            break;
 8017b3e:	e0c0      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017b40:	2300      	movs	r3, #0
 8017b42:	61bb      	str	r3, [r7, #24]
            break;
 8017b44:	e0bd      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b4c:	733b      	strb	r3, [r7, #12]
 8017b4e:	2304      	movs	r3, #4
 8017b50:	737b      	strb	r3, [r7, #13]
 8017b52:	2300      	movs	r3, #0
 8017b54:	73bb      	strb	r3, [r7, #14]
 8017b56:	2348      	movs	r3, #72	; 0x48
 8017b58:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017b5a:	4b5d      	ldr	r3, [pc, #372]	; (8017cd0 <RegionUS915GetPhyParam+0x2a0>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b62:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017b64:	4b5a      	ldr	r3, [pc, #360]	; (8017cd0 <RegionUS915GetPhyParam+0x2a0>)
 8017b66:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b68:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017b6a:	f107 030c 	add.w	r3, r7, #12
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7fe fc0d 	bl	801638e <RegionCommonGetNextLowerTxDr>
 8017b74:	4603      	mov	r3, r0
 8017b76:	61bb      	str	r3, [r7, #24]
            break;
 8017b78:	e0a3      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	61bb      	str	r3, [r7, #24]
            break;
 8017b7e:	e0a0      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017b80:	2300      	movs	r3, #0
 8017b82:	61bb      	str	r3, [r7, #24]
            break;
 8017b84:	e09d      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017b86:	2340      	movs	r3, #64	; 0x40
 8017b88:	61bb      	str	r3, [r7, #24]
            break;
 8017b8a:	e09a      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017b8c:	2320      	movs	r3, #32
 8017b8e:	61bb      	str	r3, [r7, #24]
            break;
 8017b90:	e097      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b98:	461a      	mov	r2, r3
 8017b9a:	4b4e      	ldr	r3, [pc, #312]	; (8017cd4 <RegionUS915GetPhyParam+0x2a4>)
 8017b9c:	5c9b      	ldrb	r3, [r3, r2]
 8017b9e:	61bb      	str	r3, [r7, #24]
            break;
 8017ba0:	e08f      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ba8:	461a      	mov	r2, r3
 8017baa:	4b4b      	ldr	r3, [pc, #300]	; (8017cd8 <RegionUS915GetPhyParam+0x2a8>)
 8017bac:	5c9b      	ldrb	r3, [r3, r2]
 8017bae:	61bb      	str	r3, [r7, #24]
            break;
 8017bb0:	e087      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	61bb      	str	r3, [r7, #24]
            break;
 8017bb6:	e084      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017bb8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017bbc:	61bb      	str	r3, [r7, #24]
            break;
 8017bbe:	e080      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bc4:	61bb      	str	r3, [r7, #24]
            break;
 8017bc6:	e07c      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017bc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017bcc:	61bb      	str	r3, [r7, #24]
            break;
 8017bce:	e078      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017bd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8017bd4:	61bb      	str	r3, [r7, #24]
            break;
 8017bd6:	e074      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017bd8:	f241 7370 	movw	r3, #6000	; 0x1770
 8017bdc:	61bb      	str	r3, [r7, #24]
            break;
 8017bde:	e070      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8017be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017be4:	61bb      	str	r3, [r7, #24]
            break;
 8017be6:	e06c      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8017be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bec:	483b      	ldr	r0, [pc, #236]	; (8017cdc <RegionUS915GetPhyParam+0x2ac>)
 8017bee:	f001 f90b 	bl	8018e08 <randr>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017bf8:	61bb      	str	r3, [r7, #24]
            break;
 8017bfa:	e062      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	61bb      	str	r3, [r7, #24]
            break;
 8017c00:	e05f      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017c02:	4b37      	ldr	r3, [pc, #220]	; (8017ce0 <RegionUS915GetPhyParam+0x2b0>)
 8017c04:	61bb      	str	r3, [r7, #24]
            break;
 8017c06:	e05c      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017c08:	2308      	movs	r3, #8
 8017c0a:	61bb      	str	r3, [r7, #24]
            break;
 8017c0c:	e059      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017c0e:	4b30      	ldr	r3, [pc, #192]	; (8017cd0 <RegionUS915GetPhyParam+0x2a0>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c16:	61bb      	str	r3, [r7, #24]
            break;
 8017c18:	e053      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017c1a:	4b2d      	ldr	r3, [pc, #180]	; (8017cd0 <RegionUS915GetPhyParam+0x2a0>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017c22:	61bb      	str	r3, [r7, #24]
            break;
 8017c24:	e04d      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017c26:	2348      	movs	r3, #72	; 0x48
 8017c28:	61bb      	str	r3, [r7, #24]
            break;
 8017c2a:	e04a      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017c2c:	4b28      	ldr	r3, [pc, #160]	; (8017cd0 <RegionUS915GetPhyParam+0x2a0>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	61bb      	str	r3, [r7, #24]
            break;
 8017c32:	e046      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017c34:	2300      	movs	r3, #0
 8017c36:	61bb      	str	r3, [r7, #24]
            break;
 8017c38:	e043      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	61bb      	str	r3, [r7, #24]
            break;
 8017c3e:	e040      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017c40:	4b28      	ldr	r3, [pc, #160]	; (8017ce4 <RegionUS915GetPhyParam+0x2b4>)
 8017c42:	61bb      	str	r3, [r7, #24]
            break;
 8017c44:	e03d      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017c46:	f04f 0300 	mov.w	r3, #0
 8017c4a:	61bb      	str	r3, [r7, #24]
            break;
 8017c4c:	e039      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	791b      	ldrb	r3, [r3, #4]
 8017c52:	4a25      	ldr	r2, [pc, #148]	; (8017ce8 <RegionUS915GetPhyParam+0x2b8>)
 8017c54:	4922      	ldr	r1, [pc, #136]	; (8017ce0 <RegionUS915GetPhyParam+0x2b0>)
 8017c56:	4618      	mov	r0, r3
 8017c58:	f7fd fd0b 	bl	8015672 <RegionBaseUSCalcDownlinkFrequency>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017c60:	e02f      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017c62:	2317      	movs	r3, #23
 8017c64:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017c66:	2305      	movs	r3, #5
 8017c68:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017c6a:	2303      	movs	r3, #3
 8017c6c:	76bb      	strb	r3, [r7, #26]
            break;
 8017c6e:	e028      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017c70:	2308      	movs	r3, #8
 8017c72:	61bb      	str	r3, [r7, #24]
            break;
 8017c74:	e025      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017c76:	2308      	movs	r3, #8
 8017c78:	61bb      	str	r3, [r7, #24]
            break;
 8017c7a:	e022      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	791b      	ldrb	r3, [r3, #4]
 8017c80:	4a19      	ldr	r2, [pc, #100]	; (8017ce8 <RegionUS915GetPhyParam+0x2b8>)
 8017c82:	4917      	ldr	r1, [pc, #92]	; (8017ce0 <RegionUS915GetPhyParam+0x2b0>)
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7fd fcf4 	bl	8015672 <RegionBaseUSCalcDownlinkFrequency>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017c8e:	e018      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017c90:	2308      	movs	r3, #8
 8017c92:	61bb      	str	r3, [r7, #24]
            break;
 8017c94:	e015      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017c96:	2308      	movs	r3, #8
 8017c98:	61bb      	str	r3, [r7, #24]
            break;
 8017c9a:	e012      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ca2:	461a      	mov	r2, r3
 8017ca4:	4b11      	ldr	r3, [pc, #68]	; (8017cec <RegionUS915GetPhyParam+0x2bc>)
 8017ca6:	5c9b      	ldrb	r3, [r3, r2]
 8017ca8:	61bb      	str	r3, [r7, #24]
            break;
 8017caa:	e00a      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cb2:	490f      	ldr	r1, [pc, #60]	; (8017cf0 <RegionUS915GetPhyParam+0x2c0>)
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f7fe fbbd 	bl	8016434 <RegionCommonGetBandwidth>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	61bb      	str	r3, [r7, #24]
            break;
 8017cbe:	e000      	b.n	8017cc2 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8017cc0:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017cc2:	69bb      	ldr	r3, [r7, #24]
 8017cc4:	61fb      	str	r3, [r7, #28]
 8017cc6:	69fb      	ldr	r3, [r7, #28]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3720      	adds	r7, #32
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	20003c8c 	.word	0x20003c8c
 8017cd4:	0801e628 	.word	0x0801e628
 8017cd8:	0801e638 	.word	0x0801e638
 8017cdc:	fffffc18 	.word	0xfffffc18
 8017ce0:	370870a0 	.word	0x370870a0
 8017ce4:	4200999a 	.word	0x4200999a
 8017ce8:	000927c0 	.word	0x000927c0
 8017cec:	0801e5c4 	.word	0x0801e5c4
 8017cf0:	0801e5d4 	.word	0x0801e5d4

08017cf4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017cf4:	b590      	push	{r4, r7, lr}
 8017cf6:	b085      	sub	sp, #20
 8017cf8:	af02      	add	r7, sp, #8
 8017cfa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017cfc:	4b11      	ldr	r3, [pc, #68]	; (8017d44 <RegionUS915SetBandTxDone+0x50>)
 8017cfe:	681a      	ldr	r2, [r3, #0]
 8017d00:	4b11      	ldr	r3, [pc, #68]	; (8017d48 <RegionUS915SetBandTxDone+0x54>)
 8017d02:	6819      	ldr	r1, [r3, #0]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	005b      	lsls	r3, r3, #1
 8017d0e:	4403      	add	r3, r0
 8017d10:	009b      	lsls	r3, r3, #2
 8017d12:	440b      	add	r3, r1
 8017d14:	3309      	adds	r3, #9
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	4619      	mov	r1, r3
 8017d1a:	460b      	mov	r3, r1
 8017d1c:	005b      	lsls	r3, r3, #1
 8017d1e:	440b      	add	r3, r1
 8017d20:	00db      	lsls	r3, r3, #3
 8017d22:	18d0      	adds	r0, r2, r3
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6899      	ldr	r1, [r3, #8]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	785c      	ldrb	r4, [r3, #1]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	691a      	ldr	r2, [r3, #16]
 8017d30:	9200      	str	r2, [sp, #0]
 8017d32:	68db      	ldr	r3, [r3, #12]
 8017d34:	4622      	mov	r2, r4
 8017d36:	f7fd ff13 	bl	8015b60 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8017d3a:	bf00      	nop
 8017d3c:	370c      	adds	r7, #12
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd90      	pop	{r4, r7, pc}
 8017d42:	bf00      	nop
 8017d44:	20003c88 	.word	0x20003c88
 8017d48:	20003c8c 	.word	0x20003c8c

08017d4c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b08a      	sub	sp, #40	; 0x28
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017d54:	2301      	movs	r3, #1
 8017d56:	81bb      	strh	r3, [r7, #12]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	73bb      	strb	r3, [r7, #14]
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	613b      	str	r3, [r7, #16]
 8017d60:	2300      	movs	r3, #0
 8017d62:	617b      	str	r3, [r7, #20]
 8017d64:	2300      	movs	r3, #0
 8017d66:	61bb      	str	r3, [r7, #24]
 8017d68:	2300      	movs	r3, #0
 8017d6a:	61fb      	str	r3, [r7, #28]
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	7a1b      	ldrb	r3, [r3, #8]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d007      	beq.n	8017d8a <RegionUS915InitDefaults+0x3e>
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f2c0 8106 	blt.w	8017f8c <RegionUS915InitDefaults+0x240>
 8017d80:	3b01      	subs	r3, #1
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	f200 8102 	bhi.w	8017f8c <RegionUS915InitDefaults+0x240>
 8017d88:	e0ce      	b.n	8017f28 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f000 80fe 	beq.w	8017f90 <RegionUS915InitDefaults+0x244>
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	f000 80f9 	beq.w	8017f90 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	4a7d      	ldr	r2, [pc, #500]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017da4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	4a7c      	ldr	r2, [pc, #496]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017dac:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017dae:	4b7a      	ldr	r3, [pc, #488]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2200      	movs	r2, #0
 8017db4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017db8:	4b77      	ldr	r3, [pc, #476]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017dc2:	4b75      	ldr	r3, [pc, #468]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f107 030c 	add.w	r3, r7, #12
 8017dcc:	2218      	movs	r2, #24
 8017dce:	4619      	mov	r1, r3
 8017dd0:	f001 f831 	bl	8018e36 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017dda:	e02e      	b.n	8017e3a <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017de0:	4a6f      	ldr	r2, [pc, #444]	; (8017fa0 <RegionUS915InitDefaults+0x254>)
 8017de2:	fb03 f202 	mul.w	r2, r3, r2
 8017de6:	4b6f      	ldr	r3, [pc, #444]	; (8017fa4 <RegionUS915InitDefaults+0x258>)
 8017de8:	4413      	add	r3, r2
 8017dea:	4a6c      	ldr	r2, [pc, #432]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017dec:	6811      	ldr	r1, [r2, #0]
 8017dee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017df2:	4618      	mov	r0, r3
 8017df4:	4613      	mov	r3, r2
 8017df6:	005b      	lsls	r3, r3, #1
 8017df8:	4413      	add	r3, r2
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	440b      	add	r3, r1
 8017dfe:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017e00:	4b66      	ldr	r3, [pc, #408]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017e02:	6819      	ldr	r1, [r3, #0]
 8017e04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e08:	4613      	mov	r3, r2
 8017e0a:	005b      	lsls	r3, r3, #1
 8017e0c:	4413      	add	r3, r2
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	440b      	add	r3, r1
 8017e12:	3308      	adds	r3, #8
 8017e14:	2230      	movs	r2, #48	; 0x30
 8017e16:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017e18:	4b60      	ldr	r3, [pc, #384]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017e1a:	6819      	ldr	r1, [r3, #0]
 8017e1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	440b      	add	r3, r1
 8017e2a:	3309      	adds	r3, #9
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e34:	3301      	adds	r3, #1
 8017e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8017e40:	d9cc      	bls.n	8017ddc <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017e42:	2340      	movs	r3, #64	; 0x40
 8017e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e48:	e02f      	b.n	8017eaa <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e4e:	3b40      	subs	r3, #64	; 0x40
 8017e50:	4a55      	ldr	r2, [pc, #340]	; (8017fa8 <RegionUS915InitDefaults+0x25c>)
 8017e52:	fb03 f202 	mul.w	r2, r3, r2
 8017e56:	4b55      	ldr	r3, [pc, #340]	; (8017fac <RegionUS915InitDefaults+0x260>)
 8017e58:	4413      	add	r3, r2
 8017e5a:	4a50      	ldr	r2, [pc, #320]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017e5c:	6811      	ldr	r1, [r2, #0]
 8017e5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e62:	4618      	mov	r0, r3
 8017e64:	4613      	mov	r3, r2
 8017e66:	005b      	lsls	r3, r3, #1
 8017e68:	4413      	add	r3, r2
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	440b      	add	r3, r1
 8017e6e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017e70:	4b4a      	ldr	r3, [pc, #296]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017e72:	6819      	ldr	r1, [r3, #0]
 8017e74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e78:	4613      	mov	r3, r2
 8017e7a:	005b      	lsls	r3, r3, #1
 8017e7c:	4413      	add	r3, r2
 8017e7e:	009b      	lsls	r3, r3, #2
 8017e80:	440b      	add	r3, r1
 8017e82:	3308      	adds	r3, #8
 8017e84:	2244      	movs	r2, #68	; 0x44
 8017e86:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017e88:	4b44      	ldr	r3, [pc, #272]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017e8a:	6819      	ldr	r1, [r3, #0]
 8017e8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e90:	4613      	mov	r3, r2
 8017e92:	005b      	lsls	r3, r3, #1
 8017e94:	4413      	add	r3, r2
 8017e96:	009b      	lsls	r3, r3, #2
 8017e98:	440b      	add	r3, r1
 8017e9a:	3309      	adds	r3, #9
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017eae:	2b47      	cmp	r3, #71	; 0x47
 8017eb0:	d9cb      	bls.n	8017e4a <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017eb2:	4b3a      	ldr	r3, [pc, #232]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eba:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017ebe:	4b37      	ldr	r3, [pc, #220]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ec6:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017eca:	4b34      	ldr	r3, [pc, #208]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ed2:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017ed6:	4b31      	ldr	r3, [pc, #196]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ede:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017ee2:	4b2e      	ldr	r3, [pc, #184]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	22ff      	movs	r2, #255	; 0xff
 8017ee8:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017eec:	4b2b      	ldr	r3, [pc, #172]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017ef6:	4b29      	ldr	r3, [pc, #164]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017efe:	4b27      	ldr	r3, [pc, #156]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017f06:	2206      	movs	r2, #6
 8017f08:	4619      	mov	r1, r3
 8017f0a:	f7fd fe03 	bl	8015b14 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017f0e:	4b22      	ldr	r3, [pc, #136]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8017f16:	4b21      	ldr	r3, [pc, #132]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017f1e:	2206      	movs	r2, #6
 8017f20:	4619      	mov	r1, r3
 8017f22:	f7fd fdf7 	bl	8015b14 <RegionCommonChanMaskCopy>
            break;
 8017f26:	e034      	b.n	8017f92 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017f28:	4b1c      	ldr	r3, [pc, #112]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017f30:	4b1a      	ldr	r3, [pc, #104]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017f38:	2206      	movs	r2, #6
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	f7fd fdea 	bl	8015b14 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017f40:	2300      	movs	r3, #0
 8017f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017f46:	e01c      	b.n	8017f82 <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017f48:	4b13      	ldr	r3, [pc, #76]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f50:	3248      	adds	r2, #72	; 0x48
 8017f52:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017f56:	4b11      	ldr	r3, [pc, #68]	; (8017f9c <RegionUS915InitDefaults+0x250>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f5e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017f62:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017f66:	4b0c      	ldr	r3, [pc, #48]	; (8017f98 <RegionUS915InitDefaults+0x24c>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f6e:	4001      	ands	r1, r0
 8017f70:	b289      	uxth	r1, r1
 8017f72:	3248      	adds	r2, #72	; 0x48
 8017f74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017f78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017f82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017f86:	2b05      	cmp	r3, #5
 8017f88:	d9de      	bls.n	8017f48 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017f8a:	e002      	b.n	8017f92 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8017f8c:	bf00      	nop
 8017f8e:	e000      	b.n	8017f92 <RegionUS915InitDefaults+0x246>
                return;
 8017f90:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8017f92:	3728      	adds	r7, #40	; 0x28
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	20003c88 	.word	0x20003c88
 8017f9c:	20003c8c 	.word	0x20003c8c
 8017fa0:	00030d40 	.word	0x00030d40
 8017fa4:	35c80160 	.word	0x35c80160
 8017fa8:	00186a00 	.word	0x00186a00
 8017fac:	35d2afc0 	.word	0x35d2afc0

08017fb0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b082      	sub	sp, #8
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	460b      	mov	r3, r1
 8017fba:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8017fbc:	78fb      	ldrb	r3, [r7, #3]
 8017fbe:	2b0f      	cmp	r3, #15
 8017fc0:	d858      	bhi.n	8018074 <RegionUS915Verify+0xc4>
 8017fc2:	a201      	add	r2, pc, #4	; (adr r2, 8017fc8 <RegionUS915Verify+0x18>)
 8017fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fc8:	08018009 	.word	0x08018009
 8017fcc:	08018075 	.word	0x08018075
 8017fd0:	08018075 	.word	0x08018075
 8017fd4:	08018075 	.word	0x08018075
 8017fd8:	08018075 	.word	0x08018075
 8017fdc:	08018017 	.word	0x08018017
 8017fe0:	08018017 	.word	0x08018017
 8017fe4:	08018035 	.word	0x08018035
 8017fe8:	08018075 	.word	0x08018075
 8017fec:	08018053 	.word	0x08018053
 8017ff0:	08018053 	.word	0x08018053
 8017ff4:	08018075 	.word	0x08018075
 8017ff8:	08018075 	.word	0x08018075
 8017ffc:	08018075 	.word	0x08018075
 8018000:	08018075 	.word	0x08018075
 8018004:	08018071 	.word	0x08018071
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4618      	mov	r0, r3
 801800e:	f7ff fc9b 	bl	8017948 <VerifyRfFreq>
 8018012:	4603      	mov	r3, r0
 8018014:	e02f      	b.n	8018076 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f993 3000 	ldrsb.w	r3, [r3]
 801801c:	2204      	movs	r2, #4
 801801e:	2100      	movs	r1, #0
 8018020:	4618      	mov	r0, r3
 8018022:	f7fd fcfa 	bl	8015a1a <RegionCommonValueInRange>
 8018026:	4603      	mov	r3, r0
 8018028:	2b00      	cmp	r3, #0
 801802a:	bf14      	ite	ne
 801802c:	2301      	movne	r3, #1
 801802e:	2300      	moveq	r3, #0
 8018030:	b2db      	uxtb	r3, r3
 8018032:	e020      	b.n	8018076 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f993 3000 	ldrsb.w	r3, [r3]
 801803a:	220d      	movs	r2, #13
 801803c:	2108      	movs	r1, #8
 801803e:	4618      	mov	r0, r3
 8018040:	f7fd fceb 	bl	8015a1a <RegionCommonValueInRange>
 8018044:	4603      	mov	r3, r0
 8018046:	2b00      	cmp	r3, #0
 8018048:	bf14      	ite	ne
 801804a:	2301      	movne	r3, #1
 801804c:	2300      	moveq	r3, #0
 801804e:	b2db      	uxtb	r3, r3
 8018050:	e011      	b.n	8018076 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	f993 3000 	ldrsb.w	r3, [r3]
 8018058:	220e      	movs	r2, #14
 801805a:	2100      	movs	r1, #0
 801805c:	4618      	mov	r0, r3
 801805e:	f7fd fcdc 	bl	8015a1a <RegionCommonValueInRange>
 8018062:	4603      	mov	r3, r0
 8018064:	2b00      	cmp	r3, #0
 8018066:	bf14      	ite	ne
 8018068:	2301      	movne	r3, #1
 801806a:	2300      	moveq	r3, #0
 801806c:	b2db      	uxtb	r3, r3
 801806e:	e002      	b.n	8018076 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8018070:	2300      	movs	r3, #0
 8018072:	e000      	b.n	8018076 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8018074:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8018076:	4618      	mov	r0, r3
 8018078:	3708      	adds	r7, #8
 801807a:	46bd      	mov	sp, r7
 801807c:	bd80      	pop	{r7, pc}
 801807e:	bf00      	nop

08018080 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018080:	b480      	push	{r7}
 8018082:	b085      	sub	sp, #20
 8018084:	af00      	add	r7, sp, #0
 8018086:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	791b      	ldrb	r3, [r3, #4]
 801808c:	2b10      	cmp	r3, #16
 801808e:	d162      	bne.n	8018156 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	330f      	adds	r3, #15
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	2b01      	cmp	r3, #1
 801809a:	d15e      	bne.n	801815a <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801809c:	2300      	movs	r3, #0
 801809e:	73fb      	strb	r3, [r7, #15]
 80180a0:	2300      	movs	r3, #0
 80180a2:	73bb      	strb	r3, [r7, #14]
 80180a4:	e053      	b.n	801814e <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681a      	ldr	r2, [r3, #0]
 80180aa:	7bbb      	ldrb	r3, [r7, #14]
 80180ac:	4413      	add	r3, r2
 80180ae:	7819      	ldrb	r1, [r3, #0]
 80180b0:	4b2c      	ldr	r3, [pc, #176]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	7bfa      	ldrb	r2, [r7, #15]
 80180b6:	b289      	uxth	r1, r1
 80180b8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80180c0:	4b28      	ldr	r3, [pc, #160]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	7bfa      	ldrb	r2, [r7, #15]
 80180c6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180ca:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	7bbb      	ldrb	r3, [r7, #14]
 80180d4:	3301      	adds	r3, #1
 80180d6:	4413      	add	r3, r2
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	021b      	lsls	r3, r3, #8
 80180de:	b299      	uxth	r1, r3
 80180e0:	4b20      	ldr	r3, [pc, #128]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	7bfa      	ldrb	r2, [r7, #15]
 80180e6:	4301      	orrs	r1, r0
 80180e8:	b289      	uxth	r1, r1
 80180ea:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80180f2:	7bfb      	ldrb	r3, [r7, #15]
 80180f4:	2b04      	cmp	r3, #4
 80180f6:	d10f      	bne.n	8018118 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80180f8:	4b1a      	ldr	r3, [pc, #104]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	7bfa      	ldrb	r2, [r7, #15]
 80180fe:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018102:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018106:	4b17      	ldr	r3, [pc, #92]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	7bfa      	ldrb	r2, [r7, #15]
 801810c:	b2c9      	uxtb	r1, r1
 801810e:	b289      	uxth	r1, r1
 8018110:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018114:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018118:	4b13      	ldr	r3, [pc, #76]	; (8018168 <RegionUS915ApplyCFList+0xe8>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	7bfa      	ldrb	r2, [r7, #15]
 801811e:	3248      	adds	r2, #72	; 0x48
 8018120:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018124:	4b0f      	ldr	r3, [pc, #60]	; (8018164 <RegionUS915ApplyCFList+0xe4>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	7bfa      	ldrb	r2, [r7, #15]
 801812a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801812e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018132:	4b0d      	ldr	r3, [pc, #52]	; (8018168 <RegionUS915ApplyCFList+0xe8>)
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	7bfa      	ldrb	r2, [r7, #15]
 8018138:	4001      	ands	r1, r0
 801813a:	b289      	uxth	r1, r1
 801813c:	3248      	adds	r2, #72	; 0x48
 801813e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018142:	7bfb      	ldrb	r3, [r7, #15]
 8018144:	3301      	adds	r3, #1
 8018146:	73fb      	strb	r3, [r7, #15]
 8018148:	7bbb      	ldrb	r3, [r7, #14]
 801814a:	3302      	adds	r3, #2
 801814c:	73bb      	strb	r3, [r7, #14]
 801814e:	7bfb      	ldrb	r3, [r7, #15]
 8018150:	2b04      	cmp	r3, #4
 8018152:	d9a8      	bls.n	80180a6 <RegionUS915ApplyCFList+0x26>
 8018154:	e002      	b.n	801815c <RegionUS915ApplyCFList+0xdc>
        return;
 8018156:	bf00      	nop
 8018158:	e000      	b.n	801815c <RegionUS915ApplyCFList+0xdc>
        return;
 801815a:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801815c:	3714      	adds	r7, #20
 801815e:	46bd      	mov	sp, r7
 8018160:	bc80      	pop	{r7}
 8018162:	4770      	bx	lr
 8018164:	20003c8c 	.word	0x20003c8c
 8018168:	20003c88 	.word	0x20003c88

0801816c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	2204      	movs	r2, #4
 801817a:	2100      	movs	r1, #0
 801817c:	4618      	mov	r0, r3
 801817e:	f7fd fc9d 	bl	8015abc <RegionCommonCountChannels>
 8018182:	4603      	mov	r3, r0
 8018184:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8018186:	7bbb      	ldrb	r3, [r7, #14]
 8018188:	2b01      	cmp	r3, #1
 801818a:	d804      	bhi.n	8018196 <RegionUS915ChanMaskSet+0x2a>
 801818c:	7bbb      	ldrb	r3, [r7, #14]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d001      	beq.n	8018196 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018192:	2300      	movs	r3, #0
 8018194:	e04c      	b.n	8018230 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	791b      	ldrb	r3, [r3, #4]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d002      	beq.n	80181a4 <RegionUS915ChanMaskSet+0x38>
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d038      	beq.n	8018214 <RegionUS915ChanMaskSet+0xa8>
 80181a2:	e042      	b.n	801822a <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80181a4:	4b24      	ldr	r3, [pc, #144]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	2206      	movs	r2, #6
 80181b2:	4619      	mov	r1, r3
 80181b4:	f7fd fcae 	bl	8015b14 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80181b8:	4b1f      	ldr	r3, [pc, #124]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 80181c0:	4b1d      	ldr	r3, [pc, #116]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	b2d2      	uxtb	r2, r2
 80181c6:	b292      	uxth	r2, r2
 80181c8:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80181cc:	4b1a      	ldr	r3, [pc, #104]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2200      	movs	r2, #0
 80181d2:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80181d6:	2300      	movs	r3, #0
 80181d8:	73fb      	strb	r3, [r7, #15]
 80181da:	e017      	b.n	801820c <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80181dc:	4b17      	ldr	r3, [pc, #92]	; (801823c <RegionUS915ChanMaskSet+0xd0>)
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	7bfa      	ldrb	r2, [r7, #15]
 80181e2:	3248      	adds	r2, #72	; 0x48
 80181e4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80181e8:	4b13      	ldr	r3, [pc, #76]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	7bfa      	ldrb	r2, [r7, #15]
 80181ee:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80181f2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80181f6:	4b11      	ldr	r3, [pc, #68]	; (801823c <RegionUS915ChanMaskSet+0xd0>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	7bfa      	ldrb	r2, [r7, #15]
 80181fc:	4001      	ands	r1, r0
 80181fe:	b289      	uxth	r1, r1
 8018200:	3248      	adds	r2, #72	; 0x48
 8018202:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018206:	7bfb      	ldrb	r3, [r7, #15]
 8018208:	3301      	adds	r3, #1
 801820a:	73fb      	strb	r3, [r7, #15]
 801820c:	7bfb      	ldrb	r3, [r7, #15]
 801820e:	2b05      	cmp	r3, #5
 8018210:	d9e4      	bls.n	80181dc <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018212:	e00c      	b.n	801822e <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018214:	4b08      	ldr	r3, [pc, #32]	; (8018238 <RegionUS915ChanMaskSet+0xcc>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2206      	movs	r2, #6
 8018222:	4619      	mov	r1, r3
 8018224:	f7fd fc76 	bl	8015b14 <RegionCommonChanMaskCopy>
            break;
 8018228:	e001      	b.n	801822e <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 801822a:	2300      	movs	r3, #0
 801822c:	e000      	b.n	8018230 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801822e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018230:	4618      	mov	r0, r3
 8018232:	3710      	adds	r7, #16
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	20003c8c 	.word	0x20003c8c
 801823c:	20003c88 	.word	0x20003c88

08018240 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b088      	sub	sp, #32
 8018244:	af02      	add	r7, sp, #8
 8018246:	60ba      	str	r2, [r7, #8]
 8018248:	607b      	str	r3, [r7, #4]
 801824a:	4603      	mov	r3, r0
 801824c:	73fb      	strb	r3, [r7, #15]
 801824e:	460b      	mov	r3, r1
 8018250:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801825a:	2b0d      	cmp	r3, #13
 801825c:	bfa8      	it	ge
 801825e:	230d      	movge	r3, #13
 8018260:	b25a      	sxtb	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801826c:	4916      	ldr	r1, [pc, #88]	; (80182c8 <RegionUS915ComputeRxWindowParameters+0x88>)
 801826e:	4618      	mov	r0, r3
 8018270:	f7fe f8e0 	bl	8016434 <RegionCommonGetBandwidth>
 8018274:	4603      	mov	r3, r0
 8018276:	b2da      	uxtb	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018282:	461a      	mov	r2, r3
 8018284:	4b11      	ldr	r3, [pc, #68]	; (80182cc <RegionUS915ComputeRxWindowParameters+0x8c>)
 8018286:	5c9a      	ldrb	r2, [r3, r2]
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801828e:	4619      	mov	r1, r3
 8018290:	4b0d      	ldr	r3, [pc, #52]	; (80182c8 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018296:	4619      	mov	r1, r3
 8018298:	4610      	mov	r0, r2
 801829a:	f7fd fe49 	bl	8015f30 <RegionCommonComputeSymbolTimeLoRa>
 801829e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80182a0:	4b0b      	ldr	r3, [pc, #44]	; (80182d0 <RegionUS915ComputeRxWindowParameters+0x90>)
 80182a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182a4:	4798      	blx	r3
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	3308      	adds	r3, #8
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	320c      	adds	r2, #12
 80182ae:	7bb9      	ldrb	r1, [r7, #14]
 80182b0:	9201      	str	r2, [sp, #4]
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	4603      	mov	r3, r0
 80182b6:	68ba      	ldr	r2, [r7, #8]
 80182b8:	6978      	ldr	r0, [r7, #20]
 80182ba:	f7fd fe5f 	bl	8015f7c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80182be:	bf00      	nop
 80182c0:	3718      	adds	r7, #24
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	0801e5d4 	.word	0x0801e5d4
 80182cc:	0801e5c4 	.word	0x0801e5c4
 80182d0:	0801e648 	.word	0x0801e648

080182d4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80182d4:	b590      	push	{r4, r7, lr}
 80182d6:	b091      	sub	sp, #68	; 0x44
 80182d8:	af0a      	add	r7, sp, #40	; 0x28
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	785b      	ldrb	r3, [r3, #1]
 80182e2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80182e4:	2300      	movs	r3, #0
 80182e6:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80182e8:	2300      	movs	r3, #0
 80182ea:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80182f2:	4b34      	ldr	r3, [pc, #208]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	4798      	blx	r3
 80182f8:	4603      	mov	r3, r0
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d001      	beq.n	8018302 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80182fe:	2300      	movs	r3, #0
 8018300:	e05c      	b.n	80183bc <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	7cdb      	ldrb	r3, [r3, #19]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d109      	bne.n	801831e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	f003 0307 	and.w	r3, r3, #7
 8018312:	4a2d      	ldr	r2, [pc, #180]	; (80183c8 <RegionUS915RxConfig+0xf4>)
 8018314:	fb03 f202 	mul.w	r2, r3, r2
 8018318:	4b2c      	ldr	r3, [pc, #176]	; (80183cc <RegionUS915RxConfig+0xf8>)
 801831a:	4413      	add	r3, r2
 801831c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018322:	4a2b      	ldr	r2, [pc, #172]	; (80183d0 <RegionUS915RxConfig+0xfc>)
 8018324:	5cd3      	ldrb	r3, [r2, r3]
 8018326:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018328:	4b26      	ldr	r3, [pc, #152]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	6938      	ldr	r0, [r7, #16]
 801832e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018330:	4b24      	ldr	r3, [pc, #144]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 8018332:	699c      	ldr	r4, [r3, #24]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	789b      	ldrb	r3, [r3, #2]
 8018338:	4618      	mov	r0, r3
 801833a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	689b      	ldr	r3, [r3, #8]
 8018342:	b29b      	uxth	r3, r3
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	7c92      	ldrb	r2, [r2, #18]
 8018348:	9209      	str	r2, [sp, #36]	; 0x24
 801834a:	2201      	movs	r2, #1
 801834c:	9208      	str	r2, [sp, #32]
 801834e:	2200      	movs	r2, #0
 8018350:	9207      	str	r2, [sp, #28]
 8018352:	2200      	movs	r2, #0
 8018354:	9206      	str	r2, [sp, #24]
 8018356:	2200      	movs	r2, #0
 8018358:	9205      	str	r2, [sp, #20]
 801835a:	2200      	movs	r2, #0
 801835c:	9204      	str	r2, [sp, #16]
 801835e:	2200      	movs	r2, #0
 8018360:	9203      	str	r2, [sp, #12]
 8018362:	9302      	str	r3, [sp, #8]
 8018364:	2308      	movs	r3, #8
 8018366:	9301      	str	r3, [sp, #4]
 8018368:	2300      	movs	r3, #0
 801836a:	9300      	str	r3, [sp, #0]
 801836c:	2301      	movs	r3, #1
 801836e:	460a      	mov	r2, r1
 8018370:	4601      	mov	r1, r0
 8018372:	2001      	movs	r0, #1
 8018374:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	7c5b      	ldrb	r3, [r3, #17]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d005      	beq.n	801838a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018382:	4a14      	ldr	r2, [pc, #80]	; (80183d4 <RegionUS915RxConfig+0x100>)
 8018384:	5cd3      	ldrb	r3, [r2, r3]
 8018386:	75fb      	strb	r3, [r7, #23]
 8018388:	e004      	b.n	8018394 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801838e:	4a12      	ldr	r2, [pc, #72]	; (80183d8 <RegionUS915RxConfig+0x104>)
 8018390:	5cd3      	ldrb	r3, [r2, r3]
 8018392:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018394:	4b0b      	ldr	r3, [pc, #44]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 8018396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018398:	7dfa      	ldrb	r2, [r7, #23]
 801839a:	320d      	adds	r2, #13
 801839c:	b2d2      	uxtb	r2, r2
 801839e:	4611      	mov	r1, r2
 80183a0:	2001      	movs	r0, #1
 80183a2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	7cdb      	ldrb	r3, [r3, #19]
 80183a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80183ac:	6939      	ldr	r1, [r7, #16]
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fe f85e 	bl	8016470 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	7bfa      	ldrb	r2, [r7, #15]
 80183b8:	701a      	strb	r2, [r3, #0]
    return true;
 80183ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80183bc:	4618      	mov	r0, r3
 80183be:	371c      	adds	r7, #28
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd90      	pop	{r4, r7, pc}
 80183c4:	0801e648 	.word	0x0801e648
 80183c8:	000927c0 	.word	0x000927c0
 80183cc:	370870a0 	.word	0x370870a0
 80183d0:	0801e5c4 	.word	0x0801e5c4
 80183d4:	0801e638 	.word	0x0801e638
 80183d8:	0801e628 	.word	0x0801e628

080183dc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80183dc:	b590      	push	{r4, r7, lr}
 80183de:	b093      	sub	sp, #76	; 0x4c
 80183e0:	af0a      	add	r7, sp, #40	; 0x28
 80183e2:	60f8      	str	r0, [r7, #12]
 80183e4:	60b9      	str	r1, [r7, #8]
 80183e6:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183ee:	461a      	mov	r2, r3
 80183f0:	4b4a      	ldr	r3, [pc, #296]	; (801851c <RegionUS915TxConfig+0x140>)
 80183f2:	5c9b      	ldrb	r3, [r3, r2]
 80183f4:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80183fc:	4b48      	ldr	r3, [pc, #288]	; (8018520 <RegionUS915TxConfig+0x144>)
 80183fe:	681a      	ldr	r2, [r3, #0]
 8018400:	4b48      	ldr	r3, [pc, #288]	; (8018524 <RegionUS915TxConfig+0x148>)
 8018402:	6819      	ldr	r1, [r3, #0]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	461c      	mov	r4, r3
 801840a:	4623      	mov	r3, r4
 801840c:	005b      	lsls	r3, r3, #1
 801840e:	4423      	add	r3, r4
 8018410:	009b      	lsls	r3, r3, #2
 8018412:	440b      	add	r3, r1
 8018414:	3309      	adds	r3, #9
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	4619      	mov	r1, r3
 801841a:	460b      	mov	r3, r1
 801841c:	005b      	lsls	r3, r3, #1
 801841e:	440b      	add	r3, r1
 8018420:	00db      	lsls	r3, r3, #3
 8018422:	4413      	add	r3, r2
 8018424:	3302      	adds	r3, #2
 8018426:	f993 1000 	ldrsb.w	r1, [r3]
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018430:	4b3c      	ldr	r3, [pc, #240]	; (8018524 <RegionUS915TxConfig+0x148>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018438:	f7ff fa50 	bl	80178dc <LimitTxPower>
 801843c:	4603      	mov	r3, r0
 801843e:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018446:	4938      	ldr	r1, [pc, #224]	; (8018528 <RegionUS915TxConfig+0x14c>)
 8018448:	4618      	mov	r0, r3
 801844a:	f7fd fff3 	bl	8016434 <RegionCommonGetBandwidth>
 801844e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018450:	2300      	movs	r3, #0
 8018452:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018454:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018458:	f04f 0200 	mov.w	r2, #0
 801845c:	4933      	ldr	r1, [pc, #204]	; (801852c <RegionUS915TxConfig+0x150>)
 801845e:	4618      	mov	r0, r3
 8018460:	f7fd fe44 	bl	80160ec <RegionCommonComputeTxPower>
 8018464:	4603      	mov	r3, r0
 8018466:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018468:	4b31      	ldr	r3, [pc, #196]	; (8018530 <RegionUS915TxConfig+0x154>)
 801846a:	68da      	ldr	r2, [r3, #12]
 801846c:	4b2d      	ldr	r3, [pc, #180]	; (8018524 <RegionUS915TxConfig+0x148>)
 801846e:	6819      	ldr	r1, [r3, #0]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	781b      	ldrb	r3, [r3, #0]
 8018474:	4618      	mov	r0, r3
 8018476:	4603      	mov	r3, r0
 8018478:	005b      	lsls	r3, r3, #1
 801847a:	4403      	add	r3, r0
 801847c:	009b      	lsls	r3, r3, #2
 801847e:	440b      	add	r3, r1
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	4618      	mov	r0, r3
 8018484:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018486:	4b2a      	ldr	r3, [pc, #168]	; (8018530 <RegionUS915TxConfig+0x154>)
 8018488:	69dc      	ldr	r4, [r3, #28]
 801848a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801848e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018492:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018496:	9208      	str	r2, [sp, #32]
 8018498:	2200      	movs	r2, #0
 801849a:	9207      	str	r2, [sp, #28]
 801849c:	2200      	movs	r2, #0
 801849e:	9206      	str	r2, [sp, #24]
 80184a0:	2200      	movs	r2, #0
 80184a2:	9205      	str	r2, [sp, #20]
 80184a4:	2201      	movs	r2, #1
 80184a6:	9204      	str	r2, [sp, #16]
 80184a8:	2200      	movs	r2, #0
 80184aa:	9203      	str	r2, [sp, #12]
 80184ac:	2208      	movs	r2, #8
 80184ae:	9202      	str	r2, [sp, #8]
 80184b0:	2201      	movs	r2, #1
 80184b2:	9201      	str	r2, [sp, #4]
 80184b4:	9300      	str	r3, [sp, #0]
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	2200      	movs	r2, #0
 80184ba:	2001      	movs	r0, #1
 80184bc:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80184be:	4b19      	ldr	r3, [pc, #100]	; (8018524 <RegionUS915TxConfig+0x148>)
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	4619      	mov	r1, r3
 80184c8:	460b      	mov	r3, r1
 80184ca:	005b      	lsls	r3, r3, #1
 80184cc:	440b      	add	r3, r1
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	4413      	add	r3, r2
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184da:	4619      	mov	r1, r3
 80184dc:	4610      	mov	r0, r2
 80184de:	f7fe f805 	bl	80164ec <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80184e2:	4b13      	ldr	r3, [pc, #76]	; (8018530 <RegionUS915TxConfig+0x154>)
 80184e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184e6:	68fa      	ldr	r2, [r7, #12]
 80184e8:	8992      	ldrh	r2, [r2, #12]
 80184ea:	b2d2      	uxtb	r2, r2
 80184ec:	4611      	mov	r1, r2
 80184ee:	2001      	movs	r0, #1
 80184f0:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	899b      	ldrh	r3, [r3, #12]
 80184fc:	4619      	mov	r1, r3
 80184fe:	4610      	mov	r0, r2
 8018500:	f7ff fa66 	bl	80179d0 <GetTimeOnAir>
 8018504:	4602      	mov	r2, r0
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	7fba      	ldrb	r2, [r7, #30]
 801850e:	701a      	strb	r2, [r3, #0]
    return true;
 8018510:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018512:	4618      	mov	r0, r3
 8018514:	3724      	adds	r7, #36	; 0x24
 8018516:	46bd      	mov	sp, r7
 8018518:	bd90      	pop	{r4, r7, pc}
 801851a:	bf00      	nop
 801851c:	0801e5c4 	.word	0x0801e5c4
 8018520:	20003c88 	.word	0x20003c88
 8018524:	20003c8c 	.word	0x20003c8c
 8018528:	0801e5d4 	.word	0x0801e5d4
 801852c:	41f00000 	.word	0x41f00000
 8018530:	0801e648 	.word	0x0801e648

08018534 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018534:	b590      	push	{r4, r7, lr}
 8018536:	b097      	sub	sp, #92	; 0x5c
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	607a      	str	r2, [r7, #4]
 8018540:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018542:	2307      	movs	r3, #7
 8018544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801854c:	2200      	movs	r2, #0
 801854e:	601a      	str	r2, [r3, #0]
 8018550:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8018552:	2300      	movs	r3, #0
 8018554:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018558:	2300      	movs	r3, #0
 801855a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801855e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018562:	2200      	movs	r2, #0
 8018564:	601a      	str	r2, [r3, #0]
 8018566:	605a      	str	r2, [r3, #4]
 8018568:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801856a:	4b97      	ldr	r3, [pc, #604]	; (80187c8 <RegionUS915LinkAdrReq+0x294>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8018572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018576:	2206      	movs	r2, #6
 8018578:	4618      	mov	r0, r3
 801857a:	f7fd facb 	bl	8015b14 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801857e:	e11b      	b.n	80187b8 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	685a      	ldr	r2, [r3, #4]
 8018584:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8018588:	4413      	add	r3, r2
 801858a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801858e:	4611      	mov	r1, r2
 8018590:	4618      	mov	r0, r3
 8018592:	f7fd fc03 	bl	8015d9c <RegionCommonParseLinkAdrReq>
 8018596:	4603      	mov	r3, r0
 8018598:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801859c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	f000 8113 	beq.w	80187cc <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80185a6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80185aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80185ae:	4413      	add	r3, r2
 80185b0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80185b4:	2307      	movs	r3, #7
 80185b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80185ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80185be:	2b06      	cmp	r3, #6
 80185c0:	d116      	bne.n	80185f0 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80185c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80185ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80185d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80185da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80185e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80185e6:	b2db      	uxtb	r3, r3
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80185ee:	e0e3      	b.n	80187b8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80185f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80185f4:	2b07      	cmp	r3, #7
 80185f6:	d112      	bne.n	801861e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80185f8:	2300      	movs	r3, #0
 80185fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 80185fe:	2300      	movs	r3, #0
 8018600:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018604:	2300      	movs	r3, #0
 8018606:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801860a:	2300      	movs	r3, #0
 801860c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018610:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018614:	b2db      	uxtb	r3, r3
 8018616:	b29b      	uxth	r3, r3
 8018618:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801861c:	e0cc      	b.n	80187b8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801861e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018622:	2b05      	cmp	r3, #5
 8018624:	f040 80bf 	bne.w	80187a6 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018628:	2301      	movs	r3, #1
 801862a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801862e:	2300      	movs	r3, #0
 8018630:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018634:	2300      	movs	r3, #0
 8018636:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801863a:	e0ae      	b.n	801879a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801863c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018640:	b2da      	uxtb	r2, r3
 8018642:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018646:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801864a:	fa01 f303 	lsl.w	r3, r1, r3
 801864e:	4013      	ands	r3, r2
 8018650:	2b00      	cmp	r3, #0
 8018652:	d04d      	beq.n	80186f0 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018654:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018658:	f003 0301 	and.w	r3, r3, #1
 801865c:	b2db      	uxtb	r3, r3
 801865e:	2b00      	cmp	r3, #0
 8018660:	d120      	bne.n	80186a4 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8018662:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018666:	005b      	lsls	r3, r3, #1
 8018668:	3358      	adds	r3, #88	; 0x58
 801866a:	443b      	add	r3, r7
 801866c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018670:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018674:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8018678:	b292      	uxth	r2, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	3358      	adds	r3, #88	; 0x58
 801867e:	443b      	add	r3, r7
 8018680:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018684:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018688:	b21a      	sxth	r2, r3
 801868a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801868e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018692:	fa01 f303 	lsl.w	r3, r1, r3
 8018696:	b21b      	sxth	r3, r3
 8018698:	4313      	orrs	r3, r2
 801869a:	b21b      	sxth	r3, r3
 801869c:	b29b      	uxth	r3, r3
 801869e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80186a2:	e075      	b.n	8018790 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80186a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	3358      	adds	r3, #88	; 0x58
 80186ac:	443b      	add	r3, r7
 80186ae:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80186b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186b6:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80186ba:	b292      	uxth	r2, r2
 80186bc:	005b      	lsls	r3, r3, #1
 80186be:	3358      	adds	r3, #88	; 0x58
 80186c0:	443b      	add	r3, r7
 80186c2:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80186c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80186ca:	b21a      	sxth	r2, r3
 80186cc:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80186d0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186d4:	fa01 f303 	lsl.w	r3, r1, r3
 80186d8:	b21b      	sxth	r3, r3
 80186da:	4313      	orrs	r3, r2
 80186dc:	b21b      	sxth	r3, r3
 80186de:	b29b      	uxth	r3, r3
 80186e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80186e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186e8:	3301      	adds	r3, #1
 80186ea:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80186ee:	e04f      	b.n	8018790 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80186f0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186f4:	f003 0301 	and.w	r3, r3, #1
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d122      	bne.n	8018744 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80186fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018702:	005b      	lsls	r3, r3, #1
 8018704:	3358      	adds	r3, #88	; 0x58
 8018706:	443b      	add	r3, r7
 8018708:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801870c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018710:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018714:	b292      	uxth	r2, r2
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	3358      	adds	r3, #88	; 0x58
 801871a:	443b      	add	r3, r7
 801871c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018720:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018724:	b21a      	sxth	r2, r3
 8018726:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801872a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801872e:	fa01 f303 	lsl.w	r3, r1, r3
 8018732:	b21b      	sxth	r3, r3
 8018734:	43db      	mvns	r3, r3
 8018736:	b21b      	sxth	r3, r3
 8018738:	4013      	ands	r3, r2
 801873a:	b21b      	sxth	r3, r3
 801873c:	b29b      	uxth	r3, r3
 801873e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018742:	e025      	b.n	8018790 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018744:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018748:	005b      	lsls	r3, r3, #1
 801874a:	3358      	adds	r3, #88	; 0x58
 801874c:	443b      	add	r3, r7
 801874e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018752:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018756:	b2d2      	uxtb	r2, r2
 8018758:	b292      	uxth	r2, r2
 801875a:	005b      	lsls	r3, r3, #1
 801875c:	3358      	adds	r3, #88	; 0x58
 801875e:	443b      	add	r3, r7
 8018760:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018764:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018768:	b21a      	sxth	r2, r3
 801876a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801876e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018772:	fa01 f303 	lsl.w	r3, r1, r3
 8018776:	b21b      	sxth	r3, r3
 8018778:	43db      	mvns	r3, r3
 801877a:	b21b      	sxth	r3, r3
 801877c:	4013      	ands	r3, r2
 801877e:	b21b      	sxth	r3, r3
 8018780:	b29b      	uxth	r3, r3
 8018782:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018786:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801878a:	3301      	adds	r3, #1
 801878c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8018790:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018794:	3301      	adds	r3, #1
 8018796:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801879a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801879e:	2b07      	cmp	r3, #7
 80187a0:	f67f af4c 	bls.w	801863c <RegionUS915LinkAdrReq+0x108>
 80187a4:	e008      	b.n	80187b8 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80187a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80187aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80187ae:	005b      	lsls	r3, r3, #1
 80187b0:	3358      	adds	r3, #88	; 0x58
 80187b2:	443b      	add	r3, r7
 80187b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	7a1b      	ldrb	r3, [r3, #8]
 80187bc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80187c0:	429a      	cmp	r2, r3
 80187c2:	f4ff aedd 	bcc.w	8018580 <RegionUS915LinkAdrReq+0x4c>
 80187c6:	e002      	b.n	80187ce <RegionUS915LinkAdrReq+0x29a>
 80187c8:	20003c8c 	.word	0x20003c8c
            break; // break loop, since no more request has been found
 80187cc:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80187ce:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80187d2:	2b03      	cmp	r3, #3
 80187d4:	dc0f      	bgt.n	80187f6 <RegionUS915LinkAdrReq+0x2c2>
 80187d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187da:	2204      	movs	r2, #4
 80187dc:	2100      	movs	r1, #0
 80187de:	4618      	mov	r0, r3
 80187e0:	f7fd f96c 	bl	8015abc <RegionCommonCountChannels>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b01      	cmp	r3, #1
 80187e8:	d805      	bhi.n	80187f6 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80187ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80187ee:	f023 0301 	bic.w	r3, r3, #1
 80187f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80187f6:	2302      	movs	r3, #2
 80187f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	7a5b      	ldrb	r3, [r3, #9]
 8018800:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018804:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018808:	4618      	mov	r0, r3
 801880a:	f7ff f911 	bl	8017a30 <RegionUS915GetPhyParam>
 801880e:	4603      	mov	r3, r0
 8018810:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018816:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	7a9b      	ldrb	r3, [r3, #10]
 801881c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801881e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018822:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018824:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018828:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801882a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801882e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018836:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801883e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	7b5b      	ldrb	r3, [r3, #13]
 8018844:	b25b      	sxtb	r3, r3
 8018846:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018848:	2348      	movs	r3, #72	; 0x48
 801884a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801884e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018852:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018856:	b25b      	sxtb	r3, r3
 8018858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801885c:	2304      	movs	r3, #4
 801885e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018862:	4b44      	ldr	r3, [pc, #272]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018868:	230e      	movs	r3, #14
 801886a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801886e:	2300      	movs	r3, #0
 8018870:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801887a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801887e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018882:	1c9a      	adds	r2, r3, #2
 8018884:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018888:	1c59      	adds	r1, r3, #1
 801888a:	f107 0014 	add.w	r0, r7, #20
 801888e:	4623      	mov	r3, r4
 8018890:	f7fd fad5 	bl	8015e3e <RegionCommonLinkAdrReqVerifyParams>
 8018894:	4603      	mov	r3, r0
 8018896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801889a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801889e:	2b07      	cmp	r3, #7
 80188a0:	d151      	bne.n	8018946 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80188a2:	4b34      	ldr	r3, [pc, #208]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80188aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80188ae:	2206      	movs	r2, #6
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7fd f92f 	bl	8015b14 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80188b6:	4b30      	ldr	r3, [pc, #192]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 80188be:	4b2d      	ldr	r3, [pc, #180]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80188c6:	4b2c      	ldr	r3, [pc, #176]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	400a      	ands	r2, r1
 80188cc:	b292      	uxth	r2, r2
 80188ce:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80188d2:	4b29      	ldr	r3, [pc, #164]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 80188da:	4b26      	ldr	r3, [pc, #152]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 80188e2:	4b25      	ldr	r3, [pc, #148]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	400a      	ands	r2, r1
 80188e8:	b292      	uxth	r2, r2
 80188ea:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80188ee:	4b22      	ldr	r3, [pc, #136]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 80188f6:	4b1f      	ldr	r3, [pc, #124]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 80188fe:	4b1e      	ldr	r3, [pc, #120]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	400a      	ands	r2, r1
 8018904:	b292      	uxth	r2, r2
 8018906:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801890a:	4b1b      	ldr	r3, [pc, #108]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 8018912:	4b18      	ldr	r3, [pc, #96]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801891a:	4b17      	ldr	r3, [pc, #92]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	400a      	ands	r2, r1
 8018920:	b292      	uxth	r2, r2
 8018922:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018926:	4b13      	ldr	r3, [pc, #76]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 8018928:	681a      	ldr	r2, [r3, #0]
 801892a:	4b13      	ldr	r3, [pc, #76]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018932:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018936:	4b0f      	ldr	r3, [pc, #60]	; (8018974 <RegionUS915LinkAdrReq+0x440>)
 8018938:	681a      	ldr	r2, [r3, #0]
 801893a:	4b0f      	ldr	r3, [pc, #60]	; (8018978 <RegionUS915LinkAdrReq+0x444>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8018942:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018946:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801894e:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018956:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801895e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018960:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018964:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018966:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801896a:	4618      	mov	r0, r3
 801896c:	375c      	adds	r7, #92	; 0x5c
 801896e:	46bd      	mov	sp, r7
 8018970:	bd90      	pop	{r4, r7, pc}
 8018972:	bf00      	nop
 8018974:	20003c8c 	.word	0x20003c8c
 8018978:	20003c88 	.word	0x20003c88

0801897c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018984:	2307      	movs	r3, #7
 8018986:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	685b      	ldr	r3, [r3, #4]
 801898c:	4618      	mov	r0, r3
 801898e:	f7fe ffdb 	bl	8017948 <VerifyRfFreq>
 8018992:	4603      	mov	r3, r0
 8018994:	f083 0301 	eor.w	r3, r3, #1
 8018998:	b2db      	uxtb	r3, r3
 801899a:	2b00      	cmp	r3, #0
 801899c:	d003      	beq.n	80189a6 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801899e:	7bfb      	ldrb	r3, [r7, #15]
 80189a0:	f023 0301 	bic.w	r3, r3, #1
 80189a4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	f993 3000 	ldrsb.w	r3, [r3]
 80189ac:	220d      	movs	r2, #13
 80189ae:	2108      	movs	r1, #8
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7fd f832 	bl	8015a1a <RegionCommonValueInRange>
 80189b6:	4603      	mov	r3, r0
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d103      	bne.n	80189c4 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80189bc:	7bfb      	ldrb	r3, [r7, #15]
 80189be:	f023 0302 	bic.w	r3, r3, #2
 80189c2:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f993 3000 	ldrsb.w	r3, [r3]
 80189ca:	2207      	movs	r2, #7
 80189cc:	2105      	movs	r1, #5
 80189ce:	4618      	mov	r0, r3
 80189d0:	f7fd f823 	bl	8015a1a <RegionCommonValueInRange>
 80189d4:	4603      	mov	r3, r0
 80189d6:	2b01      	cmp	r3, #1
 80189d8:	d004      	beq.n	80189e4 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80189e0:	2b0d      	cmp	r3, #13
 80189e2:	dd03      	ble.n	80189ec <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80189e4:	7bfb      	ldrb	r3, [r7, #15]
 80189e6:	f023 0302 	bic.w	r3, r3, #2
 80189ea:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189f2:	2203      	movs	r2, #3
 80189f4:	2100      	movs	r1, #0
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7fd f80f 	bl	8015a1a <RegionCommonValueInRange>
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d103      	bne.n	8018a0a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018a02:	7bfb      	ldrb	r3, [r7, #15]
 8018a04:	f023 0304 	bic.w	r3, r3, #4
 8018a08:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8018a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	3710      	adds	r7, #16
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}

08018a14 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018a14:	b480      	push	{r7}
 8018a16:	b083      	sub	sp, #12
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	370c      	adds	r7, #12
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bc80      	pop	{r7}
 8018a28:	4770      	bx	lr

08018a2a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018a2a:	b480      	push	{r7}
 8018a2c:	b083      	sub	sp, #12
 8018a2e:	af00      	add	r7, sp, #0
 8018a30:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a36:	4618      	mov	r0, r3
 8018a38:	370c      	adds	r7, #12
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bc80      	pop	{r7}
 8018a3e:	4770      	bx	lr

08018a40 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018a40:	b480      	push	{r7}
 8018a42:	b083      	sub	sp, #12
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	370c      	adds	r7, #12
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bc80      	pop	{r7}
 8018a54:	4770      	bx	lr
	...

08018a58 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	4603      	mov	r3, r0
 8018a60:	460a      	mov	r2, r1
 8018a62:	71fb      	strb	r3, [r7, #7]
 8018a64:	4613      	mov	r3, r2
 8018a66:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018a68:	79bb      	ldrb	r3, [r7, #6]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d108      	bne.n	8018a80 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018a6e:	4b16      	ldr	r3, [pc, #88]	; (8018ac8 <RegionUS915AlternateDr+0x70>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018a76:	3201      	adds	r2, #1
 8018a78:	b2d2      	uxtb	r2, r2
 8018a7a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8018a7e:	e007      	b.n	8018a90 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018a80:	4b11      	ldr	r3, [pc, #68]	; (8018ac8 <RegionUS915AlternateDr+0x70>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018a88:	3a01      	subs	r2, #1
 8018a8a:	b2d2      	uxtb	r2, r2
 8018a8c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018a90:	4b0d      	ldr	r3, [pc, #52]	; (8018ac8 <RegionUS915AlternateDr+0x70>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8018a98:	4b0c      	ldr	r3, [pc, #48]	; (8018acc <RegionUS915AlternateDr+0x74>)
 8018a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8018a9e:	0859      	lsrs	r1, r3, #1
 8018aa0:	460b      	mov	r3, r1
 8018aa2:	00db      	lsls	r3, r3, #3
 8018aa4:	440b      	add	r3, r1
 8018aa6:	1ad3      	subs	r3, r2, r3
 8018aa8:	b2db      	uxtb	r3, r3
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d102      	bne.n	8018ab4 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018aae:	2304      	movs	r3, #4
 8018ab0:	71fb      	strb	r3, [r7, #7]
 8018ab2:	e001      	b.n	8018ab8 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018abc:	4618      	mov	r0, r3
 8018abe:	370c      	adds	r7, #12
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bc80      	pop	{r7}
 8018ac4:	4770      	bx	lr
 8018ac6:	bf00      	nop
 8018ac8:	20003c88 	.word	0x20003c88
 8018acc:	38e38e39 	.word	0x38e38e39

08018ad0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b0a8      	sub	sp, #160	; 0xa0
 8018ad4:	af02      	add	r7, sp, #8
 8018ad6:	60f8      	str	r0, [r7, #12]
 8018ad8:	60b9      	str	r1, [r7, #8]
 8018ada:	607a      	str	r2, [r7, #4]
 8018adc:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018aea:	2300      	movs	r3, #0
 8018aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018af2:	2244      	movs	r2, #68	; 0x44
 8018af4:	2100      	movs	r1, #0
 8018af6:	4618      	mov	r0, r3
 8018af8:	f004 fe48 	bl	801d78c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018afc:	230c      	movs	r3, #12
 8018afe:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018b02:	4b6b      	ldr	r3, [pc, #428]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	3390      	adds	r3, #144	; 0x90
 8018b08:	2204      	movs	r2, #4
 8018b0a:	2100      	movs	r1, #0
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7fc ffd5 	bl	8015abc <RegionCommonCountChannels>
 8018b12:	4603      	mov	r3, r0
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d110      	bne.n	8018b3a <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018b18:	4b65      	ldr	r3, [pc, #404]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018b20:	4b64      	ldr	r3, [pc, #400]	; (8018cb4 <RegionUS915NextChannel+0x1e4>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b28:	2204      	movs	r2, #4
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	f7fc fff2 	bl	8015b14 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018b30:	4b5f      	ldr	r3, [pc, #380]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	2200      	movs	r2, #0
 8018b36:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018b40:	2b03      	cmp	r3, #3
 8018b42:	dd0e      	ble.n	8018b62 <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018b44:	4b5a      	ldr	r3, [pc, #360]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018b4c:	b2db      	uxtb	r3, r3
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d107      	bne.n	8018b62 <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018b52:	4b58      	ldr	r3, [pc, #352]	; (8018cb4 <RegionUS915NextChannel+0x1e4>)
 8018b54:	681a      	ldr	r2, [r3, #0]
 8018b56:	4b56      	ldr	r3, [pc, #344]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018b5e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	7a5b      	ldrb	r3, [r3, #9]
 8018b66:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018b72:	4b4f      	ldr	r3, [pc, #316]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	3390      	adds	r3, #144	; 0x90
 8018b78:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018b7a:	4b4e      	ldr	r3, [pc, #312]	; (8018cb4 <RegionUS915NextChannel+0x1e4>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018b80:	4b4b      	ldr	r3, [pc, #300]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018b86:	2348      	movs	r3, #72	; 0x48
 8018b88:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	7a9b      	ldrb	r3, [r3, #10]
 8018b9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018ba2:	2301      	movs	r3, #1
 8018ba4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018ba8:	68fa      	ldr	r2, [r7, #12]
 8018baa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018bae:	320c      	adds	r2, #12
 8018bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bb4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	7d1b      	ldrb	r3, [r3, #20]
 8018bbc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	8adb      	ldrh	r3, [r3, #22]
 8018bca:	4619      	mov	r1, r3
 8018bcc:	4610      	mov	r0, r2
 8018bce:	f7fe feff 	bl	80179d0 <GetTimeOnAir>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018bd6:	f107 0314 	add.w	r3, r7, #20
 8018bda:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018bdc:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018be0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018be4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	9301      	str	r3, [sp, #4]
 8018bec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018bf0:	9300      	str	r3, [sp, #0]
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	6839      	ldr	r1, [r7, #0]
 8018bf6:	f7fd fb68 	bl	80162ca <RegionCommonIdentifyChannels>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018c00:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d14d      	bne.n	8018ca4 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	7a5b      	ldrb	r3, [r3, #9]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00e      	beq.n	8018c2e <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018c10:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018c14:	3b01      	subs	r3, #1
 8018c16:	4619      	mov	r1, r3
 8018c18:	2000      	movs	r0, #0
 8018c1a:	f000 f8f5 	bl	8018e08 <randr>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	3398      	adds	r3, #152	; 0x98
 8018c22:	443b      	add	r3, r7
 8018c24:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	701a      	strb	r2, [r3, #0]
 8018c2c:	e030      	b.n	8018c90 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d10f      	bne.n	8018c58 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018c38:	4b1d      	ldr	r3, [pc, #116]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018c40:	4b1b      	ldr	r3, [pc, #108]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018c42:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018c44:	339c      	adds	r3, #156	; 0x9c
 8018c46:	68ba      	ldr	r2, [r7, #8]
 8018c48:	4619      	mov	r1, r3
 8018c4a:	f7fc fca1 	bl	8015590 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b03      	cmp	r3, #3
 8018c52:	d11d      	bne.n	8018c90 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018c54:	2303      	movs	r3, #3
 8018c56:	e027      	b.n	8018ca8 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018c5e:	e004      	b.n	8018c6a <RegionUS915NextChannel+0x19a>
                {
                    i++;
 8018c60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c64:	3301      	adds	r3, #1
 8018c66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018c6a:	4b11      	ldr	r3, [pc, #68]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8018c72:	b2da      	uxtb	r2, r3
 8018c74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c78:	fa42 f303 	asr.w	r3, r2, r3
 8018c7c:	f003 0301 	and.w	r3, r3, #1
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d0ed      	beq.n	8018c60 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 8018c84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c88:	3340      	adds	r3, #64	; 0x40
 8018c8a:	b2da      	uxtb	r2, r3
 8018c8c:	68bb      	ldr	r3, [r7, #8]
 8018c8e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018c90:	4b07      	ldr	r3, [pc, #28]	; (8018cb0 <RegionUS915NextChannel+0x1e0>)
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	2248      	movs	r2, #72	; 0x48
 8018c9e:	4619      	mov	r1, r3
 8018ca0:	f7fc fed8 	bl	8015a54 <RegionCommonChanDisable>
    }
    return status;
 8018ca4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3798      	adds	r7, #152	; 0x98
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}
 8018cb0:	20003c88 	.word	0x20003c88
 8018cb4:	20003c8c 	.word	0x20003c8c

08018cb8 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018cb8:	b590      	push	{r4, r7, lr}
 8018cba:	b085      	sub	sp, #20
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018cc6:	4b23      	ldr	r3, [pc, #140]	; (8018d54 <RegionUS915SetContinuousWave+0x9c>)
 8018cc8:	681a      	ldr	r2, [r3, #0]
 8018cca:	4b23      	ldr	r3, [pc, #140]	; (8018d58 <RegionUS915SetContinuousWave+0xa0>)
 8018ccc:	6819      	ldr	r1, [r3, #0]
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	461c      	mov	r4, r3
 8018cd4:	4623      	mov	r3, r4
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	4423      	add	r3, r4
 8018cda:	009b      	lsls	r3, r3, #2
 8018cdc:	440b      	add	r3, r1
 8018cde:	3309      	adds	r3, #9
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	4619      	mov	r1, r3
 8018ce4:	460b      	mov	r3, r1
 8018ce6:	005b      	lsls	r3, r3, #1
 8018ce8:	440b      	add	r3, r1
 8018cea:	00db      	lsls	r3, r3, #3
 8018cec:	4413      	add	r3, r2
 8018cee:	3302      	adds	r3, #2
 8018cf0:	f993 1000 	ldrsb.w	r1, [r3]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018cfa:	4b17      	ldr	r3, [pc, #92]	; (8018d58 <RegionUS915SetContinuousWave+0xa0>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018d02:	f7fe fdeb 	bl	80178dc <LimitTxPower>
 8018d06:	4603      	mov	r3, r0
 8018d08:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8018d0e:	4b12      	ldr	r3, [pc, #72]	; (8018d58 <RegionUS915SetContinuousWave+0xa0>)
 8018d10:	681a      	ldr	r2, [r3, #0]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	4619      	mov	r1, r3
 8018d18:	460b      	mov	r3, r1
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	440b      	add	r3, r1
 8018d1e:	009b      	lsls	r3, r3, #2
 8018d20:	4413      	add	r3, r2
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d2a:	f04f 0200 	mov.w	r2, #0
 8018d2e:	490b      	ldr	r1, [pc, #44]	; (8018d5c <RegionUS915SetContinuousWave+0xa4>)
 8018d30:	4618      	mov	r0, r3
 8018d32:	f7fd f9db 	bl	80160ec <RegionCommonComputeTxPower>
 8018d36:	4603      	mov	r3, r0
 8018d38:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018d3a:	4b09      	ldr	r3, [pc, #36]	; (8018d60 <RegionUS915SetContinuousWave+0xa8>)
 8018d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d3e:	687a      	ldr	r2, [r7, #4]
 8018d40:	8992      	ldrh	r2, [r2, #12]
 8018d42:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018d46:	68b8      	ldr	r0, [r7, #8]
 8018d48:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8018d4a:	bf00      	nop
 8018d4c:	3714      	adds	r7, #20
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd90      	pop	{r4, r7, pc}
 8018d52:	bf00      	nop
 8018d54:	20003c88 	.word	0x20003c88
 8018d58:	20003c8c 	.word	0x20003c8c
 8018d5c:	41f00000 	.word	0x41f00000
 8018d60:	0801e648 	.word	0x0801e648

08018d64 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018d64:	b480      	push	{r7}
 8018d66:	b085      	sub	sp, #20
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	71fb      	strb	r3, [r7, #7]
 8018d6e:	460b      	mov	r3, r1
 8018d70:	71bb      	strb	r3, [r7, #6]
 8018d72:	4613      	mov	r3, r2
 8018d74:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018d76:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018d7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018d7e:	4909      	ldr	r1, [pc, #36]	; (8018da4 <RegionUS915ApplyDrOffset+0x40>)
 8018d80:	0092      	lsls	r2, r2, #2
 8018d82:	440a      	add	r2, r1
 8018d84:	4413      	add	r3, r2
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	da01      	bge.n	8018d96 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018d92:	2300      	movs	r3, #0
 8018d94:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018d96:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3714      	adds	r7, #20
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bc80      	pop	{r7}
 8018da0:	4770      	bx	lr
 8018da2:	bf00      	nop
 8018da4:	0801e614 	.word	0x0801e614

08018da8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018da8:	b480      	push	{r7}
 8018daa:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018dac:	4b0d      	ldr	r3, [pc, #52]	; (8018de4 <rand1+0x3c>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	4a0d      	ldr	r2, [pc, #52]	; (8018de8 <rand1+0x40>)
 8018db2:	fb02 f303 	mul.w	r3, r2, r3
 8018db6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018dba:	3339      	adds	r3, #57	; 0x39
 8018dbc:	4a09      	ldr	r2, [pc, #36]	; (8018de4 <rand1+0x3c>)
 8018dbe:	6013      	str	r3, [r2, #0]
 8018dc0:	4b08      	ldr	r3, [pc, #32]	; (8018de4 <rand1+0x3c>)
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	2303      	movs	r3, #3
 8018dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8018dca:	1ad1      	subs	r1, r2, r3
 8018dcc:	0849      	lsrs	r1, r1, #1
 8018dce:	440b      	add	r3, r1
 8018dd0:	0f99      	lsrs	r1, r3, #30
 8018dd2:	460b      	mov	r3, r1
 8018dd4:	07db      	lsls	r3, r3, #31
 8018dd6:	1a5b      	subs	r3, r3, r1
 8018dd8:	1ad1      	subs	r1, r2, r3
 8018dda:	460b      	mov	r3, r1
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bc80      	pop	{r7}
 8018de2:	4770      	bx	lr
 8018de4:	20000100 	.word	0x20000100
 8018de8:	41c64e6d 	.word	0x41c64e6d

08018dec <srand1>:

void srand1( uint32_t seed )
{
 8018dec:	b480      	push	{r7}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
    next = seed;
 8018df4:	4a03      	ldr	r2, [pc, #12]	; (8018e04 <srand1+0x18>)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6013      	str	r3, [r2, #0]
}
 8018dfa:	bf00      	nop
 8018dfc:	370c      	adds	r7, #12
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bc80      	pop	{r7}
 8018e02:	4770      	bx	lr
 8018e04:	20000100 	.word	0x20000100

08018e08 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018e12:	f7ff ffc9 	bl	8018da8 <rand1>
 8018e16:	4602      	mov	r2, r0
 8018e18:	6839      	ldr	r1, [r7, #0]
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	1acb      	subs	r3, r1, r3
 8018e1e:	3301      	adds	r3, #1
 8018e20:	fb92 f1f3 	sdiv	r1, r2, r3
 8018e24:	fb01 f303 	mul.w	r3, r1, r3
 8018e28:	1ad2      	subs	r2, r2, r3
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	4413      	add	r3, r2
}
 8018e2e:	4618      	mov	r0, r3
 8018e30:	3708      	adds	r7, #8
 8018e32:	46bd      	mov	sp, r7
 8018e34:	bd80      	pop	{r7, pc}

08018e36 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018e36:	b480      	push	{r7}
 8018e38:	b085      	sub	sp, #20
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	60f8      	str	r0, [r7, #12]
 8018e3e:	60b9      	str	r1, [r7, #8]
 8018e40:	4613      	mov	r3, r2
 8018e42:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018e44:	e007      	b.n	8018e56 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018e46:	68ba      	ldr	r2, [r7, #8]
 8018e48:	1c53      	adds	r3, r2, #1
 8018e4a:	60bb      	str	r3, [r7, #8]
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	1c59      	adds	r1, r3, #1
 8018e50:	60f9      	str	r1, [r7, #12]
 8018e52:	7812      	ldrb	r2, [r2, #0]
 8018e54:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018e56:	88fb      	ldrh	r3, [r7, #6]
 8018e58:	1e5a      	subs	r2, r3, #1
 8018e5a:	80fa      	strh	r2, [r7, #6]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d1f2      	bne.n	8018e46 <memcpy1+0x10>
    }
}
 8018e60:	bf00      	nop
 8018e62:	bf00      	nop
 8018e64:	3714      	adds	r7, #20
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bc80      	pop	{r7}
 8018e6a:	4770      	bx	lr

08018e6c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	b085      	sub	sp, #20
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	60f8      	str	r0, [r7, #12]
 8018e74:	60b9      	str	r1, [r7, #8]
 8018e76:	4613      	mov	r3, r2
 8018e78:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018e7a:	88fb      	ldrh	r3, [r7, #6]
 8018e7c:	3b01      	subs	r3, #1
 8018e7e:	68fa      	ldr	r2, [r7, #12]
 8018e80:	4413      	add	r3, r2
 8018e82:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018e84:	e007      	b.n	8018e96 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018e86:	68ba      	ldr	r2, [r7, #8]
 8018e88:	1c53      	adds	r3, r2, #1
 8018e8a:	60bb      	str	r3, [r7, #8]
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	1e59      	subs	r1, r3, #1
 8018e90:	60f9      	str	r1, [r7, #12]
 8018e92:	7812      	ldrb	r2, [r2, #0]
 8018e94:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018e96:	88fb      	ldrh	r3, [r7, #6]
 8018e98:	1e5a      	subs	r2, r3, #1
 8018e9a:	80fa      	strh	r2, [r7, #6]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d1f2      	bne.n	8018e86 <memcpyr+0x1a>
    }
}
 8018ea0:	bf00      	nop
 8018ea2:	bf00      	nop
 8018ea4:	3714      	adds	r7, #20
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bc80      	pop	{r7}
 8018eaa:	4770      	bx	lr

08018eac <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	70fb      	strb	r3, [r7, #3]
 8018eb8:	4613      	mov	r3, r2
 8018eba:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018ebc:	e004      	b.n	8018ec8 <memset1+0x1c>
    {
        *dst++ = value;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	1c5a      	adds	r2, r3, #1
 8018ec2:	607a      	str	r2, [r7, #4]
 8018ec4:	78fa      	ldrb	r2, [r7, #3]
 8018ec6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018ec8:	883b      	ldrh	r3, [r7, #0]
 8018eca:	1e5a      	subs	r2, r3, #1
 8018ecc:	803a      	strh	r2, [r7, #0]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1f5      	bne.n	8018ebe <memset1+0x12>
    }
}
 8018ed2:	bf00      	nop
 8018ed4:	bf00      	nop
 8018ed6:	370c      	adds	r7, #12
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bc80      	pop	{r7}
 8018edc:	4770      	bx	lr
	...

08018ee0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b087      	sub	sp, #28
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	460b      	mov	r3, r1
 8018eea:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8018eec:	4b1a      	ldr	r3, [pc, #104]	; (8018f58 <Crc32+0x78>)
 8018eee:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef4:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d101      	bne.n	8018f00 <Crc32+0x20>
    {
        return 0;
 8018efc:	2300      	movs	r3, #0
 8018efe:	e026      	b.n	8018f4e <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018f00:	2300      	movs	r3, #0
 8018f02:	827b      	strh	r3, [r7, #18]
 8018f04:	e01d      	b.n	8018f42 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8018f06:	8a7b      	ldrh	r3, [r7, #18]
 8018f08:	687a      	ldr	r2, [r7, #4]
 8018f0a:	4413      	add	r3, r2
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	461a      	mov	r2, r3
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	4053      	eors	r3, r2
 8018f14:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8018f16:	2300      	movs	r3, #0
 8018f18:	823b      	strh	r3, [r7, #16]
 8018f1a:	e00c      	b.n	8018f36 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	085a      	lsrs	r2, r3, #1
 8018f20:	697b      	ldr	r3, [r7, #20]
 8018f22:	f003 0301 	and.w	r3, r3, #1
 8018f26:	4259      	negs	r1, r3
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	400b      	ands	r3, r1
 8018f2c:	4053      	eors	r3, r2
 8018f2e:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8018f30:	8a3b      	ldrh	r3, [r7, #16]
 8018f32:	3301      	adds	r3, #1
 8018f34:	823b      	strh	r3, [r7, #16]
 8018f36:	8a3b      	ldrh	r3, [r7, #16]
 8018f38:	2b07      	cmp	r3, #7
 8018f3a:	d9ef      	bls.n	8018f1c <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8018f3c:	8a7b      	ldrh	r3, [r7, #18]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	827b      	strh	r3, [r7, #18]
 8018f42:	8a7a      	ldrh	r2, [r7, #18]
 8018f44:	887b      	ldrh	r3, [r7, #2]
 8018f46:	429a      	cmp	r2, r3
 8018f48:	d3dd      	bcc.n	8018f06 <Crc32+0x26>
        }
    }

    return ~crc;
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	43db      	mvns	r3, r3
}
 8018f4e:	4618      	mov	r0, r3
 8018f50:	371c      	adds	r7, #28
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bc80      	pop	{r7}
 8018f56:	4770      	bx	lr
 8018f58:	edb88320 	.word	0xedb88320

08018f5c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af02      	add	r7, sp, #8
 8018f62:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018f64:	4a21      	ldr	r2, [pc, #132]	; (8018fec <RadioInit+0x90>)
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018f6a:	4b21      	ldr	r3, [pc, #132]	; (8018ff0 <RadioInit+0x94>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018f70:	4b1f      	ldr	r3, [pc, #124]	; (8018ff0 <RadioInit+0x94>)
 8018f72:	2200      	movs	r2, #0
 8018f74:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018f76:	4b1e      	ldr	r3, [pc, #120]	; (8018ff0 <RadioInit+0x94>)
 8018f78:	2200      	movs	r2, #0
 8018f7a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8018f7c:	481d      	ldr	r0, [pc, #116]	; (8018ff4 <RadioInit+0x98>)
 8018f7e:	f001 feb7 	bl	801acf0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8018f82:	2000      	movs	r0, #0
 8018f84:	f001 f81e 	bl	8019fc4 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8018f88:	f002 f948 	bl	801b21c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018f8c:	2100      	movs	r1, #0
 8018f8e:	2000      	movs	r0, #0
 8018f90:	f002 fca8 	bl	801b8e4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8018f94:	2204      	movs	r2, #4
 8018f96:	2100      	movs	r1, #0
 8018f98:	2001      	movs	r0, #1
 8018f9a:	f002 facd 	bl	801b538 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018faa:	f002 f9fd 	bl	801b3a8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018fae:	f000 fe9b 	bl	8019ce8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	9300      	str	r3, [sp, #0]
 8018fb6:	4b10      	ldr	r3, [pc, #64]	; (8018ff8 <RadioInit+0x9c>)
 8018fb8:	2200      	movs	r2, #0
 8018fba:	f04f 31ff 	mov.w	r1, #4294967295
 8018fbe:	480f      	ldr	r0, [pc, #60]	; (8018ffc <RadioInit+0xa0>)
 8018fc0:	f003 fec8 	bl	801cd54 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	9300      	str	r3, [sp, #0]
 8018fc8:	4b0d      	ldr	r3, [pc, #52]	; (8019000 <RadioInit+0xa4>)
 8018fca:	2200      	movs	r2, #0
 8018fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8018fd0:	480c      	ldr	r0, [pc, #48]	; (8019004 <RadioInit+0xa8>)
 8018fd2:	f003 febf 	bl	801cd54 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018fd6:	4809      	ldr	r0, [pc, #36]	; (8018ffc <RadioInit+0xa0>)
 8018fd8:	f003 ff60 	bl	801ce9c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018fdc:	4809      	ldr	r0, [pc, #36]	; (8019004 <RadioInit+0xa8>)
 8018fde:	f003 ff5d 	bl	801ce9c <UTIL_TIMER_Stop>
}
 8018fe2:	bf00      	nop
 8018fe4:	3708      	adds	r7, #8
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	20003d90 	.word	0x20003d90
 8018ff0:	20003d94 	.word	0x20003d94
 8018ff4:	0801a0a9 	.word	0x0801a0a9
 8018ff8:	0801a031 	.word	0x0801a031
 8018ffc:	20003dec 	.word	0x20003dec
 8019000:	0801a045 	.word	0x0801a045
 8019004:	20003e04 	.word	0x20003e04

08019008 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019008:	b580      	push	{r7, lr}
 801900a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801900c:	f001 feb2 	bl	801ad74 <SUBGRF_GetOperatingMode>
 8019010:	4603      	mov	r3, r0
 8019012:	2b07      	cmp	r3, #7
 8019014:	d00a      	beq.n	801902c <RadioGetStatus+0x24>
 8019016:	2b07      	cmp	r3, #7
 8019018:	dc0a      	bgt.n	8019030 <RadioGetStatus+0x28>
 801901a:	2b04      	cmp	r3, #4
 801901c:	d002      	beq.n	8019024 <RadioGetStatus+0x1c>
 801901e:	2b05      	cmp	r3, #5
 8019020:	d002      	beq.n	8019028 <RadioGetStatus+0x20>
 8019022:	e005      	b.n	8019030 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019024:	2302      	movs	r3, #2
 8019026:	e004      	b.n	8019032 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019028:	2301      	movs	r3, #1
 801902a:	e002      	b.n	8019032 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801902c:	2303      	movs	r3, #3
 801902e:	e000      	b.n	8019032 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019030:	2300      	movs	r3, #0
    }
}
 8019032:	4618      	mov	r0, r3
 8019034:	bd80      	pop	{r7, pc}
	...

08019038 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b082      	sub	sp, #8
 801903c:	af00      	add	r7, sp, #0
 801903e:	4603      	mov	r3, r0
 8019040:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019042:	4a25      	ldr	r2, [pc, #148]	; (80190d8 <RadioSetModem+0xa0>)
 8019044:	79fb      	ldrb	r3, [r7, #7]
 8019046:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8019048:	79fb      	ldrb	r3, [r7, #7]
 801904a:	4618      	mov	r0, r3
 801904c:	f003 f80d 	bl	801c06a <RFW_SetRadioModem>
    switch( modem )
 8019050:	79fb      	ldrb	r3, [r7, #7]
 8019052:	3b01      	subs	r3, #1
 8019054:	2b03      	cmp	r3, #3
 8019056:	d80b      	bhi.n	8019070 <RadioSetModem+0x38>
 8019058:	a201      	add	r2, pc, #4	; (adr r2, 8019060 <RadioSetModem+0x28>)
 801905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801905e:	bf00      	nop
 8019060:	0801907f 	.word	0x0801907f
 8019064:	080190a5 	.word	0x080190a5
 8019068:	080190b3 	.word	0x080190b3
 801906c:	080190c1 	.word	0x080190c1
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019070:	2000      	movs	r0, #0
 8019072:	f002 fa3b 	bl	801b4ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019076:	4b18      	ldr	r3, [pc, #96]	; (80190d8 <RadioSetModem+0xa0>)
 8019078:	2200      	movs	r2, #0
 801907a:	735a      	strb	r2, [r3, #13]
        break;
 801907c:	e028      	b.n	80190d0 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801907e:	2001      	movs	r0, #1
 8019080:	f002 fa34 	bl	801b4ec <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019084:	4b14      	ldr	r3, [pc, #80]	; (80190d8 <RadioSetModem+0xa0>)
 8019086:	7b5a      	ldrb	r2, [r3, #13]
 8019088:	4b13      	ldr	r3, [pc, #76]	; (80190d8 <RadioSetModem+0xa0>)
 801908a:	7b1b      	ldrb	r3, [r3, #12]
 801908c:	429a      	cmp	r2, r3
 801908e:	d01e      	beq.n	80190ce <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019090:	4b11      	ldr	r3, [pc, #68]	; (80190d8 <RadioSetModem+0xa0>)
 8019092:	7b1a      	ldrb	r2, [r3, #12]
 8019094:	4b10      	ldr	r3, [pc, #64]	; (80190d8 <RadioSetModem+0xa0>)
 8019096:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019098:	4b0f      	ldr	r3, [pc, #60]	; (80190d8 <RadioSetModem+0xa0>)
 801909a:	7b5b      	ldrb	r3, [r3, #13]
 801909c:	4618      	mov	r0, r3
 801909e:	f000 ff91 	bl	8019fc4 <RadioSetPublicNetwork>
        }
        break;
 80190a2:	e014      	b.n	80190ce <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80190a4:	2002      	movs	r0, #2
 80190a6:	f002 fa21 	bl	801b4ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190aa:	4b0b      	ldr	r3, [pc, #44]	; (80190d8 <RadioSetModem+0xa0>)
 80190ac:	2200      	movs	r2, #0
 80190ae:	735a      	strb	r2, [r3, #13]
        break;
 80190b0:	e00e      	b.n	80190d0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80190b2:	2002      	movs	r0, #2
 80190b4:	f002 fa1a 	bl	801b4ec <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190b8:	4b07      	ldr	r3, [pc, #28]	; (80190d8 <RadioSetModem+0xa0>)
 80190ba:	2200      	movs	r2, #0
 80190bc:	735a      	strb	r2, [r3, #13]
        break;
 80190be:	e007      	b.n	80190d0 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80190c0:	2000      	movs	r0, #0
 80190c2:	f002 fa13 	bl	801b4ec <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80190c6:	4b04      	ldr	r3, [pc, #16]	; (80190d8 <RadioSetModem+0xa0>)
 80190c8:	2200      	movs	r2, #0
 80190ca:	735a      	strb	r2, [r3, #13]
        break;
 80190cc:	e000      	b.n	80190d0 <RadioSetModem+0x98>
        break;
 80190ce:	bf00      	nop
    }
}
 80190d0:	bf00      	nop
 80190d2:	3708      	adds	r7, #8
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	20003d94 	.word	0x20003d94

080190dc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b082      	sub	sp, #8
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80190e4:	6878      	ldr	r0, [r7, #4]
 80190e6:	f002 f9bb 	bl	801b460 <SUBGRF_SetRfFrequency>
}
 80190ea:	bf00      	nop
 80190ec:	3708      	adds	r7, #8
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}

080190f2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80190f2:	b580      	push	{r7, lr}
 80190f4:	b090      	sub	sp, #64	; 0x40
 80190f6:	af0a      	add	r7, sp, #40	; 0x28
 80190f8:	60f8      	str	r0, [r7, #12]
 80190fa:	60b9      	str	r1, [r7, #8]
 80190fc:	603b      	str	r3, [r7, #0]
 80190fe:	4613      	mov	r3, r2
 8019100:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019102:	2301      	movs	r3, #1
 8019104:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019106:	2300      	movs	r3, #0
 8019108:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801910a:	2300      	movs	r3, #0
 801910c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801910e:	f000 fdfe 	bl	8019d0e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8019112:	2000      	movs	r0, #0
 8019114:	f7ff ff90 	bl	8019038 <RadioSetModem>

    RadioSetChannel( freq );
 8019118:	68f8      	ldr	r0, [r7, #12]
 801911a:	f7ff ffdf 	bl	80190dc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801911e:	2301      	movs	r3, #1
 8019120:	9309      	str	r3, [sp, #36]	; 0x24
 8019122:	2300      	movs	r3, #0
 8019124:	9308      	str	r3, [sp, #32]
 8019126:	2300      	movs	r3, #0
 8019128:	9307      	str	r3, [sp, #28]
 801912a:	2300      	movs	r3, #0
 801912c:	9306      	str	r3, [sp, #24]
 801912e:	2300      	movs	r3, #0
 8019130:	9305      	str	r3, [sp, #20]
 8019132:	2300      	movs	r3, #0
 8019134:	9304      	str	r3, [sp, #16]
 8019136:	2300      	movs	r3, #0
 8019138:	9303      	str	r3, [sp, #12]
 801913a:	2300      	movs	r3, #0
 801913c:	9302      	str	r3, [sp, #8]
 801913e:	2303      	movs	r3, #3
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	2300      	movs	r3, #0
 8019148:	f44f 7216 	mov.w	r2, #600	; 0x258
 801914c:	68b9      	ldr	r1, [r7, #8]
 801914e:	2000      	movs	r0, #0
 8019150:	f000 f840 	bl	80191d4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019154:	2000      	movs	r0, #0
 8019156:	f000 fde1 	bl	8019d1c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801915a:	f000 ff61 	bl	801a020 <RadioGetWakeupTime>
 801915e:	4603      	mov	r3, r0
 8019160:	4618      	mov	r0, r3
 8019162:	f7e8 fd38 	bl	8001bd6 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019166:	f003 ffb3 	bl	801d0d0 <UTIL_TIMER_GetCurrentTime>
 801916a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801916c:	e00d      	b.n	801918a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801916e:	2000      	movs	r0, #0
 8019170:	f000 fea6 	bl	8019ec0 <RadioRssi>
 8019174:	4603      	mov	r3, r0
 8019176:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019178:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801917c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019180:	429a      	cmp	r2, r3
 8019182:	dd02      	ble.n	801918a <RadioIsChannelFree+0x98>
        {
            status = false;
 8019184:	2300      	movs	r3, #0
 8019186:	75fb      	strb	r3, [r7, #23]
            break;
 8019188:	e006      	b.n	8019198 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801918a:	6938      	ldr	r0, [r7, #16]
 801918c:	f003 ffb2 	bl	801d0f4 <UTIL_TIMER_GetElapsedTime>
 8019190:	4602      	mov	r2, r0
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	4293      	cmp	r3, r2
 8019196:	d8ea      	bhi.n	801916e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8019198:	f000 fdb9 	bl	8019d0e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801919c:	7dfb      	ldrb	r3, [r7, #23]
}
 801919e:	4618      	mov	r0, r3
 80191a0:	3718      	adds	r7, #24
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}

080191a6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80191a6:	b580      	push	{r7, lr}
 80191a8:	b082      	sub	sp, #8
 80191aa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80191ac:	2300      	movs	r3, #0
 80191ae:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80191b0:	2001      	movs	r0, #1
 80191b2:	f7ff ff41 	bl	8019038 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80191b6:	2300      	movs	r3, #0
 80191b8:	2200      	movs	r2, #0
 80191ba:	2100      	movs	r1, #0
 80191bc:	2000      	movs	r0, #0
 80191be:	f002 f8f3 	bl	801b3a8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80191c2:	f001 fea8 	bl	801af16 <SUBGRF_GetRandom>
 80191c6:	6078      	str	r0, [r7, #4]

    return rnd;
 80191c8:	687b      	ldr	r3, [r7, #4]
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3708      	adds	r7, #8
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
	...

080191d4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b08a      	sub	sp, #40	; 0x28
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60b9      	str	r1, [r7, #8]
 80191dc:	607a      	str	r2, [r7, #4]
 80191de:	461a      	mov	r2, r3
 80191e0:	4603      	mov	r3, r0
 80191e2:	73fb      	strb	r3, [r7, #15]
 80191e4:	4613      	mov	r3, r2
 80191e6:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80191e8:	4abd      	ldr	r2, [pc, #756]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80191ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80191ee:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80191f0:	f002 fef9 	bl	801bfe6 <RFW_DeInit>
    if( rxContinuous == true )
 80191f4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d001      	beq.n	8019200 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80191fc:	2300      	movs	r3, #0
 80191fe:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019204:	2b00      	cmp	r3, #0
 8019206:	d004      	beq.n	8019212 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019208:	4ab6      	ldr	r2, [pc, #728]	; (80194e4 <RadioSetRxConfig+0x310>)
 801920a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801920e:	7013      	strb	r3, [r2, #0]
 8019210:	e002      	b.n	8019218 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019212:	4bb4      	ldr	r3, [pc, #720]	; (80194e4 <RadioSetRxConfig+0x310>)
 8019214:	22ff      	movs	r2, #255	; 0xff
 8019216:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019218:	7bfb      	ldrb	r3, [r7, #15]
 801921a:	2b04      	cmp	r3, #4
 801921c:	d009      	beq.n	8019232 <RadioSetRxConfig+0x5e>
 801921e:	2b04      	cmp	r3, #4
 8019220:	f300 81da 	bgt.w	80195d8 <RadioSetRxConfig+0x404>
 8019224:	2b00      	cmp	r3, #0
 8019226:	f000 80bf 	beq.w	80193a8 <RadioSetRxConfig+0x1d4>
 801922a:	2b01      	cmp	r3, #1
 801922c:	f000 812c 	beq.w	8019488 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019230:	e1d2      	b.n	80195d8 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019232:	2001      	movs	r0, #1
 8019234:	f001 ffb4 	bl	801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019238:	4ba9      	ldr	r3, [pc, #676]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801923a:	2200      	movs	r2, #0
 801923c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019240:	4aa7      	ldr	r2, [pc, #668]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019246:	4ba6      	ldr	r3, [pc, #664]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019248:	2209      	movs	r2, #9
 801924a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801924e:	4ba4      	ldr	r3, [pc, #656]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019254:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019256:	68b8      	ldr	r0, [r7, #8]
 8019258:	f002 fdf8 	bl	801be4c <SUBGRF_GetFskBandwidthRegValue>
 801925c:	4603      	mov	r3, r0
 801925e:	461a      	mov	r2, r3
 8019260:	4b9f      	ldr	r3, [pc, #636]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019266:	4b9e      	ldr	r3, [pc, #632]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019268:	2200      	movs	r2, #0
 801926a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801926c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801926e:	00db      	lsls	r3, r3, #3
 8019270:	b29a      	uxth	r2, r3
 8019272:	4b9b      	ldr	r3, [pc, #620]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019274:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019276:	4b9a      	ldr	r3, [pc, #616]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019278:	2200      	movs	r2, #0
 801927a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801927c:	4b98      	ldr	r3, [pc, #608]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801927e:	2210      	movs	r2, #16
 8019280:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019282:	4b97      	ldr	r3, [pc, #604]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019284:	2200      	movs	r2, #0
 8019286:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019288:	4b95      	ldr	r3, [pc, #596]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801928a:	2200      	movs	r2, #0
 801928c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801928e:	4b95      	ldr	r3, [pc, #596]	; (80194e4 <RadioSetRxConfig+0x310>)
 8019290:	781a      	ldrb	r2, [r3, #0]
 8019292:	4b93      	ldr	r3, [pc, #588]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019294:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019296:	4b92      	ldr	r3, [pc, #584]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019298:	2201      	movs	r2, #1
 801929a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801929c:	4b90      	ldr	r3, [pc, #576]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801929e:	2200      	movs	r2, #0
 80192a0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80192a2:	2004      	movs	r0, #4
 80192a4:	f7ff fec8 	bl	8019038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80192a8:	488f      	ldr	r0, [pc, #572]	; (80194e8 <RadioSetRxConfig+0x314>)
 80192aa:	f002 f9ab 	bl	801b604 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192ae:	488f      	ldr	r0, [pc, #572]	; (80194ec <RadioSetRxConfig+0x318>)
 80192b0:	f002 fa7a 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80192b4:	4a8e      	ldr	r2, [pc, #568]	; (80194f0 <RadioSetRxConfig+0x31c>)
 80192b6:	f107 031c 	add.w	r3, r7, #28
 80192ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192be:	e883 0003 	stmia.w	r3, {r0, r1}
 80192c2:	f107 031c 	add.w	r3, r7, #28
 80192c6:	4618      	mov	r0, r3
 80192c8:	f001 fda3 	bl	801ae12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80192cc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80192d0:	f001 fdee 	bl	801aeb0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80192d4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80192d8:	f000 fe11 	bl	8019efe <RadioRead>
 80192dc:	4603      	mov	r3, r0
 80192de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80192e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192e6:	f023 0310 	bic.w	r3, r3, #16
 80192ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80192ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192f2:	4619      	mov	r1, r3
 80192f4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80192f8:	f000 fdef 	bl	8019eda <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80192fc:	2104      	movs	r1, #4
 80192fe:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019302:	f000 fdea 	bl	8019eda <RadioWrite>
            modReg= RadioRead(0x89b);
 8019306:	f640 009b 	movw	r0, #2203	; 0x89b
 801930a:	f000 fdf8 	bl	8019efe <RadioRead>
 801930e:	4603      	mov	r3, r0
 8019310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019318:	f023 031c 	bic.w	r3, r3, #28
 801931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8019320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019324:	f043 0308 	orr.w	r3, r3, #8
 8019328:	b2db      	uxtb	r3, r3
 801932a:	4619      	mov	r1, r3
 801932c:	f640 009b 	movw	r0, #2203	; 0x89b
 8019330:	f000 fdd3 	bl	8019eda <RadioWrite>
            modReg= RadioRead(0x6d1);
 8019334:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019338:	f000 fde1 	bl	8019efe <RadioRead>
 801933c:	4603      	mov	r3, r0
 801933e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019346:	f023 0318 	bic.w	r3, r3, #24
 801934a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 801934e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019352:	f043 0318 	orr.w	r3, r3, #24
 8019356:	b2db      	uxtb	r3, r3
 8019358:	4619      	mov	r1, r3
 801935a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801935e:	f000 fdbc 	bl	8019eda <RadioWrite>
            modReg= RadioRead(0x6ac);
 8019362:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019366:	f000 fdca 	bl	8019efe <RadioRead>
 801936a:	4603      	mov	r3, r0
 801936c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019380:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019384:	b2db      	uxtb	r3, r3
 8019386:	4619      	mov	r1, r3
 8019388:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801938c:	f000 fda5 	bl	8019eda <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019392:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019396:	fb02 f303 	mul.w	r3, r2, r3
 801939a:	461a      	mov	r2, r3
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	fbb2 f3f3 	udiv	r3, r2, r3
 80193a2:	4a4f      	ldr	r2, [pc, #316]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193a4:	6093      	str	r3, [r2, #8]
            break;
 80193a6:	e118      	b.n	80195da <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80193a8:	2000      	movs	r0, #0
 80193aa:	f001 fef9 	bl	801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80193ae:	4b4c      	ldr	r3, [pc, #304]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193b0:	2200      	movs	r2, #0
 80193b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80193b6:	4a4a      	ldr	r2, [pc, #296]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80193bc:	4b48      	ldr	r3, [pc, #288]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193be:	220b      	movs	r2, #11
 80193c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80193c4:	68b8      	ldr	r0, [r7, #8]
 80193c6:	f002 fd41 	bl	801be4c <SUBGRF_GetFskBandwidthRegValue>
 80193ca:	4603      	mov	r3, r0
 80193cc:	461a      	mov	r2, r3
 80193ce:	4b44      	ldr	r3, [pc, #272]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80193d4:	4b42      	ldr	r3, [pc, #264]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193d6:	2200      	movs	r2, #0
 80193d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80193da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193dc:	00db      	lsls	r3, r3, #3
 80193de:	b29a      	uxth	r2, r3
 80193e0:	4b3f      	ldr	r3, [pc, #252]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193e2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80193e4:	4b3e      	ldr	r3, [pc, #248]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193e6:	2204      	movs	r2, #4
 80193e8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80193ea:	4b3d      	ldr	r3, [pc, #244]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193ec:	2218      	movs	r2, #24
 80193ee:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80193f0:	4b3b      	ldr	r3, [pc, #236]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80193f2:	2200      	movs	r2, #0
 80193f4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80193f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80193fa:	f083 0301 	eor.w	r3, r3, #1
 80193fe:	b2db      	uxtb	r3, r3
 8019400:	461a      	mov	r2, r3
 8019402:	4b37      	ldr	r3, [pc, #220]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019404:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019406:	4b37      	ldr	r3, [pc, #220]	; (80194e4 <RadioSetRxConfig+0x310>)
 8019408:	781a      	ldrb	r2, [r3, #0]
 801940a:	4b35      	ldr	r3, [pc, #212]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801940c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801940e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019412:	2b00      	cmp	r3, #0
 8019414:	d003      	beq.n	801941e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019416:	4b32      	ldr	r3, [pc, #200]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019418:	22f2      	movs	r2, #242	; 0xf2
 801941a:	75da      	strb	r2, [r3, #23]
 801941c:	e002      	b.n	8019424 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801941e:	4b30      	ldr	r3, [pc, #192]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019420:	2201      	movs	r2, #1
 8019422:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019424:	4b2e      	ldr	r3, [pc, #184]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019426:	2201      	movs	r2, #1
 8019428:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801942a:	f000 fc70 	bl	8019d0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801942e:	4b2c      	ldr	r3, [pc, #176]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019434:	2b00      	cmp	r3, #0
 8019436:	bf14      	ite	ne
 8019438:	2301      	movne	r3, #1
 801943a:	2300      	moveq	r3, #0
 801943c:	b2db      	uxtb	r3, r3
 801943e:	4618      	mov	r0, r3
 8019440:	f7ff fdfa 	bl	8019038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019444:	4828      	ldr	r0, [pc, #160]	; (80194e8 <RadioSetRxConfig+0x314>)
 8019446:	f002 f8dd 	bl	801b604 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801944a:	4828      	ldr	r0, [pc, #160]	; (80194ec <RadioSetRxConfig+0x318>)
 801944c:	f002 f9ac 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019450:	4a28      	ldr	r2, [pc, #160]	; (80194f4 <RadioSetRxConfig+0x320>)
 8019452:	f107 0314 	add.w	r3, r7, #20
 8019456:	e892 0003 	ldmia.w	r2, {r0, r1}
 801945a:	e883 0003 	stmia.w	r3, {r0, r1}
 801945e:	f107 0314 	add.w	r3, r7, #20
 8019462:	4618      	mov	r0, r3
 8019464:	f001 fcd5 	bl	801ae12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019468:	f240 10ff 	movw	r0, #511	; 0x1ff
 801946c:	f001 fd20 	bl	801aeb0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019472:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019476:	fb02 f303 	mul.w	r3, r2, r3
 801947a:	461a      	mov	r2, r3
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019482:	4a17      	ldr	r2, [pc, #92]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019484:	6093      	str	r3, [r2, #8]
            break;
 8019486:	e0a8      	b.n	80195da <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019488:	2000      	movs	r0, #0
 801948a:	f001 fe89 	bl	801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801948e:	4b14      	ldr	r3, [pc, #80]	; (80194e0 <RadioSetRxConfig+0x30c>)
 8019490:	2201      	movs	r2, #1
 8019492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	b2da      	uxtb	r2, r3
 801949a:	4b11      	ldr	r3, [pc, #68]	; (80194e0 <RadioSetRxConfig+0x30c>)
 801949c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80194a0:	4a15      	ldr	r2, [pc, #84]	; (80194f8 <RadioSetRxConfig+0x324>)
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	4413      	add	r3, r2
 80194a6:	781a      	ldrb	r2, [r3, #0]
 80194a8:	4b0d      	ldr	r3, [pc, #52]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80194aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80194ae:	4a0c      	ldr	r2, [pc, #48]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80194b0:	7bbb      	ldrb	r3, [r7, #14]
 80194b2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80194b6:	68bb      	ldr	r3, [r7, #8]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d105      	bne.n	80194c8 <RadioSetRxConfig+0x2f4>
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2b0b      	cmp	r3, #11
 80194c0:	d008      	beq.n	80194d4 <RadioSetRxConfig+0x300>
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2b0c      	cmp	r3, #12
 80194c6:	d005      	beq.n	80194d4 <RadioSetRxConfig+0x300>
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	2b01      	cmp	r3, #1
 80194cc:	d116      	bne.n	80194fc <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	2b0c      	cmp	r3, #12
 80194d2:	d113      	bne.n	80194fc <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80194d4:	4b02      	ldr	r3, [pc, #8]	; (80194e0 <RadioSetRxConfig+0x30c>)
 80194d6:	2201      	movs	r2, #1
 80194d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80194dc:	e012      	b.n	8019504 <RadioSetRxConfig+0x330>
 80194de:	bf00      	nop
 80194e0:	20003d94 	.word	0x20003d94
 80194e4:	20000104 	.word	0x20000104
 80194e8:	20003dcc 	.word	0x20003dcc
 80194ec:	20003da2 	.word	0x20003da2
 80194f0:	0801e060 	.word	0x0801e060
 80194f4:	0801e068 	.word	0x0801e068
 80194f8:	0801e6cc 	.word	0x0801e6cc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80194fc:	4b39      	ldr	r3, [pc, #228]	; (80195e4 <RadioSetRxConfig+0x410>)
 80194fe:	2200      	movs	r2, #0
 8019500:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019504:	4b37      	ldr	r3, [pc, #220]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019506:	2201      	movs	r2, #1
 8019508:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801950a:	4b36      	ldr	r3, [pc, #216]	; (80195e4 <RadioSetRxConfig+0x410>)
 801950c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019510:	2b05      	cmp	r3, #5
 8019512:	d004      	beq.n	801951e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019514:	4b33      	ldr	r3, [pc, #204]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801951a:	2b06      	cmp	r3, #6
 801951c:	d10a      	bne.n	8019534 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 801951e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019520:	2b0b      	cmp	r3, #11
 8019522:	d803      	bhi.n	801952c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019524:	4b2f      	ldr	r3, [pc, #188]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019526:	220c      	movs	r2, #12
 8019528:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801952a:	e006      	b.n	801953a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801952c:	4a2d      	ldr	r2, [pc, #180]	; (80195e4 <RadioSetRxConfig+0x410>)
 801952e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019530:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019532:	e002      	b.n	801953a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019534:	4a2b      	ldr	r2, [pc, #172]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019536:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019538:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801953a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801953e:	4b29      	ldr	r3, [pc, #164]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019540:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019542:	4b29      	ldr	r3, [pc, #164]	; (80195e8 <RadioSetRxConfig+0x414>)
 8019544:	781a      	ldrb	r2, [r3, #0]
 8019546:	4b27      	ldr	r3, [pc, #156]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019548:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801954a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801954e:	4b25      	ldr	r3, [pc, #148]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019550:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019554:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019558:	4b22      	ldr	r3, [pc, #136]	; (80195e4 <RadioSetRxConfig+0x410>)
 801955a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801955e:	f000 fbd6 	bl	8019d0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8019562:	4b20      	ldr	r3, [pc, #128]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019568:	2b00      	cmp	r3, #0
 801956a:	bf14      	ite	ne
 801956c:	2301      	movne	r3, #1
 801956e:	2300      	moveq	r3, #0
 8019570:	b2db      	uxtb	r3, r3
 8019572:	4618      	mov	r0, r3
 8019574:	f7ff fd60 	bl	8019038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019578:	481c      	ldr	r0, [pc, #112]	; (80195ec <RadioSetRxConfig+0x418>)
 801957a:	f002 f843 	bl	801b604 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801957e:	481c      	ldr	r0, [pc, #112]	; (80195f0 <RadioSetRxConfig+0x41c>)
 8019580:	f002 f912 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019584:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019586:	b2db      	uxtb	r3, r3
 8019588:	4618      	mov	r0, r3
 801958a:	f001 fe18 	bl	801b1be <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801958e:	4b15      	ldr	r3, [pc, #84]	; (80195e4 <RadioSetRxConfig+0x410>)
 8019590:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019594:	2b01      	cmp	r3, #1
 8019596:	d10d      	bne.n	80195b4 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8019598:	f240 7036 	movw	r0, #1846	; 0x736
 801959c:	f002 fa60 	bl	801ba60 <SUBGRF_ReadRegister>
 80195a0:	4603      	mov	r3, r0
 80195a2:	f023 0304 	bic.w	r3, r3, #4
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	4619      	mov	r1, r3
 80195aa:	f240 7036 	movw	r0, #1846	; 0x736
 80195ae:	f002 fa43 	bl	801ba38 <SUBGRF_WriteRegister>
 80195b2:	e00c      	b.n	80195ce <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80195b4:	f240 7036 	movw	r0, #1846	; 0x736
 80195b8:	f002 fa52 	bl	801ba60 <SUBGRF_ReadRegister>
 80195bc:	4603      	mov	r3, r0
 80195be:	f043 0304 	orr.w	r3, r3, #4
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	4619      	mov	r1, r3
 80195c6:	f240 7036 	movw	r0, #1846	; 0x736
 80195ca:	f002 fa35 	bl	801ba38 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80195ce:	4b05      	ldr	r3, [pc, #20]	; (80195e4 <RadioSetRxConfig+0x410>)
 80195d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195d4:	609a      	str	r2, [r3, #8]
            break;
 80195d6:	e000      	b.n	80195da <RadioSetRxConfig+0x406>
            break;
 80195d8:	bf00      	nop
    }
}
 80195da:	bf00      	nop
 80195dc:	3728      	adds	r7, #40	; 0x28
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	20003d94 	.word	0x20003d94
 80195e8:	20000104 	.word	0x20000104
 80195ec:	20003dcc 	.word	0x20003dcc
 80195f0:	20003da2 	.word	0x20003da2

080195f4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b086      	sub	sp, #24
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	60ba      	str	r2, [r7, #8]
 80195fc:	607b      	str	r3, [r7, #4]
 80195fe:	4603      	mov	r3, r0
 8019600:	73fb      	strb	r3, [r7, #15]
 8019602:	460b      	mov	r3, r1
 8019604:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019606:	f002 fcee 	bl	801bfe6 <RFW_DeInit>
    switch( modem )
 801960a:	7bfb      	ldrb	r3, [r7, #15]
 801960c:	2b03      	cmp	r3, #3
 801960e:	f000 80d7 	beq.w	80197c0 <RadioSetTxConfig+0x1cc>
 8019612:	2b03      	cmp	r3, #3
 8019614:	f300 80e6 	bgt.w	80197e4 <RadioSetTxConfig+0x1f0>
 8019618:	2b00      	cmp	r3, #0
 801961a:	d002      	beq.n	8019622 <RadioSetTxConfig+0x2e>
 801961c:	2b01      	cmp	r3, #1
 801961e:	d061      	beq.n	80196e4 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8019620:	e0e0      	b.n	80197e4 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019622:	4b7c      	ldr	r3, [pc, #496]	; (8019814 <RadioSetTxConfig+0x220>)
 8019624:	2200      	movs	r2, #0
 8019626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801962a:	4a7a      	ldr	r2, [pc, #488]	; (8019814 <RadioSetTxConfig+0x220>)
 801962c:	6a3b      	ldr	r3, [r7, #32]
 801962e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019630:	4b78      	ldr	r3, [pc, #480]	; (8019814 <RadioSetTxConfig+0x220>)
 8019632:	220b      	movs	r2, #11
 8019634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f002 fc07 	bl	801be4c <SUBGRF_GetFskBandwidthRegValue>
 801963e:	4603      	mov	r3, r0
 8019640:	461a      	mov	r2, r3
 8019642:	4b74      	ldr	r3, [pc, #464]	; (8019814 <RadioSetTxConfig+0x220>)
 8019644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019648:	4a72      	ldr	r2, [pc, #456]	; (8019814 <RadioSetTxConfig+0x220>)
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801964e:	4b71      	ldr	r3, [pc, #452]	; (8019814 <RadioSetTxConfig+0x220>)
 8019650:	2200      	movs	r2, #0
 8019652:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019656:	00db      	lsls	r3, r3, #3
 8019658:	b29a      	uxth	r2, r3
 801965a:	4b6e      	ldr	r3, [pc, #440]	; (8019814 <RadioSetTxConfig+0x220>)
 801965c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801965e:	4b6d      	ldr	r3, [pc, #436]	; (8019814 <RadioSetTxConfig+0x220>)
 8019660:	2204      	movs	r2, #4
 8019662:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019664:	4b6b      	ldr	r3, [pc, #428]	; (8019814 <RadioSetTxConfig+0x220>)
 8019666:	2218      	movs	r2, #24
 8019668:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801966a:	4b6a      	ldr	r3, [pc, #424]	; (8019814 <RadioSetTxConfig+0x220>)
 801966c:	2200      	movs	r2, #0
 801966e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019670:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019674:	f083 0301 	eor.w	r3, r3, #1
 8019678:	b2db      	uxtb	r3, r3
 801967a:	461a      	mov	r2, r3
 801967c:	4b65      	ldr	r3, [pc, #404]	; (8019814 <RadioSetTxConfig+0x220>)
 801967e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019680:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019684:	2b00      	cmp	r3, #0
 8019686:	d003      	beq.n	8019690 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019688:	4b62      	ldr	r3, [pc, #392]	; (8019814 <RadioSetTxConfig+0x220>)
 801968a:	22f2      	movs	r2, #242	; 0xf2
 801968c:	75da      	strb	r2, [r3, #23]
 801968e:	e002      	b.n	8019696 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019690:	4b60      	ldr	r3, [pc, #384]	; (8019814 <RadioSetTxConfig+0x220>)
 8019692:	2201      	movs	r2, #1
 8019694:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019696:	4b5f      	ldr	r3, [pc, #380]	; (8019814 <RadioSetTxConfig+0x220>)
 8019698:	2201      	movs	r2, #1
 801969a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801969c:	f000 fb37 	bl	8019d0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80196a0:	4b5c      	ldr	r3, [pc, #368]	; (8019814 <RadioSetTxConfig+0x220>)
 80196a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	bf14      	ite	ne
 80196aa:	2301      	movne	r3, #1
 80196ac:	2300      	moveq	r3, #0
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	4618      	mov	r0, r3
 80196b2:	f7ff fcc1 	bl	8019038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196b6:	4858      	ldr	r0, [pc, #352]	; (8019818 <RadioSetTxConfig+0x224>)
 80196b8:	f001 ffa4 	bl	801b604 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196bc:	4857      	ldr	r0, [pc, #348]	; (801981c <RadioSetTxConfig+0x228>)
 80196be:	f002 f873 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80196c2:	4a57      	ldr	r2, [pc, #348]	; (8019820 <RadioSetTxConfig+0x22c>)
 80196c4:	f107 0310 	add.w	r3, r7, #16
 80196c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80196d0:	f107 0310 	add.w	r3, r7, #16
 80196d4:	4618      	mov	r0, r3
 80196d6:	f001 fb9c 	bl	801ae12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80196da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80196de:	f001 fbe7 	bl	801aeb0 <SUBGRF_SetWhiteningSeed>
            break;
 80196e2:	e080      	b.n	80197e6 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80196e4:	4b4b      	ldr	r3, [pc, #300]	; (8019814 <RadioSetTxConfig+0x220>)
 80196e6:	2201      	movs	r2, #1
 80196e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80196ec:	6a3b      	ldr	r3, [r7, #32]
 80196ee:	b2da      	uxtb	r2, r3
 80196f0:	4b48      	ldr	r3, [pc, #288]	; (8019814 <RadioSetTxConfig+0x220>)
 80196f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80196f6:	4a4b      	ldr	r2, [pc, #300]	; (8019824 <RadioSetTxConfig+0x230>)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	4413      	add	r3, r2
 80196fc:	781a      	ldrb	r2, [r3, #0]
 80196fe:	4b45      	ldr	r3, [pc, #276]	; (8019814 <RadioSetTxConfig+0x220>)
 8019700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019704:	4a43      	ldr	r2, [pc, #268]	; (8019814 <RadioSetTxConfig+0x220>)
 8019706:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801970a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d105      	bne.n	8019720 <RadioSetTxConfig+0x12c>
 8019714:	6a3b      	ldr	r3, [r7, #32]
 8019716:	2b0b      	cmp	r3, #11
 8019718:	d008      	beq.n	801972c <RadioSetTxConfig+0x138>
 801971a:	6a3b      	ldr	r3, [r7, #32]
 801971c:	2b0c      	cmp	r3, #12
 801971e:	d005      	beq.n	801972c <RadioSetTxConfig+0x138>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2b01      	cmp	r3, #1
 8019724:	d107      	bne.n	8019736 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019726:	6a3b      	ldr	r3, [r7, #32]
 8019728:	2b0c      	cmp	r3, #12
 801972a:	d104      	bne.n	8019736 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801972c:	4b39      	ldr	r3, [pc, #228]	; (8019814 <RadioSetTxConfig+0x220>)
 801972e:	2201      	movs	r2, #1
 8019730:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019734:	e003      	b.n	801973e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019736:	4b37      	ldr	r3, [pc, #220]	; (8019814 <RadioSetTxConfig+0x220>)
 8019738:	2200      	movs	r2, #0
 801973a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801973e:	4b35      	ldr	r3, [pc, #212]	; (8019814 <RadioSetTxConfig+0x220>)
 8019740:	2201      	movs	r2, #1
 8019742:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019744:	4b33      	ldr	r3, [pc, #204]	; (8019814 <RadioSetTxConfig+0x220>)
 8019746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801974a:	2b05      	cmp	r3, #5
 801974c:	d004      	beq.n	8019758 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801974e:	4b31      	ldr	r3, [pc, #196]	; (8019814 <RadioSetTxConfig+0x220>)
 8019750:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019754:	2b06      	cmp	r3, #6
 8019756:	d10a      	bne.n	801976e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8019758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801975a:	2b0b      	cmp	r3, #11
 801975c:	d803      	bhi.n	8019766 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801975e:	4b2d      	ldr	r3, [pc, #180]	; (8019814 <RadioSetTxConfig+0x220>)
 8019760:	220c      	movs	r2, #12
 8019762:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019764:	e006      	b.n	8019774 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019766:	4a2b      	ldr	r2, [pc, #172]	; (8019814 <RadioSetTxConfig+0x220>)
 8019768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801976a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801976c:	e002      	b.n	8019774 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801976e:	4a29      	ldr	r2, [pc, #164]	; (8019814 <RadioSetTxConfig+0x220>)
 8019770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019772:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019774:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019778:	4b26      	ldr	r3, [pc, #152]	; (8019814 <RadioSetTxConfig+0x220>)
 801977a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801977c:	4b2a      	ldr	r3, [pc, #168]	; (8019828 <RadioSetTxConfig+0x234>)
 801977e:	781a      	ldrb	r2, [r3, #0]
 8019780:	4b24      	ldr	r3, [pc, #144]	; (8019814 <RadioSetTxConfig+0x220>)
 8019782:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019784:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019788:	4b22      	ldr	r3, [pc, #136]	; (8019814 <RadioSetTxConfig+0x220>)
 801978a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801978e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019792:	4b20      	ldr	r3, [pc, #128]	; (8019814 <RadioSetTxConfig+0x220>)
 8019794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019798:	f000 fab9 	bl	8019d0e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801979c:	4b1d      	ldr	r3, [pc, #116]	; (8019814 <RadioSetTxConfig+0x220>)
 801979e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	bf14      	ite	ne
 80197a6:	2301      	movne	r3, #1
 80197a8:	2300      	moveq	r3, #0
 80197aa:	b2db      	uxtb	r3, r3
 80197ac:	4618      	mov	r0, r3
 80197ae:	f7ff fc43 	bl	8019038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197b2:	4819      	ldr	r0, [pc, #100]	; (8019818 <RadioSetTxConfig+0x224>)
 80197b4:	f001 ff26 	bl	801b604 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197b8:	4818      	ldr	r0, [pc, #96]	; (801981c <RadioSetTxConfig+0x228>)
 80197ba:	f001 fff5 	bl	801b7a8 <SUBGRF_SetPacketParams>
            break;
 80197be:	e012      	b.n	80197e6 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80197c0:	2003      	movs	r0, #3
 80197c2:	f7ff fc39 	bl	8019038 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80197c6:	4b13      	ldr	r3, [pc, #76]	; (8019814 <RadioSetTxConfig+0x220>)
 80197c8:	2202      	movs	r2, #2
 80197ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80197ce:	4a11      	ldr	r2, [pc, #68]	; (8019814 <RadioSetTxConfig+0x220>)
 80197d0:	6a3b      	ldr	r3, [r7, #32]
 80197d2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80197d4:	4b0f      	ldr	r3, [pc, #60]	; (8019814 <RadioSetTxConfig+0x220>)
 80197d6:	2216      	movs	r2, #22
 80197d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197dc:	480e      	ldr	r0, [pc, #56]	; (8019818 <RadioSetTxConfig+0x224>)
 80197de:	f001 ff11 	bl	801b604 <SUBGRF_SetModulationParams>
            break;
 80197e2:	e000      	b.n	80197e6 <RadioSetTxConfig+0x1f2>
            break;
 80197e4:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80197e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f002 fa40 	bl	801bc70 <SUBGRF_SetRfTxPower>
 80197f0:	4603      	mov	r3, r0
 80197f2:	461a      	mov	r2, r3
 80197f4:	4b07      	ldr	r3, [pc, #28]	; (8019814 <RadioSetTxConfig+0x220>)
 80197f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80197fa:	4b06      	ldr	r3, [pc, #24]	; (8019814 <RadioSetTxConfig+0x220>)
 80197fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019800:	4618      	mov	r0, r3
 8019802:	f002 fc04 	bl	801c00e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019806:	4a03      	ldr	r2, [pc, #12]	; (8019814 <RadioSetTxConfig+0x220>)
 8019808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801980a:	6053      	str	r3, [r2, #4]
}
 801980c:	bf00      	nop
 801980e:	3718      	adds	r7, #24
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}
 8019814:	20003d94 	.word	0x20003d94
 8019818:	20003dcc 	.word	0x20003dcc
 801981c:	20003da2 	.word	0x20003da2
 8019820:	0801e068 	.word	0x0801e068
 8019824:	0801e6cc 	.word	0x0801e6cc
 8019828:	20000104 	.word	0x20000104

0801982c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801982c:	b480      	push	{r7}
 801982e:	b083      	sub	sp, #12
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
    return true;
 8019834:	2301      	movs	r3, #1
}
 8019836:	4618      	mov	r0, r3
 8019838:	370c      	adds	r7, #12
 801983a:	46bd      	mov	sp, r7
 801983c:	bc80      	pop	{r7}
 801983e:	4770      	bx	lr

08019840 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019840:	b480      	push	{r7}
 8019842:	b085      	sub	sp, #20
 8019844:	af00      	add	r7, sp, #0
 8019846:	4603      	mov	r3, r0
 8019848:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801984a:	2300      	movs	r3, #0
 801984c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801984e:	79fb      	ldrb	r3, [r7, #7]
 8019850:	2b0a      	cmp	r3, #10
 8019852:	d83e      	bhi.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
 8019854:	a201      	add	r2, pc, #4	; (adr r2, 801985c <RadioGetLoRaBandwidthInHz+0x1c>)
 8019856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801985a:	bf00      	nop
 801985c:	08019889 	.word	0x08019889
 8019860:	08019899 	.word	0x08019899
 8019864:	080198a9 	.word	0x080198a9
 8019868:	080198b9 	.word	0x080198b9
 801986c:	080198c1 	.word	0x080198c1
 8019870:	080198c7 	.word	0x080198c7
 8019874:	080198cd 	.word	0x080198cd
 8019878:	080198d3 	.word	0x080198d3
 801987c:	08019891 	.word	0x08019891
 8019880:	080198a1 	.word	0x080198a1
 8019884:	080198b1 	.word	0x080198b1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019888:	f641 6384 	movw	r3, #7812	; 0x1e84
 801988c:	60fb      	str	r3, [r7, #12]
        break;
 801988e:	e020      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019890:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019894:	60fb      	str	r3, [r7, #12]
        break;
 8019896:	e01c      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019898:	f643 5309 	movw	r3, #15625	; 0x3d09
 801989c:	60fb      	str	r3, [r7, #12]
        break;
 801989e:	e018      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80198a0:	f245 1361 	movw	r3, #20833	; 0x5161
 80198a4:	60fb      	str	r3, [r7, #12]
        break;
 80198a6:	e014      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80198a8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80198ac:	60fb      	str	r3, [r7, #12]
        break;
 80198ae:	e010      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80198b0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80198b4:	60fb      	str	r3, [r7, #12]
        break;
 80198b6:	e00c      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80198b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80198bc:	60fb      	str	r3, [r7, #12]
        break;
 80198be:	e008      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80198c0:	4b07      	ldr	r3, [pc, #28]	; (80198e0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80198c2:	60fb      	str	r3, [r7, #12]
        break;
 80198c4:	e005      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80198c6:	4b07      	ldr	r3, [pc, #28]	; (80198e4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80198c8:	60fb      	str	r3, [r7, #12]
        break;
 80198ca:	e002      	b.n	80198d2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80198cc:	4b06      	ldr	r3, [pc, #24]	; (80198e8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80198ce:	60fb      	str	r3, [r7, #12]
        break;
 80198d0:	bf00      	nop
    }

    return bandwidthInHz;
 80198d2:	68fb      	ldr	r3, [r7, #12]
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3714      	adds	r7, #20
 80198d8:	46bd      	mov	sp, r7
 80198da:	bc80      	pop	{r7}
 80198dc:	4770      	bx	lr
 80198de:	bf00      	nop
 80198e0:	0001e848 	.word	0x0001e848
 80198e4:	0003d090 	.word	0x0003d090
 80198e8:	0007a120 	.word	0x0007a120

080198ec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80198ec:	b480      	push	{r7}
 80198ee:	b083      	sub	sp, #12
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	4608      	mov	r0, r1
 80198f6:	4611      	mov	r1, r2
 80198f8:	461a      	mov	r2, r3
 80198fa:	4603      	mov	r3, r0
 80198fc:	70fb      	strb	r3, [r7, #3]
 80198fe:	460b      	mov	r3, r1
 8019900:	803b      	strh	r3, [r7, #0]
 8019902:	4613      	mov	r3, r2
 8019904:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8019906:	883b      	ldrh	r3, [r7, #0]
 8019908:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801990a:	78ba      	ldrb	r2, [r7, #2]
 801990c:	f082 0201 	eor.w	r2, r2, #1
 8019910:	b2d2      	uxtb	r2, r2
 8019912:	2a00      	cmp	r2, #0
 8019914:	d001      	beq.n	801991a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019916:	2208      	movs	r2, #8
 8019918:	e000      	b.n	801991c <RadioGetGfskTimeOnAirNumerator+0x30>
 801991a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801991c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801991e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019922:	7c3b      	ldrb	r3, [r7, #16]
 8019924:	7d39      	ldrb	r1, [r7, #20]
 8019926:	2900      	cmp	r1, #0
 8019928:	d001      	beq.n	801992e <RadioGetGfskTimeOnAirNumerator+0x42>
 801992a:	2102      	movs	r1, #2
 801992c:	e000      	b.n	8019930 <RadioGetGfskTimeOnAirNumerator+0x44>
 801992e:	2100      	movs	r1, #0
 8019930:	440b      	add	r3, r1
 8019932:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019934:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8019936:	4618      	mov	r0, r3
 8019938:	370c      	adds	r7, #12
 801993a:	46bd      	mov	sp, r7
 801993c:	bc80      	pop	{r7}
 801993e:	4770      	bx	lr

08019940 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019940:	b480      	push	{r7}
 8019942:	b08b      	sub	sp, #44	; 0x2c
 8019944:	af00      	add	r7, sp, #0
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	4611      	mov	r1, r2
 801994c:	461a      	mov	r2, r3
 801994e:	460b      	mov	r3, r1
 8019950:	71fb      	strb	r3, [r7, #7]
 8019952:	4613      	mov	r3, r2
 8019954:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019956:	79fb      	ldrb	r3, [r7, #7]
 8019958:	3304      	adds	r3, #4
 801995a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801995c:	2300      	movs	r3, #0
 801995e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019962:	68bb      	ldr	r3, [r7, #8]
 8019964:	2b05      	cmp	r3, #5
 8019966:	d002      	beq.n	801996e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019968:	68bb      	ldr	r3, [r7, #8]
 801996a:	2b06      	cmp	r3, #6
 801996c:	d104      	bne.n	8019978 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801996e:	88bb      	ldrh	r3, [r7, #4]
 8019970:	2b0b      	cmp	r3, #11
 8019972:	d801      	bhi.n	8019978 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019974:	230c      	movs	r3, #12
 8019976:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d105      	bne.n	801998a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	2b0b      	cmp	r3, #11
 8019982:	d008      	beq.n	8019996 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	2b0c      	cmp	r3, #12
 8019988:	d005      	beq.n	8019996 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	2b01      	cmp	r3, #1
 801998e:	d105      	bne.n	801999c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	2b0c      	cmp	r3, #12
 8019994:	d102      	bne.n	801999c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019996:	2301      	movs	r3, #1
 8019998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801999c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80199a0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80199a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80199a6:	2a00      	cmp	r2, #0
 80199a8:	d001      	beq.n	80199ae <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80199aa:	2210      	movs	r2, #16
 80199ac:	e000      	b.n	80199b0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80199ae:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80199b0:	4413      	add	r3, r2
 80199b2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80199b8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80199ba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80199be:	2a00      	cmp	r2, #0
 80199c0:	d001      	beq.n	80199c6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80199c2:	2200      	movs	r2, #0
 80199c4:	e000      	b.n	80199c8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80199c6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80199c8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80199ca:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	2b06      	cmp	r3, #6
 80199d0:	d803      	bhi.n	80199da <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80199d2:	68bb      	ldr	r3, [r7, #8]
 80199d4:	009b      	lsls	r3, r3, #2
 80199d6:	623b      	str	r3, [r7, #32]
 80199d8:	e00e      	b.n	80199f8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80199da:	69fb      	ldr	r3, [r7, #28]
 80199dc:	3308      	adds	r3, #8
 80199de:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80199e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d004      	beq.n	80199f2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	3b02      	subs	r3, #2
 80199ec:	009b      	lsls	r3, r3, #2
 80199ee:	623b      	str	r3, [r7, #32]
 80199f0:	e002      	b.n	80199f8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80199f2:	68bb      	ldr	r3, [r7, #8]
 80199f4:	009b      	lsls	r3, r3, #2
 80199f6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80199f8:	69fb      	ldr	r3, [r7, #28]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	da01      	bge.n	8019a02 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80199fe:	2300      	movs	r3, #0
 8019a00:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8019a02:	69fa      	ldr	r2, [r7, #28]
 8019a04:	6a3b      	ldr	r3, [r7, #32]
 8019a06:	4413      	add	r3, r2
 8019a08:	1e5a      	subs	r2, r3, #1
 8019a0a:	6a3b      	ldr	r3, [r7, #32]
 8019a0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a10:	697a      	ldr	r2, [r7, #20]
 8019a12:	fb03 f202 	mul.w	r2, r3, r2
 8019a16:	88bb      	ldrh	r3, [r7, #4]
 8019a18:	4413      	add	r3, r2
    int32_t intermediate =
 8019a1a:	330c      	adds	r3, #12
 8019a1c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	2b06      	cmp	r3, #6
 8019a22:	d802      	bhi.n	8019a2a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8019a24:	69bb      	ldr	r3, [r7, #24]
 8019a26:	3302      	adds	r3, #2
 8019a28:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	1c5a      	adds	r2, r3, #1
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	3b02      	subs	r3, #2
 8019a34:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	372c      	adds	r7, #44	; 0x2c
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bc80      	pop	{r7}
 8019a40:	4770      	bx	lr
	...

08019a44 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b08a      	sub	sp, #40	; 0x28
 8019a48:	af04      	add	r7, sp, #16
 8019a4a:	60b9      	str	r1, [r7, #8]
 8019a4c:	607a      	str	r2, [r7, #4]
 8019a4e:	461a      	mov	r2, r3
 8019a50:	4603      	mov	r3, r0
 8019a52:	73fb      	strb	r3, [r7, #15]
 8019a54:	4613      	mov	r3, r2
 8019a56:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019a58:	2300      	movs	r3, #0
 8019a5a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019a60:	7bfb      	ldrb	r3, [r7, #15]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d002      	beq.n	8019a6c <RadioTimeOnAir+0x28>
 8019a66:	2b01      	cmp	r3, #1
 8019a68:	d017      	beq.n	8019a9a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019a6a:	e035      	b.n	8019ad8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019a6c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019a70:	8c3a      	ldrh	r2, [r7, #32]
 8019a72:	7bb9      	ldrb	r1, [r7, #14]
 8019a74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019a78:	9301      	str	r3, [sp, #4]
 8019a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019a7e:	9300      	str	r3, [sp, #0]
 8019a80:	4603      	mov	r3, r0
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f7ff ff32 	bl	80198ec <RadioGetGfskTimeOnAirNumerator>
 8019a88:	4603      	mov	r3, r0
 8019a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a8e:	fb02 f303 	mul.w	r3, r2, r3
 8019a92:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	613b      	str	r3, [r7, #16]
        break;
 8019a98:	e01e      	b.n	8019ad8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019a9a:	8c39      	ldrh	r1, [r7, #32]
 8019a9c:	7bba      	ldrb	r2, [r7, #14]
 8019a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019aa2:	9302      	str	r3, [sp, #8]
 8019aa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019aa8:	9301      	str	r3, [sp, #4]
 8019aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	460b      	mov	r3, r1
 8019ab2:	6879      	ldr	r1, [r7, #4]
 8019ab4:	68b8      	ldr	r0, [r7, #8]
 8019ab6:	f7ff ff43 	bl	8019940 <RadioGetLoRaTimeOnAirNumerator>
 8019aba:	4603      	mov	r3, r0
 8019abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019ac0:	fb02 f303 	mul.w	r3, r2, r3
 8019ac4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019ac6:	4a0a      	ldr	r2, [pc, #40]	; (8019af0 <RadioTimeOnAir+0xac>)
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	4413      	add	r3, r2
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7ff feb6 	bl	8019840 <RadioGetLoRaBandwidthInHz>
 8019ad4:	6138      	str	r0, [r7, #16]
        break;
 8019ad6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8019ad8:	697a      	ldr	r2, [r7, #20]
 8019ada:	693b      	ldr	r3, [r7, #16]
 8019adc:	4413      	add	r3, r2
 8019ade:	1e5a      	subs	r2, r3, #1
 8019ae0:	693b      	ldr	r3, [r7, #16]
 8019ae2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	3718      	adds	r7, #24
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}
 8019aee:	bf00      	nop
 8019af0:	0801e6cc 	.word	0x0801e6cc

08019af4 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b084      	sub	sp, #16
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	460b      	mov	r3, r1
 8019afe:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8019b00:	2300      	movs	r3, #0
 8019b02:	2200      	movs	r2, #0
 8019b04:	f240 2101 	movw	r1, #513	; 0x201
 8019b08:	f240 2001 	movw	r0, #513	; 0x201
 8019b0c:	f001 fc4c 	bl	801b3a8 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8019b10:	4b70      	ldr	r3, [pc, #448]	; (8019cd4 <RadioSend+0x1e0>)
 8019b12:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019b16:	2101      	movs	r1, #1
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f002 f881 	bl	801bc20 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8019b1e:	4b6d      	ldr	r3, [pc, #436]	; (8019cd4 <RadioSend+0x1e0>)
 8019b20:	781b      	ldrb	r3, [r3, #0]
 8019b22:	2b01      	cmp	r3, #1
 8019b24:	d112      	bne.n	8019b4c <RadioSend+0x58>
 8019b26:	4b6b      	ldr	r3, [pc, #428]	; (8019cd4 <RadioSend+0x1e0>)
 8019b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b2c:	2b06      	cmp	r3, #6
 8019b2e:	d10d      	bne.n	8019b4c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8019b30:	f640 0089 	movw	r0, #2185	; 0x889
 8019b34:	f001 ff94 	bl	801ba60 <SUBGRF_ReadRegister>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	f023 0304 	bic.w	r3, r3, #4
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	4619      	mov	r1, r3
 8019b42:	f640 0089 	movw	r0, #2185	; 0x889
 8019b46:	f001 ff77 	bl	801ba38 <SUBGRF_WriteRegister>
 8019b4a:	e00c      	b.n	8019b66 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8019b4c:	f640 0089 	movw	r0, #2185	; 0x889
 8019b50:	f001 ff86 	bl	801ba60 <SUBGRF_ReadRegister>
 8019b54:	4603      	mov	r3, r0
 8019b56:	f043 0304 	orr.w	r3, r3, #4
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	4619      	mov	r1, r3
 8019b5e:	f640 0089 	movw	r0, #2185	; 0x889
 8019b62:	f001 ff69 	bl	801ba38 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8019b66:	4b5b      	ldr	r3, [pc, #364]	; (8019cd4 <RadioSend+0x1e0>)
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2b03      	cmp	r3, #3
 8019b6c:	f200 80a5 	bhi.w	8019cba <RadioSend+0x1c6>
 8019b70:	a201      	add	r2, pc, #4	; (adr r2, 8019b78 <RadioSend+0x84>)
 8019b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b76:	bf00      	nop
 8019b78:	08019ba3 	.word	0x08019ba3
 8019b7c:	08019b89 	.word	0x08019b89
 8019b80:	08019c03 	.word	0x08019c03
 8019b84:	08019c23 	.word	0x08019c23
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019b88:	4a52      	ldr	r2, [pc, #328]	; (8019cd4 <RadioSend+0x1e0>)
 8019b8a:	78fb      	ldrb	r3, [r7, #3]
 8019b8c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b8e:	4852      	ldr	r0, [pc, #328]	; (8019cd8 <RadioSend+0x1e4>)
 8019b90:	f001 fe0a 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019b94:	78fb      	ldrb	r3, [r7, #3]
 8019b96:	2200      	movs	r2, #0
 8019b98:	4619      	mov	r1, r3
 8019b9a:	6878      	ldr	r0, [r7, #4]
 8019b9c:	f001 f926 	bl	801adec <SUBGRF_SendPayload>
            break;
 8019ba0:	e08c      	b.n	8019cbc <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019ba2:	f002 fa26 	bl	801bff2 <RFW_Is_Init>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d11d      	bne.n	8019be8 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019bac:	f107 020d 	add.w	r2, r7, #13
 8019bb0:	78fb      	ldrb	r3, [r7, #3]
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f002 fa34 	bl	801c022 <RFW_TransmitInit>
 8019bba:	4603      	mov	r3, r0
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d10c      	bne.n	8019bda <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019bc0:	7b7a      	ldrb	r2, [r7, #13]
 8019bc2:	4b44      	ldr	r3, [pc, #272]	; (8019cd4 <RadioSend+0x1e0>)
 8019bc4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bc6:	4844      	ldr	r0, [pc, #272]	; (8019cd8 <RadioSend+0x1e4>)
 8019bc8:	f001 fdee 	bl	801b7a8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019bcc:	7b7b      	ldrb	r3, [r7, #13]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	f001 f90a 	bl	801adec <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019bd8:	e070      	b.n	8019cbc <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8019bda:	4b40      	ldr	r3, [pc, #256]	; (8019cdc <RadioSend+0x1e8>)
 8019bdc:	2201      	movs	r2, #1
 8019bde:	2100      	movs	r1, #0
 8019be0:	2002      	movs	r0, #2
 8019be2:	f002 fa7b 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
 8019be6:	e072      	b.n	8019cce <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019be8:	4a3a      	ldr	r2, [pc, #232]	; (8019cd4 <RadioSend+0x1e0>)
 8019bea:	78fb      	ldrb	r3, [r7, #3]
 8019bec:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bee:	483a      	ldr	r0, [pc, #232]	; (8019cd8 <RadioSend+0x1e4>)
 8019bf0:	f001 fdda 	bl	801b7a8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8019bf4:	78fb      	ldrb	r3, [r7, #3]
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	4619      	mov	r1, r3
 8019bfa:	6878      	ldr	r0, [r7, #4]
 8019bfc:	f001 f8f6 	bl	801adec <SUBGRF_SendPayload>
            break;
 8019c00:	e05c      	b.n	8019cbc <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c02:	4b34      	ldr	r3, [pc, #208]	; (8019cd4 <RadioSend+0x1e0>)
 8019c04:	2202      	movs	r2, #2
 8019c06:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019c08:	4a32      	ldr	r2, [pc, #200]	; (8019cd4 <RadioSend+0x1e0>)
 8019c0a:	78fb      	ldrb	r3, [r7, #3]
 8019c0c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c0e:	4832      	ldr	r0, [pc, #200]	; (8019cd8 <RadioSend+0x1e4>)
 8019c10:	f001 fdca 	bl	801b7a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019c14:	78fb      	ldrb	r3, [r7, #3]
 8019c16:	2200      	movs	r2, #0
 8019c18:	4619      	mov	r1, r3
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f001 f8e6 	bl	801adec <SUBGRF_SendPayload>
            break;
 8019c20:	e04c      	b.n	8019cbc <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019c22:	78fb      	ldrb	r3, [r7, #3]
 8019c24:	461a      	mov	r2, r3
 8019c26:	6879      	ldr	r1, [r7, #4]
 8019c28:	482d      	ldr	r0, [pc, #180]	; (8019ce0 <RadioSend+0x1ec>)
 8019c2a:	f000 fc66 	bl	801a4fa <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019c2e:	4b29      	ldr	r3, [pc, #164]	; (8019cd4 <RadioSend+0x1e0>)
 8019c30:	2202      	movs	r2, #2
 8019c32:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019c34:	78fb      	ldrb	r3, [r7, #3]
 8019c36:	3301      	adds	r3, #1
 8019c38:	b2da      	uxtb	r2, r3
 8019c3a:	4b26      	ldr	r3, [pc, #152]	; (8019cd4 <RadioSend+0x1e0>)
 8019c3c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c3e:	4826      	ldr	r0, [pc, #152]	; (8019cd8 <RadioSend+0x1e4>)
 8019c40:	f001 fdb2 	bl	801b7a8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8019c44:	2100      	movs	r1, #0
 8019c46:	20f1      	movs	r0, #241	; 0xf1
 8019c48:	f000 f947 	bl	8019eda <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	20f0      	movs	r0, #240	; 0xf0
 8019c50:	f000 f943 	bl	8019eda <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019c54:	4b1f      	ldr	r3, [pc, #124]	; (8019cd4 <RadioSend+0x1e0>)
 8019c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c58:	2b64      	cmp	r3, #100	; 0x64
 8019c5a:	d108      	bne.n	8019c6e <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8019c5c:	2170      	movs	r1, #112	; 0x70
 8019c5e:	20f3      	movs	r0, #243	; 0xf3
 8019c60:	f000 f93b 	bl	8019eda <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8019c64:	211d      	movs	r1, #29
 8019c66:	20f2      	movs	r0, #242	; 0xf2
 8019c68:	f000 f937 	bl	8019eda <RadioWrite>
 8019c6c:	e007      	b.n	8019c7e <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8019c6e:	21e1      	movs	r1, #225	; 0xe1
 8019c70:	20f3      	movs	r0, #243	; 0xf3
 8019c72:	f000 f932 	bl	8019eda <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8019c76:	2104      	movs	r1, #4
 8019c78:	20f2      	movs	r0, #242	; 0xf2
 8019c7a:	f000 f92e 	bl	8019eda <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019c7e:	78fb      	ldrb	r3, [r7, #3]
 8019c80:	b29b      	uxth	r3, r3
 8019c82:	00db      	lsls	r3, r3, #3
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	3302      	adds	r3, #2
 8019c88:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019c8a:	89fb      	ldrh	r3, [r7, #14]
 8019c8c:	0a1b      	lsrs	r3, r3, #8
 8019c8e:	b29b      	uxth	r3, r3
 8019c90:	b2db      	uxtb	r3, r3
 8019c92:	4619      	mov	r1, r3
 8019c94:	20f4      	movs	r0, #244	; 0xf4
 8019c96:	f000 f920 	bl	8019eda <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8019c9a:	89fb      	ldrh	r3, [r7, #14]
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	20f5      	movs	r0, #245	; 0xf5
 8019ca2:	f000 f91a 	bl	8019eda <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019ca6:	78fb      	ldrb	r3, [r7, #3]
 8019ca8:	3301      	adds	r3, #1
 8019caa:	b2db      	uxtb	r3, r3
 8019cac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019cb0:	4619      	mov	r1, r3
 8019cb2:	480b      	ldr	r0, [pc, #44]	; (8019ce0 <RadioSend+0x1ec>)
 8019cb4:	f001 f89a 	bl	801adec <SUBGRF_SendPayload>
            break;
 8019cb8:	e000      	b.n	8019cbc <RadioSend+0x1c8>
        }
        default:
            break;
 8019cba:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019cbc:	4b05      	ldr	r3, [pc, #20]	; (8019cd4 <RadioSend+0x1e0>)
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	4619      	mov	r1, r3
 8019cc2:	4808      	ldr	r0, [pc, #32]	; (8019ce4 <RadioSend+0x1f0>)
 8019cc4:	f003 f95a 	bl	801cf7c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019cc8:	4806      	ldr	r0, [pc, #24]	; (8019ce4 <RadioSend+0x1f0>)
 8019cca:	f003 f879 	bl	801cdc0 <UTIL_TIMER_Start>
}
 8019cce:	3710      	adds	r7, #16
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	20003d94 	.word	0x20003d94
 8019cd8:	20003da2 	.word	0x20003da2
 8019cdc:	0801e070 	.word	0x0801e070
 8019ce0:	20003c90 	.word	0x20003c90
 8019ce4:	20003dec 	.word	0x20003dec

08019ce8 <RadioSleep>:

static void RadioSleep( void )
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b082      	sub	sp, #8
 8019cec:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019cee:	2300      	movs	r3, #0
 8019cf0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019cf2:	793b      	ldrb	r3, [r7, #4]
 8019cf4:	f043 0304 	orr.w	r3, r3, #4
 8019cf8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019cfa:	7938      	ldrb	r0, [r7, #4]
 8019cfc:	f001 f952 	bl	801afa4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019d00:	2002      	movs	r0, #2
 8019d02:	f7e7 ff68 	bl	8001bd6 <HAL_Delay>
}
 8019d06:	bf00      	nop
 8019d08:	3708      	adds	r7, #8
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}

08019d0e <RadioStandby>:

static void RadioStandby( void )
{
 8019d0e:	b580      	push	{r7, lr}
 8019d10:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019d12:	2000      	movs	r0, #0
 8019d14:	f001 f978 	bl	801b008 <SUBGRF_SetStandby>
}
 8019d18:	bf00      	nop
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8019d24:	f002 f965 	bl	801bff2 <RFW_Is_Init>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	2b01      	cmp	r3, #1
 8019d2c:	d102      	bne.n	8019d34 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8019d2e:	f002 f988 	bl	801c042 <RFW_ReceiveInit>
 8019d32:	e007      	b.n	8019d44 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019d34:	2300      	movs	r3, #0
 8019d36:	2200      	movs	r2, #0
 8019d38:	f240 2162 	movw	r1, #610	; 0x262
 8019d3c:	f240 2062 	movw	r0, #610	; 0x262
 8019d40:	f001 fb32 	bl	801b3a8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d006      	beq.n	8019d58 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019d4a:	6879      	ldr	r1, [r7, #4]
 8019d4c:	480f      	ldr	r0, [pc, #60]	; (8019d8c <RadioRx+0x70>)
 8019d4e:	f003 f915 	bl	801cf7c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019d52:	480e      	ldr	r0, [pc, #56]	; (8019d8c <RadioRx+0x70>)
 8019d54:	f003 f834 	bl	801cdc0 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019d58:	4b0d      	ldr	r3, [pc, #52]	; (8019d90 <RadioRx+0x74>)
 8019d5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019d5e:	2100      	movs	r1, #0
 8019d60:	4618      	mov	r0, r3
 8019d62:	f001 ff5d 	bl	801bc20 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019d66:	4b0a      	ldr	r3, [pc, #40]	; (8019d90 <RadioRx+0x74>)
 8019d68:	785b      	ldrb	r3, [r3, #1]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d004      	beq.n	8019d78 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019d6e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019d72:	f001 f985 	bl	801b080 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019d76:	e005      	b.n	8019d84 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019d78:	4b05      	ldr	r3, [pc, #20]	; (8019d90 <RadioRx+0x74>)
 8019d7a:	689b      	ldr	r3, [r3, #8]
 8019d7c:	019b      	lsls	r3, r3, #6
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f001 f97e 	bl	801b080 <SUBGRF_SetRx>
}
 8019d84:	bf00      	nop
 8019d86:	3708      	adds	r7, #8
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bd80      	pop	{r7, pc}
 8019d8c:	20003e04 	.word	0x20003e04
 8019d90:	20003d94 	.word	0x20003d94

08019d94 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b082      	sub	sp, #8
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8019d9c:	f002 f929 	bl	801bff2 <RFW_Is_Init>
 8019da0:	4603      	mov	r3, r0
 8019da2:	2b01      	cmp	r3, #1
 8019da4:	d102      	bne.n	8019dac <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8019da6:	f002 f94c 	bl	801c042 <RFW_ReceiveInit>
 8019daa:	e007      	b.n	8019dbc <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019dac:	2300      	movs	r3, #0
 8019dae:	2200      	movs	r2, #0
 8019db0:	f240 2162 	movw	r1, #610	; 0x262
 8019db4:	f240 2062 	movw	r0, #610	; 0x262
 8019db8:	f001 faf6 	bl	801b3a8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d006      	beq.n	8019dd0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019dc2:	6879      	ldr	r1, [r7, #4]
 8019dc4:	480f      	ldr	r0, [pc, #60]	; (8019e04 <RadioRxBoosted+0x70>)
 8019dc6:	f003 f8d9 	bl	801cf7c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019dca:	480e      	ldr	r0, [pc, #56]	; (8019e04 <RadioRxBoosted+0x70>)
 8019dcc:	f002 fff8 	bl	801cdc0 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019dd0:	4b0d      	ldr	r3, [pc, #52]	; (8019e08 <RadioRxBoosted+0x74>)
 8019dd2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019dd6:	2100      	movs	r1, #0
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f001 ff21 	bl	801bc20 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019dde:	4b0a      	ldr	r3, [pc, #40]	; (8019e08 <RadioRxBoosted+0x74>)
 8019de0:	785b      	ldrb	r3, [r3, #1]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d004      	beq.n	8019df0 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019de6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019dea:	f001 f969 	bl	801b0c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019dee:	e005      	b.n	8019dfc <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019df0:	4b05      	ldr	r3, [pc, #20]	; (8019e08 <RadioRxBoosted+0x74>)
 8019df2:	689b      	ldr	r3, [r3, #8]
 8019df4:	019b      	lsls	r3, r3, #6
 8019df6:	4618      	mov	r0, r3
 8019df8:	f001 f962 	bl	801b0c0 <SUBGRF_SetRxBoosted>
}
 8019dfc:	bf00      	nop
 8019dfe:	3708      	adds	r7, #8
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd80      	pop	{r7, pc}
 8019e04:	20003e04 	.word	0x20003e04
 8019e08:	20003d94 	.word	0x20003d94

08019e0c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b082      	sub	sp, #8
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019e16:	4b07      	ldr	r3, [pc, #28]	; (8019e34 <RadioSetRxDutyCycle+0x28>)
 8019e18:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e1c:	2100      	movs	r1, #0
 8019e1e:	4618      	mov	r0, r3
 8019e20:	f001 fefe 	bl	801bc20 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019e24:	6839      	ldr	r1, [r7, #0]
 8019e26:	6878      	ldr	r0, [r7, #4]
 8019e28:	f001 f96e 	bl	801b108 <SUBGRF_SetRxDutyCycle>
}
 8019e2c:	bf00      	nop
 8019e2e:	3708      	adds	r7, #8
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}
 8019e34:	20003d94 	.word	0x20003d94

08019e38 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019e3c:	4b09      	ldr	r3, [pc, #36]	; (8019e64 <RadioStartCad+0x2c>)
 8019e3e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e42:	2100      	movs	r1, #0
 8019e44:	4618      	mov	r0, r3
 8019e46:	f001 feeb 	bl	801bc20 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019e52:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019e56:	f001 faa7 	bl	801b3a8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019e5a:	f001 f981 	bl	801b160 <SUBGRF_SetCad>
}
 8019e5e:	bf00      	nop
 8019e60:	bd80      	pop	{r7, pc}
 8019e62:	bf00      	nop
 8019e64:	20003d94 	.word	0x20003d94

08019e68 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b084      	sub	sp, #16
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	460b      	mov	r3, r1
 8019e72:	70fb      	strb	r3, [r7, #3]
 8019e74:	4613      	mov	r3, r2
 8019e76:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019e78:	883b      	ldrh	r3, [r7, #0]
 8019e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019e7e:	fb02 f303 	mul.w	r3, r2, r3
 8019e82:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019e84:	6878      	ldr	r0, [r7, #4]
 8019e86:	f001 faeb 	bl	801b460 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f001 feee 	bl	801bc70 <SUBGRF_SetRfTxPower>
 8019e94:	4603      	mov	r3, r0
 8019e96:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8019e98:	7afb      	ldrb	r3, [r7, #11]
 8019e9a:	2101      	movs	r1, #1
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f001 febf 	bl	801bc20 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019ea2:	f001 f96b 	bl	801b17c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019ea6:	68f9      	ldr	r1, [r7, #12]
 8019ea8:	4804      	ldr	r0, [pc, #16]	; (8019ebc <RadioSetTxContinuousWave+0x54>)
 8019eaa:	f003 f867 	bl	801cf7c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019eae:	4803      	ldr	r0, [pc, #12]	; (8019ebc <RadioSetTxContinuousWave+0x54>)
 8019eb0:	f002 ff86 	bl	801cdc0 <UTIL_TIMER_Start>
}
 8019eb4:	bf00      	nop
 8019eb6:	3710      	adds	r7, #16
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	20003dec 	.word	0x20003dec

08019ec0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b082      	sub	sp, #8
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019eca:	f001 fd22 	bl	801b912 <SUBGRF_GetRssiInst>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	b21b      	sxth	r3, r3
}
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}

08019eda <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019eda:	b580      	push	{r7, lr}
 8019edc:	b082      	sub	sp, #8
 8019ede:	af00      	add	r7, sp, #0
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	460a      	mov	r2, r1
 8019ee4:	80fb      	strh	r3, [r7, #6]
 8019ee6:	4613      	mov	r3, r2
 8019ee8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8019eea:	797a      	ldrb	r2, [r7, #5]
 8019eec:	88fb      	ldrh	r3, [r7, #6]
 8019eee:	4611      	mov	r1, r2
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f001 fda1 	bl	801ba38 <SUBGRF_WriteRegister>
}
 8019ef6:	bf00      	nop
 8019ef8:	3708      	adds	r7, #8
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}

08019efe <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019efe:	b580      	push	{r7, lr}
 8019f00:	b082      	sub	sp, #8
 8019f02:	af00      	add	r7, sp, #0
 8019f04:	4603      	mov	r3, r0
 8019f06:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8019f08:	88fb      	ldrh	r3, [r7, #6]
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f001 fda8 	bl	801ba60 <SUBGRF_ReadRegister>
 8019f10:	4603      	mov	r3, r0
}
 8019f12:	4618      	mov	r0, r3
 8019f14:	3708      	adds	r7, #8
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd80      	pop	{r7, pc}

08019f1a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019f1a:	b580      	push	{r7, lr}
 8019f1c:	b082      	sub	sp, #8
 8019f1e:	af00      	add	r7, sp, #0
 8019f20:	4603      	mov	r3, r0
 8019f22:	6039      	str	r1, [r7, #0]
 8019f24:	80fb      	strh	r3, [r7, #6]
 8019f26:	4613      	mov	r3, r2
 8019f28:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019f2a:	797b      	ldrb	r3, [r7, #5]
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	88fb      	ldrh	r3, [r7, #6]
 8019f30:	6839      	ldr	r1, [r7, #0]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f001 fda8 	bl	801ba88 <SUBGRF_WriteRegisters>
}
 8019f38:	bf00      	nop
 8019f3a:	3708      	adds	r7, #8
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}

08019f40 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b082      	sub	sp, #8
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	4603      	mov	r3, r0
 8019f48:	6039      	str	r1, [r7, #0]
 8019f4a:	80fb      	strh	r3, [r7, #6]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019f50:	797b      	ldrb	r3, [r7, #5]
 8019f52:	b29a      	uxth	r2, r3
 8019f54:	88fb      	ldrh	r3, [r7, #6]
 8019f56:	6839      	ldr	r1, [r7, #0]
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f001 fdb7 	bl	801bacc <SUBGRF_ReadRegisters>
}
 8019f5e:	bf00      	nop
 8019f60:	3708      	adds	r7, #8
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}
	...

08019f68 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b082      	sub	sp, #8
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	4603      	mov	r3, r0
 8019f70:	460a      	mov	r2, r1
 8019f72:	71fb      	strb	r3, [r7, #7]
 8019f74:	4613      	mov	r3, r2
 8019f76:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019f78:	79fb      	ldrb	r3, [r7, #7]
 8019f7a:	2b01      	cmp	r3, #1
 8019f7c:	d10a      	bne.n	8019f94 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019f7e:	4a0e      	ldr	r2, [pc, #56]	; (8019fb8 <RadioSetMaxPayloadLength+0x50>)
 8019f80:	79bb      	ldrb	r3, [r7, #6]
 8019f82:	7013      	strb	r3, [r2, #0]
 8019f84:	4b0c      	ldr	r3, [pc, #48]	; (8019fb8 <RadioSetMaxPayloadLength+0x50>)
 8019f86:	781a      	ldrb	r2, [r3, #0]
 8019f88:	4b0c      	ldr	r3, [pc, #48]	; (8019fbc <RadioSetMaxPayloadLength+0x54>)
 8019f8a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f8c:	480c      	ldr	r0, [pc, #48]	; (8019fc0 <RadioSetMaxPayloadLength+0x58>)
 8019f8e:	f001 fc0b 	bl	801b7a8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019f92:	e00d      	b.n	8019fb0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019f94:	4b09      	ldr	r3, [pc, #36]	; (8019fbc <RadioSetMaxPayloadLength+0x54>)
 8019f96:	7d5b      	ldrb	r3, [r3, #21]
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d109      	bne.n	8019fb0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019f9c:	4a06      	ldr	r2, [pc, #24]	; (8019fb8 <RadioSetMaxPayloadLength+0x50>)
 8019f9e:	79bb      	ldrb	r3, [r7, #6]
 8019fa0:	7013      	strb	r3, [r2, #0]
 8019fa2:	4b05      	ldr	r3, [pc, #20]	; (8019fb8 <RadioSetMaxPayloadLength+0x50>)
 8019fa4:	781a      	ldrb	r2, [r3, #0]
 8019fa6:	4b05      	ldr	r3, [pc, #20]	; (8019fbc <RadioSetMaxPayloadLength+0x54>)
 8019fa8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019faa:	4805      	ldr	r0, [pc, #20]	; (8019fc0 <RadioSetMaxPayloadLength+0x58>)
 8019fac:	f001 fbfc 	bl	801b7a8 <SUBGRF_SetPacketParams>
}
 8019fb0:	bf00      	nop
 8019fb2:	3708      	adds	r7, #8
 8019fb4:	46bd      	mov	sp, r7
 8019fb6:	bd80      	pop	{r7, pc}
 8019fb8:	20000104 	.word	0x20000104
 8019fbc:	20003d94 	.word	0x20003d94
 8019fc0:	20003da2 	.word	0x20003da2

08019fc4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	4603      	mov	r3, r0
 8019fcc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019fce:	4a13      	ldr	r2, [pc, #76]	; (801a01c <RadioSetPublicNetwork+0x58>)
 8019fd0:	79fb      	ldrb	r3, [r7, #7]
 8019fd2:	7313      	strb	r3, [r2, #12]
 8019fd4:	4b11      	ldr	r3, [pc, #68]	; (801a01c <RadioSetPublicNetwork+0x58>)
 8019fd6:	7b1a      	ldrb	r2, [r3, #12]
 8019fd8:	4b10      	ldr	r3, [pc, #64]	; (801a01c <RadioSetPublicNetwork+0x58>)
 8019fda:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019fdc:	2001      	movs	r0, #1
 8019fde:	f7ff f82b 	bl	8019038 <RadioSetModem>
    if( enable == true )
 8019fe2:	79fb      	ldrb	r3, [r7, #7]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d00a      	beq.n	8019ffe <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019fe8:	2134      	movs	r1, #52	; 0x34
 8019fea:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019fee:	f001 fd23 	bl	801ba38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019ff2:	2144      	movs	r1, #68	; 0x44
 8019ff4:	f240 7041 	movw	r0, #1857	; 0x741
 8019ff8:	f001 fd1e 	bl	801ba38 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019ffc:	e009      	b.n	801a012 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019ffe:	2114      	movs	r1, #20
 801a000:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a004:	f001 fd18 	bl	801ba38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a008:	2124      	movs	r1, #36	; 0x24
 801a00a:	f240 7041 	movw	r0, #1857	; 0x741
 801a00e:	f001 fd13 	bl	801ba38 <SUBGRF_WriteRegister>
}
 801a012:	bf00      	nop
 801a014:	3708      	adds	r7, #8
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}
 801a01a:	bf00      	nop
 801a01c:	20003d94 	.word	0x20003d94

0801a020 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a020:	b580      	push	{r7, lr}
 801a022:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a024:	f001 fe58 	bl	801bcd8 <SUBGRF_GetRadioWakeUpTime>
 801a028:	4603      	mov	r3, r0
 801a02a:	3303      	adds	r3, #3
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	bd80      	pop	{r7, pc}

0801a030 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a038:	f000 f80e 	bl	801a058 <RadioOnTxTimeoutProcess>
}
 801a03c:	bf00      	nop
 801a03e:	3708      	adds	r7, #8
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}

0801a044 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a04c:	f000 f818 	bl	801a080 <RadioOnRxTimeoutProcess>
}
 801a050:	bf00      	nop
 801a052:	3708      	adds	r7, #8
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}

0801a058 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a05c:	4b07      	ldr	r3, [pc, #28]	; (801a07c <RadioOnTxTimeoutProcess+0x24>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d008      	beq.n	801a076 <RadioOnTxTimeoutProcess+0x1e>
 801a064:	4b05      	ldr	r3, [pc, #20]	; (801a07c <RadioOnTxTimeoutProcess+0x24>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d003      	beq.n	801a076 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a06e:	4b03      	ldr	r3, [pc, #12]	; (801a07c <RadioOnTxTimeoutProcess+0x24>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	685b      	ldr	r3, [r3, #4]
 801a074:	4798      	blx	r3
    }
}
 801a076:	bf00      	nop
 801a078:	bd80      	pop	{r7, pc}
 801a07a:	bf00      	nop
 801a07c:	20003d90 	.word	0x20003d90

0801a080 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a080:	b580      	push	{r7, lr}
 801a082:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a084:	4b07      	ldr	r3, [pc, #28]	; (801a0a4 <RadioOnRxTimeoutProcess+0x24>)
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d008      	beq.n	801a09e <RadioOnRxTimeoutProcess+0x1e>
 801a08c:	4b05      	ldr	r3, [pc, #20]	; (801a0a4 <RadioOnRxTimeoutProcess+0x24>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	68db      	ldr	r3, [r3, #12]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d003      	beq.n	801a09e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a096:	4b03      	ldr	r3, [pc, #12]	; (801a0a4 <RadioOnRxTimeoutProcess+0x24>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	68db      	ldr	r3, [r3, #12]
 801a09c:	4798      	blx	r3
    }
}
 801a09e:	bf00      	nop
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	20003d90 	.word	0x20003d90

0801a0a8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b082      	sub	sp, #8
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a0b2:	4a05      	ldr	r2, [pc, #20]	; (801a0c8 <RadioOnDioIrq+0x20>)
 801a0b4:	88fb      	ldrh	r3, [r7, #6]
 801a0b6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a0ba:	f000 f807 	bl	801a0cc <RadioIrqProcess>
}
 801a0be:	bf00      	nop
 801a0c0:	3708      	adds	r7, #8
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	bf00      	nop
 801a0c8:	20003d94 	.word	0x20003d94

0801a0cc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a0cc:	b590      	push	{r4, r7, lr}
 801a0ce:	b083      	sub	sp, #12
 801a0d0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801a0da:	4bb5      	ldr	r3, [pc, #724]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a0dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0e4:	f000 810c 	beq.w	801a300 <RadioIrqProcess+0x234>
 801a0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0ec:	f300 81b5 	bgt.w	801a45a <RadioIrqProcess+0x38e>
 801a0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0f4:	f000 80f0 	beq.w	801a2d8 <RadioIrqProcess+0x20c>
 801a0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0fc:	f300 81ad 	bgt.w	801a45a <RadioIrqProcess+0x38e>
 801a100:	2b80      	cmp	r3, #128	; 0x80
 801a102:	f000 80d5 	beq.w	801a2b0 <RadioIrqProcess+0x1e4>
 801a106:	2b80      	cmp	r3, #128	; 0x80
 801a108:	f300 81a7 	bgt.w	801a45a <RadioIrqProcess+0x38e>
 801a10c:	2b20      	cmp	r3, #32
 801a10e:	dc49      	bgt.n	801a1a4 <RadioIrqProcess+0xd8>
 801a110:	2b00      	cmp	r3, #0
 801a112:	f340 81a2 	ble.w	801a45a <RadioIrqProcess+0x38e>
 801a116:	3b01      	subs	r3, #1
 801a118:	2b1f      	cmp	r3, #31
 801a11a:	f200 819e 	bhi.w	801a45a <RadioIrqProcess+0x38e>
 801a11e:	a201      	add	r2, pc, #4	; (adr r2, 801a124 <RadioIrqProcess+0x58>)
 801a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a124:	0801a1ad 	.word	0x0801a1ad
 801a128:	0801a1e7 	.word	0x0801a1e7
 801a12c:	0801a45b 	.word	0x0801a45b
 801a130:	0801a379 	.word	0x0801a379
 801a134:	0801a45b 	.word	0x0801a45b
 801a138:	0801a45b 	.word	0x0801a45b
 801a13c:	0801a45b 	.word	0x0801a45b
 801a140:	0801a387 	.word	0x0801a387
 801a144:	0801a45b 	.word	0x0801a45b
 801a148:	0801a45b 	.word	0x0801a45b
 801a14c:	0801a45b 	.word	0x0801a45b
 801a150:	0801a45b 	.word	0x0801a45b
 801a154:	0801a45b 	.word	0x0801a45b
 801a158:	0801a45b 	.word	0x0801a45b
 801a15c:	0801a45b 	.word	0x0801a45b
 801a160:	0801a3a3 	.word	0x0801a3a3
 801a164:	0801a45b 	.word	0x0801a45b
 801a168:	0801a45b 	.word	0x0801a45b
 801a16c:	0801a45b 	.word	0x0801a45b
 801a170:	0801a45b 	.word	0x0801a45b
 801a174:	0801a45b 	.word	0x0801a45b
 801a178:	0801a45b 	.word	0x0801a45b
 801a17c:	0801a45b 	.word	0x0801a45b
 801a180:	0801a45b 	.word	0x0801a45b
 801a184:	0801a45b 	.word	0x0801a45b
 801a188:	0801a45b 	.word	0x0801a45b
 801a18c:	0801a45b 	.word	0x0801a45b
 801a190:	0801a45b 	.word	0x0801a45b
 801a194:	0801a45b 	.word	0x0801a45b
 801a198:	0801a45b 	.word	0x0801a45b
 801a19c:	0801a45b 	.word	0x0801a45b
 801a1a0:	0801a3dd 	.word	0x0801a3dd
 801a1a4:	2b40      	cmp	r3, #64	; 0x40
 801a1a6:	f000 813a 	beq.w	801a41e <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801a1aa:	e156      	b.n	801a45a <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 801a1ac:	4881      	ldr	r0, [pc, #516]	; (801a3b4 <RadioIrqProcess+0x2e8>)
 801a1ae:	f002 fe75 	bl	801ce9c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	f000 ff28 	bl	801b008 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801a1b8:	f001 ff22 	bl	801c000 <RFW_Is_LongPacketModeEnabled>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	2b01      	cmp	r3, #1
 801a1c0:	d101      	bne.n	801a1c6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a1c2:	f001 ff46 	bl	801c052 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a1c6:	4b7c      	ldr	r3, [pc, #496]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	f000 8147 	beq.w	801a45e <RadioIrqProcess+0x392>
 801a1d0:	4b79      	ldr	r3, [pc, #484]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	f000 8141 	beq.w	801a45e <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 801a1dc:	4b76      	ldr	r3, [pc, #472]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	4798      	blx	r3
        break;
 801a1e4:	e13b      	b.n	801a45e <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 801a1e6:	4875      	ldr	r0, [pc, #468]	; (801a3bc <RadioIrqProcess+0x2f0>)
 801a1e8:	f002 fe58 	bl	801ce9c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a1ec:	4b70      	ldr	r3, [pc, #448]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a1ee:	785b      	ldrb	r3, [r3, #1]
 801a1f0:	f083 0301 	eor.w	r3, r3, #1
 801a1f4:	b2db      	uxtb	r3, r3
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d014      	beq.n	801a224 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a1fa:	2000      	movs	r0, #0
 801a1fc:	f000 ff04 	bl	801b008 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801a200:	2100      	movs	r1, #0
 801a202:	f640 1002 	movw	r0, #2306	; 0x902
 801a206:	f001 fc17 	bl	801ba38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801a20a:	f640 1044 	movw	r0, #2372	; 0x944
 801a20e:	f001 fc27 	bl	801ba60 <SUBGRF_ReadRegister>
 801a212:	4603      	mov	r3, r0
 801a214:	f043 0302 	orr.w	r3, r3, #2
 801a218:	b2db      	uxtb	r3, r3
 801a21a:	4619      	mov	r1, r3
 801a21c:	f640 1044 	movw	r0, #2372	; 0x944
 801a220:	f001 fc0a 	bl	801ba38 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801a224:	1dfb      	adds	r3, r7, #7
 801a226:	22ff      	movs	r2, #255	; 0xff
 801a228:	4619      	mov	r1, r3
 801a22a:	4865      	ldr	r0, [pc, #404]	; (801a3c0 <RadioIrqProcess+0x2f4>)
 801a22c:	f000 fdbc 	bl	801ada8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801a230:	4864      	ldr	r0, [pc, #400]	; (801a3c4 <RadioIrqProcess+0x2f8>)
 801a232:	f001 fbaf 	bl	801b994 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a236:	4b60      	ldr	r3, [pc, #384]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d036      	beq.n	801a2ac <RadioIrqProcess+0x1e0>
 801a23e:	4b5e      	ldr	r3, [pc, #376]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	689b      	ldr	r3, [r3, #8]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d031      	beq.n	801a2ac <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 801a248:	4b59      	ldr	r3, [pc, #356]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a24a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a24e:	2b01      	cmp	r3, #1
 801a250:	d10e      	bne.n	801a270 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801a252:	4b59      	ldr	r3, [pc, #356]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	689c      	ldr	r4, [r3, #8]
 801a258:	79fb      	ldrb	r3, [r7, #7]
 801a25a:	b299      	uxth	r1, r3
 801a25c:	4b54      	ldr	r3, [pc, #336]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a25e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a262:	b21a      	sxth	r2, r3
 801a264:	4b52      	ldr	r3, [pc, #328]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a266:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a26a:	4855      	ldr	r0, [pc, #340]	; (801a3c0 <RadioIrqProcess+0x2f4>)
 801a26c:	47a0      	blx	r4
                break;
 801a26e:	e01e      	b.n	801a2ae <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a270:	4b4f      	ldr	r3, [pc, #316]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a274:	463a      	mov	r2, r7
 801a276:	4611      	mov	r1, r2
 801a278:	4618      	mov	r0, r3
 801a27a:	f001 fe0f 	bl	801be9c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801a27e:	4b4e      	ldr	r3, [pc, #312]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	689c      	ldr	r4, [r3, #8]
 801a284:	79fb      	ldrb	r3, [r7, #7]
 801a286:	b299      	uxth	r1, r3
 801a288:	4b49      	ldr	r3, [pc, #292]	; (801a3b0 <RadioIrqProcess+0x2e4>)
 801a28a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a28e:	b218      	sxth	r0, r3
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a296:	4a4c      	ldr	r2, [pc, #304]	; (801a3c8 <RadioIrqProcess+0x2fc>)
 801a298:	fb82 c203 	smull	ip, r2, r2, r3
 801a29c:	1192      	asrs	r2, r2, #6
 801a29e:	17db      	asrs	r3, r3, #31
 801a2a0:	1ad3      	subs	r3, r2, r3
 801a2a2:	b25b      	sxtb	r3, r3
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	4846      	ldr	r0, [pc, #280]	; (801a3c0 <RadioIrqProcess+0x2f4>)
 801a2a8:	47a0      	blx	r4
                break;
 801a2aa:	e000      	b.n	801a2ae <RadioIrqProcess+0x1e2>
        }
 801a2ac:	bf00      	nop
        break;
 801a2ae:	e0e3      	b.n	801a478 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 801a2b0:	2000      	movs	r0, #0
 801a2b2:	f000 fea9 	bl	801b008 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a2b6:	4b40      	ldr	r3, [pc, #256]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	f000 80d1 	beq.w	801a462 <RadioIrqProcess+0x396>
 801a2c0:	4b3d      	ldr	r3, [pc, #244]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	699b      	ldr	r3, [r3, #24]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f000 80cb 	beq.w	801a462 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 801a2cc:	4b3a      	ldr	r3, [pc, #232]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	699b      	ldr	r3, [r3, #24]
 801a2d2:	2000      	movs	r0, #0
 801a2d4:	4798      	blx	r3
        break;
 801a2d6:	e0c4      	b.n	801a462 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 801a2d8:	2000      	movs	r0, #0
 801a2da:	f000 fe95 	bl	801b008 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a2de:	4b36      	ldr	r3, [pc, #216]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	f000 80bf 	beq.w	801a466 <RadioIrqProcess+0x39a>
 801a2e8:	4b33      	ldr	r3, [pc, #204]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	699b      	ldr	r3, [r3, #24]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	f000 80b9 	beq.w	801a466 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 801a2f4:	4b30      	ldr	r3, [pc, #192]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	699b      	ldr	r3, [r3, #24]
 801a2fa:	2001      	movs	r0, #1
 801a2fc:	4798      	blx	r3
        break;
 801a2fe:	e0b2      	b.n	801a466 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a300:	4b32      	ldr	r3, [pc, #200]	; (801a3cc <RadioIrqProcess+0x300>)
 801a302:	2201      	movs	r2, #1
 801a304:	2100      	movs	r1, #0
 801a306:	2002      	movs	r0, #2
 801a308:	f001 fee8 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a30c:	f000 fd32 	bl	801ad74 <SUBGRF_GetOperatingMode>
 801a310:	4603      	mov	r3, r0
 801a312:	2b04      	cmp	r3, #4
 801a314:	d115      	bne.n	801a342 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801a316:	4827      	ldr	r0, [pc, #156]	; (801a3b4 <RadioIrqProcess+0x2e8>)
 801a318:	f002 fdc0 	bl	801ce9c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a31c:	2000      	movs	r0, #0
 801a31e:	f000 fe73 	bl	801b008 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a322:	4b25      	ldr	r3, [pc, #148]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	2b00      	cmp	r3, #0
 801a328:	f000 809f 	beq.w	801a46a <RadioIrqProcess+0x39e>
 801a32c:	4b22      	ldr	r3, [pc, #136]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	685b      	ldr	r3, [r3, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	f000 8099 	beq.w	801a46a <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 801a338:	4b1f      	ldr	r3, [pc, #124]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	685b      	ldr	r3, [r3, #4]
 801a33e:	4798      	blx	r3
        break;
 801a340:	e093      	b.n	801a46a <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a342:	f000 fd17 	bl	801ad74 <SUBGRF_GetOperatingMode>
 801a346:	4603      	mov	r3, r0
 801a348:	2b05      	cmp	r3, #5
 801a34a:	f040 808e 	bne.w	801a46a <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 801a34e:	481b      	ldr	r0, [pc, #108]	; (801a3bc <RadioIrqProcess+0x2f0>)
 801a350:	f002 fda4 	bl	801ce9c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a354:	2000      	movs	r0, #0
 801a356:	f000 fe57 	bl	801b008 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a35a:	4b17      	ldr	r3, [pc, #92]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	f000 8083 	beq.w	801a46a <RadioIrqProcess+0x39e>
 801a364:	4b14      	ldr	r3, [pc, #80]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	68db      	ldr	r3, [r3, #12]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d07d      	beq.n	801a46a <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 801a36e:	4b12      	ldr	r3, [pc, #72]	; (801a3b8 <RadioIrqProcess+0x2ec>)
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	68db      	ldr	r3, [r3, #12]
 801a374:	4798      	blx	r3
        break;
 801a376:	e078      	b.n	801a46a <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a378:	4b15      	ldr	r3, [pc, #84]	; (801a3d0 <RadioIrqProcess+0x304>)
 801a37a:	2201      	movs	r2, #1
 801a37c:	2100      	movs	r1, #0
 801a37e:	2002      	movs	r0, #2
 801a380:	f001 feac 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a384:	e078      	b.n	801a478 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a386:	4b13      	ldr	r3, [pc, #76]	; (801a3d4 <RadioIrqProcess+0x308>)
 801a388:	2201      	movs	r2, #1
 801a38a:	2100      	movs	r1, #0
 801a38c:	2002      	movs	r0, #2
 801a38e:	f001 fea5 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801a392:	f001 fe2e 	bl	801bff2 <RFW_Is_Init>
 801a396:	4603      	mov	r3, r0
 801a398:	2b01      	cmp	r3, #1
 801a39a:	d168      	bne.n	801a46e <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 801a39c:	f001 fe5f 	bl	801c05e <RFW_ReceivePayload>
        break;
 801a3a0:	e065      	b.n	801a46e <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a3a2:	4b0d      	ldr	r3, [pc, #52]	; (801a3d8 <RadioIrqProcess+0x30c>)
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	2100      	movs	r1, #0
 801a3a8:	2002      	movs	r0, #2
 801a3aa:	f001 fe97 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a3ae:	e063      	b.n	801a478 <RadioIrqProcess+0x3ac>
 801a3b0:	20003d94 	.word	0x20003d94
 801a3b4:	20003dec 	.word	0x20003dec
 801a3b8:	20003d90 	.word	0x20003d90
 801a3bc:	20003e04 	.word	0x20003e04
 801a3c0:	20003c90 	.word	0x20003c90
 801a3c4:	20003db8 	.word	0x20003db8
 801a3c8:	10624dd3 	.word	0x10624dd3
 801a3cc:	0801e088 	.word	0x0801e088
 801a3d0:	0801e09c 	.word	0x0801e09c
 801a3d4:	0801e0a8 	.word	0x0801e0a8
 801a3d8:	0801e0b4 	.word	0x0801e0b4
        TimerStop( &RxTimeoutTimer );
 801a3dc:	4828      	ldr	r0, [pc, #160]	; (801a480 <RadioIrqProcess+0x3b4>)
 801a3de:	f002 fd5d 	bl	801ce9c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a3e2:	4b28      	ldr	r3, [pc, #160]	; (801a484 <RadioIrqProcess+0x3b8>)
 801a3e4:	785b      	ldrb	r3, [r3, #1]
 801a3e6:	f083 0301 	eor.w	r3, r3, #1
 801a3ea:	b2db      	uxtb	r3, r3
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d002      	beq.n	801a3f6 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 801a3f0:	2000      	movs	r0, #0
 801a3f2:	f000 fe09 	bl	801b008 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a3f6:	4b24      	ldr	r3, [pc, #144]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d039      	beq.n	801a472 <RadioIrqProcess+0x3a6>
 801a3fe:	4b22      	ldr	r3, [pc, #136]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	68db      	ldr	r3, [r3, #12]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d034      	beq.n	801a472 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 801a408:	4b1f      	ldr	r3, [pc, #124]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	68db      	ldr	r3, [r3, #12]
 801a40e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a410:	4b1e      	ldr	r3, [pc, #120]	; (801a48c <RadioIrqProcess+0x3c0>)
 801a412:	2201      	movs	r2, #1
 801a414:	2100      	movs	r1, #0
 801a416:	2002      	movs	r0, #2
 801a418:	f001 fe60 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a41c:	e029      	b.n	801a472 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a41e:	4b1c      	ldr	r3, [pc, #112]	; (801a490 <RadioIrqProcess+0x3c4>)
 801a420:	2201      	movs	r2, #1
 801a422:	2100      	movs	r1, #0
 801a424:	2002      	movs	r0, #2
 801a426:	f001 fe59 	bl	801c0dc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a42a:	4b16      	ldr	r3, [pc, #88]	; (801a484 <RadioIrqProcess+0x3b8>)
 801a42c:	785b      	ldrb	r3, [r3, #1]
 801a42e:	f083 0301 	eor.w	r3, r3, #1
 801a432:	b2db      	uxtb	r3, r3
 801a434:	2b00      	cmp	r3, #0
 801a436:	d002      	beq.n	801a43e <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 801a438:	2000      	movs	r0, #0
 801a43a:	f000 fde5 	bl	801b008 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a43e:	4b12      	ldr	r3, [pc, #72]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d017      	beq.n	801a476 <RadioIrqProcess+0x3aa>
 801a446:	4b10      	ldr	r3, [pc, #64]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	691b      	ldr	r3, [r3, #16]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d012      	beq.n	801a476 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 801a450:	4b0d      	ldr	r3, [pc, #52]	; (801a488 <RadioIrqProcess+0x3bc>)
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	691b      	ldr	r3, [r3, #16]
 801a456:	4798      	blx	r3
        break;
 801a458:	e00d      	b.n	801a476 <RadioIrqProcess+0x3aa>
        break;
 801a45a:	bf00      	nop
 801a45c:	e00c      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a45e:	bf00      	nop
 801a460:	e00a      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a462:	bf00      	nop
 801a464:	e008      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a466:	bf00      	nop
 801a468:	e006      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a46a:	bf00      	nop
 801a46c:	e004      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a46e:	bf00      	nop
 801a470:	e002      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a472:	bf00      	nop
 801a474:	e000      	b.n	801a478 <RadioIrqProcess+0x3ac>
        break;
 801a476:	bf00      	nop
  }
}
 801a478:	bf00      	nop
 801a47a:	370c      	adds	r7, #12
 801a47c:	46bd      	mov	sp, r7
 801a47e:	bd90      	pop	{r4, r7, pc}
 801a480:	20003e04 	.word	0x20003e04
 801a484:	20003d94 	.word	0x20003d94
 801a488:	20003d90 	.word	0x20003d90
 801a48c:	0801e0c0 	.word	0x0801e0c0
 801a490:	0801e0cc 	.word	0x0801e0cc

0801a494 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a494:	b580      	push	{r7, lr}
 801a496:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a498:	4b09      	ldr	r3, [pc, #36]	; (801a4c0 <RadioTxPrbs+0x2c>)
 801a49a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a49e:	2101      	movs	r1, #1
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f001 fbbd 	bl	801bc20 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 801a4a6:	4b07      	ldr	r3, [pc, #28]	; (801a4c4 <RadioTxPrbs+0x30>)
 801a4a8:	212d      	movs	r1, #45	; 0x2d
 801a4aa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a4ae:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a4b0:	f000 fe6d 	bl	801b18e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a4b4:	4804      	ldr	r0, [pc, #16]	; (801a4c8 <RadioTxPrbs+0x34>)
 801a4b6:	f000 fdc3 	bl	801b040 <SUBGRF_SetTx>
}
 801a4ba:	bf00      	nop
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	20003d94 	.word	0x20003d94
 801a4c4:	08019edb 	.word	0x08019edb
 801a4c8:	000fffff 	.word	0x000fffff

0801a4cc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b084      	sub	sp, #16
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a4d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f001 fbc8 	bl	801bc70 <SUBGRF_SetRfTxPower>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a4e4:	7bfb      	ldrb	r3, [r7, #15]
 801a4e6:	2101      	movs	r1, #1
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	f001 fb99 	bl	801bc20 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a4ee:	f000 fe45 	bl	801b17c <SUBGRF_SetTxContinuousWave>
}
 801a4f2:	bf00      	nop
 801a4f4:	3710      	adds	r7, #16
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	bd80      	pop	{r7, pc}

0801a4fa <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a4fa:	b480      	push	{r7}
 801a4fc:	b089      	sub	sp, #36	; 0x24
 801a4fe:	af00      	add	r7, sp, #0
 801a500:	60f8      	str	r0, [r7, #12]
 801a502:	60b9      	str	r1, [r7, #8]
 801a504:	4613      	mov	r3, r2
 801a506:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a508:	2300      	movs	r3, #0
 801a50a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801a50c:	2300      	movs	r3, #0
 801a50e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 801a510:	2300      	movs	r3, #0
 801a512:	61bb      	str	r3, [r7, #24]
 801a514:	e011      	b.n	801a53a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a516:	69bb      	ldr	r3, [r7, #24]
 801a518:	68ba      	ldr	r2, [r7, #8]
 801a51a:	4413      	add	r3, r2
 801a51c:	781a      	ldrb	r2, [r3, #0]
 801a51e:	69bb      	ldr	r3, [r7, #24]
 801a520:	68b9      	ldr	r1, [r7, #8]
 801a522:	440b      	add	r3, r1
 801a524:	43d2      	mvns	r2, r2
 801a526:	b2d2      	uxtb	r2, r2
 801a528:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a52a:	69bb      	ldr	r3, [r7, #24]
 801a52c:	68fa      	ldr	r2, [r7, #12]
 801a52e:	4413      	add	r3, r2
 801a530:	2200      	movs	r2, #0
 801a532:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801a534:	69bb      	ldr	r3, [r7, #24]
 801a536:	3301      	adds	r3, #1
 801a538:	61bb      	str	r3, [r7, #24]
 801a53a:	79fb      	ldrb	r3, [r7, #7]
 801a53c:	69ba      	ldr	r2, [r7, #24]
 801a53e:	429a      	cmp	r2, r3
 801a540:	dbe9      	blt.n	801a516 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801a542:	2300      	movs	r3, #0
 801a544:	61bb      	str	r3, [r7, #24]
 801a546:	e049      	b.n	801a5dc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a548:	69bb      	ldr	r3, [r7, #24]
 801a54a:	425a      	negs	r2, r3
 801a54c:	f003 0307 	and.w	r3, r3, #7
 801a550:	f002 0207 	and.w	r2, r2, #7
 801a554:	bf58      	it	pl
 801a556:	4253      	negpl	r3, r2
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	f1c3 0307 	rsb	r3, r3, #7
 801a55e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a560:	69bb      	ldr	r3, [r7, #24]
 801a562:	2b00      	cmp	r3, #0
 801a564:	da00      	bge.n	801a568 <payload_integration+0x6e>
 801a566:	3307      	adds	r3, #7
 801a568:	10db      	asrs	r3, r3, #3
 801a56a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a56c:	69bb      	ldr	r3, [r7, #24]
 801a56e:	3301      	adds	r3, #1
 801a570:	425a      	negs	r2, r3
 801a572:	f003 0307 	and.w	r3, r3, #7
 801a576:	f002 0207 	and.w	r2, r2, #7
 801a57a:	bf58      	it	pl
 801a57c:	4253      	negpl	r3, r2
 801a57e:	b2db      	uxtb	r3, r3
 801a580:	f1c3 0307 	rsb	r3, r3, #7
 801a584:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a586:	69bb      	ldr	r3, [r7, #24]
 801a588:	3301      	adds	r3, #1
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	da00      	bge.n	801a590 <payload_integration+0x96>
 801a58e:	3307      	adds	r3, #7
 801a590:	10db      	asrs	r3, r3, #3
 801a592:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a594:	7dbb      	ldrb	r3, [r7, #22]
 801a596:	68ba      	ldr	r2, [r7, #8]
 801a598:	4413      	add	r3, r2
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	461a      	mov	r2, r3
 801a59e:	7dfb      	ldrb	r3, [r7, #23]
 801a5a0:	fa42 f303 	asr.w	r3, r2, r3
 801a5a4:	b2db      	uxtb	r3, r3
 801a5a6:	f003 0301 	and.w	r3, r3, #1
 801a5aa:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a5ac:	7ffa      	ldrb	r2, [r7, #31]
 801a5ae:	7cfb      	ldrb	r3, [r7, #19]
 801a5b0:	4053      	eors	r3, r2
 801a5b2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a5b4:	7d3b      	ldrb	r3, [r7, #20]
 801a5b6:	68fa      	ldr	r2, [r7, #12]
 801a5b8:	4413      	add	r3, r2
 801a5ba:	781b      	ldrb	r3, [r3, #0]
 801a5bc:	b25a      	sxtb	r2, r3
 801a5be:	7ff9      	ldrb	r1, [r7, #31]
 801a5c0:	7d7b      	ldrb	r3, [r7, #21]
 801a5c2:	fa01 f303 	lsl.w	r3, r1, r3
 801a5c6:	b25b      	sxtb	r3, r3
 801a5c8:	4313      	orrs	r3, r2
 801a5ca:	b259      	sxtb	r1, r3
 801a5cc:	7d3b      	ldrb	r3, [r7, #20]
 801a5ce:	68fa      	ldr	r2, [r7, #12]
 801a5d0:	4413      	add	r3, r2
 801a5d2:	b2ca      	uxtb	r2, r1
 801a5d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801a5d6:	69bb      	ldr	r3, [r7, #24]
 801a5d8:	3301      	adds	r3, #1
 801a5da:	61bb      	str	r3, [r7, #24]
 801a5dc:	79fb      	ldrb	r3, [r7, #7]
 801a5de:	00db      	lsls	r3, r3, #3
 801a5e0:	69ba      	ldr	r2, [r7, #24]
 801a5e2:	429a      	cmp	r2, r3
 801a5e4:	dbb0      	blt.n	801a548 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a5e6:	7ffb      	ldrb	r3, [r7, #31]
 801a5e8:	01db      	lsls	r3, r3, #7
 801a5ea:	b25a      	sxtb	r2, r3
 801a5ec:	7ffb      	ldrb	r3, [r7, #31]
 801a5ee:	019b      	lsls	r3, r3, #6
 801a5f0:	b25b      	sxtb	r3, r3
 801a5f2:	4313      	orrs	r3, r2
 801a5f4:	b25b      	sxtb	r3, r3
 801a5f6:	7ffa      	ldrb	r2, [r7, #31]
 801a5f8:	2a00      	cmp	r2, #0
 801a5fa:	d101      	bne.n	801a600 <payload_integration+0x106>
 801a5fc:	2220      	movs	r2, #32
 801a5fe:	e000      	b.n	801a602 <payload_integration+0x108>
 801a600:	2200      	movs	r2, #0
 801a602:	4313      	orrs	r3, r2
 801a604:	b259      	sxtb	r1, r3
 801a606:	79fb      	ldrb	r3, [r7, #7]
 801a608:	68fa      	ldr	r2, [r7, #12]
 801a60a:	4413      	add	r3, r2
 801a60c:	b2ca      	uxtb	r2, r1
 801a60e:	701a      	strb	r2, [r3, #0]
}
 801a610:	bf00      	nop
 801a612:	3724      	adds	r7, #36	; 0x24
 801a614:	46bd      	mov	sp, r7
 801a616:	bc80      	pop	{r7}
 801a618:	4770      	bx	lr
	...

0801a61c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	b08c      	sub	sp, #48	; 0x30
 801a620:	af00      	add	r7, sp, #0
 801a622:	60b9      	str	r1, [r7, #8]
 801a624:	607a      	str	r2, [r7, #4]
 801a626:	603b      	str	r3, [r7, #0]
 801a628:	4603      	mov	r3, r0
 801a62a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a62c:	2300      	movs	r3, #0
 801a62e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 801a630:	2300      	movs	r3, #0
 801a632:	61fb      	str	r3, [r7, #28]
 801a634:	2300      	movs	r3, #0
 801a636:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a638:	f001 fcd5 	bl	801bfe6 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d001      	beq.n	801a646 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a642:	2300      	movs	r3, #0
 801a644:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	bf14      	ite	ne
 801a64c:	2301      	movne	r3, #1
 801a64e:	2300      	moveq	r3, #0
 801a650:	b2da      	uxtb	r2, r3
 801a652:	4b9f      	ldr	r3, [pc, #636]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a654:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a656:	7bfb      	ldrb	r3, [r7, #15]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d003      	beq.n	801a664 <RadioSetRxGenericConfig+0x48>
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	f000 80e8 	beq.w	801a832 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a662:	e1a0      	b.n	801a9a6 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	68db      	ldr	r3, [r3, #12]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d003      	beq.n	801a674 <RadioSetRxGenericConfig+0x58>
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	691b      	ldr	r3, [r3, #16]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d102      	bne.n	801a67a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a674:	f04f 33ff 	mov.w	r3, #4294967295
 801a678:	e196      	b.n	801a9a8 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801a67a:	68bb      	ldr	r3, [r7, #8]
 801a67c:	7d5b      	ldrb	r3, [r3, #21]
 801a67e:	2b08      	cmp	r3, #8
 801a680:	d902      	bls.n	801a688 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a682:	f04f 33ff 	mov.w	r3, #4294967295
 801a686:	e18f      	b.n	801a9a8 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a688:	2300      	movs	r3, #0
 801a68a:	62bb      	str	r3, [r7, #40]	; 0x28
 801a68c:	e00d      	b.n	801a6aa <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801a68e:	68bb      	ldr	r3, [r7, #8]
 801a690:	699a      	ldr	r2, [r3, #24]
 801a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a694:	4413      	add	r3, r2
 801a696:	7819      	ldrb	r1, [r3, #0]
 801a698:	f107 021c 	add.w	r2, r7, #28
 801a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a69e:	4413      	add	r3, r2
 801a6a0:	460a      	mov	r2, r1
 801a6a2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a6:	3301      	adds	r3, #1
 801a6a8:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	7d5b      	ldrb	r3, [r3, #21]
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6b2:	4293      	cmp	r3, r2
 801a6b4:	dbeb      	blt.n	801a68e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	bf14      	ite	ne
 801a6be:	2301      	movne	r3, #1
 801a6c0:	2300      	moveq	r3, #0
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f000 fd6b 	bl	801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a6ca:	4b81      	ldr	r3, [pc, #516]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	68db      	ldr	r3, [r3, #12]
 801a6d6:	4a7e      	ldr	r2, [pc, #504]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a6d8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	791a      	ldrb	r2, [r3, #4]
 801a6de:	4b7c      	ldr	r3, [pc, #496]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	689b      	ldr	r3, [r3, #8]
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f001 fbaf 	bl	801be4c <SUBGRF_GetFskBandwidthRegValue>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	461a      	mov	r2, r3
 801a6f2:	4b77      	ldr	r3, [pc, #476]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a6f8:	4b75      	ldr	r3, [pc, #468]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	691b      	ldr	r3, [r3, #16]
 801a702:	b29b      	uxth	r3, r3
 801a704:	00db      	lsls	r3, r3, #3
 801a706:	b29a      	uxth	r2, r3
 801a708:	4b71      	ldr	r3, [pc, #452]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a70a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a70c:	68bb      	ldr	r3, [r7, #8]
 801a70e:	7d1a      	ldrb	r2, [r3, #20]
 801a710:	4b6f      	ldr	r3, [pc, #444]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a712:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	7d5b      	ldrb	r3, [r3, #21]
 801a718:	00db      	lsls	r3, r3, #3
 801a71a:	b2da      	uxtb	r2, r3
 801a71c:	4b6c      	ldr	r3, [pc, #432]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a71e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a726:	4b6a      	ldr	r3, [pc, #424]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a728:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a72a:	68bb      	ldr	r3, [r7, #8]
 801a72c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a730:	2b00      	cmp	r3, #0
 801a732:	d105      	bne.n	801a740 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	69db      	ldr	r3, [r3, #28]
 801a738:	b2da      	uxtb	r2, r3
 801a73a:	4b65      	ldr	r3, [pc, #404]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a73c:	759a      	strb	r2, [r3, #22]
 801a73e:	e00b      	b.n	801a758 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a740:	68bb      	ldr	r3, [r7, #8]
 801a742:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a746:	2b02      	cmp	r3, #2
 801a748:	d103      	bne.n	801a752 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a74a:	4b61      	ldr	r3, [pc, #388]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a74c:	22ff      	movs	r2, #255	; 0xff
 801a74e:	759a      	strb	r2, [r3, #22]
 801a750:	e002      	b.n	801a758 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a752:	4b5f      	ldr	r3, [pc, #380]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a754:	22ff      	movs	r2, #255	; 0xff
 801a756:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801a75e:	2b02      	cmp	r3, #2
 801a760:	d004      	beq.n	801a76c <RadioSetRxGenericConfig+0x150>
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a768:	2b02      	cmp	r3, #2
 801a76a:	d12d      	bne.n	801a7c8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a772:	2bf1      	cmp	r3, #241	; 0xf1
 801a774:	d00c      	beq.n	801a790 <RadioSetRxGenericConfig+0x174>
 801a776:	68bb      	ldr	r3, [r7, #8]
 801a778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a77c:	2bf2      	cmp	r3, #242	; 0xf2
 801a77e:	d007      	beq.n	801a790 <RadioSetRxGenericConfig+0x174>
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a786:	2b01      	cmp	r3, #1
 801a788:	d002      	beq.n	801a790 <RadioSetRxGenericConfig+0x174>
            return -1;
 801a78a:	f04f 33ff 	mov.w	r3, #4294967295
 801a78e:	e10b      	b.n	801a9a8 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801a790:	2300      	movs	r3, #0
 801a792:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a798:	4b4e      	ldr	r3, [pc, #312]	; (801a8d4 <RadioSetRxGenericConfig+0x2b8>)
 801a79a:	6819      	ldr	r1, [r3, #0]
 801a79c:	f107 0310 	add.w	r3, r7, #16
 801a7a0:	4a4d      	ldr	r2, [pc, #308]	; (801a8d8 <RadioSetRxGenericConfig+0x2bc>)
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	f001 fc12 	bl	801bfcc <RFW_Init>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d002      	beq.n	801a7b4 <RadioSetRxGenericConfig+0x198>
            return -1;
 801a7ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a7b2:	e0f9      	b.n	801a9a8 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a7b4:	4b46      	ldr	r3, [pc, #280]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7b6:	2200      	movs	r2, #0
 801a7b8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a7ba:	4b45      	ldr	r3, [pc, #276]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7bc:	2201      	movs	r2, #1
 801a7be:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a7c0:	4b43      	ldr	r3, [pc, #268]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	755a      	strb	r2, [r3, #21]
        {
 801a7c6:	e00e      	b.n	801a7e6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a7ce:	4b40      	ldr	r3, [pc, #256]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7d0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801a7d8:	4b3d      	ldr	r3, [pc, #244]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7da:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a7e2:	4b3b      	ldr	r3, [pc, #236]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a7e4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a7e6:	f7ff fa92 	bl	8019d0e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a7ea:	2000      	movs	r0, #0
 801a7ec:	f7fe fc24 	bl	8019038 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7f0:	483a      	ldr	r0, [pc, #232]	; (801a8dc <RadioSetRxGenericConfig+0x2c0>)
 801a7f2:	f000 ff07 	bl	801b604 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7f6:	483a      	ldr	r0, [pc, #232]	; (801a8e0 <RadioSetRxGenericConfig+0x2c4>)
 801a7f8:	f000 ffd6 	bl	801b7a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a7fc:	f107 031c 	add.w	r3, r7, #28
 801a800:	4618      	mov	r0, r3
 801a802:	f000 fb06 	bl	801ae12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a806:	68bb      	ldr	r3, [r7, #8]
 801a808:	8c1b      	ldrh	r3, [r3, #32]
 801a80a:	4618      	mov	r0, r3
 801a80c:	f000 fb50 	bl	801aeb0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a814:	4618      	mov	r0, r3
 801a816:	f000 fb2b 	bl	801ae70 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a81a:	683b      	ldr	r3, [r7, #0]
 801a81c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a820:	fb03 f202 	mul.w	r2, r3, r2
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	68db      	ldr	r3, [r3, #12]
 801a828:	fbb2 f3f3 	udiv	r3, r2, r3
 801a82c:	4a28      	ldr	r2, [pc, #160]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a82e:	6093      	str	r3, [r2, #8]
        break;
 801a830:	e0b9      	b.n	801a9a6 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801a832:	68bb      	ldr	r3, [r7, #8]
 801a834:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801a836:	2b00      	cmp	r3, #0
 801a838:	d102      	bne.n	801a840 <RadioSetRxGenericConfig+0x224>
            return -1;
 801a83a:	f04f 33ff 	mov.w	r3, #4294967295
 801a83e:	e0b3      	b.n	801a9a8 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801a846:	2b01      	cmp	r3, #1
 801a848:	d104      	bne.n	801a854 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	69db      	ldr	r3, [r3, #28]
 801a84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a852:	e002      	b.n	801a85a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801a854:	23ff      	movs	r3, #255	; 0xff
 801a856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a85a:	68bb      	ldr	r3, [r7, #8]
 801a85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a85e:	2b00      	cmp	r3, #0
 801a860:	bf14      	ite	ne
 801a862:	2301      	movne	r3, #1
 801a864:	2300      	moveq	r3, #0
 801a866:	b2db      	uxtb	r3, r3
 801a868:	4618      	mov	r0, r3
 801a86a:	f000 fc99 	bl	801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	b2db      	uxtb	r3, r3
 801a872:	4618      	mov	r0, r3
 801a874:	f000 fca3 	bl	801b1be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a878:	4b15      	ldr	r3, [pc, #84]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a87a:	2201      	movs	r2, #1
 801a87c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801a886:	4b12      	ldr	r3, [pc, #72]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801a892:	4b0f      	ldr	r3, [pc, #60]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a89e:	4b0c      	ldr	r3, [pc, #48]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a8a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a8a4:	68bb      	ldr	r3, [r7, #8]
 801a8a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801a8aa:	2b02      	cmp	r3, #2
 801a8ac:	d01a      	beq.n	801a8e4 <RadioSetRxGenericConfig+0x2c8>
 801a8ae:	2b02      	cmp	r3, #2
 801a8b0:	dc2c      	bgt.n	801a90c <RadioSetRxGenericConfig+0x2f0>
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d002      	beq.n	801a8bc <RadioSetRxGenericConfig+0x2a0>
 801a8b6:	2b01      	cmp	r3, #1
 801a8b8:	d005      	beq.n	801a8c6 <RadioSetRxGenericConfig+0x2aa>
            break;
 801a8ba:	e027      	b.n	801a90c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a8bc:	4b04      	ldr	r3, [pc, #16]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a8c4:	e023      	b.n	801a90e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a8c6:	4b02      	ldr	r3, [pc, #8]	; (801a8d0 <RadioSetRxGenericConfig+0x2b4>)
 801a8c8:	2201      	movs	r2, #1
 801a8ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a8ce:	e01e      	b.n	801a90e <RadioSetRxGenericConfig+0x2f2>
 801a8d0:	20003d94 	.word	0x20003d94
 801a8d4:	20003d90 	.word	0x20003d90
 801a8d8:	20003e04 	.word	0x20003e04
 801a8dc:	20003dcc 	.word	0x20003dcc
 801a8e0:	20003da2 	.word	0x20003da2
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a8e4:	68bb      	ldr	r3, [r7, #8]
 801a8e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a8ea:	2b0b      	cmp	r3, #11
 801a8ec:	d004      	beq.n	801a8f8 <RadioSetRxGenericConfig+0x2dc>
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a8f4:	2b0c      	cmp	r3, #12
 801a8f6:	d104      	bne.n	801a902 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a8f8:	4b2d      	ldr	r3, [pc, #180]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a900:	e005      	b.n	801a90e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a902:	4b2b      	ldr	r3, [pc, #172]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a904:	2200      	movs	r2, #0
 801a906:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a90a:	e000      	b.n	801a90e <RadioSetRxGenericConfig+0x2f2>
            break;
 801a90c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a90e:	4b28      	ldr	r3, [pc, #160]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a910:	2201      	movs	r2, #1
 801a912:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801a918:	4b25      	ldr	r3, [pc, #148]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a91a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801a922:	4b23      	ldr	r3, [pc, #140]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a924:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a926:	4a22      	ldr	r2, [pc, #136]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a92c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a92e:	68bb      	ldr	r3, [r7, #8]
 801a930:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801a934:	4b1e      	ldr	r3, [pc, #120]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a936:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801a940:	4b1b      	ldr	r3, [pc, #108]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a946:	f7ff f9e2 	bl	8019d0e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a94a:	2001      	movs	r0, #1
 801a94c:	f7fe fb74 	bl	8019038 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a950:	4818      	ldr	r0, [pc, #96]	; (801a9b4 <RadioSetRxGenericConfig+0x398>)
 801a952:	f000 fe57 	bl	801b604 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a956:	4818      	ldr	r0, [pc, #96]	; (801a9b8 <RadioSetRxGenericConfig+0x39c>)
 801a958:	f000 ff26 	bl	801b7a8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a95c:	4b14      	ldr	r3, [pc, #80]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a95e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a962:	2b01      	cmp	r3, #1
 801a964:	d10d      	bne.n	801a982 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801a966:	f240 7036 	movw	r0, #1846	; 0x736
 801a96a:	f001 f879 	bl	801ba60 <SUBGRF_ReadRegister>
 801a96e:	4603      	mov	r3, r0
 801a970:	f023 0304 	bic.w	r3, r3, #4
 801a974:	b2db      	uxtb	r3, r3
 801a976:	4619      	mov	r1, r3
 801a978:	f240 7036 	movw	r0, #1846	; 0x736
 801a97c:	f001 f85c 	bl	801ba38 <SUBGRF_WriteRegister>
 801a980:	e00c      	b.n	801a99c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801a982:	f240 7036 	movw	r0, #1846	; 0x736
 801a986:	f001 f86b 	bl	801ba60 <SUBGRF_ReadRegister>
 801a98a:	4603      	mov	r3, r0
 801a98c:	f043 0304 	orr.w	r3, r3, #4
 801a990:	b2db      	uxtb	r3, r3
 801a992:	4619      	mov	r1, r3
 801a994:	f240 7036 	movw	r0, #1846	; 0x736
 801a998:	f001 f84e 	bl	801ba38 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a99c:	4b04      	ldr	r3, [pc, #16]	; (801a9b0 <RadioSetRxGenericConfig+0x394>)
 801a99e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9a2:	609a      	str	r2, [r3, #8]
        break;
 801a9a4:	bf00      	nop
    }
    return status;
 801a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	3730      	adds	r7, #48	; 0x30
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	20003d94 	.word	0x20003d94
 801a9b4:	20003dcc 	.word	0x20003dcc
 801a9b8:	20003da2 	.word	0x20003da2

0801a9bc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b08a      	sub	sp, #40	; 0x28
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	60b9      	str	r1, [r7, #8]
 801a9c4:	607b      	str	r3, [r7, #4]
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	73fb      	strb	r3, [r7, #15]
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	61fb      	str	r3, [r7, #28]
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a9d6:	f001 fb06 	bl	801bfe6 <RFW_DeInit>
    switch( modem )
 801a9da:	7bfb      	ldrb	r3, [r7, #15]
 801a9dc:	2b02      	cmp	r3, #2
 801a9de:	f000 8144 	beq.w	801ac6a <RadioSetTxGenericConfig+0x2ae>
 801a9e2:	2b02      	cmp	r3, #2
 801a9e4:	f300 8160 	bgt.w	801aca8 <RadioSetTxGenericConfig+0x2ec>
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d003      	beq.n	801a9f4 <RadioSetTxGenericConfig+0x38>
 801a9ec:	2b01      	cmp	r3, #1
 801a9ee:	f000 80b7 	beq.w	801ab60 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801a9f2:	e159      	b.n	801aca8 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	689b      	ldr	r3, [r3, #8]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d003      	beq.n	801aa04 <RadioSetTxGenericConfig+0x48>
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	691b      	ldr	r3, [r3, #16]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d102      	bne.n	801aa0a <RadioSetTxGenericConfig+0x4e>
            return -1;
 801aa04:	f04f 33ff 	mov.w	r3, #4294967295
 801aa08:	e163      	b.n	801acd2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	7d1b      	ldrb	r3, [r3, #20]
 801aa0e:	2b08      	cmp	r3, #8
 801aa10:	d902      	bls.n	801aa18 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801aa12:	f04f 33ff 	mov.w	r3, #4294967295
 801aa16:	e15c      	b.n	801acd2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801aa18:	2300      	movs	r3, #0
 801aa1a:	627b      	str	r3, [r7, #36]	; 0x24
 801aa1c:	e00d      	b.n	801aa3a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	699a      	ldr	r2, [r3, #24]
 801aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa24:	4413      	add	r3, r2
 801aa26:	7819      	ldrb	r1, [r3, #0]
 801aa28:	f107 021c 	add.w	r2, r7, #28
 801aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa2e:	4413      	add	r3, r2
 801aa30:	460a      	mov	r2, r1
 801aa32:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa36:	3301      	adds	r3, #1
 801aa38:	627b      	str	r3, [r7, #36]	; 0x24
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	7d1b      	ldrb	r3, [r3, #20]
 801aa3e:	461a      	mov	r2, r3
 801aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa42:	4293      	cmp	r3, r2
 801aa44:	dbeb      	blt.n	801aa1e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801aa46:	4ba5      	ldr	r3, [pc, #660]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa48:	2200      	movs	r2, #0
 801aa4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	689b      	ldr	r3, [r3, #8]
 801aa52:	4aa2      	ldr	r2, [pc, #648]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa54:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	781a      	ldrb	r2, [r3, #0]
 801aa5a:	4ba0      	ldr	r3, [pc, #640]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	685b      	ldr	r3, [r3, #4]
 801aa64:	4618      	mov	r0, r3
 801aa66:	f001 f9f1 	bl	801be4c <SUBGRF_GetFskBandwidthRegValue>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	461a      	mov	r2, r3
 801aa6e:	4b9b      	ldr	r3, [pc, #620]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	68db      	ldr	r3, [r3, #12]
 801aa78:	4a98      	ldr	r2, [pc, #608]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa7a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801aa7c:	4b97      	ldr	r3, [pc, #604]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa7e:	2200      	movs	r2, #0
 801aa80:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	691b      	ldr	r3, [r3, #16]
 801aa86:	b29b      	uxth	r3, r3
 801aa88:	00db      	lsls	r3, r3, #3
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	4b93      	ldr	r3, [pc, #588]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa8e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801aa90:	4b92      	ldr	r3, [pc, #584]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aa92:	2204      	movs	r2, #4
 801aa94:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	7d1b      	ldrb	r3, [r3, #20]
 801aa9a:	00db      	lsls	r3, r3, #3
 801aa9c:	b2da      	uxtb	r2, r3
 801aa9e:	4b8f      	ldr	r3, [pc, #572]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aaa0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801aaa2:	4b8e      	ldr	r3, [pc, #568]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801aaa8:	68bb      	ldr	r3, [r7, #8]
 801aaaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801aaae:	2b02      	cmp	r3, #2
 801aab0:	d003      	beq.n	801aaba <RadioSetTxGenericConfig+0xfe>
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	7f9b      	ldrb	r3, [r3, #30]
 801aab6:	2b02      	cmp	r3, #2
 801aab8:	d12a      	bne.n	801ab10 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	7fdb      	ldrb	r3, [r3, #31]
 801aabe:	2bf1      	cmp	r3, #241	; 0xf1
 801aac0:	d00a      	beq.n	801aad8 <RadioSetTxGenericConfig+0x11c>
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	7fdb      	ldrb	r3, [r3, #31]
 801aac6:	2bf2      	cmp	r3, #242	; 0xf2
 801aac8:	d006      	beq.n	801aad8 <RadioSetTxGenericConfig+0x11c>
 801aaca:	68bb      	ldr	r3, [r7, #8]
 801aacc:	7fdb      	ldrb	r3, [r3, #31]
 801aace:	2b01      	cmp	r3, #1
 801aad0:	d002      	beq.n	801aad8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801aad2:	f04f 33ff 	mov.w	r3, #4294967295
 801aad6:	e0fc      	b.n	801acd2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801aad8:	2301      	movs	r3, #1
 801aada:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801aadc:	68bb      	ldr	r3, [r7, #8]
 801aade:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801aae0:	4b7f      	ldr	r3, [pc, #508]	; (801ace0 <RadioSetTxGenericConfig+0x324>)
 801aae2:	6819      	ldr	r1, [r3, #0]
 801aae4:	f107 0310 	add.w	r3, r7, #16
 801aae8:	4a7e      	ldr	r2, [pc, #504]	; (801ace4 <RadioSetTxGenericConfig+0x328>)
 801aaea:	4618      	mov	r0, r3
 801aaec:	f001 fa6e 	bl	801bfcc <RFW_Init>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d002      	beq.n	801aafc <RadioSetTxGenericConfig+0x140>
              return -1;
 801aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 801aafa:	e0ea      	b.n	801acd2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801aafc:	4b77      	ldr	r3, [pc, #476]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aafe:	2200      	movs	r2, #0
 801ab00:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801ab02:	4b76      	ldr	r3, [pc, #472]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab04:	2201      	movs	r2, #1
 801ab06:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ab08:	4b74      	ldr	r3, [pc, #464]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	755a      	strb	r2, [r3, #21]
        {
 801ab0e:	e00c      	b.n	801ab2a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	7fda      	ldrb	r2, [r3, #31]
 801ab14:	4b71      	ldr	r3, [pc, #452]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab16:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801ab1e:	4b6f      	ldr	r3, [pc, #444]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab20:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	7f9a      	ldrb	r2, [r3, #30]
 801ab26:	4b6d      	ldr	r3, [pc, #436]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab28:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801ab2a:	f7ff f8f0 	bl	8019d0e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ab2e:	2000      	movs	r0, #0
 801ab30:	f7fe fa82 	bl	8019038 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ab34:	486c      	ldr	r0, [pc, #432]	; (801ace8 <RadioSetTxGenericConfig+0x32c>)
 801ab36:	f000 fd65 	bl	801b604 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab3a:	486c      	ldr	r0, [pc, #432]	; (801acec <RadioSetTxGenericConfig+0x330>)
 801ab3c:	f000 fe34 	bl	801b7a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ab40:	f107 031c 	add.w	r3, r7, #28
 801ab44:	4618      	mov	r0, r3
 801ab46:	f000 f964 	bl	801ae12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	8b9b      	ldrh	r3, [r3, #28]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f000 f9ae 	bl	801aeb0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	8c1b      	ldrh	r3, [r3, #32]
 801ab58:	4618      	mov	r0, r3
 801ab5a:	f000 f989 	bl	801ae70 <SUBGRF_SetCrcPolynomial>
        break;
 801ab5e:	e0a4      	b.n	801acaa <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ab60:	4b5e      	ldr	r3, [pc, #376]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab62:	2201      	movs	r2, #1
 801ab64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801ab6e:	4b5b      	ldr	r3, [pc, #364]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801ab74:	68bb      	ldr	r3, [r7, #8]
 801ab76:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801ab7a:	4b58      	ldr	r3, [pc, #352]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801ab86:	4b55      	ldr	r3, [pc, #340]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ab88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801ab92:	2b02      	cmp	r3, #2
 801ab94:	d010      	beq.n	801abb8 <RadioSetTxGenericConfig+0x1fc>
 801ab96:	2b02      	cmp	r3, #2
 801ab98:	dc22      	bgt.n	801abe0 <RadioSetTxGenericConfig+0x224>
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d002      	beq.n	801aba4 <RadioSetTxGenericConfig+0x1e8>
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	d005      	beq.n	801abae <RadioSetTxGenericConfig+0x1f2>
            break;
 801aba2:	e01d      	b.n	801abe0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801aba4:	4b4d      	ldr	r3, [pc, #308]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801aba6:	2200      	movs	r2, #0
 801aba8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801abac:	e019      	b.n	801abe2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801abae:	4b4b      	ldr	r3, [pc, #300]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abb0:	2201      	movs	r2, #1
 801abb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801abb6:	e014      	b.n	801abe2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801abbe:	2b0b      	cmp	r3, #11
 801abc0:	d004      	beq.n	801abcc <RadioSetTxGenericConfig+0x210>
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801abc8:	2b0c      	cmp	r3, #12
 801abca:	d104      	bne.n	801abd6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801abcc:	4b43      	ldr	r3, [pc, #268]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abce:	2201      	movs	r2, #1
 801abd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801abd4:	e005      	b.n	801abe2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801abd6:	4b41      	ldr	r3, [pc, #260]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abd8:	2200      	movs	r2, #0
 801abda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801abde:	e000      	b.n	801abe2 <RadioSetTxGenericConfig+0x226>
            break;
 801abe0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801abe2:	4b3e      	ldr	r3, [pc, #248]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abe4:	2201      	movs	r2, #1
 801abe6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801abec:	4b3b      	ldr	r3, [pc, #236]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801abf6:	4b39      	ldr	r3, [pc, #228]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801abf8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801ac00:	4b36      	ldr	r3, [pc, #216]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac02:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801ac0c:	4b33      	ldr	r3, [pc, #204]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801ac12:	f7ff f87c 	bl	8019d0e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ac16:	2001      	movs	r0, #1
 801ac18:	f7fe fa0e 	bl	8019038 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac1c:	4832      	ldr	r0, [pc, #200]	; (801ace8 <RadioSetTxGenericConfig+0x32c>)
 801ac1e:	f000 fcf1 	bl	801b604 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac22:	4832      	ldr	r0, [pc, #200]	; (801acec <RadioSetTxGenericConfig+0x330>)
 801ac24:	f000 fdc0 	bl	801b7a8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801ac28:	4b2c      	ldr	r3, [pc, #176]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ac2e:	2b06      	cmp	r3, #6
 801ac30:	d10d      	bne.n	801ac4e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801ac32:	f640 0089 	movw	r0, #2185	; 0x889
 801ac36:	f000 ff13 	bl	801ba60 <SUBGRF_ReadRegister>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	f023 0304 	bic.w	r3, r3, #4
 801ac40:	b2db      	uxtb	r3, r3
 801ac42:	4619      	mov	r1, r3
 801ac44:	f640 0089 	movw	r0, #2185	; 0x889
 801ac48:	f000 fef6 	bl	801ba38 <SUBGRF_WriteRegister>
        break;
 801ac4c:	e02d      	b.n	801acaa <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801ac4e:	f640 0089 	movw	r0, #2185	; 0x889
 801ac52:	f000 ff05 	bl	801ba60 <SUBGRF_ReadRegister>
 801ac56:	4603      	mov	r3, r0
 801ac58:	f043 0304 	orr.w	r3, r3, #4
 801ac5c:	b2db      	uxtb	r3, r3
 801ac5e:	4619      	mov	r1, r3
 801ac60:	f640 0089 	movw	r0, #2185	; 0x889
 801ac64:	f000 fee8 	bl	801ba38 <SUBGRF_WriteRegister>
        break;
 801ac68:	e01f      	b.n	801acaa <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d004      	beq.n	801ac7c <RadioSetTxGenericConfig+0x2c0>
 801ac72:	68bb      	ldr	r3, [r7, #8]
 801ac74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ac7a:	d902      	bls.n	801ac82 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801ac7c:	f04f 33ff 	mov.w	r3, #4294967295
 801ac80:	e027      	b.n	801acd2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801ac82:	2002      	movs	r0, #2
 801ac84:	f7fe f9d8 	bl	8019038 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ac88:	4b14      	ldr	r3, [pc, #80]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac8a:	2202      	movs	r2, #2
 801ac8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ac94:	4a11      	ldr	r2, [pc, #68]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac96:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ac98:	4b10      	ldr	r3, [pc, #64]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801ac9a:	2216      	movs	r2, #22
 801ac9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aca0:	4811      	ldr	r0, [pc, #68]	; (801ace8 <RadioSetTxGenericConfig+0x32c>)
 801aca2:	f000 fcaf 	bl	801b604 <SUBGRF_SetModulationParams>
        break;
 801aca6:	e000      	b.n	801acaa <RadioSetTxGenericConfig+0x2ee>
        break;
 801aca8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801acaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801acae:	4618      	mov	r0, r3
 801acb0:	f000 ffde 	bl	801bc70 <SUBGRF_SetRfTxPower>
 801acb4:	4603      	mov	r3, r0
 801acb6:	461a      	mov	r2, r3
 801acb8:	4b08      	ldr	r3, [pc, #32]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801acba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801acbe:	4b07      	ldr	r3, [pc, #28]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801acc0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801acc4:	4618      	mov	r0, r3
 801acc6:	f001 f9a2 	bl	801c00e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801acca:	4a04      	ldr	r2, [pc, #16]	; (801acdc <RadioSetTxGenericConfig+0x320>)
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	6053      	str	r3, [r2, #4]
    return 0;
 801acd0:	2300      	movs	r3, #0
}
 801acd2:	4618      	mov	r0, r3
 801acd4:	3728      	adds	r7, #40	; 0x28
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}
 801acda:	bf00      	nop
 801acdc:	20003d94 	.word	0x20003d94
 801ace0:	20003d90 	.word	0x20003d90
 801ace4:	20003dec 	.word	0x20003dec
 801ace8:	20003dcc 	.word	0x20003dcc
 801acec:	20003da2 	.word	0x20003da2

0801acf0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d002      	beq.n	801ad04 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801acfe:	4a1a      	ldr	r2, [pc, #104]	; (801ad68 <SUBGRF_Init+0x78>)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801ad04:	f7e6 fda8 	bl	8001858 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801ad08:	2002      	movs	r0, #2
 801ad0a:	f001 f87d 	bl	801be08 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801ad0e:	4b17      	ldr	r3, [pc, #92]	; (801ad6c <SUBGRF_Init+0x7c>)
 801ad10:	2200      	movs	r2, #0
 801ad12:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801ad14:	2000      	movs	r0, #0
 801ad16:	f000 f977 	bl	801b008 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ad1a:	f7ef fbbf 	bl	800a49c <RBI_IsTCXO>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	2b01      	cmp	r3, #1
 801ad22:	d10e      	bne.n	801ad42 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801ad24:	2140      	movs	r1, #64	; 0x40
 801ad26:	2001      	movs	r0, #1
 801ad28:	f000 fb78 	bl	801b41c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801ad2c:	2100      	movs	r1, #0
 801ad2e:	f640 1011 	movw	r0, #2321	; 0x911
 801ad32:	f000 fe81 	bl	801ba38 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801ad36:	237f      	movs	r3, #127	; 0x7f
 801ad38:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ad3a:	7b38      	ldrb	r0, [r7, #12]
 801ad3c:	f000 fa85 	bl	801b24a <SUBGRF_Calibrate>
 801ad40:	e009      	b.n	801ad56 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ad42:	2120      	movs	r1, #32
 801ad44:	f640 1011 	movw	r0, #2321	; 0x911
 801ad48:	f000 fe76 	bl	801ba38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ad4c:	2120      	movs	r1, #32
 801ad4e:	f640 1012 	movw	r0, #2322	; 0x912
 801ad52:	f000 fe71 	bl	801ba38 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801ad56:	f7ef fb85 	bl	800a464 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ad5a:	4b05      	ldr	r3, [pc, #20]	; (801ad70 <SUBGRF_Init+0x80>)
 801ad5c:	2201      	movs	r2, #1
 801ad5e:	701a      	strb	r2, [r3, #0]
}
 801ad60:	bf00      	nop
 801ad62:	3710      	adds	r7, #16
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}
 801ad68:	20003e28 	.word	0x20003e28
 801ad6c:	20003e24 	.word	0x20003e24
 801ad70:	20003e1c 	.word	0x20003e1c

0801ad74 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ad74:	b480      	push	{r7}
 801ad76:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ad78:	4b02      	ldr	r3, [pc, #8]	; (801ad84 <SUBGRF_GetOperatingMode+0x10>)
 801ad7a:	781b      	ldrb	r3, [r3, #0]
}
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bc80      	pop	{r7}
 801ad82:	4770      	bx	lr
 801ad84:	20003e1c 	.word	0x20003e1c

0801ad88 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b082      	sub	sp, #8
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
 801ad90:	460b      	mov	r3, r1
 801ad92:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ad94:	78fb      	ldrb	r3, [r7, #3]
 801ad96:	461a      	mov	r2, r3
 801ad98:	6879      	ldr	r1, [r7, #4]
 801ad9a:	2000      	movs	r0, #0
 801ad9c:	f000 feb8 	bl	801bb10 <SUBGRF_WriteBuffer>
}
 801ada0:	bf00      	nop
 801ada2:	3708      	adds	r7, #8
 801ada4:	46bd      	mov	sp, r7
 801ada6:	bd80      	pop	{r7, pc}

0801ada8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b086      	sub	sp, #24
 801adac:	af00      	add	r7, sp, #0
 801adae:	60f8      	str	r0, [r7, #12]
 801adb0:	60b9      	str	r1, [r7, #8]
 801adb2:	4613      	mov	r3, r2
 801adb4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801adb6:	2300      	movs	r3, #0
 801adb8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801adba:	f107 0317 	add.w	r3, r7, #23
 801adbe:	4619      	mov	r1, r3
 801adc0:	68b8      	ldr	r0, [r7, #8]
 801adc2:	f000 fdbb 	bl	801b93c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801adc6:	68bb      	ldr	r3, [r7, #8]
 801adc8:	781b      	ldrb	r3, [r3, #0]
 801adca:	79fa      	ldrb	r2, [r7, #7]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d201      	bcs.n	801add4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801add0:	2301      	movs	r3, #1
 801add2:	e007      	b.n	801ade4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801add4:	7df8      	ldrb	r0, [r7, #23]
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	781b      	ldrb	r3, [r3, #0]
 801adda:	461a      	mov	r2, r3
 801addc:	68f9      	ldr	r1, [r7, #12]
 801adde:	f000 feb9 	bl	801bb54 <SUBGRF_ReadBuffer>

    return 0;
 801ade2:	2300      	movs	r3, #0
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	3718      	adds	r7, #24
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}

0801adec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b084      	sub	sp, #16
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	460b      	mov	r3, r1
 801adf6:	607a      	str	r2, [r7, #4]
 801adf8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801adfa:	7afb      	ldrb	r3, [r7, #11]
 801adfc:	4619      	mov	r1, r3
 801adfe:	68f8      	ldr	r0, [r7, #12]
 801ae00:	f7ff ffc2 	bl	801ad88 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ae04:	6878      	ldr	r0, [r7, #4]
 801ae06:	f000 f91b 	bl	801b040 <SUBGRF_SetTx>
}
 801ae0a:	bf00      	nop
 801ae0c:	3710      	adds	r7, #16
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}

0801ae12 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ae12:	b580      	push	{r7, lr}
 801ae14:	b082      	sub	sp, #8
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ae1a:	2208      	movs	r2, #8
 801ae1c:	6879      	ldr	r1, [r7, #4]
 801ae1e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801ae22:	f000 fe31 	bl	801ba88 <SUBGRF_WriteRegisters>
    return 0;
 801ae26:	2300      	movs	r3, #0
}
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3708      	adds	r7, #8
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b084      	sub	sp, #16
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	4603      	mov	r3, r0
 801ae38:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801ae3a:	88fb      	ldrh	r3, [r7, #6]
 801ae3c:	0a1b      	lsrs	r3, r3, #8
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	b2db      	uxtb	r3, r3
 801ae42:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801ae44:	88fb      	ldrh	r3, [r7, #6]
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ae4a:	f000 fb6b 	bl	801b524 <SUBGRF_GetPacketType>
 801ae4e:	4603      	mov	r3, r0
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d108      	bne.n	801ae66 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801ae54:	f107 030c 	add.w	r3, r7, #12
 801ae58:	2202      	movs	r2, #2
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801ae60:	f000 fe12 	bl	801ba88 <SUBGRF_WriteRegisters>
            break;
 801ae64:	e000      	b.n	801ae68 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801ae66:	bf00      	nop
    }
}
 801ae68:	bf00      	nop
 801ae6a:	3710      	adds	r7, #16
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bd80      	pop	{r7, pc}

0801ae70 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	4603      	mov	r3, r0
 801ae78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801ae7a:	88fb      	ldrh	r3, [r7, #6]
 801ae7c:	0a1b      	lsrs	r3, r3, #8
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801ae84:	88fb      	ldrh	r3, [r7, #6]
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801ae8a:	f000 fb4b 	bl	801b524 <SUBGRF_GetPacketType>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d108      	bne.n	801aea6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801ae94:	f107 030c 	add.w	r3, r7, #12
 801ae98:	2202      	movs	r2, #2
 801ae9a:	4619      	mov	r1, r3
 801ae9c:	f240 60be 	movw	r0, #1726	; 0x6be
 801aea0:	f000 fdf2 	bl	801ba88 <SUBGRF_WriteRegisters>
            break;
 801aea4:	e000      	b.n	801aea8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801aea6:	bf00      	nop
    }
}
 801aea8:	bf00      	nop
 801aeaa:	3710      	adds	r7, #16
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}

0801aeb0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b084      	sub	sp, #16
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801aeba:	2300      	movs	r3, #0
 801aebc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801aebe:	f000 fb31 	bl	801b524 <SUBGRF_GetPacketType>
 801aec2:	4603      	mov	r3, r0
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d121      	bne.n	801af0c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801aec8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801aecc:	f000 fdc8 	bl	801ba60 <SUBGRF_ReadRegister>
 801aed0:	4603      	mov	r3, r0
 801aed2:	f023 0301 	bic.w	r3, r3, #1
 801aed6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801aed8:	88fb      	ldrh	r3, [r7, #6]
 801aeda:	0a1b      	lsrs	r3, r3, #8
 801aedc:	b29b      	uxth	r3, r3
 801aede:	b25b      	sxtb	r3, r3
 801aee0:	f003 0301 	and.w	r3, r3, #1
 801aee4:	b25a      	sxtb	r2, r3
 801aee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aeea:	4313      	orrs	r3, r2
 801aeec:	b25b      	sxtb	r3, r3
 801aeee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801aef0:	7bfb      	ldrb	r3, [r7, #15]
 801aef2:	4619      	mov	r1, r3
 801aef4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801aef8:	f000 fd9e 	bl	801ba38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801aefc:	88fb      	ldrh	r3, [r7, #6]
 801aefe:	b2db      	uxtb	r3, r3
 801af00:	4619      	mov	r1, r3
 801af02:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801af06:	f000 fd97 	bl	801ba38 <SUBGRF_WriteRegister>
            break;
 801af0a:	e000      	b.n	801af0e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801af0c:	bf00      	nop
    }
}
 801af0e:	bf00      	nop
 801af10:	3710      	adds	r7, #16
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}

0801af16 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801af16:	b580      	push	{r7, lr}
 801af18:	b082      	sub	sp, #8
 801af1a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801af1c:	2300      	movs	r3, #0
 801af1e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801af20:	2300      	movs	r3, #0
 801af22:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801af24:	2300      	movs	r3, #0
 801af26:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801af28:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801af2c:	f000 fd98 	bl	801ba60 <SUBGRF_ReadRegister>
 801af30:	4603      	mov	r3, r0
 801af32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801af34:	79fb      	ldrb	r3, [r7, #7]
 801af36:	f023 0301 	bic.w	r3, r3, #1
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	4619      	mov	r1, r3
 801af3e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801af42:	f000 fd79 	bl	801ba38 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801af46:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801af4a:	f000 fd89 	bl	801ba60 <SUBGRF_ReadRegister>
 801af4e:	4603      	mov	r3, r0
 801af50:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801af52:	79bb      	ldrb	r3, [r7, #6]
 801af54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801af58:	b2db      	uxtb	r3, r3
 801af5a:	4619      	mov	r1, r3
 801af5c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801af60:	f000 fd6a 	bl	801ba38 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801af64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801af68:	f000 f88a 	bl	801b080 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801af6c:	463b      	mov	r3, r7
 801af6e:	2204      	movs	r2, #4
 801af70:	4619      	mov	r1, r3
 801af72:	f640 0019 	movw	r0, #2073	; 0x819
 801af76:	f000 fda9 	bl	801bacc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801af7a:	2000      	movs	r0, #0
 801af7c:	f000 f844 	bl	801b008 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801af80:	79fb      	ldrb	r3, [r7, #7]
 801af82:	4619      	mov	r1, r3
 801af84:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801af88:	f000 fd56 	bl	801ba38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801af8c:	79bb      	ldrb	r3, [r7, #6]
 801af8e:	4619      	mov	r1, r3
 801af90:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801af94:	f000 fd50 	bl	801ba38 <SUBGRF_WriteRegister>

    return number;
 801af98:	683b      	ldr	r3, [r7, #0]
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	3708      	adds	r7, #8
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}
	...

0801afa4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801afac:	2000      	movs	r0, #0
 801afae:	f7ef fa60 	bl	800a472 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801afb2:	2002      	movs	r0, #2
 801afb4:	f000 ff28 	bl	801be08 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801afb8:	793b      	ldrb	r3, [r7, #4]
 801afba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801afbe:	b2db      	uxtb	r3, r3
 801afc0:	009b      	lsls	r3, r3, #2
 801afc2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801afc4:	793b      	ldrb	r3, [r7, #4]
 801afc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801afca:	b2db      	uxtb	r3, r3
 801afcc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801afce:	b25b      	sxtb	r3, r3
 801afd0:	4313      	orrs	r3, r2
 801afd2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801afd4:	793b      	ldrb	r3, [r7, #4]
 801afd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801afda:	b2db      	uxtb	r3, r3
 801afdc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801afde:	4313      	orrs	r3, r2
 801afe0:	b25b      	sxtb	r3, r3
 801afe2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801afe4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801afe6:	f107 030f 	add.w	r3, r7, #15
 801afea:	2201      	movs	r2, #1
 801afec:	4619      	mov	r1, r3
 801afee:	2084      	movs	r0, #132	; 0x84
 801aff0:	f000 fdd2 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801aff4:	4b03      	ldr	r3, [pc, #12]	; (801b004 <SUBGRF_SetSleep+0x60>)
 801aff6:	2200      	movs	r2, #0
 801aff8:	701a      	strb	r2, [r3, #0]
}
 801affa:	bf00      	nop
 801affc:	3710      	adds	r7, #16
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}
 801b002:	bf00      	nop
 801b004:	20003e1c 	.word	0x20003e1c

0801b008 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b082      	sub	sp, #8
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	4603      	mov	r3, r0
 801b010:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b012:	1dfb      	adds	r3, r7, #7
 801b014:	2201      	movs	r2, #1
 801b016:	4619      	mov	r1, r3
 801b018:	2080      	movs	r0, #128	; 0x80
 801b01a:	f000 fdbd 	bl	801bb98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b01e:	79fb      	ldrb	r3, [r7, #7]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d103      	bne.n	801b02c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b024:	4b05      	ldr	r3, [pc, #20]	; (801b03c <SUBGRF_SetStandby+0x34>)
 801b026:	2201      	movs	r2, #1
 801b028:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b02a:	e002      	b.n	801b032 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b02c:	4b03      	ldr	r3, [pc, #12]	; (801b03c <SUBGRF_SetStandby+0x34>)
 801b02e:	2202      	movs	r2, #2
 801b030:	701a      	strb	r2, [r3, #0]
}
 801b032:	bf00      	nop
 801b034:	3708      	adds	r7, #8
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}
 801b03a:	bf00      	nop
 801b03c:	20003e1c 	.word	0x20003e1c

0801b040 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b084      	sub	sp, #16
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b048:	4b0c      	ldr	r3, [pc, #48]	; (801b07c <SUBGRF_SetTx+0x3c>)
 801b04a:	2204      	movs	r2, #4
 801b04c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	0c1b      	lsrs	r3, r3, #16
 801b052:	b2db      	uxtb	r3, r3
 801b054:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	0a1b      	lsrs	r3, r3, #8
 801b05a:	b2db      	uxtb	r3, r3
 801b05c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	b2db      	uxtb	r3, r3
 801b062:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b064:	f107 030c 	add.w	r3, r7, #12
 801b068:	2203      	movs	r2, #3
 801b06a:	4619      	mov	r1, r3
 801b06c:	2083      	movs	r0, #131	; 0x83
 801b06e:	f000 fd93 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b072:	bf00      	nop
 801b074:	3710      	adds	r7, #16
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	20003e1c 	.word	0x20003e1c

0801b080 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b084      	sub	sp, #16
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b088:	4b0c      	ldr	r3, [pc, #48]	; (801b0bc <SUBGRF_SetRx+0x3c>)
 801b08a:	2205      	movs	r2, #5
 801b08c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	0c1b      	lsrs	r3, r3, #16
 801b092:	b2db      	uxtb	r3, r3
 801b094:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	0a1b      	lsrs	r3, r3, #8
 801b09a:	b2db      	uxtb	r3, r3
 801b09c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b0a4:	f107 030c 	add.w	r3, r7, #12
 801b0a8:	2203      	movs	r2, #3
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	2082      	movs	r0, #130	; 0x82
 801b0ae:	f000 fd73 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b0b2:	bf00      	nop
 801b0b4:	3710      	adds	r7, #16
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	20003e1c 	.word	0x20003e1c

0801b0c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b084      	sub	sp, #16
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b0c8:	4b0e      	ldr	r3, [pc, #56]	; (801b104 <SUBGRF_SetRxBoosted+0x44>)
 801b0ca:	2205      	movs	r2, #5
 801b0cc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b0ce:	2197      	movs	r1, #151	; 0x97
 801b0d0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b0d4:	f000 fcb0 	bl	801ba38 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	0c1b      	lsrs	r3, r3, #16
 801b0dc:	b2db      	uxtb	r3, r3
 801b0de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	0a1b      	lsrs	r3, r3, #8
 801b0e4:	b2db      	uxtb	r3, r3
 801b0e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	b2db      	uxtb	r3, r3
 801b0ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b0ee:	f107 030c 	add.w	r3, r7, #12
 801b0f2:	2203      	movs	r2, #3
 801b0f4:	4619      	mov	r1, r3
 801b0f6:	2082      	movs	r0, #130	; 0x82
 801b0f8:	f000 fd4e 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b0fc:	bf00      	nop
 801b0fe:	3710      	adds	r7, #16
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	20003e1c 	.word	0x20003e1c

0801b108 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	0c1b      	lsrs	r3, r3, #16
 801b116:	b2db      	uxtb	r3, r3
 801b118:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	0a1b      	lsrs	r3, r3, #8
 801b11e:	b2db      	uxtb	r3, r3
 801b120:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	b2db      	uxtb	r3, r3
 801b126:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	0c1b      	lsrs	r3, r3, #16
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b130:	683b      	ldr	r3, [r7, #0]
 801b132:	0a1b      	lsrs	r3, r3, #8
 801b134:	b2db      	uxtb	r3, r3
 801b136:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	b2db      	uxtb	r3, r3
 801b13c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b13e:	f107 0308 	add.w	r3, r7, #8
 801b142:	2206      	movs	r2, #6
 801b144:	4619      	mov	r1, r3
 801b146:	2094      	movs	r0, #148	; 0x94
 801b148:	f000 fd26 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b14c:	4b03      	ldr	r3, [pc, #12]	; (801b15c <SUBGRF_SetRxDutyCycle+0x54>)
 801b14e:	2206      	movs	r2, #6
 801b150:	701a      	strb	r2, [r3, #0]
}
 801b152:	bf00      	nop
 801b154:	3710      	adds	r7, #16
 801b156:	46bd      	mov	sp, r7
 801b158:	bd80      	pop	{r7, pc}
 801b15a:	bf00      	nop
 801b15c:	20003e1c 	.word	0x20003e1c

0801b160 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b160:	b580      	push	{r7, lr}
 801b162:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b164:	2200      	movs	r2, #0
 801b166:	2100      	movs	r1, #0
 801b168:	20c5      	movs	r0, #197	; 0xc5
 801b16a:	f000 fd15 	bl	801bb98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b16e:	4b02      	ldr	r3, [pc, #8]	; (801b178 <SUBGRF_SetCad+0x18>)
 801b170:	2207      	movs	r2, #7
 801b172:	701a      	strb	r2, [r3, #0]
}
 801b174:	bf00      	nop
 801b176:	bd80      	pop	{r7, pc}
 801b178:	20003e1c 	.word	0x20003e1c

0801b17c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b180:	2200      	movs	r2, #0
 801b182:	2100      	movs	r1, #0
 801b184:	20d1      	movs	r0, #209	; 0xd1
 801b186:	f000 fd07 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b18a:	bf00      	nop
 801b18c:	bd80      	pop	{r7, pc}

0801b18e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b192:	2200      	movs	r2, #0
 801b194:	2100      	movs	r1, #0
 801b196:	20d2      	movs	r0, #210	; 0xd2
 801b198:	f000 fcfe 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b19c:	bf00      	nop
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b082      	sub	sp, #8
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b1aa:	1dfb      	adds	r3, r7, #7
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	4619      	mov	r1, r3
 801b1b0:	209f      	movs	r0, #159	; 0x9f
 801b1b2:	f000 fcf1 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b1b6:	bf00      	nop
 801b1b8:	3708      	adds	r7, #8
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}

0801b1be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b1be:	b580      	push	{r7, lr}
 801b1c0:	b084      	sub	sp, #16
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b1c8:	1dfb      	adds	r3, r7, #7
 801b1ca:	2201      	movs	r2, #1
 801b1cc:	4619      	mov	r1, r3
 801b1ce:	20a0      	movs	r0, #160	; 0xa0
 801b1d0:	f000 fce2 	bl	801bb98 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b1d4:	79fb      	ldrb	r3, [r7, #7]
 801b1d6:	2b3f      	cmp	r3, #63	; 0x3f
 801b1d8:	d91c      	bls.n	801b214 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b1da:	79fb      	ldrb	r3, [r7, #7]
 801b1dc:	085b      	lsrs	r3, r3, #1
 801b1de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b1e8:	e005      	b.n	801b1f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b1ea:	7bfb      	ldrb	r3, [r7, #15]
 801b1ec:	089b      	lsrs	r3, r3, #2
 801b1ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b1f0:	7bbb      	ldrb	r3, [r7, #14]
 801b1f2:	3301      	adds	r3, #1
 801b1f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b1f6:	7bfb      	ldrb	r3, [r7, #15]
 801b1f8:	2b1f      	cmp	r3, #31
 801b1fa:	d8f6      	bhi.n	801b1ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b1fc:	7bfb      	ldrb	r3, [r7, #15]
 801b1fe:	00db      	lsls	r3, r3, #3
 801b200:	b2da      	uxtb	r2, r3
 801b202:	7bbb      	ldrb	r3, [r7, #14]
 801b204:	4413      	add	r3, r2
 801b206:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b208:	7b7b      	ldrb	r3, [r7, #13]
 801b20a:	4619      	mov	r1, r3
 801b20c:	f240 7006 	movw	r0, #1798	; 0x706
 801b210:	f000 fc12 	bl	801ba38 <SUBGRF_WriteRegister>
    }
}
 801b214:	bf00      	nop
 801b216:	3710      	adds	r7, #16
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}

0801b21c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b082      	sub	sp, #8
 801b220:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b222:	f7ef f942 	bl	800a4aa <RBI_IsDCDC>
 801b226:	4603      	mov	r3, r0
 801b228:	2b01      	cmp	r3, #1
 801b22a:	d102      	bne.n	801b232 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b22c:	2301      	movs	r3, #1
 801b22e:	71fb      	strb	r3, [r7, #7]
 801b230:	e001      	b.n	801b236 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b232:	2300      	movs	r3, #0
 801b234:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b236:	1dfb      	adds	r3, r7, #7
 801b238:	2201      	movs	r2, #1
 801b23a:	4619      	mov	r1, r3
 801b23c:	2096      	movs	r0, #150	; 0x96
 801b23e:	f000 fcab 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b242:	bf00      	nop
 801b244:	3708      	adds	r7, #8
 801b246:	46bd      	mov	sp, r7
 801b248:	bd80      	pop	{r7, pc}

0801b24a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b24a:	b580      	push	{r7, lr}
 801b24c:	b084      	sub	sp, #16
 801b24e:	af00      	add	r7, sp, #0
 801b250:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b252:	793b      	ldrb	r3, [r7, #4]
 801b254:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	019b      	lsls	r3, r3, #6
 801b25c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b25e:	793b      	ldrb	r3, [r7, #4]
 801b260:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b264:	b2db      	uxtb	r3, r3
 801b266:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b268:	b25b      	sxtb	r3, r3
 801b26a:	4313      	orrs	r3, r2
 801b26c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b26e:	793b      	ldrb	r3, [r7, #4]
 801b270:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b274:	b2db      	uxtb	r3, r3
 801b276:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b278:	b25b      	sxtb	r3, r3
 801b27a:	4313      	orrs	r3, r2
 801b27c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b27e:	793b      	ldrb	r3, [r7, #4]
 801b280:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b284:	b2db      	uxtb	r3, r3
 801b286:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b288:	b25b      	sxtb	r3, r3
 801b28a:	4313      	orrs	r3, r2
 801b28c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b28e:	793b      	ldrb	r3, [r7, #4]
 801b290:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b294:	b2db      	uxtb	r3, r3
 801b296:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b298:	b25b      	sxtb	r3, r3
 801b29a:	4313      	orrs	r3, r2
 801b29c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b29e:	793b      	ldrb	r3, [r7, #4]
 801b2a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b2a4:	b2db      	uxtb	r3, r3
 801b2a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b2a8:	b25b      	sxtb	r3, r3
 801b2aa:	4313      	orrs	r3, r2
 801b2ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b2ae:	793b      	ldrb	r3, [r7, #4]
 801b2b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b2b4:	b2db      	uxtb	r3, r3
 801b2b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b2b8:	4313      	orrs	r3, r2
 801b2ba:	b25b      	sxtb	r3, r3
 801b2bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b2be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b2c0:	f107 030f 	add.w	r3, r7, #15
 801b2c4:	2201      	movs	r2, #1
 801b2c6:	4619      	mov	r1, r3
 801b2c8:	2089      	movs	r0, #137	; 0x89
 801b2ca:	f000 fc65 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b2ce:	bf00      	nop
 801b2d0:	3710      	adds	r7, #16
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	bd80      	pop	{r7, pc}
	...

0801b2d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b084      	sub	sp, #16
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	4a1b      	ldr	r2, [pc, #108]	; (801b350 <SUBGRF_CalibrateImage+0x78>)
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	d904      	bls.n	801b2f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b2e8:	23e1      	movs	r3, #225	; 0xe1
 801b2ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b2ec:	23e9      	movs	r3, #233	; 0xe9
 801b2ee:	737b      	strb	r3, [r7, #13]
 801b2f0:	e022      	b.n	801b338 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	4a17      	ldr	r2, [pc, #92]	; (801b354 <SUBGRF_CalibrateImage+0x7c>)
 801b2f6:	4293      	cmp	r3, r2
 801b2f8:	d904      	bls.n	801b304 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b2fa:	23d7      	movs	r3, #215	; 0xd7
 801b2fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b2fe:	23db      	movs	r3, #219	; 0xdb
 801b300:	737b      	strb	r3, [r7, #13]
 801b302:	e019      	b.n	801b338 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	4a14      	ldr	r2, [pc, #80]	; (801b358 <SUBGRF_CalibrateImage+0x80>)
 801b308:	4293      	cmp	r3, r2
 801b30a:	d904      	bls.n	801b316 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b30c:	23c1      	movs	r3, #193	; 0xc1
 801b30e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b310:	23c5      	movs	r3, #197	; 0xc5
 801b312:	737b      	strb	r3, [r7, #13]
 801b314:	e010      	b.n	801b338 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	4a10      	ldr	r2, [pc, #64]	; (801b35c <SUBGRF_CalibrateImage+0x84>)
 801b31a:	4293      	cmp	r3, r2
 801b31c:	d904      	bls.n	801b328 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b31e:	2375      	movs	r3, #117	; 0x75
 801b320:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b322:	2381      	movs	r3, #129	; 0x81
 801b324:	737b      	strb	r3, [r7, #13]
 801b326:	e007      	b.n	801b338 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	4a0d      	ldr	r2, [pc, #52]	; (801b360 <SUBGRF_CalibrateImage+0x88>)
 801b32c:	4293      	cmp	r3, r2
 801b32e:	d903      	bls.n	801b338 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801b330:	236b      	movs	r3, #107	; 0x6b
 801b332:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b334:	236f      	movs	r3, #111	; 0x6f
 801b336:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b338:	f107 030c 	add.w	r3, r7, #12
 801b33c:	2202      	movs	r2, #2
 801b33e:	4619      	mov	r1, r3
 801b340:	2098      	movs	r0, #152	; 0x98
 801b342:	f000 fc29 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b346:	bf00      	nop
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	35a4e900 	.word	0x35a4e900
 801b354:	32a9f880 	.word	0x32a9f880
 801b358:	2de54480 	.word	0x2de54480
 801b35c:	1b6b0b00 	.word	0x1b6b0b00
 801b360:	1954fc40 	.word	0x1954fc40

0801b364 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b364:	b590      	push	{r4, r7, lr}
 801b366:	b085      	sub	sp, #20
 801b368:	af00      	add	r7, sp, #0
 801b36a:	4604      	mov	r4, r0
 801b36c:	4608      	mov	r0, r1
 801b36e:	4611      	mov	r1, r2
 801b370:	461a      	mov	r2, r3
 801b372:	4623      	mov	r3, r4
 801b374:	71fb      	strb	r3, [r7, #7]
 801b376:	4603      	mov	r3, r0
 801b378:	71bb      	strb	r3, [r7, #6]
 801b37a:	460b      	mov	r3, r1
 801b37c:	717b      	strb	r3, [r7, #5]
 801b37e:	4613      	mov	r3, r2
 801b380:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b382:	79fb      	ldrb	r3, [r7, #7]
 801b384:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b386:	79bb      	ldrb	r3, [r7, #6]
 801b388:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b38a:	797b      	ldrb	r3, [r7, #5]
 801b38c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b38e:	793b      	ldrb	r3, [r7, #4]
 801b390:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b392:	f107 030c 	add.w	r3, r7, #12
 801b396:	2204      	movs	r2, #4
 801b398:	4619      	mov	r1, r3
 801b39a:	2095      	movs	r0, #149	; 0x95
 801b39c:	f000 fbfc 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b3a0:	bf00      	nop
 801b3a2:	3714      	adds	r7, #20
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd90      	pop	{r4, r7, pc}

0801b3a8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b3a8:	b590      	push	{r4, r7, lr}
 801b3aa:	b085      	sub	sp, #20
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	4604      	mov	r4, r0
 801b3b0:	4608      	mov	r0, r1
 801b3b2:	4611      	mov	r1, r2
 801b3b4:	461a      	mov	r2, r3
 801b3b6:	4623      	mov	r3, r4
 801b3b8:	80fb      	strh	r3, [r7, #6]
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	80bb      	strh	r3, [r7, #4]
 801b3be:	460b      	mov	r3, r1
 801b3c0:	807b      	strh	r3, [r7, #2]
 801b3c2:	4613      	mov	r3, r2
 801b3c4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b3c6:	88fb      	ldrh	r3, [r7, #6]
 801b3c8:	0a1b      	lsrs	r3, r3, #8
 801b3ca:	b29b      	uxth	r3, r3
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b3d0:	88fb      	ldrh	r3, [r7, #6]
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b3d6:	88bb      	ldrh	r3, [r7, #4]
 801b3d8:	0a1b      	lsrs	r3, r3, #8
 801b3da:	b29b      	uxth	r3, r3
 801b3dc:	b2db      	uxtb	r3, r3
 801b3de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b3e0:	88bb      	ldrh	r3, [r7, #4]
 801b3e2:	b2db      	uxtb	r3, r3
 801b3e4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b3e6:	887b      	ldrh	r3, [r7, #2]
 801b3e8:	0a1b      	lsrs	r3, r3, #8
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	b2db      	uxtb	r3, r3
 801b3ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b3f0:	887b      	ldrh	r3, [r7, #2]
 801b3f2:	b2db      	uxtb	r3, r3
 801b3f4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b3f6:	883b      	ldrh	r3, [r7, #0]
 801b3f8:	0a1b      	lsrs	r3, r3, #8
 801b3fa:	b29b      	uxth	r3, r3
 801b3fc:	b2db      	uxtb	r3, r3
 801b3fe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b400:	883b      	ldrh	r3, [r7, #0]
 801b402:	b2db      	uxtb	r3, r3
 801b404:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b406:	f107 0308 	add.w	r3, r7, #8
 801b40a:	2208      	movs	r2, #8
 801b40c:	4619      	mov	r1, r3
 801b40e:	2008      	movs	r0, #8
 801b410:	f000 fbc2 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b414:	bf00      	nop
 801b416:	3714      	adds	r7, #20
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd90      	pop	{r4, r7, pc}

0801b41c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b084      	sub	sp, #16
 801b420:	af00      	add	r7, sp, #0
 801b422:	4603      	mov	r3, r0
 801b424:	6039      	str	r1, [r7, #0]
 801b426:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b428:	79fb      	ldrb	r3, [r7, #7]
 801b42a:	f003 0307 	and.w	r3, r3, #7
 801b42e:	b2db      	uxtb	r3, r3
 801b430:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	0c1b      	lsrs	r3, r3, #16
 801b436:	b2db      	uxtb	r3, r3
 801b438:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	0a1b      	lsrs	r3, r3, #8
 801b43e:	b2db      	uxtb	r3, r3
 801b440:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b442:	683b      	ldr	r3, [r7, #0]
 801b444:	b2db      	uxtb	r3, r3
 801b446:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b448:	f107 030c 	add.w	r3, r7, #12
 801b44c:	2204      	movs	r2, #4
 801b44e:	4619      	mov	r1, r3
 801b450:	2097      	movs	r0, #151	; 0x97
 801b452:	f000 fba1 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b456:	bf00      	nop
 801b458:	3710      	adds	r7, #16
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
	...

0801b460 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b464:	b084      	sub	sp, #16
 801b466:	af00      	add	r7, sp, #0
 801b468:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b46a:	2300      	movs	r3, #0
 801b46c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b46e:	4b1d      	ldr	r3, [pc, #116]	; (801b4e4 <SUBGRF_SetRfFrequency+0x84>)
 801b470:	781b      	ldrb	r3, [r3, #0]
 801b472:	f083 0301 	eor.w	r3, r3, #1
 801b476:	b2db      	uxtb	r3, r3
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d005      	beq.n	801b488 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f7ff ff2b 	bl	801b2d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b482:	4b18      	ldr	r3, [pc, #96]	; (801b4e4 <SUBGRF_SetRfFrequency+0x84>)
 801b484:	2201      	movs	r2, #1
 801b486:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	2200      	movs	r2, #0
 801b48c:	461c      	mov	r4, r3
 801b48e:	4615      	mov	r5, r2
 801b490:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b494:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b498:	4a13      	ldr	r2, [pc, #76]	; (801b4e8 <SUBGRF_SetRfFrequency+0x88>)
 801b49a:	f04f 0300 	mov.w	r3, #0
 801b49e:	4640      	mov	r0, r8
 801b4a0:	4649      	mov	r1, r9
 801b4a2:	f7e5 fb5f 	bl	8000b64 <__aeabi_uldivmod>
 801b4a6:	4602      	mov	r2, r0
 801b4a8:	460b      	mov	r3, r1
 801b4aa:	4613      	mov	r3, r2
 801b4ac:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	0e1b      	lsrs	r3, r3, #24
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	0c1b      	lsrs	r3, r3, #16
 801b4ba:	b2db      	uxtb	r3, r3
 801b4bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	0a1b      	lsrs	r3, r3, #8
 801b4c2:	b2db      	uxtb	r3, r3
 801b4c4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b4cc:	f107 0308 	add.w	r3, r7, #8
 801b4d0:	2204      	movs	r2, #4
 801b4d2:	4619      	mov	r1, r3
 801b4d4:	2086      	movs	r0, #134	; 0x86
 801b4d6:	f000 fb5f 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b4da:	bf00      	nop
 801b4dc:	3710      	adds	r7, #16
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b4e4:	20003e24 	.word	0x20003e24
 801b4e8:	01e84800 	.word	0x01e84800

0801b4ec <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b082      	sub	sp, #8
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b4f6:	79fa      	ldrb	r2, [r7, #7]
 801b4f8:	4b09      	ldr	r3, [pc, #36]	; (801b520 <SUBGRF_SetPacketType+0x34>)
 801b4fa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b4fc:	79fb      	ldrb	r3, [r7, #7]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d104      	bne.n	801b50c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b502:	2100      	movs	r1, #0
 801b504:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b508:	f000 fa96 	bl	801ba38 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b50c:	1dfb      	adds	r3, r7, #7
 801b50e:	2201      	movs	r2, #1
 801b510:	4619      	mov	r1, r3
 801b512:	208a      	movs	r0, #138	; 0x8a
 801b514:	f000 fb40 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b518:	bf00      	nop
 801b51a:	3708      	adds	r7, #8
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	20003e1d 	.word	0x20003e1d

0801b524 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b524:	b480      	push	{r7}
 801b526:	af00      	add	r7, sp, #0
    return PacketType;
 801b528:	4b02      	ldr	r3, [pc, #8]	; (801b534 <SUBGRF_GetPacketType+0x10>)
 801b52a:	781b      	ldrb	r3, [r3, #0]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	46bd      	mov	sp, r7
 801b530:	bc80      	pop	{r7}
 801b532:	4770      	bx	lr
 801b534:	20003e1d 	.word	0x20003e1d

0801b538 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b084      	sub	sp, #16
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	4603      	mov	r3, r0
 801b540:	71fb      	strb	r3, [r7, #7]
 801b542:	460b      	mov	r3, r1
 801b544:	71bb      	strb	r3, [r7, #6]
 801b546:	4613      	mov	r3, r2
 801b548:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801b54a:	79fb      	ldrb	r3, [r7, #7]
 801b54c:	2b01      	cmp	r3, #1
 801b54e:	d124      	bne.n	801b59a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801b550:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b554:	2b0f      	cmp	r3, #15
 801b556:	d106      	bne.n	801b566 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801b558:	2301      	movs	r3, #1
 801b55a:	2201      	movs	r2, #1
 801b55c:	2100      	movs	r1, #0
 801b55e:	2006      	movs	r0, #6
 801b560:	f7ff ff00 	bl	801b364 <SUBGRF_SetPaConfig>
 801b564:	e005      	b.n	801b572 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801b566:	2301      	movs	r3, #1
 801b568:	2201      	movs	r2, #1
 801b56a:	2100      	movs	r1, #0
 801b56c:	2004      	movs	r0, #4
 801b56e:	f7ff fef9 	bl	801b364 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801b572:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b576:	2b0d      	cmp	r3, #13
 801b578:	dd02      	ble.n	801b580 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801b57a:	230e      	movs	r3, #14
 801b57c:	71bb      	strb	r3, [r7, #6]
 801b57e:	e006      	b.n	801b58e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801b580:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b584:	f113 0f11 	cmn.w	r3, #17
 801b588:	da01      	bge.n	801b58e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801b58a:	23ef      	movs	r3, #239	; 0xef
 801b58c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801b58e:	2118      	movs	r1, #24
 801b590:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b594:	f000 fa50 	bl	801ba38 <SUBGRF_WriteRegister>
 801b598:	e025      	b.n	801b5e6 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801b59a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b59e:	f000 fa5f 	bl	801ba60 <SUBGRF_ReadRegister>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	f043 031e 	orr.w	r3, r3, #30
 801b5a8:	b2db      	uxtb	r3, r3
 801b5aa:	4619      	mov	r1, r3
 801b5ac:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b5b0:	f000 fa42 	bl	801ba38 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801b5b4:	2301      	movs	r3, #1
 801b5b6:	2200      	movs	r2, #0
 801b5b8:	2107      	movs	r1, #7
 801b5ba:	2004      	movs	r0, #4
 801b5bc:	f7ff fed2 	bl	801b364 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801b5c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5c4:	2b16      	cmp	r3, #22
 801b5c6:	dd02      	ble.n	801b5ce <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801b5c8:	2316      	movs	r3, #22
 801b5ca:	71bb      	strb	r3, [r7, #6]
 801b5cc:	e006      	b.n	801b5dc <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801b5ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b5d2:	f113 0f09 	cmn.w	r3, #9
 801b5d6:	da01      	bge.n	801b5dc <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801b5d8:	23f7      	movs	r3, #247	; 0xf7
 801b5da:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801b5dc:	2138      	movs	r1, #56	; 0x38
 801b5de:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b5e2:	f000 fa29 	bl	801ba38 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b5e6:	79bb      	ldrb	r3, [r7, #6]
 801b5e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801b5ea:	797b      	ldrb	r3, [r7, #5]
 801b5ec:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801b5ee:	f107 030c 	add.w	r3, r7, #12
 801b5f2:	2202      	movs	r2, #2
 801b5f4:	4619      	mov	r1, r3
 801b5f6:	208e      	movs	r0, #142	; 0x8e
 801b5f8:	f000 face 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b5fc:	bf00      	nop
 801b5fe:	3710      	adds	r7, #16
 801b600:	46bd      	mov	sp, r7
 801b602:	bd80      	pop	{r7, pc}

0801b604 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b604:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b608:	b086      	sub	sp, #24
 801b60a:	af00      	add	r7, sp, #0
 801b60c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b60e:	2300      	movs	r3, #0
 801b610:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b612:	4a61      	ldr	r2, [pc, #388]	; (801b798 <SUBGRF_SetModulationParams+0x194>)
 801b614:	f107 0308 	add.w	r3, r7, #8
 801b618:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b61c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	781a      	ldrb	r2, [r3, #0]
 801b624:	4b5d      	ldr	r3, [pc, #372]	; (801b79c <SUBGRF_SetModulationParams+0x198>)
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	429a      	cmp	r2, r3
 801b62a:	d004      	beq.n	801b636 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	781b      	ldrb	r3, [r3, #0]
 801b630:	4618      	mov	r0, r3
 801b632:	f7ff ff5b 	bl	801b4ec <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	2b03      	cmp	r3, #3
 801b63c:	f200 80a5 	bhi.w	801b78a <SUBGRF_SetModulationParams+0x186>
 801b640:	a201      	add	r2, pc, #4	; (adr r2, 801b648 <SUBGRF_SetModulationParams+0x44>)
 801b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b646:	bf00      	nop
 801b648:	0801b659 	.word	0x0801b659
 801b64c:	0801b719 	.word	0x0801b719
 801b650:	0801b6db 	.word	0x0801b6db
 801b654:	0801b747 	.word	0x0801b747
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b658:	2308      	movs	r3, #8
 801b65a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	685b      	ldr	r3, [r3, #4]
 801b660:	4a4f      	ldr	r2, [pc, #316]	; (801b7a0 <SUBGRF_SetModulationParams+0x19c>)
 801b662:	fbb2 f3f3 	udiv	r3, r2, r3
 801b666:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b668:	697b      	ldr	r3, [r7, #20]
 801b66a:	0c1b      	lsrs	r3, r3, #16
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	0a1b      	lsrs	r3, r3, #8
 801b674:	b2db      	uxtb	r3, r3
 801b676:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b678:	697b      	ldr	r3, [r7, #20]
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	7b1b      	ldrb	r3, [r3, #12]
 801b682:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	7b5b      	ldrb	r3, [r3, #13]
 801b688:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	689b      	ldr	r3, [r3, #8]
 801b68e:	2200      	movs	r2, #0
 801b690:	461c      	mov	r4, r3
 801b692:	4615      	mov	r5, r2
 801b694:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b698:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b69c:	4a41      	ldr	r2, [pc, #260]	; (801b7a4 <SUBGRF_SetModulationParams+0x1a0>)
 801b69e:	f04f 0300 	mov.w	r3, #0
 801b6a2:	4640      	mov	r0, r8
 801b6a4:	4649      	mov	r1, r9
 801b6a6:	f7e5 fa5d 	bl	8000b64 <__aeabi_uldivmod>
 801b6aa:	4602      	mov	r2, r0
 801b6ac:	460b      	mov	r3, r1
 801b6ae:	4613      	mov	r3, r2
 801b6b0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b6b2:	697b      	ldr	r3, [r7, #20]
 801b6b4:	0c1b      	lsrs	r3, r3, #16
 801b6b6:	b2db      	uxtb	r3, r3
 801b6b8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	0a1b      	lsrs	r3, r3, #8
 801b6be:	b2db      	uxtb	r3, r3
 801b6c0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b6c2:	697b      	ldr	r3, [r7, #20]
 801b6c4:	b2db      	uxtb	r3, r3
 801b6c6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b6c8:	7cfb      	ldrb	r3, [r7, #19]
 801b6ca:	b29a      	uxth	r2, r3
 801b6cc:	f107 0308 	add.w	r3, r7, #8
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	208b      	movs	r0, #139	; 0x8b
 801b6d4:	f000 fa60 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b6d8:	e058      	b.n	801b78c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b6da:	2304      	movs	r3, #4
 801b6dc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	691b      	ldr	r3, [r3, #16]
 801b6e2:	4a2f      	ldr	r2, [pc, #188]	; (801b7a0 <SUBGRF_SetModulationParams+0x19c>)
 801b6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6e8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	0c1b      	lsrs	r3, r3, #16
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b6f2:	697b      	ldr	r3, [r7, #20]
 801b6f4:	0a1b      	lsrs	r3, r3, #8
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b6fa:	697b      	ldr	r3, [r7, #20]
 801b6fc:	b2db      	uxtb	r3, r3
 801b6fe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	7d1b      	ldrb	r3, [r3, #20]
 801b704:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b706:	7cfb      	ldrb	r3, [r7, #19]
 801b708:	b29a      	uxth	r2, r3
 801b70a:	f107 0308 	add.w	r3, r7, #8
 801b70e:	4619      	mov	r1, r3
 801b710:	208b      	movs	r0, #139	; 0x8b
 801b712:	f000 fa41 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b716:	e039      	b.n	801b78c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b718:	2304      	movs	r3, #4
 801b71a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	7e1b      	ldrb	r3, [r3, #24]
 801b720:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	7e5b      	ldrb	r3, [r3, #25]
 801b726:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	7e9b      	ldrb	r3, [r3, #26]
 801b72c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	7edb      	ldrb	r3, [r3, #27]
 801b732:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b734:	7cfb      	ldrb	r3, [r7, #19]
 801b736:	b29a      	uxth	r2, r3
 801b738:	f107 0308 	add.w	r3, r7, #8
 801b73c:	4619      	mov	r1, r3
 801b73e:	208b      	movs	r0, #139	; 0x8b
 801b740:	f000 fa2a 	bl	801bb98 <SUBGRF_WriteCommand>

        break;
 801b744:	e022      	b.n	801b78c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b746:	2305      	movs	r3, #5
 801b748:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	685b      	ldr	r3, [r3, #4]
 801b74e:	4a14      	ldr	r2, [pc, #80]	; (801b7a0 <SUBGRF_SetModulationParams+0x19c>)
 801b750:	fbb2 f3f3 	udiv	r3, r2, r3
 801b754:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	0c1b      	lsrs	r3, r3, #16
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b75e:	697b      	ldr	r3, [r7, #20]
 801b760:	0a1b      	lsrs	r3, r3, #8
 801b762:	b2db      	uxtb	r3, r3
 801b764:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	b2db      	uxtb	r3, r3
 801b76a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	7b1b      	ldrb	r3, [r3, #12]
 801b770:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	7b5b      	ldrb	r3, [r3, #13]
 801b776:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b778:	7cfb      	ldrb	r3, [r7, #19]
 801b77a:	b29a      	uxth	r2, r3
 801b77c:	f107 0308 	add.w	r3, r7, #8
 801b780:	4619      	mov	r1, r3
 801b782:	208b      	movs	r0, #139	; 0x8b
 801b784:	f000 fa08 	bl	801bb98 <SUBGRF_WriteCommand>
        break;
 801b788:	e000      	b.n	801b78c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b78a:	bf00      	nop
    }
}
 801b78c:	bf00      	nop
 801b78e:	3718      	adds	r7, #24
 801b790:	46bd      	mov	sp, r7
 801b792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b796:	bf00      	nop
 801b798:	0801e0dc 	.word	0x0801e0dc
 801b79c:	20003e1d 	.word	0x20003e1d
 801b7a0:	3d090000 	.word	0x3d090000
 801b7a4:	01e84800 	.word	0x01e84800

0801b7a8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b086      	sub	sp, #24
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b7b4:	4a48      	ldr	r2, [pc, #288]	; (801b8d8 <SUBGRF_SetPacketParams+0x130>)
 801b7b6:	f107 030c 	add.w	r3, r7, #12
 801b7ba:	ca07      	ldmia	r2, {r0, r1, r2}
 801b7bc:	c303      	stmia	r3!, {r0, r1}
 801b7be:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	781a      	ldrb	r2, [r3, #0]
 801b7c4:	4b45      	ldr	r3, [pc, #276]	; (801b8dc <SUBGRF_SetPacketParams+0x134>)
 801b7c6:	781b      	ldrb	r3, [r3, #0]
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	d004      	beq.n	801b7d6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	781b      	ldrb	r3, [r3, #0]
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	f7ff fe8b 	bl	801b4ec <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	781b      	ldrb	r3, [r3, #0]
 801b7da:	2b03      	cmp	r3, #3
 801b7dc:	d878      	bhi.n	801b8d0 <SUBGRF_SetPacketParams+0x128>
 801b7de:	a201      	add	r2, pc, #4	; (adr r2, 801b7e4 <SUBGRF_SetPacketParams+0x3c>)
 801b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7e4:	0801b7f5 	.word	0x0801b7f5
 801b7e8:	0801b885 	.word	0x0801b885
 801b7ec:	0801b879 	.word	0x0801b879
 801b7f0:	0801b7f5 	.word	0x0801b7f5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	7a5b      	ldrb	r3, [r3, #9]
 801b7f8:	2bf1      	cmp	r3, #241	; 0xf1
 801b7fa:	d10a      	bne.n	801b812 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b7fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b800:	f7ff fb16 	bl	801ae30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b804:	f248 0005 	movw	r0, #32773	; 0x8005
 801b808:	f7ff fb32 	bl	801ae70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b80c:	2302      	movs	r3, #2
 801b80e:	75bb      	strb	r3, [r7, #22]
 801b810:	e011      	b.n	801b836 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	7a5b      	ldrb	r3, [r3, #9]
 801b816:	2bf2      	cmp	r3, #242	; 0xf2
 801b818:	d10a      	bne.n	801b830 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b81a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b81e:	f7ff fb07 	bl	801ae30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b822:	f241 0021 	movw	r0, #4129	; 0x1021
 801b826:	f7ff fb23 	bl	801ae70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b82a:	2306      	movs	r3, #6
 801b82c:	75bb      	strb	r3, [r7, #22]
 801b82e:	e002      	b.n	801b836 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	7a5b      	ldrb	r3, [r3, #9]
 801b834:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b836:	2309      	movs	r3, #9
 801b838:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	885b      	ldrh	r3, [r3, #2]
 801b83e:	0a1b      	lsrs	r3, r3, #8
 801b840:	b29b      	uxth	r3, r3
 801b842:	b2db      	uxtb	r3, r3
 801b844:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	885b      	ldrh	r3, [r3, #2]
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	791b      	ldrb	r3, [r3, #4]
 801b852:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	795b      	ldrb	r3, [r3, #5]
 801b858:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	799b      	ldrb	r3, [r3, #6]
 801b85e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	79db      	ldrb	r3, [r3, #7]
 801b864:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	7a1b      	ldrb	r3, [r3, #8]
 801b86a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b86c:	7dbb      	ldrb	r3, [r7, #22]
 801b86e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	7a9b      	ldrb	r3, [r3, #10]
 801b874:	753b      	strb	r3, [r7, #20]
        break;
 801b876:	e022      	b.n	801b8be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b878:	2301      	movs	r3, #1
 801b87a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	7b1b      	ldrb	r3, [r3, #12]
 801b880:	733b      	strb	r3, [r7, #12]
        break;
 801b882:	e01c      	b.n	801b8be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b884:	2306      	movs	r3, #6
 801b886:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	89db      	ldrh	r3, [r3, #14]
 801b88c:	0a1b      	lsrs	r3, r3, #8
 801b88e:	b29b      	uxth	r3, r3
 801b890:	b2db      	uxtb	r3, r3
 801b892:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	89db      	ldrh	r3, [r3, #14]
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	7c1a      	ldrb	r2, [r3, #16]
 801b8a0:	4b0f      	ldr	r3, [pc, #60]	; (801b8e0 <SUBGRF_SetPacketParams+0x138>)
 801b8a2:	4611      	mov	r1, r2
 801b8a4:	7019      	strb	r1, [r3, #0]
 801b8a6:	4613      	mov	r3, r2
 801b8a8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	7c5b      	ldrb	r3, [r3, #17]
 801b8ae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	7c9b      	ldrb	r3, [r3, #18]
 801b8b4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	7cdb      	ldrb	r3, [r3, #19]
 801b8ba:	747b      	strb	r3, [r7, #17]
        break;
 801b8bc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b8be:	7dfb      	ldrb	r3, [r7, #23]
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	f107 030c 	add.w	r3, r7, #12
 801b8c6:	4619      	mov	r1, r3
 801b8c8:	208c      	movs	r0, #140	; 0x8c
 801b8ca:	f000 f965 	bl	801bb98 <SUBGRF_WriteCommand>
 801b8ce:	e000      	b.n	801b8d2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b8d0:	bf00      	nop
}
 801b8d2:	3718      	adds	r7, #24
 801b8d4:	46bd      	mov	sp, r7
 801b8d6:	bd80      	pop	{r7, pc}
 801b8d8:	0801e0e4 	.word	0x0801e0e4
 801b8dc:	20003e1d 	.word	0x20003e1d
 801b8e0:	20003e1e 	.word	0x20003e1e

0801b8e4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b084      	sub	sp, #16
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	460a      	mov	r2, r1
 801b8ee:	71fb      	strb	r3, [r7, #7]
 801b8f0:	4613      	mov	r3, r2
 801b8f2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b8f4:	79fb      	ldrb	r3, [r7, #7]
 801b8f6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b8f8:	79bb      	ldrb	r3, [r7, #6]
 801b8fa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b8fc:	f107 030c 	add.w	r3, r7, #12
 801b900:	2202      	movs	r2, #2
 801b902:	4619      	mov	r1, r3
 801b904:	208f      	movs	r0, #143	; 0x8f
 801b906:	f000 f947 	bl	801bb98 <SUBGRF_WriteCommand>
}
 801b90a:	bf00      	nop
 801b90c:	3710      	adds	r7, #16
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd80      	pop	{r7, pc}

0801b912 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b912:	b580      	push	{r7, lr}
 801b914:	b082      	sub	sp, #8
 801b916:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b918:	2300      	movs	r3, #0
 801b91a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b91c:	1d3b      	adds	r3, r7, #4
 801b91e:	2201      	movs	r2, #1
 801b920:	4619      	mov	r1, r3
 801b922:	2015      	movs	r0, #21
 801b924:	f000 f95a 	bl	801bbdc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b928:	793b      	ldrb	r3, [r7, #4]
 801b92a:	425b      	negs	r3, r3
 801b92c:	105b      	asrs	r3, r3, #1
 801b92e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b930:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b934:	4618      	mov	r0, r3
 801b936:	3708      	adds	r7, #8
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}

0801b93c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b084      	sub	sp, #16
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
 801b944:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b946:	f107 030c 	add.w	r3, r7, #12
 801b94a:	2202      	movs	r2, #2
 801b94c:	4619      	mov	r1, r3
 801b94e:	2013      	movs	r0, #19
 801b950:	f000 f944 	bl	801bbdc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b954:	f7ff fde6 	bl	801b524 <SUBGRF_GetPacketType>
 801b958:	4603      	mov	r3, r0
 801b95a:	2b01      	cmp	r3, #1
 801b95c:	d10d      	bne.n	801b97a <SUBGRF_GetRxBufferStatus+0x3e>
 801b95e:	4b0c      	ldr	r3, [pc, #48]	; (801b990 <SUBGRF_GetRxBufferStatus+0x54>)
 801b960:	781b      	ldrb	r3, [r3, #0]
 801b962:	b2db      	uxtb	r3, r3
 801b964:	2b01      	cmp	r3, #1
 801b966:	d108      	bne.n	801b97a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b968:	f240 7002 	movw	r0, #1794	; 0x702
 801b96c:	f000 f878 	bl	801ba60 <SUBGRF_ReadRegister>
 801b970:	4603      	mov	r3, r0
 801b972:	461a      	mov	r2, r3
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	701a      	strb	r2, [r3, #0]
 801b978:	e002      	b.n	801b980 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b97a:	7b3a      	ldrb	r2, [r7, #12]
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b980:	7b7a      	ldrb	r2, [r7, #13]
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	701a      	strb	r2, [r3, #0]
}
 801b986:	bf00      	nop
 801b988:	3710      	adds	r7, #16
 801b98a:	46bd      	mov	sp, r7
 801b98c:	bd80      	pop	{r7, pc}
 801b98e:	bf00      	nop
 801b990:	20003e1e 	.word	0x20003e1e

0801b994 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b084      	sub	sp, #16
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b99c:	f107 030c 	add.w	r3, r7, #12
 801b9a0:	2203      	movs	r2, #3
 801b9a2:	4619      	mov	r1, r3
 801b9a4:	2014      	movs	r0, #20
 801b9a6:	f000 f919 	bl	801bbdc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b9aa:	f7ff fdbb 	bl	801b524 <SUBGRF_GetPacketType>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	461a      	mov	r2, r3
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	781b      	ldrb	r3, [r3, #0]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d002      	beq.n	801b9c4 <SUBGRF_GetPacketStatus+0x30>
 801b9be:	2b01      	cmp	r3, #1
 801b9c0:	d013      	beq.n	801b9ea <SUBGRF_GetPacketStatus+0x56>
 801b9c2:	e02a      	b.n	801ba1a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b9c4:	7b3a      	ldrb	r2, [r7, #12]
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b9ca:	7b7b      	ldrb	r3, [r7, #13]
 801b9cc:	425b      	negs	r3, r3
 801b9ce:	105b      	asrs	r3, r3, #1
 801b9d0:	b25a      	sxtb	r2, r3
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b9d6:	7bbb      	ldrb	r3, [r7, #14]
 801b9d8:	425b      	negs	r3, r3
 801b9da:	105b      	asrs	r3, r3, #1
 801b9dc:	b25a      	sxtb	r2, r3
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	609a      	str	r2, [r3, #8]
            break;
 801b9e8:	e020      	b.n	801ba2c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b9ea:	7b3b      	ldrb	r3, [r7, #12]
 801b9ec:	425b      	negs	r3, r3
 801b9ee:	105b      	asrs	r3, r3, #1
 801b9f0:	b25a      	sxtb	r2, r3
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b9f6:	7b7b      	ldrb	r3, [r7, #13]
 801b9f8:	b25b      	sxtb	r3, r3
 801b9fa:	3302      	adds	r3, #2
 801b9fc:	109b      	asrs	r3, r3, #2
 801b9fe:	b25a      	sxtb	r2, r3
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ba04:	7bbb      	ldrb	r3, [r7, #14]
 801ba06:	425b      	negs	r3, r3
 801ba08:	105b      	asrs	r3, r3, #1
 801ba0a:	b25a      	sxtb	r2, r3
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801ba10:	4b08      	ldr	r3, [pc, #32]	; (801ba34 <SUBGRF_GetPacketStatus+0xa0>)
 801ba12:	681a      	ldr	r2, [r3, #0]
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	611a      	str	r2, [r3, #16]
            break;
 801ba18:	e008      	b.n	801ba2c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801ba1a:	2214      	movs	r2, #20
 801ba1c:	2100      	movs	r1, #0
 801ba1e:	6878      	ldr	r0, [r7, #4]
 801ba20:	f000 fe99 	bl	801c756 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	220f      	movs	r2, #15
 801ba28:	701a      	strb	r2, [r3, #0]
            break;
 801ba2a:	bf00      	nop
    }
}
 801ba2c:	bf00      	nop
 801ba2e:	3710      	adds	r7, #16
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	20003e20 	.word	0x20003e20

0801ba38 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	4603      	mov	r3, r0
 801ba40:	460a      	mov	r2, r1
 801ba42:	80fb      	strh	r3, [r7, #6]
 801ba44:	4613      	mov	r3, r2
 801ba46:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801ba48:	1d7a      	adds	r2, r7, #5
 801ba4a:	88f9      	ldrh	r1, [r7, #6]
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	4803      	ldr	r0, [pc, #12]	; (801ba5c <SUBGRF_WriteRegister+0x24>)
 801ba50:	f7eb fc8e 	bl	8007370 <HAL_SUBGHZ_WriteRegisters>
}
 801ba54:	bf00      	nop
 801ba56:	3708      	adds	r7, #8
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}
 801ba5c:	20000a64 	.word	0x20000a64

0801ba60 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b084      	sub	sp, #16
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	4603      	mov	r3, r0
 801ba68:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ba6a:	f107 020f 	add.w	r2, r7, #15
 801ba6e:	88f9      	ldrh	r1, [r7, #6]
 801ba70:	2301      	movs	r3, #1
 801ba72:	4804      	ldr	r0, [pc, #16]	; (801ba84 <SUBGRF_ReadRegister+0x24>)
 801ba74:	f7eb fcdb 	bl	800742e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801ba78:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	20000a64 	.word	0x20000a64

0801ba88 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b086      	sub	sp, #24
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	4603      	mov	r3, r0
 801ba90:	6039      	str	r1, [r7, #0]
 801ba92:	80fb      	strh	r3, [r7, #6]
 801ba94:	4613      	mov	r3, r2
 801ba96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba98:	f3ef 8310 	mrs	r3, PRIMASK
 801ba9c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801baa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801baa2:	b672      	cpsid	i
}
 801baa4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801baa6:	88bb      	ldrh	r3, [r7, #4]
 801baa8:	88f9      	ldrh	r1, [r7, #6]
 801baaa:	683a      	ldr	r2, [r7, #0]
 801baac:	4806      	ldr	r0, [pc, #24]	; (801bac8 <SUBGRF_WriteRegisters+0x40>)
 801baae:	f7eb fc5f 	bl	8007370 <HAL_SUBGHZ_WriteRegisters>
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bab6:	693b      	ldr	r3, [r7, #16]
 801bab8:	f383 8810 	msr	PRIMASK, r3
}
 801babc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801babe:	bf00      	nop
 801bac0:	3718      	adds	r7, #24
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}
 801bac6:	bf00      	nop
 801bac8:	20000a64 	.word	0x20000a64

0801bacc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b086      	sub	sp, #24
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	4603      	mov	r3, r0
 801bad4:	6039      	str	r1, [r7, #0]
 801bad6:	80fb      	strh	r3, [r7, #6]
 801bad8:	4613      	mov	r3, r2
 801bada:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801badc:	f3ef 8310 	mrs	r3, PRIMASK
 801bae0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bae2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bae6:	b672      	cpsid	i
}
 801bae8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801baea:	88bb      	ldrh	r3, [r7, #4]
 801baec:	88f9      	ldrh	r1, [r7, #6]
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	4806      	ldr	r0, [pc, #24]	; (801bb0c <SUBGRF_ReadRegisters+0x40>)
 801baf2:	f7eb fc9c 	bl	800742e <HAL_SUBGHZ_ReadRegisters>
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	f383 8810 	msr	PRIMASK, r3
}
 801bb00:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb02:	bf00      	nop
 801bb04:	3718      	adds	r7, #24
 801bb06:	46bd      	mov	sp, r7
 801bb08:	bd80      	pop	{r7, pc}
 801bb0a:	bf00      	nop
 801bb0c:	20000a64 	.word	0x20000a64

0801bb10 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b086      	sub	sp, #24
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	4603      	mov	r3, r0
 801bb18:	6039      	str	r1, [r7, #0]
 801bb1a:	71fb      	strb	r3, [r7, #7]
 801bb1c:	4613      	mov	r3, r2
 801bb1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb20:	f3ef 8310 	mrs	r3, PRIMASK
 801bb24:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb2a:	b672      	cpsid	i
}
 801bb2c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bb2e:	79bb      	ldrb	r3, [r7, #6]
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	79f9      	ldrb	r1, [r7, #7]
 801bb34:	683a      	ldr	r2, [r7, #0]
 801bb36:	4806      	ldr	r0, [pc, #24]	; (801bb50 <SUBGRF_WriteBuffer+0x40>)
 801bb38:	f7eb fd8d 	bl	8007656 <HAL_SUBGHZ_WriteBuffer>
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb40:	693b      	ldr	r3, [r7, #16]
 801bb42:	f383 8810 	msr	PRIMASK, r3
}
 801bb46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb48:	bf00      	nop
 801bb4a:	3718      	adds	r7, #24
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	20000a64 	.word	0x20000a64

0801bb54 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b086      	sub	sp, #24
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	6039      	str	r1, [r7, #0]
 801bb5e:	71fb      	strb	r3, [r7, #7]
 801bb60:	4613      	mov	r3, r2
 801bb62:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb64:	f3ef 8310 	mrs	r3, PRIMASK
 801bb68:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bb6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb6e:	b672      	cpsid	i
}
 801bb70:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bb72:	79bb      	ldrb	r3, [r7, #6]
 801bb74:	b29b      	uxth	r3, r3
 801bb76:	79f9      	ldrb	r1, [r7, #7]
 801bb78:	683a      	ldr	r2, [r7, #0]
 801bb7a:	4806      	ldr	r0, [pc, #24]	; (801bb94 <SUBGRF_ReadBuffer+0x40>)
 801bb7c:	f7eb fdbe 	bl	80076fc <HAL_SUBGHZ_ReadBuffer>
 801bb80:	697b      	ldr	r3, [r7, #20]
 801bb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	f383 8810 	msr	PRIMASK, r3
}
 801bb8a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bb8c:	bf00      	nop
 801bb8e:	3718      	adds	r7, #24
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	20000a64 	.word	0x20000a64

0801bb98 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b086      	sub	sp, #24
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	4603      	mov	r3, r0
 801bba0:	6039      	str	r1, [r7, #0]
 801bba2:	71fb      	strb	r3, [r7, #7]
 801bba4:	4613      	mov	r3, r2
 801bba6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bba8:	f3ef 8310 	mrs	r3, PRIMASK
 801bbac:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbb2:	b672      	cpsid	i
}
 801bbb4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bbb6:	88bb      	ldrh	r3, [r7, #4]
 801bbb8:	79f9      	ldrb	r1, [r7, #7]
 801bbba:	683a      	ldr	r2, [r7, #0]
 801bbbc:	4806      	ldr	r0, [pc, #24]	; (801bbd8 <SUBGRF_WriteCommand+0x40>)
 801bbbe:	f7eb fc97 	bl	80074f0 <HAL_SUBGHZ_ExecSetCmd>
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	f383 8810 	msr	PRIMASK, r3
}
 801bbcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bbce:	bf00      	nop
 801bbd0:	3718      	adds	r7, #24
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	bd80      	pop	{r7, pc}
 801bbd6:	bf00      	nop
 801bbd8:	20000a64 	.word	0x20000a64

0801bbdc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b086      	sub	sp, #24
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	6039      	str	r1, [r7, #0]
 801bbe6:	71fb      	strb	r3, [r7, #7]
 801bbe8:	4613      	mov	r3, r2
 801bbea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbec:	f3ef 8310 	mrs	r3, PRIMASK
 801bbf0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbf2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bbf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bbf6:	b672      	cpsid	i
}
 801bbf8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bbfa:	88bb      	ldrh	r3, [r7, #4]
 801bbfc:	79f9      	ldrb	r1, [r7, #7]
 801bbfe:	683a      	ldr	r2, [r7, #0]
 801bc00:	4806      	ldr	r0, [pc, #24]	; (801bc1c <SUBGRF_ReadCommand+0x40>)
 801bc02:	f7eb fcd4 	bl	80075ae <HAL_SUBGHZ_ExecGetCmd>
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc0a:	693b      	ldr	r3, [r7, #16]
 801bc0c:	f383 8810 	msr	PRIMASK, r3
}
 801bc10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc12:	bf00      	nop
 801bc14:	3718      	adds	r7, #24
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}
 801bc1a:	bf00      	nop
 801bc1c:	20000a64 	.word	0x20000a64

0801bc20 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b084      	sub	sp, #16
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	4603      	mov	r3, r0
 801bc28:	460a      	mov	r2, r1
 801bc2a:	71fb      	strb	r3, [r7, #7]
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bc30:	2301      	movs	r3, #1
 801bc32:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bc34:	79bb      	ldrb	r3, [r7, #6]
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d10d      	bne.n	801bc56 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bc3a:	79fb      	ldrb	r3, [r7, #7]
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d104      	bne.n	801bc4a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bc40:	2302      	movs	r3, #2
 801bc42:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bc44:	2004      	movs	r0, #4
 801bc46:	f000 f8df 	bl	801be08 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bc4a:	79fb      	ldrb	r3, [r7, #7]
 801bc4c:	2b02      	cmp	r3, #2
 801bc4e:	d107      	bne.n	801bc60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bc50:	2303      	movs	r3, #3
 801bc52:	73fb      	strb	r3, [r7, #15]
 801bc54:	e004      	b.n	801bc60 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bc56:	79bb      	ldrb	r3, [r7, #6]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d101      	bne.n	801bc60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bc60:	7bfb      	ldrb	r3, [r7, #15]
 801bc62:	4618      	mov	r0, r3
 801bc64:	f7ee fc05 	bl	800a472 <RBI_ConfigRFSwitch>
}
 801bc68:	bf00      	nop
 801bc6a:	3710      	adds	r7, #16
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	bd80      	pop	{r7, pc}

0801bc70 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b084      	sub	sp, #16
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	4603      	mov	r3, r0
 801bc78:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801bc7e:	f7ee fc06 	bl	800a48e <RBI_GetTxConfig>
 801bc82:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801bc84:	68bb      	ldr	r3, [r7, #8]
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d016      	beq.n	801bcb8 <SUBGRF_SetRfTxPower+0x48>
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	2b02      	cmp	r3, #2
 801bc8e:	dc16      	bgt.n	801bcbe <SUBGRF_SetRfTxPower+0x4e>
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d003      	beq.n	801bc9e <SUBGRF_SetRfTxPower+0x2e>
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	2b01      	cmp	r3, #1
 801bc9a:	d00a      	beq.n	801bcb2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801bc9c:	e00f      	b.n	801bcbe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801bc9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bca2:	2b0f      	cmp	r3, #15
 801bca4:	dd02      	ble.n	801bcac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801bca6:	2302      	movs	r3, #2
 801bca8:	73fb      	strb	r3, [r7, #15]
            break;
 801bcaa:	e009      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801bcac:	2301      	movs	r3, #1
 801bcae:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb0:	e006      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	73fb      	strb	r3, [r7, #15]
            break;
 801bcb6:	e003      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801bcb8:	2302      	movs	r3, #2
 801bcba:	73fb      	strb	r3, [r7, #15]
            break;
 801bcbc:	e000      	b.n	801bcc0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801bcbe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801bcc0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801bcc4:	7bfb      	ldrb	r3, [r7, #15]
 801bcc6:	2202      	movs	r2, #2
 801bcc8:	4618      	mov	r0, r3
 801bcca:	f7ff fc35 	bl	801b538 <SUBGRF_SetTxParams>

    return paSelect;
 801bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3710      	adds	r7, #16
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}

0801bcd8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801bcd8:	b480      	push	{r7}
 801bcda:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801bcdc:	2301      	movs	r3, #1
}
 801bcde:	4618      	mov	r0, r3
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bc80      	pop	{r7}
 801bce4:	4770      	bx	lr
	...

0801bce8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801bcf0:	4b03      	ldr	r3, [pc, #12]	; (801bd00 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	2001      	movs	r0, #1
 801bcf6:	4798      	blx	r3
}
 801bcf8:	bf00      	nop
 801bcfa:	3708      	adds	r7, #8
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}
 801bd00:	20003e28 	.word	0x20003e28

0801bd04 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bd0c:	4b03      	ldr	r3, [pc, #12]	; (801bd1c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	2002      	movs	r0, #2
 801bd12:	4798      	blx	r3
}
 801bd14:	bf00      	nop
 801bd16:	3708      	adds	r7, #8
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	20003e28 	.word	0x20003e28

0801bd20 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b082      	sub	sp, #8
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bd28:	4b03      	ldr	r3, [pc, #12]	; (801bd38 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	2040      	movs	r0, #64	; 0x40
 801bd2e:	4798      	blx	r3
}
 801bd30:	bf00      	nop
 801bd32:	3708      	adds	r7, #8
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd80      	pop	{r7, pc}
 801bd38:	20003e28 	.word	0x20003e28

0801bd3c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bd3c:	b580      	push	{r7, lr}
 801bd3e:	b082      	sub	sp, #8
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	6078      	str	r0, [r7, #4]
 801bd44:	460b      	mov	r3, r1
 801bd46:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bd48:	78fb      	ldrb	r3, [r7, #3]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d002      	beq.n	801bd54 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d005      	beq.n	801bd5e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801bd52:	e00a      	b.n	801bd6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801bd54:	4b07      	ldr	r3, [pc, #28]	; (801bd74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2080      	movs	r0, #128	; 0x80
 801bd5a:	4798      	blx	r3
            break;
 801bd5c:	e005      	b.n	801bd6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bd5e:	4b05      	ldr	r3, [pc, #20]	; (801bd74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bd66:	4798      	blx	r3
            break;
 801bd68:	bf00      	nop
    }
}
 801bd6a:	bf00      	nop
 801bd6c:	3708      	adds	r7, #8
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}
 801bd72:	bf00      	nop
 801bd74:	20003e28 	.word	0x20003e28

0801bd78 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b082      	sub	sp, #8
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bd80:	4b04      	ldr	r3, [pc, #16]	; (801bd94 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bd88:	4798      	blx	r3
}
 801bd8a:	bf00      	nop
 801bd8c:	3708      	adds	r7, #8
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	bd80      	pop	{r7, pc}
 801bd92:	bf00      	nop
 801bd94:	20003e28 	.word	0x20003e28

0801bd98 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bda0:	4b03      	ldr	r3, [pc, #12]	; (801bdb0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2020      	movs	r0, #32
 801bda6:	4798      	blx	r3
}
 801bda8:	bf00      	nop
 801bdaa:	3708      	adds	r7, #8
 801bdac:	46bd      	mov	sp, r7
 801bdae:	bd80      	pop	{r7, pc}
 801bdb0:	20003e28 	.word	0x20003e28

0801bdb4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b082      	sub	sp, #8
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bdbc:	4b03      	ldr	r3, [pc, #12]	; (801bdcc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2004      	movs	r0, #4
 801bdc2:	4798      	blx	r3
}
 801bdc4:	bf00      	nop
 801bdc6:	3708      	adds	r7, #8
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}
 801bdcc:	20003e28 	.word	0x20003e28

0801bdd0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bdd8:	4b03      	ldr	r3, [pc, #12]	; (801bde8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	2008      	movs	r0, #8
 801bdde:	4798      	blx	r3
}
 801bde0:	bf00      	nop
 801bde2:	3708      	adds	r7, #8
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd80      	pop	{r7, pc}
 801bde8:	20003e28 	.word	0x20003e28

0801bdec <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b082      	sub	sp, #8
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bdf4:	4b03      	ldr	r3, [pc, #12]	; (801be04 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	2010      	movs	r0, #16
 801bdfa:	4798      	blx	r3
}
 801bdfc:	bf00      	nop
 801bdfe:	3708      	adds	r7, #8
 801be00:	46bd      	mov	sp, r7
 801be02:	bd80      	pop	{r7, pc}
 801be04:	20003e28 	.word	0x20003e28

0801be08 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b084      	sub	sp, #16
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	4603      	mov	r3, r0
 801be10:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801be12:	f7ee fb4a 	bl	800a4aa <RBI_IsDCDC>
 801be16:	4603      	mov	r3, r0
 801be18:	2b01      	cmp	r3, #1
 801be1a:	d112      	bne.n	801be42 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801be1c:	f640 1023 	movw	r0, #2339	; 0x923
 801be20:	f7ff fe1e 	bl	801ba60 <SUBGRF_ReadRegister>
 801be24:	4603      	mov	r3, r0
 801be26:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801be28:	7bfb      	ldrb	r3, [r7, #15]
 801be2a:	f023 0306 	bic.w	r3, r3, #6
 801be2e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801be30:	7bfa      	ldrb	r2, [r7, #15]
 801be32:	79fb      	ldrb	r3, [r7, #7]
 801be34:	4313      	orrs	r3, r2
 801be36:	b2db      	uxtb	r3, r3
 801be38:	4619      	mov	r1, r3
 801be3a:	f640 1023 	movw	r0, #2339	; 0x923
 801be3e:	f7ff fdfb 	bl	801ba38 <SUBGRF_WriteRegister>
  }
}
 801be42:	bf00      	nop
 801be44:	3710      	adds	r7, #16
 801be46:	46bd      	mov	sp, r7
 801be48:	bd80      	pop	{r7, pc}
	...

0801be4c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801be4c:	b480      	push	{r7}
 801be4e:	b085      	sub	sp, #20
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d101      	bne.n	801be5e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801be5a:	231f      	movs	r3, #31
 801be5c:	e016      	b.n	801be8c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801be5e:	2300      	movs	r3, #0
 801be60:	73fb      	strb	r3, [r7, #15]
 801be62:	e00f      	b.n	801be84 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801be64:	7bfb      	ldrb	r3, [r7, #15]
 801be66:	4a0c      	ldr	r2, [pc, #48]	; (801be98 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801be6c:	687a      	ldr	r2, [r7, #4]
 801be6e:	429a      	cmp	r2, r3
 801be70:	d205      	bcs.n	801be7e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801be72:	7bfb      	ldrb	r3, [r7, #15]
 801be74:	4a08      	ldr	r2, [pc, #32]	; (801be98 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801be76:	00db      	lsls	r3, r3, #3
 801be78:	4413      	add	r3, r2
 801be7a:	791b      	ldrb	r3, [r3, #4]
 801be7c:	e006      	b.n	801be8c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801be7e:	7bfb      	ldrb	r3, [r7, #15]
 801be80:	3301      	adds	r3, #1
 801be82:	73fb      	strb	r3, [r7, #15]
 801be84:	7bfb      	ldrb	r3, [r7, #15]
 801be86:	2b15      	cmp	r3, #21
 801be88:	d9ec      	bls.n	801be64 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801be8a:	e7fe      	b.n	801be8a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801be8c:	4618      	mov	r0, r3
 801be8e:	3714      	adds	r7, #20
 801be90:	46bd      	mov	sp, r7
 801be92:	bc80      	pop	{r7}
 801be94:	4770      	bx	lr
 801be96:	bf00      	nop
 801be98:	0801e6d0 	.word	0x0801e6d0

0801be9c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b08a      	sub	sp, #40	; 0x28
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801bea6:	4b35      	ldr	r3, [pc, #212]	; (801bf7c <SUBGRF_GetCFO+0xe0>)
 801bea8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801beaa:	f640 0007 	movw	r0, #2055	; 0x807
 801beae:	f7ff fdd7 	bl	801ba60 <SUBGRF_ReadRegister>
 801beb2:	4603      	mov	r3, r0
 801beb4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801beb6:	7ffb      	ldrb	r3, [r7, #31]
 801beb8:	08db      	lsrs	r3, r3, #3
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	f003 0303 	and.w	r3, r3, #3
 801bec0:	3328      	adds	r3, #40	; 0x28
 801bec2:	443b      	add	r3, r7
 801bec4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801bec8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801beca:	7ffb      	ldrb	r3, [r7, #31]
 801becc:	f003 0307 	and.w	r3, r3, #7
 801bed0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801bed2:	7fba      	ldrb	r2, [r7, #30]
 801bed4:	7f7b      	ldrb	r3, [r7, #29]
 801bed6:	3b01      	subs	r3, #1
 801bed8:	fa02 f303 	lsl.w	r3, r2, r3
 801bedc:	461a      	mov	r2, r3
 801bede:	4b28      	ldr	r3, [pc, #160]	; (801bf80 <SUBGRF_GetCFO+0xe4>)
 801bee0:	fbb3 f3f2 	udiv	r3, r3, r2
 801bee4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801bee6:	69ba      	ldr	r2, [r7, #24]
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	fbb2 f3f3 	udiv	r3, r2, r3
 801beee:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801bef0:	2301      	movs	r3, #1
 801bef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801bef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801befa:	697a      	ldr	r2, [r7, #20]
 801befc:	fb02 f303 	mul.w	r3, r2, r3
 801bf00:	2b07      	cmp	r3, #7
 801bf02:	d802      	bhi.n	801bf0a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801bf04:	2302      	movs	r3, #2
 801bf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801bf0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf0e:	697a      	ldr	r2, [r7, #20]
 801bf10:	fb02 f303 	mul.w	r3, r2, r3
 801bf14:	2b03      	cmp	r3, #3
 801bf16:	d802      	bhi.n	801bf1e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801bf18:	2304      	movs	r3, #4
 801bf1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801bf1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bf22:	69bb      	ldr	r3, [r7, #24]
 801bf24:	fb02 f303 	mul.w	r3, r2, r3
 801bf28:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801bf2a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801bf2e:	f7ff fd97 	bl	801ba60 <SUBGRF_ReadRegister>
 801bf32:	4603      	mov	r3, r0
 801bf34:	021b      	lsls	r3, r3, #8
 801bf36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bf3a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801bf3c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801bf40:	f7ff fd8e 	bl	801ba60 <SUBGRF_ReadRegister>
 801bf44:	4603      	mov	r3, r0
 801bf46:	461a      	mov	r2, r3
 801bf48:	6a3b      	ldr	r3, [r7, #32]
 801bf4a:	4313      	orrs	r3, r2
 801bf4c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801bf4e:	6a3b      	ldr	r3, [r7, #32]
 801bf50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d005      	beq.n	801bf64 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801bf58:	6a3b      	ldr	r3, [r7, #32]
 801bf5a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801bf5e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801bf62:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801bf64:	693b      	ldr	r3, [r7, #16]
 801bf66:	095b      	lsrs	r3, r3, #5
 801bf68:	6a3a      	ldr	r2, [r7, #32]
 801bf6a:	fb02 f303 	mul.w	r3, r2, r3
 801bf6e:	11da      	asrs	r2, r3, #7
 801bf70:	683b      	ldr	r3, [r7, #0]
 801bf72:	601a      	str	r2, [r3, #0]
}
 801bf74:	bf00      	nop
 801bf76:	3728      	adds	r7, #40	; 0x28
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	bd80      	pop	{r7, pc}
 801bf7c:	0c0a0804 	.word	0x0c0a0804
 801bf80:	01e84800 	.word	0x01e84800

0801bf84 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801bf84:	b480      	push	{r7}
 801bf86:	b087      	sub	sp, #28
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	607a      	str	r2, [r7, #4]
 801bf90:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801bf92:	2300      	movs	r3, #0
 801bf94:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801bf96:	f04f 33ff 	mov.w	r3, #4294967295
 801bf9a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801bf9c:	697b      	ldr	r3, [r7, #20]
}
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	371c      	adds	r7, #28
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	bc80      	pop	{r7}
 801bfa6:	4770      	bx	lr

0801bfa8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801bfa8:	b480      	push	{r7}
 801bfaa:	b087      	sub	sp, #28
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	4603      	mov	r3, r0
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
 801bfb4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801bfba:	f04f 33ff 	mov.w	r3, #4294967295
 801bfbe:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801bfc0:	697b      	ldr	r3, [r7, #20]
}
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	371c      	adds	r7, #28
 801bfc6:	46bd      	mov	sp, r7
 801bfc8:	bc80      	pop	{r7}
 801bfca:	4770      	bx	lr

0801bfcc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801bfcc:	b480      	push	{r7}
 801bfce:	b085      	sub	sp, #20
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	60f8      	str	r0, [r7, #12]
 801bfd4:	60b9      	str	r1, [r7, #8]
 801bfd6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801bfd8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801bfdc:	4618      	mov	r0, r3
 801bfde:	3714      	adds	r7, #20
 801bfe0:	46bd      	mov	sp, r7
 801bfe2:	bc80      	pop	{r7}
 801bfe4:	4770      	bx	lr

0801bfe6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801bfe6:	b480      	push	{r7}
 801bfe8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801bfea:	bf00      	nop
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bc80      	pop	{r7}
 801bff0:	4770      	bx	lr

0801bff2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801bff2:	b480      	push	{r7}
 801bff4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801bff6:	2300      	movs	r3, #0
#endif
}
 801bff8:	4618      	mov	r0, r3
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bc80      	pop	{r7}
 801bffe:	4770      	bx	lr

0801c000 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801c000:	b480      	push	{r7}
 801c002:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801c004:	2300      	movs	r3, #0
#endif
}
 801c006:	4618      	mov	r0, r3
 801c008:	46bd      	mov	sp, r7
 801c00a:	bc80      	pop	{r7}
 801c00c:	4770      	bx	lr

0801c00e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801c00e:	b480      	push	{r7}
 801c010:	b083      	sub	sp, #12
 801c012:	af00      	add	r7, sp, #0
 801c014:	4603      	mov	r3, r0
 801c016:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801c018:	bf00      	nop
 801c01a:	370c      	adds	r7, #12
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bc80      	pop	{r7}
 801c020:	4770      	bx	lr

0801c022 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801c022:	b480      	push	{r7}
 801c024:	b087      	sub	sp, #28
 801c026:	af00      	add	r7, sp, #0
 801c028:	60f8      	str	r0, [r7, #12]
 801c02a:	460b      	mov	r3, r1
 801c02c:	607a      	str	r2, [r7, #4]
 801c02e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801c030:	f04f 33ff 	mov.w	r3, #4294967295
 801c034:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801c036:	697b      	ldr	r3, [r7, #20]
}
 801c038:	4618      	mov	r0, r3
 801c03a:	371c      	adds	r7, #28
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bc80      	pop	{r7}
 801c040:	4770      	bx	lr

0801c042 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c042:	b480      	push	{r7}
 801c044:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801c046:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c04a:	4618      	mov	r0, r3
 801c04c:	46bd      	mov	sp, r7
 801c04e:	bc80      	pop	{r7}
 801c050:	4770      	bx	lr

0801c052 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801c052:	b480      	push	{r7}
 801c054:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801c056:	bf00      	nop
 801c058:	46bd      	mov	sp, r7
 801c05a:	bc80      	pop	{r7}
 801c05c:	4770      	bx	lr

0801c05e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c05e:	b480      	push	{r7}
 801c060:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801c062:	bf00      	nop
 801c064:	46bd      	mov	sp, r7
 801c066:	bc80      	pop	{r7}
 801c068:	4770      	bx	lr

0801c06a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801c06a:	b480      	push	{r7}
 801c06c:	b083      	sub	sp, #12
 801c06e:	af00      	add	r7, sp, #0
 801c070:	4603      	mov	r3, r0
 801c072:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801c074:	bf00      	nop
 801c076:	370c      	adds	r7, #12
 801c078:	46bd      	mov	sp, r7
 801c07a:	bc80      	pop	{r7}
 801c07c:	4770      	bx	lr
	...

0801c080 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c084:	2218      	movs	r2, #24
 801c086:	2100      	movs	r1, #0
 801c088:	4807      	ldr	r0, [pc, #28]	; (801c0a8 <UTIL_ADV_TRACE_Init+0x28>)
 801c08a:	f000 fb64 	bl	801c756 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c08e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c092:	2100      	movs	r1, #0
 801c094:	4805      	ldr	r0, [pc, #20]	; (801c0ac <UTIL_ADV_TRACE_Init+0x2c>)
 801c096:	f000 fb5e 	bl	801c756 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c09a:	4b05      	ldr	r3, [pc, #20]	; (801c0b0 <UTIL_ADV_TRACE_Init+0x30>)
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	4805      	ldr	r0, [pc, #20]	; (801c0b4 <UTIL_ADV_TRACE_Init+0x34>)
 801c0a0:	4798      	blx	r3
 801c0a2:	4603      	mov	r3, r0
}
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	bd80      	pop	{r7, pc}
 801c0a8:	20003e2c 	.word	0x20003e2c
 801c0ac:	20003e44 	.word	0x20003e44
 801c0b0:	0801e240 	.word	0x0801e240
 801c0b4:	0801c321 	.word	0x0801c321

0801c0b8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c0b8:	b480      	push	{r7}
 801c0ba:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c0bc:	4b06      	ldr	r3, [pc, #24]	; (801c0d8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c0be:	8a5a      	ldrh	r2, [r3, #18]
 801c0c0:	4b05      	ldr	r3, [pc, #20]	; (801c0d8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c0c2:	8a1b      	ldrh	r3, [r3, #16]
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	d101      	bne.n	801c0cc <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c0c8:	2301      	movs	r3, #1
 801c0ca:	e000      	b.n	801c0ce <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c0cc:	2300      	movs	r3, #0
}
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	bc80      	pop	{r7}
 801c0d4:	4770      	bx	lr
 801c0d6:	bf00      	nop
 801c0d8:	20003e2c 	.word	0x20003e2c

0801c0dc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c0dc:	b408      	push	{r3}
 801c0de:	b580      	push	{r7, lr}
 801c0e0:	b08d      	sub	sp, #52	; 0x34
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	60f8      	str	r0, [r7, #12]
 801c0e6:	60b9      	str	r1, [r7, #8]
 801c0e8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c0ee:	2300      	movs	r3, #0
 801c0f0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c0f2:	4b37      	ldr	r3, [pc, #220]	; (801c1d0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c0f4:	7a1b      	ldrb	r3, [r3, #8]
 801c0f6:	461a      	mov	r2, r3
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	4293      	cmp	r3, r2
 801c0fc:	d902      	bls.n	801c104 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c0fe:	f06f 0304 	mvn.w	r3, #4
 801c102:	e05e      	b.n	801c1c2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c104:	4b32      	ldr	r3, [pc, #200]	; (801c1d0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c106:	68da      	ldr	r2, [r3, #12]
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	4013      	ands	r3, r2
 801c10c:	68ba      	ldr	r2, [r7, #8]
 801c10e:	429a      	cmp	r2, r3
 801c110:	d002      	beq.n	801c118 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c112:	f06f 0305 	mvn.w	r3, #5
 801c116:	e054      	b.n	801c1c2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c118:	4b2d      	ldr	r3, [pc, #180]	; (801c1d0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c11a:	685b      	ldr	r3, [r3, #4]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d00a      	beq.n	801c136 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d007      	beq.n	801c136 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c126:	4b2a      	ldr	r3, [pc, #168]	; (801c1d0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c128:	685b      	ldr	r3, [r3, #4]
 801c12a:	f107 0116 	add.w	r1, r7, #22
 801c12e:	f107 0218 	add.w	r2, r7, #24
 801c132:	4610      	mov	r0, r2
 801c134:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c136:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c13a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c13e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c140:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c144:	4823      	ldr	r0, [pc, #140]	; (801c1d4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c146:	f001 f999 	bl	801d47c <tiny_vsnprintf_like>
 801c14a:	4603      	mov	r3, r0
 801c14c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c14e:	f000 f9f1 	bl	801c534 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c152:	8afa      	ldrh	r2, [r7, #22]
 801c154:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c156:	4413      	add	r3, r2
 801c158:	b29b      	uxth	r3, r3
 801c15a:	f107 0214 	add.w	r2, r7, #20
 801c15e:	4611      	mov	r1, r2
 801c160:	4618      	mov	r0, r3
 801c162:	f000 f969 	bl	801c438 <TRACE_AllocateBufer>
 801c166:	4603      	mov	r3, r0
 801c168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c16c:	d025      	beq.n	801c1ba <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c16e:	2300      	movs	r3, #0
 801c170:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c172:	e00e      	b.n	801c192 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c176:	8aba      	ldrh	r2, [r7, #20]
 801c178:	3330      	adds	r3, #48	; 0x30
 801c17a:	443b      	add	r3, r7
 801c17c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c180:	4b15      	ldr	r3, [pc, #84]	; (801c1d8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c182:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c184:	8abb      	ldrh	r3, [r7, #20]
 801c186:	3301      	adds	r3, #1
 801c188:	b29b      	uxth	r3, r3
 801c18a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c18c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c18e:	3301      	adds	r3, #1
 801c190:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c192:	8afb      	ldrh	r3, [r7, #22]
 801c194:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c196:	429a      	cmp	r2, r3
 801c198:	d3ec      	bcc.n	801c174 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c19a:	8abb      	ldrh	r3, [r7, #20]
 801c19c:	461a      	mov	r2, r3
 801c19e:	4b0e      	ldr	r3, [pc, #56]	; (801c1d8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c1a0:	18d0      	adds	r0, r2, r3
 801c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c1a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c1aa:	f001 f967 	bl	801d47c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c1ae:	f000 f9df 	bl	801c570 <TRACE_UnLock>

    return TRACE_Send();
 801c1b2:	f000 f831 	bl	801c218 <TRACE_Send>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	e003      	b.n	801c1c2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c1ba:	f000 f9d9 	bl	801c570 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c1be:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	3734      	adds	r7, #52	; 0x34
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c1cc:	b001      	add	sp, #4
 801c1ce:	4770      	bx	lr
 801c1d0:	20003e2c 	.word	0x20003e2c
 801c1d4:	20004244 	.word	0x20004244
 801c1d8:	20003e44 	.word	0x20003e44

0801c1dc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c1dc:	b480      	push	{r7}
 801c1de:	b083      	sub	sp, #12
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c1e4:	4a03      	ldr	r2, [pc, #12]	; (801c1f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6053      	str	r3, [r2, #4]
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	bc80      	pop	{r7}
 801c1f2:	4770      	bx	lr
 801c1f4:	20003e2c 	.word	0x20003e2c

0801c1f8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c1f8:	b480      	push	{r7}
 801c1fa:	b083      	sub	sp, #12
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	4603      	mov	r3, r0
 801c200:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c202:	4a04      	ldr	r2, [pc, #16]	; (801c214 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c204:	79fb      	ldrb	r3, [r7, #7]
 801c206:	7213      	strb	r3, [r2, #8]
}
 801c208:	bf00      	nop
 801c20a:	370c      	adds	r7, #12
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bc80      	pop	{r7}
 801c210:	4770      	bx	lr
 801c212:	bf00      	nop
 801c214:	20003e2c 	.word	0x20003e2c

0801c218 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b088      	sub	sp, #32
 801c21c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c21e:	2300      	movs	r3, #0
 801c220:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c222:	2300      	movs	r3, #0
 801c224:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c226:	f3ef 8310 	mrs	r3, PRIMASK
 801c22a:	613b      	str	r3, [r7, #16]
  return(result);
 801c22c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c22e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c230:	b672      	cpsid	i
}
 801c232:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c234:	f000 f9ba 	bl	801c5ac <TRACE_IsLocked>
 801c238:	4603      	mov	r3, r0
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d15d      	bne.n	801c2fa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c23e:	f000 f979 	bl	801c534 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c242:	4b34      	ldr	r3, [pc, #208]	; (801c314 <TRACE_Send+0xfc>)
 801c244:	8a1a      	ldrh	r2, [r3, #16]
 801c246:	4b33      	ldr	r3, [pc, #204]	; (801c314 <TRACE_Send+0xfc>)
 801c248:	8a5b      	ldrh	r3, [r3, #18]
 801c24a:	429a      	cmp	r2, r3
 801c24c:	d04d      	beq.n	801c2ea <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c24e:	4b31      	ldr	r3, [pc, #196]	; (801c314 <TRACE_Send+0xfc>)
 801c250:	789b      	ldrb	r3, [r3, #2]
 801c252:	2b01      	cmp	r3, #1
 801c254:	d117      	bne.n	801c286 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c256:	4b2f      	ldr	r3, [pc, #188]	; (801c314 <TRACE_Send+0xfc>)
 801c258:	881a      	ldrh	r2, [r3, #0]
 801c25a:	4b2e      	ldr	r3, [pc, #184]	; (801c314 <TRACE_Send+0xfc>)
 801c25c:	8a1b      	ldrh	r3, [r3, #16]
 801c25e:	1ad3      	subs	r3, r2, r3
 801c260:	b29a      	uxth	r2, r3
 801c262:	4b2c      	ldr	r3, [pc, #176]	; (801c314 <TRACE_Send+0xfc>)
 801c264:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c266:	4b2b      	ldr	r3, [pc, #172]	; (801c314 <TRACE_Send+0xfc>)
 801c268:	2202      	movs	r2, #2
 801c26a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c26c:	4b29      	ldr	r3, [pc, #164]	; (801c314 <TRACE_Send+0xfc>)
 801c26e:	2200      	movs	r2, #0
 801c270:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c272:	4b28      	ldr	r3, [pc, #160]	; (801c314 <TRACE_Send+0xfc>)
 801c274:	8a9b      	ldrh	r3, [r3, #20]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d105      	bne.n	801c286 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c27a:	4b26      	ldr	r3, [pc, #152]	; (801c314 <TRACE_Send+0xfc>)
 801c27c:	2200      	movs	r2, #0
 801c27e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c280:	4b24      	ldr	r3, [pc, #144]	; (801c314 <TRACE_Send+0xfc>)
 801c282:	2200      	movs	r2, #0
 801c284:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c286:	4b23      	ldr	r3, [pc, #140]	; (801c314 <TRACE_Send+0xfc>)
 801c288:	789b      	ldrb	r3, [r3, #2]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d115      	bne.n	801c2ba <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c28e:	4b21      	ldr	r3, [pc, #132]	; (801c314 <TRACE_Send+0xfc>)
 801c290:	8a5a      	ldrh	r2, [r3, #18]
 801c292:	4b20      	ldr	r3, [pc, #128]	; (801c314 <TRACE_Send+0xfc>)
 801c294:	8a1b      	ldrh	r3, [r3, #16]
 801c296:	429a      	cmp	r2, r3
 801c298:	d908      	bls.n	801c2ac <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c29a:	4b1e      	ldr	r3, [pc, #120]	; (801c314 <TRACE_Send+0xfc>)
 801c29c:	8a5a      	ldrh	r2, [r3, #18]
 801c29e:	4b1d      	ldr	r3, [pc, #116]	; (801c314 <TRACE_Send+0xfc>)
 801c2a0:	8a1b      	ldrh	r3, [r3, #16]
 801c2a2:	1ad3      	subs	r3, r2, r3
 801c2a4:	b29a      	uxth	r2, r3
 801c2a6:	4b1b      	ldr	r3, [pc, #108]	; (801c314 <TRACE_Send+0xfc>)
 801c2a8:	829a      	strh	r2, [r3, #20]
 801c2aa:	e006      	b.n	801c2ba <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c2ac:	4b19      	ldr	r3, [pc, #100]	; (801c314 <TRACE_Send+0xfc>)
 801c2ae:	8a1b      	ldrh	r3, [r3, #16]
 801c2b0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c2b4:	b29a      	uxth	r2, r3
 801c2b6:	4b17      	ldr	r3, [pc, #92]	; (801c314 <TRACE_Send+0xfc>)
 801c2b8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c2ba:	4b16      	ldr	r3, [pc, #88]	; (801c314 <TRACE_Send+0xfc>)
 801c2bc:	8a1b      	ldrh	r3, [r3, #16]
 801c2be:	461a      	mov	r2, r3
 801c2c0:	4b15      	ldr	r3, [pc, #84]	; (801c318 <TRACE_Send+0x100>)
 801c2c2:	4413      	add	r3, r2
 801c2c4:	61bb      	str	r3, [r7, #24]
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	f383 8810 	msr	PRIMASK, r3
}
 801c2d0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c2d2:	f7e5 fc49 	bl	8001b68 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c2d6:	4b11      	ldr	r3, [pc, #68]	; (801c31c <TRACE_Send+0x104>)
 801c2d8:	68db      	ldr	r3, [r3, #12]
 801c2da:	4a0e      	ldr	r2, [pc, #56]	; (801c314 <TRACE_Send+0xfc>)
 801c2dc:	8a92      	ldrh	r2, [r2, #20]
 801c2de:	4611      	mov	r1, r2
 801c2e0:	69b8      	ldr	r0, [r7, #24]
 801c2e2:	4798      	blx	r3
 801c2e4:	4603      	mov	r3, r0
 801c2e6:	77fb      	strb	r3, [r7, #31]
 801c2e8:	e00d      	b.n	801c306 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c2ea:	f000 f941 	bl	801c570 <TRACE_UnLock>
 801c2ee:	697b      	ldr	r3, [r7, #20]
 801c2f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2f2:	68bb      	ldr	r3, [r7, #8]
 801c2f4:	f383 8810 	msr	PRIMASK, r3
}
 801c2f8:	e005      	b.n	801c306 <TRACE_Send+0xee>
 801c2fa:	697b      	ldr	r3, [r7, #20]
 801c2fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	f383 8810 	msr	PRIMASK, r3
}
 801c304:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c306:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	3720      	adds	r7, #32
 801c30e:	46bd      	mov	sp, r7
 801c310:	bd80      	pop	{r7, pc}
 801c312:	bf00      	nop
 801c314:	20003e2c 	.word	0x20003e2c
 801c318:	20003e44 	.word	0x20003e44
 801c31c:	0801e240 	.word	0x0801e240

0801c320 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c320:	b580      	push	{r7, lr}
 801c322:	b088      	sub	sp, #32
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c328:	2300      	movs	r3, #0
 801c32a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c32c:	f3ef 8310 	mrs	r3, PRIMASK
 801c330:	617b      	str	r3, [r7, #20]
  return(result);
 801c332:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c334:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c336:	b672      	cpsid	i
}
 801c338:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c33a:	4b3c      	ldr	r3, [pc, #240]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c33c:	789b      	ldrb	r3, [r3, #2]
 801c33e:	2b02      	cmp	r3, #2
 801c340:	d106      	bne.n	801c350 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c342:	4b3a      	ldr	r3, [pc, #232]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c344:	2200      	movs	r2, #0
 801c346:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c348:	4b38      	ldr	r3, [pc, #224]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c34a:	2200      	movs	r2, #0
 801c34c:	821a      	strh	r2, [r3, #16]
 801c34e:	e00a      	b.n	801c366 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c350:	4b36      	ldr	r3, [pc, #216]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c352:	8a1a      	ldrh	r2, [r3, #16]
 801c354:	4b35      	ldr	r3, [pc, #212]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c356:	8a9b      	ldrh	r3, [r3, #20]
 801c358:	4413      	add	r3, r2
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c360:	b29a      	uxth	r2, r3
 801c362:	4b32      	ldr	r3, [pc, #200]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c364:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c366:	4b31      	ldr	r3, [pc, #196]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c368:	8a1a      	ldrh	r2, [r3, #16]
 801c36a:	4b30      	ldr	r3, [pc, #192]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c36c:	8a5b      	ldrh	r3, [r3, #18]
 801c36e:	429a      	cmp	r2, r3
 801c370:	d04d      	beq.n	801c40e <TRACE_TxCpltCallback+0xee>
 801c372:	4b2e      	ldr	r3, [pc, #184]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c374:	8adb      	ldrh	r3, [r3, #22]
 801c376:	2b01      	cmp	r3, #1
 801c378:	d149      	bne.n	801c40e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c37a:	4b2c      	ldr	r3, [pc, #176]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c37c:	789b      	ldrb	r3, [r3, #2]
 801c37e:	2b01      	cmp	r3, #1
 801c380:	d117      	bne.n	801c3b2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c382:	4b2a      	ldr	r3, [pc, #168]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c384:	881a      	ldrh	r2, [r3, #0]
 801c386:	4b29      	ldr	r3, [pc, #164]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c388:	8a1b      	ldrh	r3, [r3, #16]
 801c38a:	1ad3      	subs	r3, r2, r3
 801c38c:	b29a      	uxth	r2, r3
 801c38e:	4b27      	ldr	r3, [pc, #156]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c390:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c392:	4b26      	ldr	r3, [pc, #152]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c394:	2202      	movs	r2, #2
 801c396:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c398:	4b24      	ldr	r3, [pc, #144]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c39a:	2200      	movs	r2, #0
 801c39c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c39e:	4b23      	ldr	r3, [pc, #140]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3a0:	8a9b      	ldrh	r3, [r3, #20]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d105      	bne.n	801c3b2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c3a6:	4b21      	ldr	r3, [pc, #132]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c3ac:	4b1f      	ldr	r3, [pc, #124]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c3b2:	4b1e      	ldr	r3, [pc, #120]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3b4:	789b      	ldrb	r3, [r3, #2]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d115      	bne.n	801c3e6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c3ba:	4b1c      	ldr	r3, [pc, #112]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3bc:	8a5a      	ldrh	r2, [r3, #18]
 801c3be:	4b1b      	ldr	r3, [pc, #108]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3c0:	8a1b      	ldrh	r3, [r3, #16]
 801c3c2:	429a      	cmp	r2, r3
 801c3c4:	d908      	bls.n	801c3d8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c3c6:	4b19      	ldr	r3, [pc, #100]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3c8:	8a5a      	ldrh	r2, [r3, #18]
 801c3ca:	4b18      	ldr	r3, [pc, #96]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3cc:	8a1b      	ldrh	r3, [r3, #16]
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	b29a      	uxth	r2, r3
 801c3d2:	4b16      	ldr	r3, [pc, #88]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3d4:	829a      	strh	r2, [r3, #20]
 801c3d6:	e006      	b.n	801c3e6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c3d8:	4b14      	ldr	r3, [pc, #80]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3da:	8a1b      	ldrh	r3, [r3, #16]
 801c3dc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c3e0:	b29a      	uxth	r2, r3
 801c3e2:	4b12      	ldr	r3, [pc, #72]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3e4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c3e6:	4b11      	ldr	r3, [pc, #68]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c3e8:	8a1b      	ldrh	r3, [r3, #16]
 801c3ea:	461a      	mov	r2, r3
 801c3ec:	4b10      	ldr	r3, [pc, #64]	; (801c430 <TRACE_TxCpltCallback+0x110>)
 801c3ee:	4413      	add	r3, r2
 801c3f0:	61fb      	str	r3, [r7, #28]
 801c3f2:	69bb      	ldr	r3, [r7, #24]
 801c3f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3f6:	693b      	ldr	r3, [r7, #16]
 801c3f8:	f383 8810 	msr	PRIMASK, r3
}
 801c3fc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c3fe:	4b0d      	ldr	r3, [pc, #52]	; (801c434 <TRACE_TxCpltCallback+0x114>)
 801c400:	68db      	ldr	r3, [r3, #12]
 801c402:	4a0a      	ldr	r2, [pc, #40]	; (801c42c <TRACE_TxCpltCallback+0x10c>)
 801c404:	8a92      	ldrh	r2, [r2, #20]
 801c406:	4611      	mov	r1, r2
 801c408:	69f8      	ldr	r0, [r7, #28]
 801c40a:	4798      	blx	r3
 801c40c:	e00a      	b.n	801c424 <TRACE_TxCpltCallback+0x104>
 801c40e:	69bb      	ldr	r3, [r7, #24]
 801c410:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	f383 8810 	msr	PRIMASK, r3
}
 801c418:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c41a:	f7e5 fbad 	bl	8001b78 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c41e:	f000 f8a7 	bl	801c570 <TRACE_UnLock>
  }
}
 801c422:	bf00      	nop
 801c424:	bf00      	nop
 801c426:	3720      	adds	r7, #32
 801c428:	46bd      	mov	sp, r7
 801c42a:	bd80      	pop	{r7, pc}
 801c42c:	20003e2c 	.word	0x20003e2c
 801c430:	20003e44 	.word	0x20003e44
 801c434:	0801e240 	.word	0x0801e240

0801c438 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c438:	b480      	push	{r7}
 801c43a:	b087      	sub	sp, #28
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	4603      	mov	r3, r0
 801c440:	6039      	str	r1, [r7, #0]
 801c442:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c448:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c44a:	f3ef 8310 	mrs	r3, PRIMASK
 801c44e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c450:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c454:	b672      	cpsid	i
}
 801c456:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c458:	4b35      	ldr	r3, [pc, #212]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c45a:	8a5a      	ldrh	r2, [r3, #18]
 801c45c:	4b34      	ldr	r3, [pc, #208]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c45e:	8a1b      	ldrh	r3, [r3, #16]
 801c460:	429a      	cmp	r2, r3
 801c462:	d11b      	bne.n	801c49c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c464:	4b32      	ldr	r3, [pc, #200]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c466:	8a5b      	ldrh	r3, [r3, #18]
 801c468:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c46c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c46e:	88fa      	ldrh	r2, [r7, #6]
 801c470:	8afb      	ldrh	r3, [r7, #22]
 801c472:	429a      	cmp	r2, r3
 801c474:	d33a      	bcc.n	801c4ec <TRACE_AllocateBufer+0xb4>
 801c476:	4b2e      	ldr	r3, [pc, #184]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c478:	8a1b      	ldrh	r3, [r3, #16]
 801c47a:	88fa      	ldrh	r2, [r7, #6]
 801c47c:	429a      	cmp	r2, r3
 801c47e:	d235      	bcs.n	801c4ec <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c480:	4b2b      	ldr	r3, [pc, #172]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c482:	2201      	movs	r2, #1
 801c484:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c486:	4b2a      	ldr	r3, [pc, #168]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c488:	8a5a      	ldrh	r2, [r3, #18]
 801c48a:	4b29      	ldr	r3, [pc, #164]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c48c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c48e:	4b28      	ldr	r3, [pc, #160]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c490:	8a1b      	ldrh	r3, [r3, #16]
 801c492:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c494:	4b26      	ldr	r3, [pc, #152]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c496:	2200      	movs	r2, #0
 801c498:	825a      	strh	r2, [r3, #18]
 801c49a:	e027      	b.n	801c4ec <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c49c:	4b24      	ldr	r3, [pc, #144]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c49e:	8a5a      	ldrh	r2, [r3, #18]
 801c4a0:	4b23      	ldr	r3, [pc, #140]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4a2:	8a1b      	ldrh	r3, [r3, #16]
 801c4a4:	429a      	cmp	r2, r3
 801c4a6:	d91b      	bls.n	801c4e0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c4a8:	4b21      	ldr	r3, [pc, #132]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4aa:	8a5b      	ldrh	r3, [r3, #18]
 801c4ac:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c4b0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c4b2:	88fa      	ldrh	r2, [r7, #6]
 801c4b4:	8afb      	ldrh	r3, [r7, #22]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	d318      	bcc.n	801c4ec <TRACE_AllocateBufer+0xb4>
 801c4ba:	4b1d      	ldr	r3, [pc, #116]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4bc:	8a1b      	ldrh	r3, [r3, #16]
 801c4be:	88fa      	ldrh	r2, [r7, #6]
 801c4c0:	429a      	cmp	r2, r3
 801c4c2:	d213      	bcs.n	801c4ec <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c4c4:	4b1a      	ldr	r3, [pc, #104]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4c6:	2201      	movs	r2, #1
 801c4c8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c4ca:	4b19      	ldr	r3, [pc, #100]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4cc:	8a5a      	ldrh	r2, [r3, #18]
 801c4ce:	4b18      	ldr	r3, [pc, #96]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4d0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c4d2:	4b17      	ldr	r3, [pc, #92]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4d4:	8a1b      	ldrh	r3, [r3, #16]
 801c4d6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c4d8:	4b15      	ldr	r3, [pc, #84]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4da:	2200      	movs	r2, #0
 801c4dc:	825a      	strh	r2, [r3, #18]
 801c4de:	e005      	b.n	801c4ec <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c4e0:	4b13      	ldr	r3, [pc, #76]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4e2:	8a1a      	ldrh	r2, [r3, #16]
 801c4e4:	4b12      	ldr	r3, [pc, #72]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4e6:	8a5b      	ldrh	r3, [r3, #18]
 801c4e8:	1ad3      	subs	r3, r2, r3
 801c4ea:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c4ec:	8afa      	ldrh	r2, [r7, #22]
 801c4ee:	88fb      	ldrh	r3, [r7, #6]
 801c4f0:	429a      	cmp	r2, r3
 801c4f2:	d90f      	bls.n	801c514 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c4f4:	4b0e      	ldr	r3, [pc, #56]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4f6:	8a5a      	ldrh	r2, [r3, #18]
 801c4f8:	683b      	ldr	r3, [r7, #0]
 801c4fa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c4fc:	4b0c      	ldr	r3, [pc, #48]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c4fe:	8a5a      	ldrh	r2, [r3, #18]
 801c500:	88fb      	ldrh	r3, [r7, #6]
 801c502:	4413      	add	r3, r2
 801c504:	b29b      	uxth	r3, r3
 801c506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c50a:	b29a      	uxth	r2, r3
 801c50c:	4b08      	ldr	r3, [pc, #32]	; (801c530 <TRACE_AllocateBufer+0xf8>)
 801c50e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c510:	2300      	movs	r3, #0
 801c512:	82bb      	strh	r3, [r7, #20]
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c518:	68bb      	ldr	r3, [r7, #8]
 801c51a:	f383 8810 	msr	PRIMASK, r3
}
 801c51e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c520:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c524:	4618      	mov	r0, r3
 801c526:	371c      	adds	r7, #28
 801c528:	46bd      	mov	sp, r7
 801c52a:	bc80      	pop	{r7}
 801c52c:	4770      	bx	lr
 801c52e:	bf00      	nop
 801c530:	20003e2c 	.word	0x20003e2c

0801c534 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c534:	b480      	push	{r7}
 801c536:	b085      	sub	sp, #20
 801c538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c53a:	f3ef 8310 	mrs	r3, PRIMASK
 801c53e:	607b      	str	r3, [r7, #4]
  return(result);
 801c540:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c542:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c544:	b672      	cpsid	i
}
 801c546:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c548:	4b08      	ldr	r3, [pc, #32]	; (801c56c <TRACE_Lock+0x38>)
 801c54a:	8adb      	ldrh	r3, [r3, #22]
 801c54c:	3301      	adds	r3, #1
 801c54e:	b29a      	uxth	r2, r3
 801c550:	4b06      	ldr	r3, [pc, #24]	; (801c56c <TRACE_Lock+0x38>)
 801c552:	82da      	strh	r2, [r3, #22]
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	f383 8810 	msr	PRIMASK, r3
}
 801c55e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c560:	bf00      	nop
 801c562:	3714      	adds	r7, #20
 801c564:	46bd      	mov	sp, r7
 801c566:	bc80      	pop	{r7}
 801c568:	4770      	bx	lr
 801c56a:	bf00      	nop
 801c56c:	20003e2c 	.word	0x20003e2c

0801c570 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c570:	b480      	push	{r7}
 801c572:	b085      	sub	sp, #20
 801c574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c576:	f3ef 8310 	mrs	r3, PRIMASK
 801c57a:	607b      	str	r3, [r7, #4]
  return(result);
 801c57c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c57e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c580:	b672      	cpsid	i
}
 801c582:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c584:	4b08      	ldr	r3, [pc, #32]	; (801c5a8 <TRACE_UnLock+0x38>)
 801c586:	8adb      	ldrh	r3, [r3, #22]
 801c588:	3b01      	subs	r3, #1
 801c58a:	b29a      	uxth	r2, r3
 801c58c:	4b06      	ldr	r3, [pc, #24]	; (801c5a8 <TRACE_UnLock+0x38>)
 801c58e:	82da      	strh	r2, [r3, #22]
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	f383 8810 	msr	PRIMASK, r3
}
 801c59a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c59c:	bf00      	nop
 801c59e:	3714      	adds	r7, #20
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bc80      	pop	{r7}
 801c5a4:	4770      	bx	lr
 801c5a6:	bf00      	nop
 801c5a8:	20003e2c 	.word	0x20003e2c

0801c5ac <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c5ac:	b480      	push	{r7}
 801c5ae:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c5b0:	4b05      	ldr	r3, [pc, #20]	; (801c5c8 <TRACE_IsLocked+0x1c>)
 801c5b2:	8adb      	ldrh	r3, [r3, #22]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	bf14      	ite	ne
 801c5b8:	2301      	movne	r3, #1
 801c5ba:	2300      	moveq	r3, #0
 801c5bc:	b2db      	uxtb	r3, r3
}
 801c5be:	4618      	mov	r0, r3
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bc80      	pop	{r7}
 801c5c4:	4770      	bx	lr
 801c5c6:	bf00      	nop
 801c5c8:	20003e2c 	.word	0x20003e2c

0801c5cc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c5cc:	b480      	push	{r7}
 801c5ce:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c5d0:	4b04      	ldr	r3, [pc, #16]	; (801c5e4 <UTIL_LPM_Init+0x18>)
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c5d6:	4b04      	ldr	r3, [pc, #16]	; (801c5e8 <UTIL_LPM_Init+0x1c>)
 801c5d8:	2200      	movs	r2, #0
 801c5da:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c5dc:	bf00      	nop
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bc80      	pop	{r7}
 801c5e2:	4770      	bx	lr
 801c5e4:	20004444 	.word	0x20004444
 801c5e8:	20004448 	.word	0x20004448

0801c5ec <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c5ec:	b480      	push	{r7}
 801c5ee:	b087      	sub	sp, #28
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5f8:	f3ef 8310 	mrs	r3, PRIMASK
 801c5fc:	613b      	str	r3, [r7, #16]
  return(result);
 801c5fe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c602:	b672      	cpsid	i
}
 801c604:	bf00      	nop
  
  switch( state )
 801c606:	78fb      	ldrb	r3, [r7, #3]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d008      	beq.n	801c61e <UTIL_LPM_SetStopMode+0x32>
 801c60c:	2b01      	cmp	r3, #1
 801c60e:	d10e      	bne.n	801c62e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c610:	4b0d      	ldr	r3, [pc, #52]	; (801c648 <UTIL_LPM_SetStopMode+0x5c>)
 801c612:	681a      	ldr	r2, [r3, #0]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	4313      	orrs	r3, r2
 801c618:	4a0b      	ldr	r2, [pc, #44]	; (801c648 <UTIL_LPM_SetStopMode+0x5c>)
 801c61a:	6013      	str	r3, [r2, #0]
      break;
 801c61c:	e008      	b.n	801c630 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	43da      	mvns	r2, r3
 801c622:	4b09      	ldr	r3, [pc, #36]	; (801c648 <UTIL_LPM_SetStopMode+0x5c>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	4013      	ands	r3, r2
 801c628:	4a07      	ldr	r2, [pc, #28]	; (801c648 <UTIL_LPM_SetStopMode+0x5c>)
 801c62a:	6013      	str	r3, [r2, #0]
      break;
 801c62c:	e000      	b.n	801c630 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c62e:	bf00      	nop
 801c630:	697b      	ldr	r3, [r7, #20]
 801c632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	f383 8810 	msr	PRIMASK, r3
}
 801c63a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c63c:	bf00      	nop
 801c63e:	371c      	adds	r7, #28
 801c640:	46bd      	mov	sp, r7
 801c642:	bc80      	pop	{r7}
 801c644:	4770      	bx	lr
 801c646:	bf00      	nop
 801c648:	20004444 	.word	0x20004444

0801c64c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c64c:	b480      	push	{r7}
 801c64e:	b087      	sub	sp, #28
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
 801c654:	460b      	mov	r3, r1
 801c656:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c658:	f3ef 8310 	mrs	r3, PRIMASK
 801c65c:	613b      	str	r3, [r7, #16]
  return(result);
 801c65e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c662:	b672      	cpsid	i
}
 801c664:	bf00      	nop
  
  switch(state)
 801c666:	78fb      	ldrb	r3, [r7, #3]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d008      	beq.n	801c67e <UTIL_LPM_SetOffMode+0x32>
 801c66c:	2b01      	cmp	r3, #1
 801c66e:	d10e      	bne.n	801c68e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c670:	4b0d      	ldr	r3, [pc, #52]	; (801c6a8 <UTIL_LPM_SetOffMode+0x5c>)
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	4313      	orrs	r3, r2
 801c678:	4a0b      	ldr	r2, [pc, #44]	; (801c6a8 <UTIL_LPM_SetOffMode+0x5c>)
 801c67a:	6013      	str	r3, [r2, #0]
      break;
 801c67c:	e008      	b.n	801c690 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	43da      	mvns	r2, r3
 801c682:	4b09      	ldr	r3, [pc, #36]	; (801c6a8 <UTIL_LPM_SetOffMode+0x5c>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	4013      	ands	r3, r2
 801c688:	4a07      	ldr	r2, [pc, #28]	; (801c6a8 <UTIL_LPM_SetOffMode+0x5c>)
 801c68a:	6013      	str	r3, [r2, #0]
      break;
 801c68c:	e000      	b.n	801c690 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c68e:	bf00      	nop
 801c690:	697b      	ldr	r3, [r7, #20]
 801c692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	f383 8810 	msr	PRIMASK, r3
}
 801c69a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c69c:	bf00      	nop
 801c69e:	371c      	adds	r7, #28
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	bc80      	pop	{r7}
 801c6a4:	4770      	bx	lr
 801c6a6:	bf00      	nop
 801c6a8:	20004448 	.word	0x20004448

0801c6ac <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801c6ac:	b580      	push	{r7, lr}
 801c6ae:	b084      	sub	sp, #16
 801c6b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6b2:	f3ef 8310 	mrs	r3, PRIMASK
 801c6b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801c6b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c6ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6bc:	b672      	cpsid	i
}
 801c6be:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c6c0:	4b12      	ldr	r3, [pc, #72]	; (801c70c <UTIL_LPM_EnterLowPower+0x60>)
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d006      	beq.n	801c6d6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c6c8:	4b11      	ldr	r3, [pc, #68]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c6ce:	4b10      	ldr	r3, [pc, #64]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6d0:	685b      	ldr	r3, [r3, #4]
 801c6d2:	4798      	blx	r3
 801c6d4:	e010      	b.n	801c6f8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c6d6:	4b0f      	ldr	r3, [pc, #60]	; (801c714 <UTIL_LPM_EnterLowPower+0x68>)
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d006      	beq.n	801c6ec <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c6de:	4b0c      	ldr	r3, [pc, #48]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6e0:	689b      	ldr	r3, [r3, #8]
 801c6e2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c6e4:	4b0a      	ldr	r3, [pc, #40]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6e6:	68db      	ldr	r3, [r3, #12]
 801c6e8:	4798      	blx	r3
 801c6ea:	e005      	b.n	801c6f8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c6ec:	4b08      	ldr	r3, [pc, #32]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6ee:	691b      	ldr	r3, [r3, #16]
 801c6f0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c6f2:	4b07      	ldr	r3, [pc, #28]	; (801c710 <UTIL_LPM_EnterLowPower+0x64>)
 801c6f4:	695b      	ldr	r3, [r3, #20]
 801c6f6:	4798      	blx	r3
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	f383 8810 	msr	PRIMASK, r3
}
 801c702:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c704:	bf00      	nop
 801c706:	3710      	adds	r7, #16
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}
 801c70c:	20004444 	.word	0x20004444
 801c710:	0801e148 	.word	0x0801e148
 801c714:	20004448 	.word	0x20004448

0801c718 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c718:	b480      	push	{r7}
 801c71a:	b087      	sub	sp, #28
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	60f8      	str	r0, [r7, #12]
 801c720:	60b9      	str	r1, [r7, #8]
 801c722:	4613      	mov	r3, r2
 801c724:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c72a:	68bb      	ldr	r3, [r7, #8]
 801c72c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c72e:	e007      	b.n	801c740 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c730:	693a      	ldr	r2, [r7, #16]
 801c732:	1c53      	adds	r3, r2, #1
 801c734:	613b      	str	r3, [r7, #16]
 801c736:	697b      	ldr	r3, [r7, #20]
 801c738:	1c59      	adds	r1, r3, #1
 801c73a:	6179      	str	r1, [r7, #20]
 801c73c:	7812      	ldrb	r2, [r2, #0]
 801c73e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c740:	88fb      	ldrh	r3, [r7, #6]
 801c742:	1e5a      	subs	r2, r3, #1
 801c744:	80fa      	strh	r2, [r7, #6]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d1f2      	bne.n	801c730 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c74a:	bf00      	nop
 801c74c:	bf00      	nop
 801c74e:	371c      	adds	r7, #28
 801c750:	46bd      	mov	sp, r7
 801c752:	bc80      	pop	{r7}
 801c754:	4770      	bx	lr

0801c756 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c756:	b480      	push	{r7}
 801c758:	b085      	sub	sp, #20
 801c75a:	af00      	add	r7, sp, #0
 801c75c:	6078      	str	r0, [r7, #4]
 801c75e:	460b      	mov	r3, r1
 801c760:	70fb      	strb	r3, [r7, #3]
 801c762:	4613      	mov	r3, r2
 801c764:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c76a:	e004      	b.n	801c776 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	1c5a      	adds	r2, r3, #1
 801c770:	60fa      	str	r2, [r7, #12]
 801c772:	78fa      	ldrb	r2, [r7, #3]
 801c774:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c776:	883b      	ldrh	r3, [r7, #0]
 801c778:	1e5a      	subs	r2, r3, #1
 801c77a:	803a      	strh	r2, [r7, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d1f5      	bne.n	801c76c <UTIL_MEM_set_8+0x16>
  }
}
 801c780:	bf00      	nop
 801c782:	bf00      	nop
 801c784:	3714      	adds	r7, #20
 801c786:	46bd      	mov	sp, r7
 801c788:	bc80      	pop	{r7}
 801c78a:	4770      	bx	lr

0801c78c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b08c      	sub	sp, #48	; 0x30
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c794:	4b67      	ldr	r3, [pc, #412]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c79a:	4b66      	ldr	r3, [pc, #408]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c79c:	681a      	ldr	r2, [r3, #0]
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	4013      	ands	r3, r2
 801c7a2:	4a64      	ldr	r2, [pc, #400]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c7a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c7a6:	e083      	b.n	801c8b0 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c7ac:	e002      	b.n	801c7b4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7b0:	3301      	adds	r3, #1
 801c7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c7b4:	4a60      	ldr	r2, [pc, #384]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c7bc:	4b5f      	ldr	r3, [pc, #380]	; (801c93c <UTIL_SEQ_Run+0x1b0>)
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	401a      	ands	r2, r3
 801c7c2:	4b5c      	ldr	r3, [pc, #368]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	4013      	ands	r3, r2
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d0f0      	beq.n	801c7ae <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c7cc:	4a5a      	ldr	r2, [pc, #360]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c7d4:	4b59      	ldr	r3, [pc, #356]	; (801c93c <UTIL_SEQ_Run+0x1b0>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	401a      	ands	r2, r3
 801c7da:	4b56      	ldr	r3, [pc, #344]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	4013      	ands	r3, r2
 801c7e0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c7e2:	4a55      	ldr	r2, [pc, #340]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7e6:	00db      	lsls	r3, r3, #3
 801c7e8:	4413      	add	r3, r2
 801c7ea:	685a      	ldr	r2, [r3, #4]
 801c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ee:	4013      	ands	r3, r2
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d106      	bne.n	801c802 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c7f4:	4a50      	ldr	r2, [pc, #320]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7f8:	00db      	lsls	r3, r3, #3
 801c7fa:	4413      	add	r3, r2
 801c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 801c800:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c802:	4a4d      	ldr	r2, [pc, #308]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c806:	00db      	lsls	r3, r3, #3
 801c808:	4413      	add	r3, r2
 801c80a:	685a      	ldr	r2, [r3, #4]
 801c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c80e:	4013      	ands	r3, r2
 801c810:	4618      	mov	r0, r3
 801c812:	f000 f8f9 	bl	801ca08 <SEQ_BitPosition>
 801c816:	4603      	mov	r3, r0
 801c818:	461a      	mov	r2, r3
 801c81a:	4b49      	ldr	r3, [pc, #292]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c81c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c81e:	4a46      	ldr	r2, [pc, #280]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c822:	00db      	lsls	r3, r3, #3
 801c824:	4413      	add	r3, r2
 801c826:	685a      	ldr	r2, [r3, #4]
 801c828:	4b45      	ldr	r3, [pc, #276]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	2101      	movs	r1, #1
 801c82e:	fa01 f303 	lsl.w	r3, r1, r3
 801c832:	43db      	mvns	r3, r3
 801c834:	401a      	ands	r2, r3
 801c836:	4940      	ldr	r1, [pc, #256]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c83a:	00db      	lsls	r3, r3, #3
 801c83c:	440b      	add	r3, r1
 801c83e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c840:	f3ef 8310 	mrs	r3, PRIMASK
 801c844:	61bb      	str	r3, [r7, #24]
  return(result);
 801c846:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c848:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c84a:	b672      	cpsid	i
}
 801c84c:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c84e:	4b3c      	ldr	r3, [pc, #240]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	2201      	movs	r2, #1
 801c854:	fa02 f303 	lsl.w	r3, r2, r3
 801c858:	43da      	mvns	r2, r3
 801c85a:	4b3a      	ldr	r3, [pc, #232]	; (801c944 <UTIL_SEQ_Run+0x1b8>)
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	4013      	ands	r3, r2
 801c860:	4a38      	ldr	r2, [pc, #224]	; (801c944 <UTIL_SEQ_Run+0x1b8>)
 801c862:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c864:	2302      	movs	r3, #2
 801c866:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c868:	e013      	b.n	801c892 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c86c:	3b01      	subs	r3, #1
 801c86e:	4a32      	ldr	r2, [pc, #200]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c870:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c874:	4b32      	ldr	r3, [pc, #200]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	2201      	movs	r2, #1
 801c87a:	fa02 f303 	lsl.w	r3, r2, r3
 801c87e:	43da      	mvns	r2, r3
 801c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c882:	3b01      	subs	r3, #1
 801c884:	400a      	ands	r2, r1
 801c886:	492c      	ldr	r1, [pc, #176]	; (801c938 <UTIL_SEQ_Run+0x1ac>)
 801c888:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c88e:	3b01      	subs	r3, #1
 801c890:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c894:	2b00      	cmp	r3, #0
 801c896:	d1e8      	bne.n	801c86a <UTIL_SEQ_Run+0xde>
 801c898:	6a3b      	ldr	r3, [r7, #32]
 801c89a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	f383 8810 	msr	PRIMASK, r3
}
 801c8a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c8a4:	4b26      	ldr	r3, [pc, #152]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	4a27      	ldr	r2, [pc, #156]	; (801c948 <UTIL_SEQ_Run+0x1bc>)
 801c8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c8ae:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c8b0:	4b24      	ldr	r3, [pc, #144]	; (801c944 <UTIL_SEQ_Run+0x1b8>)
 801c8b2:	681a      	ldr	r2, [r3, #0]
 801c8b4:	4b21      	ldr	r3, [pc, #132]	; (801c93c <UTIL_SEQ_Run+0x1b0>)
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	401a      	ands	r2, r3
 801c8ba:	4b1e      	ldr	r3, [pc, #120]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	4013      	ands	r3, r2
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d007      	beq.n	801c8d4 <UTIL_SEQ_Run+0x148>
 801c8c4:	4b21      	ldr	r3, [pc, #132]	; (801c94c <UTIL_SEQ_Run+0x1c0>)
 801c8c6:	681a      	ldr	r2, [r3, #0]
 801c8c8:	4b21      	ldr	r3, [pc, #132]	; (801c950 <UTIL_SEQ_Run+0x1c4>)
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	4013      	ands	r3, r2
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	f43f af6a 	beq.w	801c7a8 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c8d4:	4b1a      	ldr	r3, [pc, #104]	; (801c940 <UTIL_SEQ_Run+0x1b4>)
 801c8d6:	f04f 32ff 	mov.w	r2, #4294967295
 801c8da:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c8dc:	f000 f888 	bl	801c9f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8e0:	f3ef 8310 	mrs	r3, PRIMASK
 801c8e4:	613b      	str	r3, [r7, #16]
  return(result);
 801c8e6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c8e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8ea:	b672      	cpsid	i
}
 801c8ec:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c8ee:	4b15      	ldr	r3, [pc, #84]	; (801c944 <UTIL_SEQ_Run+0x1b8>)
 801c8f0:	681a      	ldr	r2, [r3, #0]
 801c8f2:	4b12      	ldr	r3, [pc, #72]	; (801c93c <UTIL_SEQ_Run+0x1b0>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	401a      	ands	r2, r3
 801c8f8:	4b0e      	ldr	r3, [pc, #56]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	4013      	ands	r3, r2
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d108      	bne.n	801c914 <UTIL_SEQ_Run+0x188>
 801c902:	4b12      	ldr	r3, [pc, #72]	; (801c94c <UTIL_SEQ_Run+0x1c0>)
 801c904:	681a      	ldr	r2, [r3, #0]
 801c906:	4b12      	ldr	r3, [pc, #72]	; (801c950 <UTIL_SEQ_Run+0x1c4>)
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	4013      	ands	r3, r2
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d101      	bne.n	801c914 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801c910:	f7e5 f820 	bl	8001954 <UTIL_SEQ_Idle>
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	f383 8810 	msr	PRIMASK, r3
}
 801c91e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c920:	f000 f86c 	bl	801c9fc <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c924:	4a03      	ldr	r2, [pc, #12]	; (801c934 <UTIL_SEQ_Run+0x1a8>)
 801c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c928:	6013      	str	r3, [r2, #0]

  return;
 801c92a:	bf00      	nop
}
 801c92c:	3730      	adds	r7, #48	; 0x30
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	2000010c 	.word	0x2000010c
 801c938:	200044dc 	.word	0x200044dc
 801c93c:	20000108 	.word	0x20000108
 801c940:	20004458 	.word	0x20004458
 801c944:	2000444c 	.word	0x2000444c
 801c948:	2000445c 	.word	0x2000445c
 801c94c:	20004450 	.word	0x20004450
 801c950:	20004454 	.word	0x20004454

0801c954 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c954:	b580      	push	{r7, lr}
 801c956:	b088      	sub	sp, #32
 801c958:	af00      	add	r7, sp, #0
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	60b9      	str	r1, [r7, #8]
 801c95e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c960:	f3ef 8310 	mrs	r3, PRIMASK
 801c964:	617b      	str	r3, [r7, #20]
  return(result);
 801c966:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c96a:	b672      	cpsid	i
}
 801c96c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c96e:	68f8      	ldr	r0, [r7, #12]
 801c970:	f000 f84a 	bl	801ca08 <SEQ_BitPosition>
 801c974:	4603      	mov	r3, r0
 801c976:	4619      	mov	r1, r3
 801c978:	4a06      	ldr	r2, [pc, #24]	; (801c994 <UTIL_SEQ_RegTask+0x40>)
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c980:	69fb      	ldr	r3, [r7, #28]
 801c982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c984:	69bb      	ldr	r3, [r7, #24]
 801c986:	f383 8810 	msr	PRIMASK, r3
}
 801c98a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c98c:	bf00      	nop
}
 801c98e:	3720      	adds	r7, #32
 801c990:	46bd      	mov	sp, r7
 801c992:	bd80      	pop	{r7, pc}
 801c994:	2000445c 	.word	0x2000445c

0801c998 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c998:	b480      	push	{r7}
 801c99a:	b087      	sub	sp, #28
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
 801c9a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9a2:	f3ef 8310 	mrs	r3, PRIMASK
 801c9a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c9a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c9aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9ac:	b672      	cpsid	i
}
 801c9ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c9b0:	4b0d      	ldr	r3, [pc, #52]	; (801c9e8 <UTIL_SEQ_SetTask+0x50>)
 801c9b2:	681a      	ldr	r2, [r3, #0]
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	4313      	orrs	r3, r2
 801c9b8:	4a0b      	ldr	r2, [pc, #44]	; (801c9e8 <UTIL_SEQ_SetTask+0x50>)
 801c9ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c9bc:	4a0b      	ldr	r2, [pc, #44]	; (801c9ec <UTIL_SEQ_SetTask+0x54>)
 801c9be:	683b      	ldr	r3, [r7, #0]
 801c9c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	431a      	orrs	r2, r3
 801c9c8:	4908      	ldr	r1, [pc, #32]	; (801c9ec <UTIL_SEQ_SetTask+0x54>)
 801c9ca:	683b      	ldr	r3, [r7, #0]
 801c9cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9d4:	693b      	ldr	r3, [r7, #16]
 801c9d6:	f383 8810 	msr	PRIMASK, r3
}
 801c9da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c9dc:	bf00      	nop
}
 801c9de:	371c      	adds	r7, #28
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	bc80      	pop	{r7}
 801c9e4:	4770      	bx	lr
 801c9e6:	bf00      	nop
 801c9e8:	2000444c 	.word	0x2000444c
 801c9ec:	200044dc 	.word	0x200044dc

0801c9f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c9f0:	b480      	push	{r7}
 801c9f2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c9f4:	bf00      	nop
}
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bc80      	pop	{r7}
 801c9fa:	4770      	bx	lr

0801c9fc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c9fc:	b480      	push	{r7}
 801c9fe:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ca00:	bf00      	nop
}
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bc80      	pop	{r7}
 801ca06:	4770      	bx	lr

0801ca08 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ca08:	b480      	push	{r7}
 801ca0a:	b085      	sub	sp, #20
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801ca10:	2300      	movs	r3, #0
 801ca12:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	0c1b      	lsrs	r3, r3, #16
 801ca18:	041b      	lsls	r3, r3, #16
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d104      	bne.n	801ca28 <SEQ_BitPosition+0x20>
 801ca1e:	2310      	movs	r3, #16
 801ca20:	73fb      	strb	r3, [r7, #15]
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	041b      	lsls	r3, r3, #16
 801ca26:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d105      	bne.n	801ca3e <SEQ_BitPosition+0x36>
 801ca32:	7bfb      	ldrb	r3, [r7, #15]
 801ca34:	3308      	adds	r3, #8
 801ca36:	73fb      	strb	r3, [r7, #15]
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	021b      	lsls	r3, r3, #8
 801ca3c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d105      	bne.n	801ca54 <SEQ_BitPosition+0x4c>
 801ca48:	7bfb      	ldrb	r3, [r7, #15]
 801ca4a:	3304      	adds	r3, #4
 801ca4c:	73fb      	strb	r3, [r7, #15]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	011b      	lsls	r3, r3, #4
 801ca52:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	0f1b      	lsrs	r3, r3, #28
 801ca58:	4a06      	ldr	r2, [pc, #24]	; (801ca74 <SEQ_BitPosition+0x6c>)
 801ca5a:	5cd2      	ldrb	r2, [r2, r3]
 801ca5c:	7bfb      	ldrb	r3, [r7, #15]
 801ca5e:	4413      	add	r3, r2
 801ca60:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ca62:	7bfb      	ldrb	r3, [r7, #15]
 801ca64:	f1c3 031f 	rsb	r3, r3, #31
 801ca68:	b2db      	uxtb	r3, r3
}
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	3714      	adds	r7, #20
 801ca6e:	46bd      	mov	sp, r7
 801ca70:	bc80      	pop	{r7}
 801ca72:	4770      	bx	lr
 801ca74:	0801e780 	.word	0x0801e780

0801ca78 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ca78:	b082      	sub	sp, #8
 801ca7a:	b480      	push	{r7}
 801ca7c:	b087      	sub	sp, #28
 801ca7e:	af00      	add	r7, sp, #0
 801ca80:	60f8      	str	r0, [r7, #12]
 801ca82:	1d38      	adds	r0, r7, #4
 801ca84:	e880 0006 	stmia.w	r0, {r1, r2}
 801ca88:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	613b      	str	r3, [r7, #16]
 801ca8e:	2300      	movs	r3, #0
 801ca90:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ca92:	687a      	ldr	r2, [r7, #4]
 801ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca96:	4413      	add	r3, r2
 801ca98:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ca9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ca9e:	b29a      	uxth	r2, r3
 801caa0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801caa4:	b29b      	uxth	r3, r3
 801caa6:	4413      	add	r3, r2
 801caa8:	b29b      	uxth	r3, r3
 801caaa:	b21b      	sxth	r3, r3
 801caac:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801caae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cab6:	db0a      	blt.n	801cace <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cab8:	693b      	ldr	r3, [r7, #16]
 801caba:	3301      	adds	r3, #1
 801cabc:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cabe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cac2:	b29b      	uxth	r3, r3
 801cac4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cac8:	b29b      	uxth	r3, r3
 801caca:	b21b      	sxth	r3, r3
 801cacc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	461a      	mov	r2, r3
 801cad2:	f107 0310 	add.w	r3, r7, #16
 801cad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cada:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cade:	68f8      	ldr	r0, [r7, #12]
 801cae0:	371c      	adds	r7, #28
 801cae2:	46bd      	mov	sp, r7
 801cae4:	bc80      	pop	{r7}
 801cae6:	b002      	add	sp, #8
 801cae8:	4770      	bx	lr

0801caea <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801caea:	b082      	sub	sp, #8
 801caec:	b480      	push	{r7}
 801caee:	b087      	sub	sp, #28
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	60f8      	str	r0, [r7, #12]
 801caf4:	1d38      	adds	r0, r7, #4
 801caf6:	e880 0006 	stmia.w	r0, {r1, r2}
 801cafa:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cafc:	2300      	movs	r3, #0
 801cafe:	613b      	str	r3, [r7, #16]
 801cb00:	2300      	movs	r3, #0
 801cb02:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801cb04:	687a      	ldr	r2, [r7, #4]
 801cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb08:	1ad3      	subs	r3, r2, r3
 801cb0a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801cb0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cb10:	b29a      	uxth	r2, r3
 801cb12:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cb16:	b29b      	uxth	r3, r3
 801cb18:	1ad3      	subs	r3, r2, r3
 801cb1a:	b29b      	uxth	r3, r3
 801cb1c:	b21b      	sxth	r3, r3
 801cb1e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801cb20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	da0a      	bge.n	801cb3e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801cb28:	693b      	ldr	r3, [r7, #16]
 801cb2a:	3b01      	subs	r3, #1
 801cb2c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801cb2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb32:	b29b      	uxth	r3, r3
 801cb34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cb38:	b29b      	uxth	r3, r3
 801cb3a:	b21b      	sxth	r3, r3
 801cb3c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	461a      	mov	r2, r3
 801cb42:	f107 0310 	add.w	r3, r7, #16
 801cb46:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cb4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cb4e:	68f8      	ldr	r0, [r7, #12]
 801cb50:	371c      	adds	r7, #28
 801cb52:	46bd      	mov	sp, r7
 801cb54:	bc80      	pop	{r7}
 801cb56:	b002      	add	sp, #8
 801cb58:	4770      	bx	lr
	...

0801cb5c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b088      	sub	sp, #32
 801cb60:	af02      	add	r7, sp, #8
 801cb62:	463b      	mov	r3, r7
 801cb64:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cb68:	2300      	movs	r3, #0
 801cb6a:	60bb      	str	r3, [r7, #8]
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cb70:	4b10      	ldr	r3, [pc, #64]	; (801cbb4 <SysTimeSet+0x58>)
 801cb72:	691b      	ldr	r3, [r3, #16]
 801cb74:	f107 0208 	add.w	r2, r7, #8
 801cb78:	3204      	adds	r2, #4
 801cb7a:	4610      	mov	r0, r2
 801cb7c:	4798      	blx	r3
 801cb7e:	4603      	mov	r3, r0
 801cb80:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cb82:	f107 0010 	add.w	r0, r7, #16
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	9300      	str	r3, [sp, #0]
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	463a      	mov	r2, r7
 801cb8e:	ca06      	ldmia	r2, {r1, r2}
 801cb90:	f7ff ffab 	bl	801caea <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cb94:	4b07      	ldr	r3, [pc, #28]	; (801cbb4 <SysTimeSet+0x58>)
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	693a      	ldr	r2, [r7, #16]
 801cb9a:	4610      	mov	r0, r2
 801cb9c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cb9e:	4b05      	ldr	r3, [pc, #20]	; (801cbb4 <SysTimeSet+0x58>)
 801cba0:	689b      	ldr	r3, [r3, #8]
 801cba2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801cba6:	4610      	mov	r0, r2
 801cba8:	4798      	blx	r3
}
 801cbaa:	bf00      	nop
 801cbac:	3718      	adds	r7, #24
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	bd80      	pop	{r7, pc}
 801cbb2:	bf00      	nop
 801cbb4:	0801e22c 	.word	0x0801e22c

0801cbb8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b08a      	sub	sp, #40	; 0x28
 801cbbc:	af02      	add	r7, sp, #8
 801cbbe:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	61bb      	str	r3, [r7, #24]
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cbc8:	2300      	movs	r3, #0
 801cbca:	613b      	str	r3, [r7, #16]
 801cbcc:	2300      	movs	r3, #0
 801cbce:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cbd0:	4b14      	ldr	r3, [pc, #80]	; (801cc24 <SysTimeGet+0x6c>)
 801cbd2:	691b      	ldr	r3, [r3, #16]
 801cbd4:	f107 0218 	add.w	r2, r7, #24
 801cbd8:	3204      	adds	r2, #4
 801cbda:	4610      	mov	r0, r2
 801cbdc:	4798      	blx	r3
 801cbde:	4603      	mov	r3, r0
 801cbe0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cbe2:	4b10      	ldr	r3, [pc, #64]	; (801cc24 <SysTimeGet+0x6c>)
 801cbe4:	68db      	ldr	r3, [r3, #12]
 801cbe6:	4798      	blx	r3
 801cbe8:	4603      	mov	r3, r0
 801cbea:	b21b      	sxth	r3, r3
 801cbec:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cbee:	4b0d      	ldr	r3, [pc, #52]	; (801cc24 <SysTimeGet+0x6c>)
 801cbf0:	685b      	ldr	r3, [r3, #4]
 801cbf2:	4798      	blx	r3
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cbf8:	f107 0010 	add.w	r0, r7, #16
 801cbfc:	69fb      	ldr	r3, [r7, #28]
 801cbfe:	9300      	str	r3, [sp, #0]
 801cc00:	69bb      	ldr	r3, [r7, #24]
 801cc02:	f107 0208 	add.w	r2, r7, #8
 801cc06:	ca06      	ldmia	r2, {r1, r2}
 801cc08:	f7ff ff36 	bl	801ca78 <SysTimeAdd>

  return sysTime;
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	461a      	mov	r2, r3
 801cc10:	f107 0310 	add.w	r3, r7, #16
 801cc14:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cc18:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cc1c:	6878      	ldr	r0, [r7, #4]
 801cc1e:	3720      	adds	r7, #32
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}
 801cc24:	0801e22c 	.word	0x0801e22c

0801cc28 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b084      	sub	sp, #16
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cc30:	2300      	movs	r3, #0
 801cc32:	60bb      	str	r3, [r7, #8]
 801cc34:	2300      	movs	r3, #0
 801cc36:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cc38:	4b0a      	ldr	r3, [pc, #40]	; (801cc64 <SysTimeGetMcuTime+0x3c>)
 801cc3a:	691b      	ldr	r3, [r3, #16]
 801cc3c:	f107 0208 	add.w	r2, r7, #8
 801cc40:	3204      	adds	r2, #4
 801cc42:	4610      	mov	r0, r2
 801cc44:	4798      	blx	r3
 801cc46:	4603      	mov	r3, r0
 801cc48:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	461a      	mov	r2, r3
 801cc4e:	f107 0308 	add.w	r3, r7, #8
 801cc52:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cc56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	3710      	adds	r7, #16
 801cc5e:	46bd      	mov	sp, r7
 801cc60:	bd80      	pop	{r7, pc}
 801cc62:	bf00      	nop
 801cc64:	0801e22c 	.word	0x0801e22c

0801cc68 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b088      	sub	sp, #32
 801cc6c:	af02      	add	r7, sp, #8
 801cc6e:	463b      	mov	r3, r7
 801cc70:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cc74:	4b0f      	ldr	r3, [pc, #60]	; (801ccb4 <SysTimeToMs+0x4c>)
 801cc76:	68db      	ldr	r3, [r3, #12]
 801cc78:	4798      	blx	r3
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	b21b      	sxth	r3, r3
 801cc7e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cc80:	4b0c      	ldr	r3, [pc, #48]	; (801ccb4 <SysTimeToMs+0x4c>)
 801cc82:	685b      	ldr	r3, [r3, #4]
 801cc84:	4798      	blx	r3
 801cc86:	4603      	mov	r3, r0
 801cc88:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801cc8a:	f107 0008 	add.w	r0, r7, #8
 801cc8e:	697b      	ldr	r3, [r7, #20]
 801cc90:	9300      	str	r3, [sp, #0]
 801cc92:	693b      	ldr	r3, [r7, #16]
 801cc94:	463a      	mov	r2, r7
 801cc96:	ca06      	ldmia	r2, {r1, r2}
 801cc98:	f7ff ff27 	bl	801caea <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801cc9c:	68bb      	ldr	r3, [r7, #8]
 801cc9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cca2:	fb02 f303 	mul.w	r3, r2, r3
 801cca6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ccaa:	4413      	add	r3, r2
}
 801ccac:	4618      	mov	r0, r3
 801ccae:	3718      	adds	r7, #24
 801ccb0:	46bd      	mov	sp, r7
 801ccb2:	bd80      	pop	{r7, pc}
 801ccb4:	0801e22c 	.word	0x0801e22c

0801ccb8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b08a      	sub	sp, #40	; 0x28
 801ccbc:	af02      	add	r7, sp, #8
 801ccbe:	6078      	str	r0, [r7, #4]
 801ccc0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	4a19      	ldr	r2, [pc, #100]	; (801cd2c <SysTimeFromMs+0x74>)
 801ccc6:	fba2 2303 	umull	r2, r3, r2, r3
 801ccca:	099b      	lsrs	r3, r3, #6
 801cccc:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ccce:	69fb      	ldr	r3, [r7, #28]
 801ccd0:	617b      	str	r3, [r7, #20]
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	b29a      	uxth	r2, r3
 801ccd6:	69fb      	ldr	r3, [r7, #28]
 801ccd8:	b29b      	uxth	r3, r3
 801ccda:	4619      	mov	r1, r3
 801ccdc:	0149      	lsls	r1, r1, #5
 801ccde:	1ac9      	subs	r1, r1, r3
 801cce0:	0089      	lsls	r1, r1, #2
 801cce2:	440b      	add	r3, r1
 801cce4:	00db      	lsls	r3, r3, #3
 801cce6:	b29b      	uxth	r3, r3
 801cce8:	1ad3      	subs	r3, r2, r3
 801ccea:	b29b      	uxth	r3, r3
 801ccec:	b21b      	sxth	r3, r3
 801ccee:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ccf0:	f107 030c 	add.w	r3, r7, #12
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	601a      	str	r2, [r3, #0]
 801ccf8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ccfa:	4b0d      	ldr	r3, [pc, #52]	; (801cd30 <SysTimeFromMs+0x78>)
 801ccfc:	68db      	ldr	r3, [r3, #12]
 801ccfe:	4798      	blx	r3
 801cd00:	4603      	mov	r3, r0
 801cd02:	b21b      	sxth	r3, r3
 801cd04:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cd06:	4b0a      	ldr	r3, [pc, #40]	; (801cd30 <SysTimeFromMs+0x78>)
 801cd08:	685b      	ldr	r3, [r3, #4]
 801cd0a:	4798      	blx	r3
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801cd10:	6878      	ldr	r0, [r7, #4]
 801cd12:	693b      	ldr	r3, [r7, #16]
 801cd14:	9300      	str	r3, [sp, #0]
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	f107 0214 	add.w	r2, r7, #20
 801cd1c:	ca06      	ldmia	r2, {r1, r2}
 801cd1e:	f7ff feab 	bl	801ca78 <SysTimeAdd>
}
 801cd22:	6878      	ldr	r0, [r7, #4]
 801cd24:	3720      	adds	r7, #32
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}
 801cd2a:	bf00      	nop
 801cd2c:	10624dd3 	.word	0x10624dd3
 801cd30:	0801e22c 	.word	0x0801e22c

0801cd34 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cd38:	4b04      	ldr	r3, [pc, #16]	; (801cd4c <UTIL_TIMER_Init+0x18>)
 801cd3a:	2200      	movs	r2, #0
 801cd3c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cd3e:	4b04      	ldr	r3, [pc, #16]	; (801cd50 <UTIL_TIMER_Init+0x1c>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4798      	blx	r3
 801cd44:	4603      	mov	r3, r0
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	bd80      	pop	{r7, pc}
 801cd4a:	bf00      	nop
 801cd4c:	200044ec 	.word	0x200044ec
 801cd50:	0801e200 	.word	0x0801e200

0801cd54 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cd54:	b580      	push	{r7, lr}
 801cd56:	b084      	sub	sp, #16
 801cd58:	af00      	add	r7, sp, #0
 801cd5a:	60f8      	str	r0, [r7, #12]
 801cd5c:	60b9      	str	r1, [r7, #8]
 801cd5e:	603b      	str	r3, [r7, #0]
 801cd60:	4613      	mov	r3, r2
 801cd62:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d023      	beq.n	801cdb2 <UTIL_TIMER_Create+0x5e>
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d020      	beq.n	801cdb2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	2200      	movs	r2, #0
 801cd74:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cd76:	4b11      	ldr	r3, [pc, #68]	; (801cdbc <UTIL_TIMER_Create+0x68>)
 801cd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd7a:	68b8      	ldr	r0, [r7, #8]
 801cd7c:	4798      	blx	r3
 801cd7e:	4602      	mov	r2, r0
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	2200      	movs	r2, #0
 801cd88:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	2200      	movs	r2, #0
 801cd94:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	683a      	ldr	r2, [r7, #0]
 801cd9a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	69ba      	ldr	r2, [r7, #24]
 801cda0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	79fa      	ldrb	r2, [r7, #7]
 801cda6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cdae:	2300      	movs	r3, #0
 801cdb0:	e000      	b.n	801cdb4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cdb2:	2301      	movs	r3, #1
  }
}
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	3710      	adds	r7, #16
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bd80      	pop	{r7, pc}
 801cdbc:	0801e200 	.word	0x0801e200

0801cdc0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cdc0:	b580      	push	{r7, lr}
 801cdc2:	b08a      	sub	sp, #40	; 0x28
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cdc8:	2300      	movs	r3, #0
 801cdca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d056      	beq.n	801ce82 <UTIL_TIMER_Start+0xc2>
 801cdd4:	6878      	ldr	r0, [r7, #4]
 801cdd6:	f000 f9a9 	bl	801d12c <TimerExists>
 801cdda:	4603      	mov	r3, r0
 801cddc:	f083 0301 	eor.w	r3, r3, #1
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d04d      	beq.n	801ce82 <UTIL_TIMER_Start+0xc2>
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	7a5b      	ldrb	r3, [r3, #9]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d149      	bne.n	801ce82 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdee:	f3ef 8310 	mrs	r3, PRIMASK
 801cdf2:	613b      	str	r3, [r7, #16]
  return(result);
 801cdf4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cdf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdf8:	b672      	cpsid	i
}
 801cdfa:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	685b      	ldr	r3, [r3, #4]
 801ce00:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ce02:	4b24      	ldr	r3, [pc, #144]	; (801ce94 <UTIL_TIMER_Start+0xd4>)
 801ce04:	6a1b      	ldr	r3, [r3, #32]
 801ce06:	4798      	blx	r3
 801ce08:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ce0a:	6a3a      	ldr	r2, [r7, #32]
 801ce0c:	69bb      	ldr	r3, [r7, #24]
 801ce0e:	429a      	cmp	r2, r3
 801ce10:	d201      	bcs.n	801ce16 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	6a3a      	ldr	r2, [r7, #32]
 801ce1a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	2200      	movs	r2, #0
 801ce20:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2201      	movs	r2, #1
 801ce26:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ce2e:	4b1a      	ldr	r3, [pc, #104]	; (801ce98 <UTIL_TIMER_Start+0xd8>)
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d106      	bne.n	801ce44 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ce36:	4b17      	ldr	r3, [pc, #92]	; (801ce94 <UTIL_TIMER_Start+0xd4>)
 801ce38:	691b      	ldr	r3, [r3, #16]
 801ce3a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ce3c:	6878      	ldr	r0, [r7, #4]
 801ce3e:	f000 f9eb 	bl	801d218 <TimerInsertNewHeadTimer>
 801ce42:	e017      	b.n	801ce74 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ce44:	4b13      	ldr	r3, [pc, #76]	; (801ce94 <UTIL_TIMER_Start+0xd4>)
 801ce46:	699b      	ldr	r3, [r3, #24]
 801ce48:	4798      	blx	r3
 801ce4a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681a      	ldr	r2, [r3, #0]
 801ce50:	697b      	ldr	r3, [r7, #20]
 801ce52:	441a      	add	r2, r3
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681a      	ldr	r2, [r3, #0]
 801ce5c:	4b0e      	ldr	r3, [pc, #56]	; (801ce98 <UTIL_TIMER_Start+0xd8>)
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	429a      	cmp	r2, r3
 801ce64:	d203      	bcs.n	801ce6e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	f000 f9d6 	bl	801d218 <TimerInsertNewHeadTimer>
 801ce6c:	e002      	b.n	801ce74 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ce6e:	6878      	ldr	r0, [r7, #4]
 801ce70:	f000 f9a2 	bl	801d1b8 <TimerInsertTimer>
 801ce74:	69fb      	ldr	r3, [r7, #28]
 801ce76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	f383 8810 	msr	PRIMASK, r3
}
 801ce7e:	bf00      	nop
  {
 801ce80:	e002      	b.n	801ce88 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ce82:	2301      	movs	r3, #1
 801ce84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801ce88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	3728      	adds	r7, #40	; 0x28
 801ce90:	46bd      	mov	sp, r7
 801ce92:	bd80      	pop	{r7, pc}
 801ce94:	0801e200 	.word	0x0801e200
 801ce98:	200044ec 	.word	0x200044ec

0801ce9c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	b088      	sub	sp, #32
 801cea0:	af00      	add	r7, sp, #0
 801cea2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cea4:	2300      	movs	r3, #0
 801cea6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d05b      	beq.n	801cf66 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ceae:	f3ef 8310 	mrs	r3, PRIMASK
 801ceb2:	60fb      	str	r3, [r7, #12]
  return(result);
 801ceb4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ceb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceb8:	b672      	cpsid	i
}
 801ceba:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cebc:	4b2d      	ldr	r3, [pc, #180]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cec2:	4b2c      	ldr	r3, [pc, #176]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2201      	movs	r2, #1
 801cecc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cece:	4b29      	ldr	r3, [pc, #164]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d041      	beq.n	801cf5a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	2200      	movs	r2, #0
 801ceda:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cedc:	4b25      	ldr	r3, [pc, #148]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	687a      	ldr	r2, [r7, #4]
 801cee2:	429a      	cmp	r2, r3
 801cee4:	d134      	bne.n	801cf50 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801cee6:	4b23      	ldr	r3, [pc, #140]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	2200      	movs	r2, #0
 801ceec:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ceee:	4b21      	ldr	r3, [pc, #132]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	695b      	ldr	r3, [r3, #20]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d00a      	beq.n	801cf0e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801cef8:	4b1e      	ldr	r3, [pc, #120]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	695b      	ldr	r3, [r3, #20]
 801cefe:	4a1d      	ldr	r2, [pc, #116]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cf00:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801cf02:	4b1c      	ldr	r3, [pc, #112]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	4618      	mov	r0, r3
 801cf08:	f000 f92c 	bl	801d164 <TimerSetTimeout>
 801cf0c:	e023      	b.n	801cf56 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cf0e:	4b1a      	ldr	r3, [pc, #104]	; (801cf78 <UTIL_TIMER_Stop+0xdc>)
 801cf10:	68db      	ldr	r3, [r3, #12]
 801cf12:	4798      	blx	r3
            TimerListHead = NULL;
 801cf14:	4b17      	ldr	r3, [pc, #92]	; (801cf74 <UTIL_TIMER_Stop+0xd8>)
 801cf16:	2200      	movs	r2, #0
 801cf18:	601a      	str	r2, [r3, #0]
 801cf1a:	e01c      	b.n	801cf56 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cf1c:	697a      	ldr	r2, [r7, #20]
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	429a      	cmp	r2, r3
 801cf22:	d110      	bne.n	801cf46 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801cf24:	697b      	ldr	r3, [r7, #20]
 801cf26:	695b      	ldr	r3, [r3, #20]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d006      	beq.n	801cf3a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801cf2c:	697b      	ldr	r3, [r7, #20]
 801cf2e:	695b      	ldr	r3, [r3, #20]
 801cf30:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cf32:	69bb      	ldr	r3, [r7, #24]
 801cf34:	697a      	ldr	r2, [r7, #20]
 801cf36:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cf38:	e00d      	b.n	801cf56 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801cf3a:	2300      	movs	r3, #0
 801cf3c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cf3e:	69bb      	ldr	r3, [r7, #24]
 801cf40:	697a      	ldr	r2, [r7, #20]
 801cf42:	615a      	str	r2, [r3, #20]
            break;
 801cf44:	e007      	b.n	801cf56 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801cf46:	697b      	ldr	r3, [r7, #20]
 801cf48:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cf4a:	697b      	ldr	r3, [r7, #20]
 801cf4c:	695b      	ldr	r3, [r3, #20]
 801cf4e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cf50:	697b      	ldr	r3, [r7, #20]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d1e2      	bne.n	801cf1c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cf56:	2300      	movs	r3, #0
 801cf58:	77fb      	strb	r3, [r7, #31]
 801cf5a:	693b      	ldr	r3, [r7, #16]
 801cf5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf5e:	68bb      	ldr	r3, [r7, #8]
 801cf60:	f383 8810 	msr	PRIMASK, r3
}
 801cf64:	e001      	b.n	801cf6a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cf66:	2301      	movs	r3, #1
 801cf68:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801cf6a:	7ffb      	ldrb	r3, [r7, #31]
}
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	3720      	adds	r7, #32
 801cf70:	46bd      	mov	sp, r7
 801cf72:	bd80      	pop	{r7, pc}
 801cf74:	200044ec 	.word	0x200044ec
 801cf78:	0801e200 	.word	0x0801e200

0801cf7c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b084      	sub	sp, #16
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	6078      	str	r0, [r7, #4]
 801cf84:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cf86:	2300      	movs	r3, #0
 801cf88:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d102      	bne.n	801cf96 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cf90:	2301      	movs	r3, #1
 801cf92:	73fb      	strb	r3, [r7, #15]
 801cf94:	e014      	b.n	801cfc0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cf96:	4b0d      	ldr	r3, [pc, #52]	; (801cfcc <UTIL_TIMER_SetPeriod+0x50>)
 801cf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf9a:	6838      	ldr	r0, [r7, #0]
 801cf9c:	4798      	blx	r3
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f000 f8c1 	bl	801d12c <TimerExists>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d007      	beq.n	801cfc0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cfb0:	6878      	ldr	r0, [r7, #4]
 801cfb2:	f7ff ff73 	bl	801ce9c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cfb6:	6878      	ldr	r0, [r7, #4]
 801cfb8:	f7ff ff02 	bl	801cdc0 <UTIL_TIMER_Start>
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	3710      	adds	r7, #16
 801cfc6:	46bd      	mov	sp, r7
 801cfc8:	bd80      	pop	{r7, pc}
 801cfca:	bf00      	nop
 801cfcc:	0801e200 	.word	0x0801e200

0801cfd0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cfd0:	b590      	push	{r4, r7, lr}
 801cfd2:	b089      	sub	sp, #36	; 0x24
 801cfd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfd6:	f3ef 8310 	mrs	r3, PRIMASK
 801cfda:	60bb      	str	r3, [r7, #8]
  return(result);
 801cfdc:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cfde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfe0:	b672      	cpsid	i
}
 801cfe2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cfe4:	4b38      	ldr	r3, [pc, #224]	; (801d0c8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cfe6:	695b      	ldr	r3, [r3, #20]
 801cfe8:	4798      	blx	r3
 801cfea:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cfec:	4b36      	ldr	r3, [pc, #216]	; (801d0c8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cfee:	691b      	ldr	r3, [r3, #16]
 801cff0:	4798      	blx	r3
 801cff2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cff4:	693a      	ldr	r2, [r7, #16]
 801cff6:	697b      	ldr	r3, [r7, #20]
 801cff8:	1ad3      	subs	r3, r2, r3
 801cffa:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cffc:	4b33      	ldr	r3, [pc, #204]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	2b00      	cmp	r3, #0
 801d002:	d037      	beq.n	801d074 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d004:	4b31      	ldr	r3, [pc, #196]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d00a:	69fb      	ldr	r3, [r7, #28]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	68fa      	ldr	r2, [r7, #12]
 801d010:	429a      	cmp	r2, r3
 801d012:	d206      	bcs.n	801d022 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d014:	69fb      	ldr	r3, [r7, #28]
 801d016:	681a      	ldr	r2, [r3, #0]
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	1ad2      	subs	r2, r2, r3
 801d01c:	69fb      	ldr	r3, [r7, #28]
 801d01e:	601a      	str	r2, [r3, #0]
 801d020:	e002      	b.n	801d028 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d022:	69fb      	ldr	r3, [r7, #28]
 801d024:	2200      	movs	r2, #0
 801d026:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d028:	69fb      	ldr	r3, [r7, #28]
 801d02a:	695b      	ldr	r3, [r3, #20]
 801d02c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d02e:	69fb      	ldr	r3, [r7, #28]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d1ea      	bne.n	801d00a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d034:	e01e      	b.n	801d074 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d036:	4b25      	ldr	r3, [pc, #148]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d03c:	4b23      	ldr	r3, [pc, #140]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	695b      	ldr	r3, [r3, #20]
 801d042:	4a22      	ldr	r2, [pc, #136]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d044:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d046:	69fb      	ldr	r3, [r7, #28]
 801d048:	2200      	movs	r2, #0
 801d04a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d04c:	69fb      	ldr	r3, [r7, #28]
 801d04e:	2200      	movs	r2, #0
 801d050:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d052:	69fb      	ldr	r3, [r7, #28]
 801d054:	68db      	ldr	r3, [r3, #12]
 801d056:	69fa      	ldr	r2, [r7, #28]
 801d058:	6912      	ldr	r2, [r2, #16]
 801d05a:	4610      	mov	r0, r2
 801d05c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d05e:	69fb      	ldr	r3, [r7, #28]
 801d060:	7adb      	ldrb	r3, [r3, #11]
 801d062:	2b01      	cmp	r3, #1
 801d064:	d106      	bne.n	801d074 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	7a9b      	ldrb	r3, [r3, #10]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d102      	bne.n	801d074 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d06e:	69f8      	ldr	r0, [r7, #28]
 801d070:	f7ff fea6 	bl	801cdc0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d074:	4b15      	ldr	r3, [pc, #84]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d00d      	beq.n	801d098 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d07c:	4b13      	ldr	r3, [pc, #76]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d0d7      	beq.n	801d036 <UTIL_TIMER_IRQ_Handler+0x66>
 801d086:	4b11      	ldr	r3, [pc, #68]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	681c      	ldr	r4, [r3, #0]
 801d08c:	4b0e      	ldr	r3, [pc, #56]	; (801d0c8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d08e:	699b      	ldr	r3, [r3, #24]
 801d090:	4798      	blx	r3
 801d092:	4603      	mov	r3, r0
 801d094:	429c      	cmp	r4, r3
 801d096:	d3ce      	bcc.n	801d036 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d098:	4b0c      	ldr	r3, [pc, #48]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d009      	beq.n	801d0b4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d0a0:	4b0a      	ldr	r3, [pc, #40]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	7a1b      	ldrb	r3, [r3, #8]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d104      	bne.n	801d0b4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d0aa:	4b08      	ldr	r3, [pc, #32]	; (801d0cc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f000 f858 	bl	801d164 <TimerSetTimeout>
 801d0b4:	69bb      	ldr	r3, [r7, #24]
 801d0b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	f383 8810 	msr	PRIMASK, r3
}
 801d0be:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d0c0:	bf00      	nop
 801d0c2:	3724      	adds	r7, #36	; 0x24
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	bd90      	pop	{r4, r7, pc}
 801d0c8:	0801e200 	.word	0x0801e200
 801d0cc:	200044ec 	.word	0x200044ec

0801d0d0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b082      	sub	sp, #8
 801d0d4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d0d6:	4b06      	ldr	r3, [pc, #24]	; (801d0f0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d0d8:	69db      	ldr	r3, [r3, #28]
 801d0da:	4798      	blx	r3
 801d0dc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d0de:	4b04      	ldr	r3, [pc, #16]	; (801d0f0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801d0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0e2:	6878      	ldr	r0, [r7, #4]
 801d0e4:	4798      	blx	r3
 801d0e6:	4603      	mov	r3, r0
}
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	3708      	adds	r7, #8
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	bd80      	pop	{r7, pc}
 801d0f0:	0801e200 	.word	0x0801e200

0801d0f4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b084      	sub	sp, #16
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d0fc:	4b0a      	ldr	r3, [pc, #40]	; (801d128 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d0fe:	69db      	ldr	r3, [r3, #28]
 801d100:	4798      	blx	r3
 801d102:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d104:	4b08      	ldr	r3, [pc, #32]	; (801d128 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d108:	6878      	ldr	r0, [r7, #4]
 801d10a:	4798      	blx	r3
 801d10c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d10e:	4b06      	ldr	r3, [pc, #24]	; (801d128 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d112:	68f9      	ldr	r1, [r7, #12]
 801d114:	68ba      	ldr	r2, [r7, #8]
 801d116:	1a8a      	subs	r2, r1, r2
 801d118:	4610      	mov	r0, r2
 801d11a:	4798      	blx	r3
 801d11c:	4603      	mov	r3, r0
}
 801d11e:	4618      	mov	r0, r3
 801d120:	3710      	adds	r7, #16
 801d122:	46bd      	mov	sp, r7
 801d124:	bd80      	pop	{r7, pc}
 801d126:	bf00      	nop
 801d128:	0801e200 	.word	0x0801e200

0801d12c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d12c:	b480      	push	{r7}
 801d12e:	b085      	sub	sp, #20
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d134:	4b0a      	ldr	r3, [pc, #40]	; (801d160 <TimerExists+0x34>)
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d13a:	e008      	b.n	801d14e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d13c:	68fa      	ldr	r2, [r7, #12]
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	429a      	cmp	r2, r3
 801d142:	d101      	bne.n	801d148 <TimerExists+0x1c>
    {
      return true;
 801d144:	2301      	movs	r3, #1
 801d146:	e006      	b.n	801d156 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	695b      	ldr	r3, [r3, #20]
 801d14c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d1f3      	bne.n	801d13c <TimerExists+0x10>
  }
  return false;
 801d154:	2300      	movs	r3, #0
}
 801d156:	4618      	mov	r0, r3
 801d158:	3714      	adds	r7, #20
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bc80      	pop	{r7}
 801d15e:	4770      	bx	lr
 801d160:	200044ec 	.word	0x200044ec

0801d164 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d164:	b590      	push	{r4, r7, lr}
 801d166:	b085      	sub	sp, #20
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d16c:	4b11      	ldr	r3, [pc, #68]	; (801d1b4 <TimerSetTimeout+0x50>)
 801d16e:	6a1b      	ldr	r3, [r3, #32]
 801d170:	4798      	blx	r3
 801d172:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	2201      	movs	r2, #1
 801d178:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	681c      	ldr	r4, [r3, #0]
 801d17e:	4b0d      	ldr	r3, [pc, #52]	; (801d1b4 <TimerSetTimeout+0x50>)
 801d180:	699b      	ldr	r3, [r3, #24]
 801d182:	4798      	blx	r3
 801d184:	4602      	mov	r2, r0
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	4413      	add	r3, r2
 801d18a:	429c      	cmp	r4, r3
 801d18c:	d207      	bcs.n	801d19e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d18e:	4b09      	ldr	r3, [pc, #36]	; (801d1b4 <TimerSetTimeout+0x50>)
 801d190:	699b      	ldr	r3, [r3, #24]
 801d192:	4798      	blx	r3
 801d194:	4602      	mov	r2, r0
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	441a      	add	r2, r3
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d19e:	4b05      	ldr	r3, [pc, #20]	; (801d1b4 <TimerSetTimeout+0x50>)
 801d1a0:	689b      	ldr	r3, [r3, #8]
 801d1a2:	687a      	ldr	r2, [r7, #4]
 801d1a4:	6812      	ldr	r2, [r2, #0]
 801d1a6:	4610      	mov	r0, r2
 801d1a8:	4798      	blx	r3
}
 801d1aa:	bf00      	nop
 801d1ac:	3714      	adds	r7, #20
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	bd90      	pop	{r4, r7, pc}
 801d1b2:	bf00      	nop
 801d1b4:	0801e200 	.word	0x0801e200

0801d1b8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	b085      	sub	sp, #20
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d1c0:	4b14      	ldr	r3, [pc, #80]	; (801d214 <TimerInsertTimer+0x5c>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d1c6:	4b13      	ldr	r3, [pc, #76]	; (801d214 <TimerInsertTimer+0x5c>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	695b      	ldr	r3, [r3, #20]
 801d1cc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d1ce:	e012      	b.n	801d1f6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	681a      	ldr	r2, [r3, #0]
 801d1d4:	68bb      	ldr	r3, [r7, #8]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	d905      	bls.n	801d1e8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d1dc:	68bb      	ldr	r3, [r7, #8]
 801d1de:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d1e0:	68bb      	ldr	r3, [r7, #8]
 801d1e2:	695b      	ldr	r3, [r3, #20]
 801d1e4:	60bb      	str	r3, [r7, #8]
 801d1e6:	e006      	b.n	801d1f6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	687a      	ldr	r2, [r7, #4]
 801d1ec:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	68ba      	ldr	r2, [r7, #8]
 801d1f2:	615a      	str	r2, [r3, #20]
        return;
 801d1f4:	e009      	b.n	801d20a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	695b      	ldr	r3, [r3, #20]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d1e8      	bne.n	801d1d0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	687a      	ldr	r2, [r7, #4]
 801d202:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	2200      	movs	r2, #0
 801d208:	615a      	str	r2, [r3, #20]
}
 801d20a:	3714      	adds	r7, #20
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bc80      	pop	{r7}
 801d210:	4770      	bx	lr
 801d212:	bf00      	nop
 801d214:	200044ec 	.word	0x200044ec

0801d218 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b084      	sub	sp, #16
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d220:	4b0b      	ldr	r3, [pc, #44]	; (801d250 <TimerInsertNewHeadTimer+0x38>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d002      	beq.n	801d232 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	2200      	movs	r2, #0
 801d230:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	68fa      	ldr	r2, [r7, #12]
 801d236:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d238:	4a05      	ldr	r2, [pc, #20]	; (801d250 <TimerInsertNewHeadTimer+0x38>)
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d23e:	4b04      	ldr	r3, [pc, #16]	; (801d250 <TimerInsertNewHeadTimer+0x38>)
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	4618      	mov	r0, r3
 801d244:	f7ff ff8e 	bl	801d164 <TimerSetTimeout>
}
 801d248:	bf00      	nop
 801d24a:	3710      	adds	r7, #16
 801d24c:	46bd      	mov	sp, r7
 801d24e:	bd80      	pop	{r7, pc}
 801d250:	200044ec 	.word	0x200044ec

0801d254 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d254:	b480      	push	{r7}
 801d256:	b085      	sub	sp, #20
 801d258:	af00      	add	r7, sp, #0
 801d25a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d25c:	2300      	movs	r3, #0
 801d25e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d260:	e00e      	b.n	801d280 <ee_skip_atoi+0x2c>
 801d262:	68fa      	ldr	r2, [r7, #12]
 801d264:	4613      	mov	r3, r2
 801d266:	009b      	lsls	r3, r3, #2
 801d268:	4413      	add	r3, r2
 801d26a:	005b      	lsls	r3, r3, #1
 801d26c:	4618      	mov	r0, r3
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	1c59      	adds	r1, r3, #1
 801d274:	687a      	ldr	r2, [r7, #4]
 801d276:	6011      	str	r1, [r2, #0]
 801d278:	781b      	ldrb	r3, [r3, #0]
 801d27a:	4403      	add	r3, r0
 801d27c:	3b30      	subs	r3, #48	; 0x30
 801d27e:	60fb      	str	r3, [r7, #12]
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	781b      	ldrb	r3, [r3, #0]
 801d286:	2b2f      	cmp	r3, #47	; 0x2f
 801d288:	d904      	bls.n	801d294 <ee_skip_atoi+0x40>
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	2b39      	cmp	r3, #57	; 0x39
 801d292:	d9e6      	bls.n	801d262 <ee_skip_atoi+0xe>
  return i;
 801d294:	68fb      	ldr	r3, [r7, #12]
}
 801d296:	4618      	mov	r0, r3
 801d298:	3714      	adds	r7, #20
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bc80      	pop	{r7}
 801d29e:	4770      	bx	lr

0801d2a0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d2a0:	b480      	push	{r7}
 801d2a2:	b099      	sub	sp, #100	; 0x64
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	60f8      	str	r0, [r7, #12]
 801d2a8:	60b9      	str	r1, [r7, #8]
 801d2aa:	607a      	str	r2, [r7, #4]
 801d2ac:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d2ae:	4b71      	ldr	r3, [pc, #452]	; (801d474 <ee_number+0x1d4>)
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d2b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	d002      	beq.n	801d2c4 <ee_number+0x24>
 801d2be:	4b6e      	ldr	r3, [pc, #440]	; (801d478 <ee_number+0x1d8>)
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d2c4:	683b      	ldr	r3, [r7, #0]
 801d2c6:	2b01      	cmp	r3, #1
 801d2c8:	dd02      	ble.n	801d2d0 <ee_number+0x30>
 801d2ca:	683b      	ldr	r3, [r7, #0]
 801d2cc:	2b24      	cmp	r3, #36	; 0x24
 801d2ce:	dd01      	ble.n	801d2d4 <ee_number+0x34>
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	e0ca      	b.n	801d46a <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d2d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2d6:	f003 0301 	and.w	r3, r3, #1
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d001      	beq.n	801d2e2 <ee_number+0x42>
 801d2de:	2330      	movs	r3, #48	; 0x30
 801d2e0:	e000      	b.n	801d2e4 <ee_number+0x44>
 801d2e2:	2320      	movs	r3, #32
 801d2e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d2e8:	2300      	movs	r3, #0
 801d2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d2ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2f0:	f003 0302 	and.w	r3, r3, #2
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d00b      	beq.n	801d310 <ee_number+0x70>
  {
    if (num < 0)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	da08      	bge.n	801d310 <ee_number+0x70>
    {
      sign = '-';
 801d2fe:	232d      	movs	r3, #45	; 0x2d
 801d300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	425b      	negs	r3, r3
 801d308:	607b      	str	r3, [r7, #4]
      size--;
 801d30a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d30c:	3b01      	subs	r3, #1
 801d30e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d310:	2300      	movs	r3, #0
 801d312:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d11e      	bne.n	801d358 <ee_number+0xb8>
    tmp[i++] = '0';
 801d31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d31c:	1c5a      	adds	r2, r3, #1
 801d31e:	657a      	str	r2, [r7, #84]	; 0x54
 801d320:	3360      	adds	r3, #96	; 0x60
 801d322:	443b      	add	r3, r7
 801d324:	2230      	movs	r2, #48	; 0x30
 801d326:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d32a:	e018      	b.n	801d35e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	683a      	ldr	r2, [r7, #0]
 801d330:	fbb3 f1f2 	udiv	r1, r3, r2
 801d334:	fb01 f202 	mul.w	r2, r1, r2
 801d338:	1a9b      	subs	r3, r3, r2
 801d33a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d33c:	441a      	add	r2, r3
 801d33e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d340:	1c59      	adds	r1, r3, #1
 801d342:	6579      	str	r1, [r7, #84]	; 0x54
 801d344:	7812      	ldrb	r2, [r2, #0]
 801d346:	3360      	adds	r3, #96	; 0x60
 801d348:	443b      	add	r3, r7
 801d34a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	683b      	ldr	r3, [r7, #0]
 801d352:	fbb2 f3f3 	udiv	r3, r2, r3
 801d356:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d1e6      	bne.n	801d32c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d35e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d362:	429a      	cmp	r2, r3
 801d364:	dd01      	ble.n	801d36a <ee_number+0xca>
 801d366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d368:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d36a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d36c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d36e:	1ad3      	subs	r3, r2, r3
 801d370:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d374:	f003 0301 	and.w	r3, r3, #1
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d112      	bne.n	801d3a2 <ee_number+0x102>
 801d37c:	e00c      	b.n	801d398 <ee_number+0xf8>
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	1c5a      	adds	r2, r3, #1
 801d382:	60fa      	str	r2, [r7, #12]
 801d384:	2220      	movs	r2, #32
 801d386:	701a      	strb	r2, [r3, #0]
 801d388:	68bb      	ldr	r3, [r7, #8]
 801d38a:	3b01      	subs	r3, #1
 801d38c:	60bb      	str	r3, [r7, #8]
 801d38e:	68bb      	ldr	r3, [r7, #8]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d101      	bne.n	801d398 <ee_number+0xf8>
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	e068      	b.n	801d46a <ee_number+0x1ca>
 801d398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d39a:	1e5a      	subs	r2, r3, #1
 801d39c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	dced      	bgt.n	801d37e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d3a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d01b      	beq.n	801d3e2 <ee_number+0x142>
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	1c5a      	adds	r2, r3, #1
 801d3ae:	60fa      	str	r2, [r7, #12]
 801d3b0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d3b4:	701a      	strb	r2, [r3, #0]
 801d3b6:	68bb      	ldr	r3, [r7, #8]
 801d3b8:	3b01      	subs	r3, #1
 801d3ba:	60bb      	str	r3, [r7, #8]
 801d3bc:	68bb      	ldr	r3, [r7, #8]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d10f      	bne.n	801d3e2 <ee_number+0x142>
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	e051      	b.n	801d46a <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	1c5a      	adds	r2, r3, #1
 801d3ca:	60fa      	str	r2, [r7, #12]
 801d3cc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d3d0:	701a      	strb	r2, [r3, #0]
 801d3d2:	68bb      	ldr	r3, [r7, #8]
 801d3d4:	3b01      	subs	r3, #1
 801d3d6:	60bb      	str	r3, [r7, #8]
 801d3d8:	68bb      	ldr	r3, [r7, #8]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d101      	bne.n	801d3e2 <ee_number+0x142>
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	e043      	b.n	801d46a <ee_number+0x1ca>
 801d3e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3e4:	1e5a      	subs	r2, r3, #1
 801d3e6:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	dcec      	bgt.n	801d3c6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d3ec:	e00c      	b.n	801d408 <ee_number+0x168>
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	1c5a      	adds	r2, r3, #1
 801d3f2:	60fa      	str	r2, [r7, #12]
 801d3f4:	2230      	movs	r2, #48	; 0x30
 801d3f6:	701a      	strb	r2, [r3, #0]
 801d3f8:	68bb      	ldr	r3, [r7, #8]
 801d3fa:	3b01      	subs	r3, #1
 801d3fc:	60bb      	str	r3, [r7, #8]
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d101      	bne.n	801d408 <ee_number+0x168>
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	e030      	b.n	801d46a <ee_number+0x1ca>
 801d408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d40a:	1e5a      	subs	r2, r3, #1
 801d40c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d40e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d410:	429a      	cmp	r2, r3
 801d412:	dbec      	blt.n	801d3ee <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d414:	e010      	b.n	801d438 <ee_number+0x198>
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	1c5a      	adds	r2, r3, #1
 801d41a:	60fa      	str	r2, [r7, #12]
 801d41c:	f107 0110 	add.w	r1, r7, #16
 801d420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d422:	440a      	add	r2, r1
 801d424:	7812      	ldrb	r2, [r2, #0]
 801d426:	701a      	strb	r2, [r3, #0]
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	3b01      	subs	r3, #1
 801d42c:	60bb      	str	r3, [r7, #8]
 801d42e:	68bb      	ldr	r3, [r7, #8]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d101      	bne.n	801d438 <ee_number+0x198>
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	e018      	b.n	801d46a <ee_number+0x1ca>
 801d438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d43a:	1e5a      	subs	r2, r3, #1
 801d43c:	657a      	str	r2, [r7, #84]	; 0x54
 801d43e:	2b00      	cmp	r3, #0
 801d440:	dce9      	bgt.n	801d416 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d442:	e00c      	b.n	801d45e <ee_number+0x1be>
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	1c5a      	adds	r2, r3, #1
 801d448:	60fa      	str	r2, [r7, #12]
 801d44a:	2220      	movs	r2, #32
 801d44c:	701a      	strb	r2, [r3, #0]
 801d44e:	68bb      	ldr	r3, [r7, #8]
 801d450:	3b01      	subs	r3, #1
 801d452:	60bb      	str	r3, [r7, #8]
 801d454:	68bb      	ldr	r3, [r7, #8]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d101      	bne.n	801d45e <ee_number+0x1be>
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	e005      	b.n	801d46a <ee_number+0x1ca>
 801d45e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d460:	1e5a      	subs	r2, r3, #1
 801d462:	66ba      	str	r2, [r7, #104]	; 0x68
 801d464:	2b00      	cmp	r3, #0
 801d466:	dced      	bgt.n	801d444 <ee_number+0x1a4>

  return str;
 801d468:	68fb      	ldr	r3, [r7, #12]
}
 801d46a:	4618      	mov	r0, r3
 801d46c:	3764      	adds	r7, #100	; 0x64
 801d46e:	46bd      	mov	sp, r7
 801d470:	bc80      	pop	{r7}
 801d472:	4770      	bx	lr
 801d474:	20000110 	.word	0x20000110
 801d478:	20000114 	.word	0x20000114

0801d47c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b092      	sub	sp, #72	; 0x48
 801d480:	af04      	add	r7, sp, #16
 801d482:	60f8      	str	r0, [r7, #12]
 801d484:	60b9      	str	r1, [r7, #8]
 801d486:	607a      	str	r2, [r7, #4]
 801d488:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d48a:	68bb      	ldr	r3, [r7, #8]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	dc01      	bgt.n	801d494 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d490:	2300      	movs	r3, #0
 801d492:	e142      	b.n	801d71a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d498:	e12a      	b.n	801d6f0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d49a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	1ad2      	subs	r2, r2, r3
 801d4a0:	68bb      	ldr	r3, [r7, #8]
 801d4a2:	3b01      	subs	r3, #1
 801d4a4:	429a      	cmp	r2, r3
 801d4a6:	f280 8131 	bge.w	801d70c <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	781b      	ldrb	r3, [r3, #0]
 801d4ae:	2b25      	cmp	r3, #37	; 0x25
 801d4b0:	d006      	beq.n	801d4c0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d4b2:	687a      	ldr	r2, [r7, #4]
 801d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4b6:	1c59      	adds	r1, r3, #1
 801d4b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d4ba:	7812      	ldrb	r2, [r2, #0]
 801d4bc:	701a      	strb	r2, [r3, #0]
      continue;
 801d4be:	e114      	b.n	801d6ea <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	781b      	ldrb	r3, [r3, #0]
 801d4ce:	2b30      	cmp	r3, #48	; 0x30
 801d4d0:	d103      	bne.n	801d4da <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d4d2:	6a3b      	ldr	r3, [r7, #32]
 801d4d4:	f043 0301 	orr.w	r3, r3, #1
 801d4d8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d4da:	f04f 33ff 	mov.w	r3, #4294967295
 801d4de:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	2b2f      	cmp	r3, #47	; 0x2f
 801d4e6:	d908      	bls.n	801d4fa <tiny_vsnprintf_like+0x7e>
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	2b39      	cmp	r3, #57	; 0x39
 801d4ee:	d804      	bhi.n	801d4fa <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d4f0:	1d3b      	adds	r3, r7, #4
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f7ff feae 	bl	801d254 <ee_skip_atoi>
 801d4f8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d4fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d4fe:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d500:	f04f 33ff 	mov.w	r3, #4294967295
 801d504:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d506:	230a      	movs	r3, #10
 801d508:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	781b      	ldrb	r3, [r3, #0]
 801d50e:	3b58      	subs	r3, #88	; 0x58
 801d510:	2b20      	cmp	r3, #32
 801d512:	f200 8094 	bhi.w	801d63e <tiny_vsnprintf_like+0x1c2>
 801d516:	a201      	add	r2, pc, #4	; (adr r2, 801d51c <tiny_vsnprintf_like+0xa0>)
 801d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d51c:	0801d627 	.word	0x0801d627
 801d520:	0801d63f 	.word	0x0801d63f
 801d524:	0801d63f 	.word	0x0801d63f
 801d528:	0801d63f 	.word	0x0801d63f
 801d52c:	0801d63f 	.word	0x0801d63f
 801d530:	0801d63f 	.word	0x0801d63f
 801d534:	0801d63f 	.word	0x0801d63f
 801d538:	0801d63f 	.word	0x0801d63f
 801d53c:	0801d63f 	.word	0x0801d63f
 801d540:	0801d63f 	.word	0x0801d63f
 801d544:	0801d63f 	.word	0x0801d63f
 801d548:	0801d5ab 	.word	0x0801d5ab
 801d54c:	0801d635 	.word	0x0801d635
 801d550:	0801d63f 	.word	0x0801d63f
 801d554:	0801d63f 	.word	0x0801d63f
 801d558:	0801d63f 	.word	0x0801d63f
 801d55c:	0801d63f 	.word	0x0801d63f
 801d560:	0801d635 	.word	0x0801d635
 801d564:	0801d63f 	.word	0x0801d63f
 801d568:	0801d63f 	.word	0x0801d63f
 801d56c:	0801d63f 	.word	0x0801d63f
 801d570:	0801d63f 	.word	0x0801d63f
 801d574:	0801d63f 	.word	0x0801d63f
 801d578:	0801d63f 	.word	0x0801d63f
 801d57c:	0801d63f 	.word	0x0801d63f
 801d580:	0801d63f 	.word	0x0801d63f
 801d584:	0801d63f 	.word	0x0801d63f
 801d588:	0801d5cb 	.word	0x0801d5cb
 801d58c:	0801d63f 	.word	0x0801d63f
 801d590:	0801d68b 	.word	0x0801d68b
 801d594:	0801d63f 	.word	0x0801d63f
 801d598:	0801d63f 	.word	0x0801d63f
 801d59c:	0801d62f 	.word	0x0801d62f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5a2:	1c5a      	adds	r2, r3, #1
 801d5a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5a6:	2220      	movs	r2, #32
 801d5a8:	701a      	strb	r2, [r3, #0]
 801d5aa:	69fb      	ldr	r3, [r7, #28]
 801d5ac:	3b01      	subs	r3, #1
 801d5ae:	61fb      	str	r3, [r7, #28]
 801d5b0:	69fb      	ldr	r3, [r7, #28]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	dcf4      	bgt.n	801d5a0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d5b6:	683b      	ldr	r3, [r7, #0]
 801d5b8:	1d1a      	adds	r2, r3, #4
 801d5ba:	603a      	str	r2, [r7, #0]
 801d5bc:	6819      	ldr	r1, [r3, #0]
 801d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5c0:	1c5a      	adds	r2, r3, #1
 801d5c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5c4:	b2ca      	uxtb	r2, r1
 801d5c6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d5c8:	e08f      	b.n	801d6ea <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801d5ca:	683b      	ldr	r3, [r7, #0]
 801d5cc:	1d1a      	adds	r2, r3, #4
 801d5ce:	603a      	str	r2, [r7, #0]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d101      	bne.n	801d5de <tiny_vsnprintf_like+0x162>
 801d5da:	4b52      	ldr	r3, [pc, #328]	; (801d724 <tiny_vsnprintf_like+0x2a8>)
 801d5dc:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d5de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5e0:	f7e2 fdce 	bl	8000180 <strlen>
 801d5e4:	4603      	mov	r3, r0
 801d5e6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d5e8:	e004      	b.n	801d5f4 <tiny_vsnprintf_like+0x178>
 801d5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ec:	1c5a      	adds	r2, r3, #1
 801d5ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5f0:	2220      	movs	r2, #32
 801d5f2:	701a      	strb	r2, [r3, #0]
 801d5f4:	69fb      	ldr	r3, [r7, #28]
 801d5f6:	1e5a      	subs	r2, r3, #1
 801d5f8:	61fa      	str	r2, [r7, #28]
 801d5fa:	693a      	ldr	r2, [r7, #16]
 801d5fc:	429a      	cmp	r2, r3
 801d5fe:	dbf4      	blt.n	801d5ea <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d600:	2300      	movs	r3, #0
 801d602:	62bb      	str	r3, [r7, #40]	; 0x28
 801d604:	e00a      	b.n	801d61c <tiny_vsnprintf_like+0x1a0>
 801d606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d608:	1c53      	adds	r3, r2, #1
 801d60a:	627b      	str	r3, [r7, #36]	; 0x24
 801d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d60e:	1c59      	adds	r1, r3, #1
 801d610:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d612:	7812      	ldrb	r2, [r2, #0]
 801d614:	701a      	strb	r2, [r3, #0]
 801d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d618:	3301      	adds	r3, #1
 801d61a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d61e:	693b      	ldr	r3, [r7, #16]
 801d620:	429a      	cmp	r2, r3
 801d622:	dbf0      	blt.n	801d606 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d624:	e061      	b.n	801d6ea <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d626:	6a3b      	ldr	r3, [r7, #32]
 801d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d62c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d62e:	2310      	movs	r3, #16
 801d630:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d632:	e02d      	b.n	801d690 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d634:	6a3b      	ldr	r3, [r7, #32]
 801d636:	f043 0302 	orr.w	r3, r3, #2
 801d63a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d63c:	e025      	b.n	801d68a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	781b      	ldrb	r3, [r3, #0]
 801d642:	2b25      	cmp	r3, #37	; 0x25
 801d644:	d004      	beq.n	801d650 <tiny_vsnprintf_like+0x1d4>
 801d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d648:	1c5a      	adds	r2, r3, #1
 801d64a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d64c:	2225      	movs	r2, #37	; 0x25
 801d64e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	1ad2      	subs	r2, r2, r3
 801d656:	68bb      	ldr	r3, [r7, #8]
 801d658:	3b01      	subs	r3, #1
 801d65a:	429a      	cmp	r2, r3
 801d65c:	da17      	bge.n	801d68e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d006      	beq.n	801d674 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d666:	687a      	ldr	r2, [r7, #4]
 801d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d66a:	1c59      	adds	r1, r3, #1
 801d66c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d66e:	7812      	ldrb	r2, [r2, #0]
 801d670:	701a      	strb	r2, [r3, #0]
 801d672:	e002      	b.n	801d67a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	3b01      	subs	r3, #1
 801d678:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	1ad2      	subs	r2, r2, r3
 801d680:	68bb      	ldr	r3, [r7, #8]
 801d682:	3b01      	subs	r3, #1
 801d684:	429a      	cmp	r2, r3
 801d686:	db2f      	blt.n	801d6e8 <tiny_vsnprintf_like+0x26c>
 801d688:	e002      	b.n	801d690 <tiny_vsnprintf_like+0x214>
        break;
 801d68a:	bf00      	nop
 801d68c:	e000      	b.n	801d690 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801d68e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	2b6c      	cmp	r3, #108	; 0x6c
 801d694:	d105      	bne.n	801d6a2 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801d696:	683b      	ldr	r3, [r7, #0]
 801d698:	1d1a      	adds	r2, r3, #4
 801d69a:	603a      	str	r2, [r7, #0]
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	637b      	str	r3, [r7, #52]	; 0x34
 801d6a0:	e00f      	b.n	801d6c2 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801d6a2:	6a3b      	ldr	r3, [r7, #32]
 801d6a4:	f003 0302 	and.w	r3, r3, #2
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d005      	beq.n	801d6b8 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801d6ac:	683b      	ldr	r3, [r7, #0]
 801d6ae:	1d1a      	adds	r2, r3, #4
 801d6b0:	603a      	str	r2, [r7, #0]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	637b      	str	r3, [r7, #52]	; 0x34
 801d6b6:	e004      	b.n	801d6c2 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801d6b8:	683b      	ldr	r3, [r7, #0]
 801d6ba:	1d1a      	adds	r2, r3, #4
 801d6bc:	603a      	str	r2, [r7, #0]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d6c2:	68bb      	ldr	r3, [r7, #8]
 801d6c4:	1e5a      	subs	r2, r3, #1
 801d6c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	1acb      	subs	r3, r1, r3
 801d6cc:	1ad1      	subs	r1, r2, r3
 801d6ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d6d0:	6a3b      	ldr	r3, [r7, #32]
 801d6d2:	9302      	str	r3, [sp, #8]
 801d6d4:	69bb      	ldr	r3, [r7, #24]
 801d6d6:	9301      	str	r3, [sp, #4]
 801d6d8:	69fb      	ldr	r3, [r7, #28]
 801d6da:	9300      	str	r3, [sp, #0]
 801d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d6e0:	f7ff fdde 	bl	801d2a0 <ee_number>
 801d6e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d6e6:	e000      	b.n	801d6ea <tiny_vsnprintf_like+0x26e>
        continue;
 801d6e8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	3301      	adds	r3, #1
 801d6ee:	607b      	str	r3, [r7, #4]
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	781b      	ldrb	r3, [r3, #0]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f47f aed0 	bne.w	801d49a <tiny_vsnprintf_like+0x1e>
 801d6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	1ad2      	subs	r2, r2, r3
 801d700:	68bb      	ldr	r3, [r7, #8]
 801d702:	3b01      	subs	r3, #1
 801d704:	429a      	cmp	r2, r3
 801d706:	f6bf aec8 	bge.w	801d49a <tiny_vsnprintf_like+0x1e>
 801d70a:	e000      	b.n	801d70e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801d70c:	bf00      	nop
  }

  *str = '\0';
 801d70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d710:	2200      	movs	r2, #0
 801d712:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	1ad3      	subs	r3, r2, r3
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	3738      	adds	r7, #56	; 0x38
 801d71e:	46bd      	mov	sp, r7
 801d720:	bd80      	pop	{r7, pc}
 801d722:	bf00      	nop
 801d724:	0801e140 	.word	0x0801e140

0801d728 <__libc_init_array>:
 801d728:	b570      	push	{r4, r5, r6, lr}
 801d72a:	4d0d      	ldr	r5, [pc, #52]	; (801d760 <__libc_init_array+0x38>)
 801d72c:	4c0d      	ldr	r4, [pc, #52]	; (801d764 <__libc_init_array+0x3c>)
 801d72e:	1b64      	subs	r4, r4, r5
 801d730:	10a4      	asrs	r4, r4, #2
 801d732:	2600      	movs	r6, #0
 801d734:	42a6      	cmp	r6, r4
 801d736:	d109      	bne.n	801d74c <__libc_init_array+0x24>
 801d738:	4d0b      	ldr	r5, [pc, #44]	; (801d768 <__libc_init_array+0x40>)
 801d73a:	4c0c      	ldr	r4, [pc, #48]	; (801d76c <__libc_init_array+0x44>)
 801d73c:	f000 f8b0 	bl	801d8a0 <_init>
 801d740:	1b64      	subs	r4, r4, r5
 801d742:	10a4      	asrs	r4, r4, #2
 801d744:	2600      	movs	r6, #0
 801d746:	42a6      	cmp	r6, r4
 801d748:	d105      	bne.n	801d756 <__libc_init_array+0x2e>
 801d74a:	bd70      	pop	{r4, r5, r6, pc}
 801d74c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d750:	4798      	blx	r3
 801d752:	3601      	adds	r6, #1
 801d754:	e7ee      	b.n	801d734 <__libc_init_array+0xc>
 801d756:	f855 3b04 	ldr.w	r3, [r5], #4
 801d75a:	4798      	blx	r3
 801d75c:	3601      	adds	r6, #1
 801d75e:	e7f2      	b.n	801d746 <__libc_init_array+0x1e>
 801d760:	0801e798 	.word	0x0801e798
 801d764:	0801e798 	.word	0x0801e798
 801d768:	0801e798 	.word	0x0801e798
 801d76c:	0801e79c 	.word	0x0801e79c

0801d770 <memcpy>:
 801d770:	440a      	add	r2, r1
 801d772:	4291      	cmp	r1, r2
 801d774:	f100 33ff 	add.w	r3, r0, #4294967295
 801d778:	d100      	bne.n	801d77c <memcpy+0xc>
 801d77a:	4770      	bx	lr
 801d77c:	b510      	push	{r4, lr}
 801d77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d782:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d786:	4291      	cmp	r1, r2
 801d788:	d1f9      	bne.n	801d77e <memcpy+0xe>
 801d78a:	bd10      	pop	{r4, pc}

0801d78c <memset>:
 801d78c:	4402      	add	r2, r0
 801d78e:	4603      	mov	r3, r0
 801d790:	4293      	cmp	r3, r2
 801d792:	d100      	bne.n	801d796 <memset+0xa>
 801d794:	4770      	bx	lr
 801d796:	f803 1b01 	strb.w	r1, [r3], #1
 801d79a:	e7f9      	b.n	801d790 <memset+0x4>
 801d79c:	0000      	movs	r0, r0
	...

0801d7a0 <floor>:
 801d7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801d7a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801d7ac:	2e13      	cmp	r6, #19
 801d7ae:	4602      	mov	r2, r0
 801d7b0:	460b      	mov	r3, r1
 801d7b2:	4607      	mov	r7, r0
 801d7b4:	460c      	mov	r4, r1
 801d7b6:	4605      	mov	r5, r0
 801d7b8:	dc33      	bgt.n	801d822 <floor+0x82>
 801d7ba:	2e00      	cmp	r6, #0
 801d7bc:	da14      	bge.n	801d7e8 <floor+0x48>
 801d7be:	a334      	add	r3, pc, #208	; (adr r3, 801d890 <floor+0xf0>)
 801d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7c4:	f7e2 fcea 	bl	800019c <__adddf3>
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	f7e2 ff1a 	bl	8000604 <__aeabi_dcmpgt>
 801d7d0:	b138      	cbz	r0, 801d7e2 <floor+0x42>
 801d7d2:	2c00      	cmp	r4, #0
 801d7d4:	da58      	bge.n	801d888 <floor+0xe8>
 801d7d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d7da:	431d      	orrs	r5, r3
 801d7dc:	d001      	beq.n	801d7e2 <floor+0x42>
 801d7de:	4c2e      	ldr	r4, [pc, #184]	; (801d898 <floor+0xf8>)
 801d7e0:	2500      	movs	r5, #0
 801d7e2:	4623      	mov	r3, r4
 801d7e4:	462f      	mov	r7, r5
 801d7e6:	e025      	b.n	801d834 <floor+0x94>
 801d7e8:	4a2c      	ldr	r2, [pc, #176]	; (801d89c <floor+0xfc>)
 801d7ea:	fa42 f806 	asr.w	r8, r2, r6
 801d7ee:	ea01 0208 	and.w	r2, r1, r8
 801d7f2:	4302      	orrs	r2, r0
 801d7f4:	d01e      	beq.n	801d834 <floor+0x94>
 801d7f6:	a326      	add	r3, pc, #152	; (adr r3, 801d890 <floor+0xf0>)
 801d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7fc:	f7e2 fcce 	bl	800019c <__adddf3>
 801d800:	2200      	movs	r2, #0
 801d802:	2300      	movs	r3, #0
 801d804:	f7e2 fefe 	bl	8000604 <__aeabi_dcmpgt>
 801d808:	2800      	cmp	r0, #0
 801d80a:	d0ea      	beq.n	801d7e2 <floor+0x42>
 801d80c:	2c00      	cmp	r4, #0
 801d80e:	bfbe      	ittt	lt
 801d810:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d814:	fa43 f606 	asrlt.w	r6, r3, r6
 801d818:	19a4      	addlt	r4, r4, r6
 801d81a:	ea24 0408 	bic.w	r4, r4, r8
 801d81e:	2500      	movs	r5, #0
 801d820:	e7df      	b.n	801d7e2 <floor+0x42>
 801d822:	2e33      	cmp	r6, #51	; 0x33
 801d824:	dd0a      	ble.n	801d83c <floor+0x9c>
 801d826:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d82a:	d103      	bne.n	801d834 <floor+0x94>
 801d82c:	f7e2 fcb6 	bl	800019c <__adddf3>
 801d830:	4607      	mov	r7, r0
 801d832:	460b      	mov	r3, r1
 801d834:	4638      	mov	r0, r7
 801d836:	4619      	mov	r1, r3
 801d838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d83c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801d840:	f04f 32ff 	mov.w	r2, #4294967295
 801d844:	fa22 f808 	lsr.w	r8, r2, r8
 801d848:	ea18 0f00 	tst.w	r8, r0
 801d84c:	d0f2      	beq.n	801d834 <floor+0x94>
 801d84e:	a310      	add	r3, pc, #64	; (adr r3, 801d890 <floor+0xf0>)
 801d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d854:	f7e2 fca2 	bl	800019c <__adddf3>
 801d858:	2200      	movs	r2, #0
 801d85a:	2300      	movs	r3, #0
 801d85c:	f7e2 fed2 	bl	8000604 <__aeabi_dcmpgt>
 801d860:	2800      	cmp	r0, #0
 801d862:	d0be      	beq.n	801d7e2 <floor+0x42>
 801d864:	2c00      	cmp	r4, #0
 801d866:	da02      	bge.n	801d86e <floor+0xce>
 801d868:	2e14      	cmp	r6, #20
 801d86a:	d103      	bne.n	801d874 <floor+0xd4>
 801d86c:	3401      	adds	r4, #1
 801d86e:	ea25 0508 	bic.w	r5, r5, r8
 801d872:	e7b6      	b.n	801d7e2 <floor+0x42>
 801d874:	2301      	movs	r3, #1
 801d876:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d87a:	fa03 f606 	lsl.w	r6, r3, r6
 801d87e:	4435      	add	r5, r6
 801d880:	42bd      	cmp	r5, r7
 801d882:	bf38      	it	cc
 801d884:	18e4      	addcc	r4, r4, r3
 801d886:	e7f2      	b.n	801d86e <floor+0xce>
 801d888:	2500      	movs	r5, #0
 801d88a:	462c      	mov	r4, r5
 801d88c:	e7a9      	b.n	801d7e2 <floor+0x42>
 801d88e:	bf00      	nop
 801d890:	8800759c 	.word	0x8800759c
 801d894:	7e37e43c 	.word	0x7e37e43c
 801d898:	bff00000 	.word	0xbff00000
 801d89c:	000fffff 	.word	0x000fffff

0801d8a0 <_init>:
 801d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8a2:	bf00      	nop
 801d8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8a6:	bc08      	pop	{r3}
 801d8a8:	469e      	mov	lr, r3
 801d8aa:	4770      	bx	lr

0801d8ac <_fini>:
 801d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8ae:	bf00      	nop
 801d8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d8b2:	bc08      	pop	{r3}
 801d8b4:	469e      	mov	lr, r3
 801d8b6:	4770      	bx	lr
