
FreeRTOS_LowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000418c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004398  08004398  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004398  08004398  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000100c  20000010  080043b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000101c  080043b0  0002101c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de21  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac7  00000000  00000000  0002de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00031b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001997b  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f00f  00000000  00000000  0004c58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1499  00000000  00000000  0005b59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fca33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  000fca84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080042b4 	.word	0x080042b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080042b4 	.word	0x080042b4

08000180 <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000190:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 8000194:	4a08      	ldr	r2, [pc, #32]	; (80001b8 <PreSleepProcessing+0x38>)
 8000196:	fba2 2303 	umull	r2, r3, r2, r3
 800019a:	099b      	lsrs	r3, r3, #6
 800019c:	4619      	mov	r1, r3
 800019e:	4807      	ldr	r0, [pc, #28]	; (80001bc <PreSleepProcessing+0x3c>)
 80001a0:	f000 fe4c 	bl	8000e3c <HAL_LPTIM_Counter_Start_IT>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80001a4:	2001      	movs	r0, #1
 80001a6:	f001 f9ed 	bl	8001584 <HAL_PWREx_EnterSTOP2Mode>
  *ulExpectedIdleTime = 0;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	10624dd3 	.word	0x10624dd3
 80001bc:	20000280 	.word	0x20000280

080001c0 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <PostSleepProcessing+0x1c>)
 80001ca:	f000 fed9 	bl	8000f80 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 80001ce:	f000 f85b 	bl	8000288 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000280 	.word	0x20000280

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <vApplicationGetIdleTaskMemory+0x28>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a05      	ldr	r2, [pc, #20]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	2000002c 	.word	0x2000002c
 800020c:	20000080 	.word	0x20000080

08000210 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800021c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4313      	orrs	r3, r2
 8000226:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4013      	ands	r3, r2
 8000232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000234:	68fb      	ldr	r3, [r7, #12]
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 f9a3 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f81d 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f89d 	bl	800038c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8000252:	f000 f86f 	bl	8000334 <MX_LPTIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x40>)
 8000258:	1d3c      	adds	r4, r7, #4
 800025a:	461d      	mov	r5, r3
 800025c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f002 fc85 	bl	8002b7c <osThreadCreate>
 8000272:	4603      	mov	r3, r0
 8000274:	4a03      	ldr	r2, [pc, #12]	; (8000284 <main+0x44>)
 8000276:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000278:	f002 fc79 	bl	8002b6e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x3c>
 800027e:	bf00      	nop
 8000280:	080042d8 	.word	0x080042d8
 8000284:	200002bc 	.word	0x200002bc

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09a      	sub	sp, #104	; 0x68
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	2248      	movs	r2, #72	; 0x48
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f004 f804 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 0308 	add.w	r3, r7, #8
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <SystemClock_Config+0xa8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002b6:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <SystemClock_Config+0xa8>)
 80002b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <SystemClock_Config+0xa8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80002ca:	2328      	movs	r3, #40	; 0x28
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d2:	2300      	movs	r3, #0
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d6:	2360      	movs	r3, #96	; 0x60
 80002d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0320 	add.w	r3, r7, #32
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fbee 	bl	8001acc <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002f6:	f000 f894 	bl	8000422 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002fa:	234f      	movs	r3, #79	; 0x4f
 80002fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f001 ff73 	bl	8002204 <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000324:	f000 f87d 	bl	8000422 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3768      	adds	r7, #104	; 0x68
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58000400 	.word	0x58000400

08000334 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_LPTIM1_Init+0x50>)
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MX_LPTIM1_Init+0x54>)
 800033c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_LPTIM1_Init+0x50>)
 800034c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000350:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_LPTIM1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_LPTIM1_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_LPTIM1_Init+0x50>)
 8000372:	f000 fc9b 	bl	8000cac <HAL_LPTIM_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800037c:	f000 f851 	bl	8000422 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000280 	.word	0x20000280
 8000388:	40007c00 	.word	0x40007c00

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	2002      	movs	r0, #2
 80003a2:	f7ff ff35 	bl	8000210 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	480a      	ldr	r0, [pc, #40]	; (80003d4 <MX_GPIO_Init+0x48>)
 80003ac:	f000 fbf6 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003b0:	2320      	movs	r3, #32
 80003b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4619      	mov	r1, r3
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <MX_GPIO_Init+0x48>)
 80003c6:	f000 fa89 	bl	80008dc <HAL_GPIO_Init>

}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	48000400 	.word	0x48000400

080003d8 <LED_control>:

/* USER CODE BEGIN 4 */
int32_t LED_control(int value) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, value);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	2120      	movs	r1, #32
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <LED_control+0x20>)
 80003ea:	f000 fbd7 	bl	8000b9c <HAL_GPIO_WritePin>
  return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	48000400 	.word	0x48000400

080003fc <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    LED_control(0);
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ffe7 	bl	80003d8 <LED_control>
    HAL_Delay(10000);
 800040a:	f242 7010 	movw	r0, #10000	; 0x2710
 800040e:	f000 f935 	bl	800067c <HAL_Delay>
    LED_control(1);
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ffe0 	bl	80003d8 <LED_control>
    osDelay(1000);
 8000418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041c:	f002 fbfa 	bl	8002c14 <osDelay>
    LED_control(0);
 8000420:	e7f0      	b.n	8000404 <StartLedTask+0x8>

08000422 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000426:	b672      	cpsid	i
}
 8000428:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042a:	e7fe      	b.n	800042a <Error_Handler+0x8>

0800042c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000438:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800043a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000450:	68fb      	ldr	r3, [r7, #12]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	210f      	movs	r1, #15
 8000464:	f06f 0001 	mvn.w	r0, #1
 8000468:	f000 fa01 	bl	800086e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b090      	sub	sp, #64	; 0x40
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	2238      	movs	r2, #56	; 0x38
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f003 ff0f 	bl	80042a4 <memset>
  if(hlptim->Instance==LPTIM1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <HAL_LPTIM_MspInit+0x60>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d11a      	bne.n	80004c6 <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000494:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_LPTIM_MspInit+0x64>)
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fa2e 	bl	8002900 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80004aa:	f7ff ffba 	bl	8000422 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80004ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80004b2:	f7ff ffbb 	bl	800042c <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2105      	movs	r1, #5
 80004ba:	2027      	movs	r0, #39	; 0x27
 80004bc:	f000 f9d7 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80004c0:	2027      	movs	r0, #39	; 0x27
 80004c2:	f000 f9f0 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3740      	adds	r7, #64	; 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40007c00 	.word	0x40007c00
 80004d4:	000c0004 	.word	0x000c0004

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000506:	f000 f89d 	bl	8000644 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800050a:	f003 f9b5 	bl	8003878 <xTaskGetSchedulerState>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d001      	beq.n	8000518 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000514:	f003 fba0 	bl	8003c58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <LPTIM1_IRQHandler+0x10>)
 8000522:	f000 fd93 	bl	800104c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000280 	.word	0x20000280

08000530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000540:	f7ff fff6 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	; (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	; (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056a:	f003 fe77 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fe67 	bl	8000240 <main>

08000572 <LoopForever>:

LoopForever:
    b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   r0, =_estack
 8000574:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000580:	080043a0 	.word	0x080043a0
  ldr r2, =_sbss
 8000584:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000588:	2000101c 	.word	0x2000101c

0800058c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>
	...

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 f95c 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005a0:	f001 fff4 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <HAL_Init+0x3c>)
 80005a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f810 	bl	80005d0 <HAL_InitTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e001      	b.n	80005c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005bc:	f7ff ff4e 	bl	800045c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_InitTick+0x6c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d024      	beq.n	800062e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e4:	f001 ffd2 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_InitTick+0x6c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f960 	bl	80008c2 <HAL_SYSTICK_Config>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10f      	bne.n	8000628 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d809      	bhi.n	8000622 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060e:	2200      	movs	r2, #0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	f04f 30ff 	mov.w	r0, #4294967295
 8000616:	f000 f92a 	bl	800086e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <HAL_InitTick+0x70>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e007      	b.n	8000632 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e004      	b.n	8000632 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e001      	b.n	8000632 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	200002c0 	.word	0x200002c0

08000668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	200002c0 	.word	0x200002c0

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  volatile uint32_t PreemptPriorityBits;
  volatile uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2201      	movs	r2, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff92 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff2f 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff46 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000880:	4603      	mov	r3, r0
 8000882:	617b      	str	r3, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff92 	bl	80007b4 <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff61 	bl	8000760 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff37 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e140      	b.n	8000b6e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 8132 	beq.w	8000b68 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b01      	cmp	r3, #1
 800090e:	d005      	beq.n	800091c <HAL_GPIO_Init+0x40>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d130      	bne.n	800097e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	2203      	movs	r2, #3
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000952:	2201      	movs	r2, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	f003 0201 	and.w	r2, r3, #1
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	2b03      	cmp	r3, #3
 8000988:	d017      	beq.n	80009ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d123      	bne.n	8000a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3208      	adds	r2, #8
 80009ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	6939      	ldr	r1, [r7, #16]
 8000a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0203 	and.w	r2, r3, #3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 808c 	beq.w	8000b68 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a50:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	2207      	movs	r2, #7
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a7a:	d00d      	beq.n	8000a98 <HAL_GPIO_Init+0x1bc>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <HAL_GPIO_Init+0x2b4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x1b8>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a43      	ldr	r2, [pc, #268]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_GPIO_Init+0x1b4>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e004      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a90:	2307      	movs	r3, #7
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	f002 0203 	and.w	r2, r2, #3
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	4093      	lsls	r3, r2
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aaa:	4938      	ldr	r1, [pc, #224]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ab8:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000abe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000aec:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b0c:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f aeb7 	bne.w	80008ec <HAL_GPIO_Init+0x10>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	58000800 	.word	0x58000800

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bb8:	e002      	b.n	8000bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bba:	887a      	ldrh	r2, [r7, #2]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8000bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	041b      	lsls	r3, r3, #16
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bec:	4313      	orrs	r3, r2
 8000bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <LL_RCC_GetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE

  */
__STATIC_INLINE uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	0c1a      	lsrs	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	638b      	str	r3, [r1, #56]	; 0x38
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <LL_APB1_GRP2_ForceReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8000c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <LL_APB1_GRP2_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0b6      	b.n	8000e2c <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d106      	bne.n	8000cde <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fbc9 	bl	8000470 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 0201 	orr.w	r2, r2, #1
 8000cf4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfe:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fac2 	bl	8001298 <LPTIM_WaitForFlag>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d101      	bne.n	8000d1e <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e086      	b.n	8000e2c <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 faea 	bl	80012f8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 faaa 	bl	800127e <HAL_LPTIM_GetState>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d101      	bne.n	8000d34 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e07b      	b.n	8000e2c <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d004      	beq.n	8000d4e <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000d4c:	d103      	bne.n	8000d56 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f023 031e 	bic.w	r3, r3, #30
 8000d54:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d005      	beq.n	8000d6e <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <HAL_LPTIM_Init+0x188>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000d7e:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8000d84:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8000d8a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8000d90:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d107      	bne.n	8000db0 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000da8:	4313      	orrs	r3, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d004      	beq.n	8000dc2 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000dc0:	d107      	bne.n	8000dd2 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00a      	beq.n	8000df4 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000de6:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8000dec:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_LPTIM_Init+0x18c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d108      	bne.n	8000e18 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	621a      	str	r2, [r3, #32]
 8000e16:	e004      	b.n	8000e22 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e20:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	ff19f1fe 	.word	0xff19f1fe
 8000e38:	40007c00 	.word	0x40007c00

08000e3c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <HAL_LPTIM_Counter_Start_IT+0x138>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d108      	bne.n	8000e6a <HAL_LPTIM_Counter_Start_IT+0x2e>
 8000e58:	4b47      	ldr	r3, [pc, #284]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5e:	4a46      	ldr	r2, [pc, #280]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e68:	e015      	b.n	8000e96 <HAL_LPTIM_Counter_Start_IT+0x5a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a43      	ldr	r2, [pc, #268]	; (8000f7c <HAL_LPTIM_Counter_Start_IT+0x140>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d108      	bne.n	8000e86 <HAL_LPTIM_Counter_Start_IT+0x4a>
 8000e74:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7a:	4a3f      	ldr	r2, [pc, #252]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e84:	e007      	b.n	8000e96 <HAL_LPTIM_Counter_Start_IT+0x5a>
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8000e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d00c      	beq.n	8000eb8 <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 8000ea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000ea6:	d107      	bne.n	8000eb8 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8000eb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2210      	movs	r2, #16
 8000ece:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8000ed8:	2110      	movs	r1, #16
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f9dc 	bl	8001298 <LPTIM_WaitForFlag>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d101      	bne.n	8000eea <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e03f      	b.n	8000f6a <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fa04 	bl	80012f8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f9c4 	bl	800127e <HAL_LPTIM_GetState>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d101      	bne.n	8000f00 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e034      	b.n	8000f6a <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0210 	orr.w	r2, r2, #16
 8000f0e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0202 	orr.w	r2, r2, #2
 8000f1e:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2e:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f3e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0204 	orr.w	r2, r2, #4
 8000f5e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40007c00 	.word	0x40007c00
 8000f78:	58000800 	.word	0x58000800
 8000f7c:	40009400 	.word	0x40009400

08000f80 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d108      	bne.n	8000fac <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa0:	4a28      	ldr	r2, [pc, #160]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000fa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000fa6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000faa:	e015      	b.n	8000fd8 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d108      	bne.n	8000fc8 <HAL_LPTIM_Counter_Stop_IT+0x48>
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000fbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000fc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fc6:	e007      	b.n	8000fd8 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8000fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f98d 	bl	80012f8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f94d 	bl	800127e <HAL_LPTIM_GetState>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d101      	bne.n	8000fee <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e024      	b.n	8001038 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0210 	bic.w	r2, r2, #16
 8000ffc:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0202 	bic.w	r2, r2, #2
 800100c:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800102c:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40007c00 	.word	0x40007c00
 8001044:	58000800 	.word	0x58000800
 8001048:	40009400 	.word	0x40009400

0800104c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10d      	bne.n	800107e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f8af 	bl	80011dc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d10d      	bne.n	80010a8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b02      	cmp	r3, #2
 8001098:	d106      	bne.n	80010a8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2202      	movs	r2, #2
 80010a0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f8a3 	bl	80011ee <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d10d      	bne.n	80010d2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d106      	bne.n	80010d2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2204      	movs	r2, #4
 80010ca:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f897 	bl	8001200 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d10d      	bne.n	80010fc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d106      	bne.n	80010fc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2208      	movs	r2, #8
 80010f4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f88b 	bl	8001212 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b10      	cmp	r3, #16
 8001108:	d10d      	bne.n	8001126 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b10      	cmp	r3, #16
 8001116:	d106      	bne.n	8001126 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2210      	movs	r2, #16
 800111e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f87f 	bl	8001224 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b20      	cmp	r3, #32
 8001132:	d10d      	bne.n	8001150 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	2b20      	cmp	r3, #32
 8001140:	d106      	bne.n	8001150 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2220      	movs	r2, #32
 8001148:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f873 	bl	8001236 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115a:	2b40      	cmp	r3, #64	; 0x40
 800115c:	d10d      	bne.n	800117a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001168:	2b40      	cmp	r3, #64	; 0x40
 800116a:	d106      	bne.n	800117a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f867 	bl	8001248 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	2b80      	cmp	r3, #128	; 0x80
 8001186:	d10d      	bne.n	80011a4 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b80      	cmp	r3, #128	; 0x80
 8001194:	d106      	bne.n	80011a4 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f85b 	bl	800125a <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b2:	d10f      	bne.n	80011d4 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c2:	d107      	bne.n	80011d4 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f84c 	bl	800126c <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <LPTIM_WaitForFlag+0x58>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <LPTIM_WaitForFlag+0x5c>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0b9b      	lsrs	r3, r3, #14
 80012b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	4013      	ands	r3, r2
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d002      	beq.n	80012e2 <LPTIM_WaitForFlag+0x4a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ec      	bne.n	80012bc <LPTIM_WaitForFlag+0x24>

  return result;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	d1b71759 	.word	0xd1b71759

080012f8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a8d      	ldr	r2, [pc, #564]	; (8001544 <LPTIM_Disable+0x24c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d015      	beq.n	800133e <LPTIM_Disable+0x46>
 8001312:	4a8c      	ldr	r2, [pc, #560]	; (8001544 <LPTIM_Disable+0x24c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d818      	bhi.n	800134a <LPTIM_Disable+0x52>
 8001318:	4a8b      	ldr	r2, [pc, #556]	; (8001548 <LPTIM_Disable+0x250>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d003      	beq.n	8001326 <LPTIM_Disable+0x2e>
 800131e:	4a8b      	ldr	r2, [pc, #556]	; (800154c <LPTIM_Disable+0x254>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d006      	beq.n	8001332 <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8001324:	e011      	b.n	800134a <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001326:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800132a:	f7ff fc67 	bl	8000bfc <LL_RCC_GetLPTIMClockSource>
 800132e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8001330:	e00c      	b.n	800134c <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001332:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001336:	f7ff fc61 	bl	8000bfc <LL_RCC_GetLPTIMClockSource>
 800133a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800133c:	e006      	b.n	800134c <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800133e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001342:	f7ff fc5b 	bl	8000bfc <LL_RCC_GetLPTIMClockSource>
 8001346:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8001348:	e000      	b.n	800134c <LPTIM_Disable+0x54>
      break;
 800134a:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a70      	ldr	r2, [pc, #448]	; (8001544 <LPTIM_Disable+0x24c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <LPTIM_Disable+0xc2>
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <LPTIM_Disable+0x24c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d81d      	bhi.n	80013c8 <LPTIM_Disable+0xd0>
 800138c:	4a6e      	ldr	r2, [pc, #440]	; (8001548 <LPTIM_Disable+0x250>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d003      	beq.n	800139a <LPTIM_Disable+0xa2>
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <LPTIM_Disable+0x254>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d009      	beq.n	80013ac <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8001398:	e016      	b.n	80013c8 <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800139a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800139e:	f7ff fc3f 	bl	8000c20 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80013a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80013a6:	f7ff fc5d 	bl	8000c64 <LL_APB1_GRP1_ReleaseReset>
      break;
 80013aa:	e00e      	b.n	80013ca <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80013ac:	2020      	movs	r0, #32
 80013ae:	f7ff fc48 	bl	8000c42 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80013b2:	2020      	movs	r0, #32
 80013b4:	f7ff fc68 	bl	8000c88 <LL_APB1_GRP2_ReleaseReset>
      break;
 80013b8:	e007      	b.n	80013ca <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80013ba:	2040      	movs	r0, #64	; 0x40
 80013bc:	f7ff fc41 	bl	8000c42 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80013c0:	2040      	movs	r0, #64	; 0x40
 80013c2:	f7ff fc61 	bl	8000c88 <LL_APB1_GRP2_ReleaseReset>
      break;
 80013c6:	e000      	b.n	80013ca <LPTIM_Disable+0xd2>
      break;
 80013c8:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <LPTIM_Disable+0xe6>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <LPTIM_Disable+0xe6>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8096 	beq.w	800150a <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a58      	ldr	r2, [pc, #352]	; (8001544 <LPTIM_Disable+0x24c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d013      	beq.n	8001410 <LPTIM_Disable+0x118>
 80013e8:	4a56      	ldr	r2, [pc, #344]	; (8001544 <LPTIM_Disable+0x24c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d815      	bhi.n	800141a <LPTIM_Disable+0x122>
 80013ee:	4a56      	ldr	r2, [pc, #344]	; (8001548 <LPTIM_Disable+0x250>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d003      	beq.n	80013fc <LPTIM_Disable+0x104>
 80013f4:	4a55      	ldr	r2, [pc, #340]	; (800154c <LPTIM_Disable+0x254>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d005      	beq.n	8001406 <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80013fa:	e00e      	b.n	800141a <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80013fc:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001400:	f7ff fbe3 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 8001404:	e00a      	b.n	800141c <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8001406:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800140a:	f7ff fbde 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 800140e:	e005      	b.n	800141c <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8001410:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001414:	f7ff fbd9 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 8001418:	e000      	b.n	800141c <LPTIM_Disable+0x124>
        break;
 800141a:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01a      	beq.n	8001458 <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800143a:	2108      	movs	r1, #8
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2b 	bl	8001298 <LPTIM_WaitForFlag>
 8001442:	4603      	mov	r3, r0
 8001444:	2b03      	cmp	r3, #3
 8001446:	d103      	bne.n	8001450 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2208      	movs	r2, #8
 8001456:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01a      	beq.n	8001494 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001476:	2110      	movs	r1, #16
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff0d 	bl	8001298 <LPTIM_WaitForFlag>
 800147e:	4603      	mov	r3, r0
 8001480:	2b03      	cmp	r3, #3
 8001482:	d103      	bne.n	800148c <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2210      	movs	r2, #16
 8001492:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d01c      	beq.n	80014d4 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0201 	orr.w	r2, r2, #1
 80014a8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff feee 	bl	8001298 <LPTIM_WaitForFlag>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d103      	bne.n	80014ca <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d2:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <LPTIM_Disable+0x24c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d011      	beq.n	8001502 <LPTIM_Disable+0x20a>
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <LPTIM_Disable+0x24c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d814      	bhi.n	800150e <LPTIM_Disable+0x216>
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <LPTIM_Disable+0x250>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d003      	beq.n	80014f2 <LPTIM_Disable+0x1fa>
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <LPTIM_Disable+0x254>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d004      	beq.n	80014fa <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80014f0:	e00d      	b.n	800150e <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80014f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f4:	f7ff fb69 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 80014f8:	e00a      	b.n	8001510 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80014fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014fc:	f7ff fb65 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 8001500:	e006      	b.n	8001510 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8001502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001504:	f7ff fb61 	bl	8000bca <LL_RCC_SetLPTIMClockSource>
        break;
 8001508:	e002      	b.n	8001510 <LPTIM_Disable+0x218>
    }
  }
 800150a:	bf00      	nop
 800150c:	e000      	b.n	8001510 <LPTIM_Disable+0x218>
        break;
 800150e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8001538:	b662      	cpsie	i
}
 800153a:	bf00      	nop

  __enable_irq();
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40009800 	.word	0x40009800
 8001548:	40007c00 	.word	0x40007c00
 800154c:	40009400 	.word	0x40009400

08001550 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_PWR_EnableBkUpAccess+0x18>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	58000400 	.word	0x58000400

0800156c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_PWREx_GetVoltageRange+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	58000400 	.word	0x58000400

08001584 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0307 	bic.w	r3, r3, #7
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015b0:	bf30      	wfi
 80015b2:	e002      	b.n	80015ba <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015b4:	bf40      	sev
    __WFE();
 80015b6:	bf20      	wfe
    __WFE();
 80015b8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	6113      	str	r3, [r2, #16]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	58000400 	.word	0x58000400
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e8:	d101      	bne.n	80015ee <LL_PWR_IsEnabledBkUpAccess+0x16>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <LL_RCC_HSE_EnableTcxo>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800160a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <LL_RCC_HSE_DisableTcxo>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001646:	d101      	bne.n	800164c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <LL_RCC_HSE_Enable>:
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <LL_RCC_HSE_Disable>:
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <LL_RCC_HSE_IsReady>:
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016a0:	d101      	bne.n	80016a6 <LL_RCC_HSE_IsReady+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_RCC_HSE_IsReady+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_HSI_Enable>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_HSI_Disable>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <LL_RCC_HSI_IsReady>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d101      	bne.n	8001700 <LL_RCC_HSI_IsReady+0x18>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_RCC_HSI_IsReady+0x1a>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_HSI_SetCalibTrimming>:
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	061b      	lsls	r3, r3, #24
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <LL_RCC_LSE_IsReady>:
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b02      	cmp	r3, #2
 8001744:	d101      	bne.n	800174a <LL_RCC_LSE_IsReady+0x18>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_RCC_LSE_IsReady+0x1a>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <LL_RCC_LSI_Enable>:
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <LL_RCC_LSI_Disable>:
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_RCC_LSI_IsReady>:
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d101      	bne.n	80017ac <LL_RCC_LSI_IsReady+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_RCC_LSI_IsReady+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_MSI_Enable>:
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_MSI_Disable>:
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <LL_RCC_MSI_IsReady>:
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d101      	bne.n	8001804 <LL_RCC_MSI_IsReady+0x16>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_RCC_MSI_IsReady+0x18>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d101      	bne.n	8001824 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <LL_RCC_MSI_GetRange>:
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <LL_RCC_MSI_SetCalibTrimming>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <LL_RCC_SetSysClkSource>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_GetSysClkSource>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <LL_RCC_SetAHBPrescaler>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <LL_RCC_SetAHB3Prescaler>:
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018f6:	f023 020f 	bic.w	r2, r3, #15
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_RCC_SetAPB1Prescaler>:
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <LL_RCC_SetAPB2Prescaler>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <LL_RCC_GetAHBPrescaler>:
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_RCC_GetAHB3Prescaler>:
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019bc:	6013      	str	r3, [r2, #0]
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d8:	d101      	bne.n	80019de <LL_RCC_PLL_IsReady+0x18>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_RCC_PLL_IsReady+0x1a>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d101      	bne.n	8001a5a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d101      	bne.n	8001a7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a9a:	d101      	bne.n	8001aa0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001abc:	d101      	bne.n	8001ac2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e38b      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	f7ff fee4 	bl	80018aa <LL_RCC_GetSysClkSource>
 8001ae2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	f7ff ffa2 	bl	8001a2c <LL_RCC_PLL_GetMainSource>
 8001ae8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80c9 	beq.w	8001c8a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3e>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d17b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d178      	bne.n	8001bfc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0a:	f7ff fe70 	bl	80017ee <LL_RCC_MSI_IsReady>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x54>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e36a      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x72>
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	e006      	b.n	8001b4c <HAL_RCC_OscConfig+0x80>
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d222      	bcs.n	8001b96 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fd2d 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e348      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe64 	bl	800185c <LL_RCC_MSI_SetCalibTrimming>
 8001b94:	e021      	b.n	8001bda <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe4b 	bl	800185c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fcf2 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e30d      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bda:	f000 fcd7 	bl	800258c <HAL_RCC_GetHCLKFreq>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4aa1      	ldr	r2, [pc, #644]	; (8001e68 <HAL_RCC_OscConfig+0x39c>)
 8001be2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001be4:	4ba1      	ldr	r3, [pc, #644]	; (8001e6c <HAL_RCC_OscConfig+0x3a0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcf1 	bl	80005d0 <HAL_InitTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d047      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	e2fc      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c04:	f7ff fdd7 	bl	80017b6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c08:	f7fe fd2e 	bl	8000668 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c10:	f7fe fd2a 	bl	8000668 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e2e9      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c22:	f7ff fde4 	bl	80017ee <LL_RCC_MSI_IsReady>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f1      	beq.n	8001c10 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe00 	bl	800185c <LL_RCC_MSI_SetCalibTrimming>
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c5e:	f7ff fdb8 	bl	80017d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fd01 	bl	8000668 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6a:	f7fe fcfd 	bl	8000668 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2bc      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c7c:	f7ff fdb7 	bl	80017ee <LL_RCC_MSI_IsReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f1      	bne.n	8001c6a <HAL_RCC_OscConfig+0x19e>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d05f      	beq.n	8001d56 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1dc>
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d10a      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	f7ff fcf1 	bl	800168e <LL_RCC_HSE_IsReady>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d050      	beq.n	8001d54 <HAL_RCC_OscConfig+0x288>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d14c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e29b      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x218>
 8001cde:	f7ff fcba 	bl	8001656 <LL_RCC_HSE_Enable>
 8001ce2:	e00d      	b.n	8001d00 <HAL_RCC_OscConfig+0x234>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001cec:	d104      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x22c>
 8001cee:	f7ff fc85 	bl	80015fc <LL_RCC_HSE_EnableTcxo>
 8001cf2:	f7ff fcb0 	bl	8001656 <LL_RCC_HSE_Enable>
 8001cf6:	e003      	b.n	8001d00 <HAL_RCC_OscConfig+0x234>
 8001cf8:	f7ff fcbb 	bl	8001672 <LL_RCC_HSE_Disable>
 8001cfc:	f7ff fc8c 	bl	8001618 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7fe fcae 	bl	8000668 <HAL_GetTick>
 8001d0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fcaa 	bl	8000668 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e269      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d22:	f7ff fcb4 	bl	800168e <LL_RCC_HSE_IsReady>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f1      	beq.n	8001d10 <HAL_RCC_OscConfig+0x244>
 8001d2c:	e013      	b.n	8001d56 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fc9b 	bl	8000668 <HAL_GetTick>
 8001d32:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d36:	f7fe fc97 	bl	8000668 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e256      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d48:	f7ff fca1 	bl	800168e <LL_RCC_HSE_IsReady>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f1      	bne.n	8001d36 <HAL_RCC_OscConfig+0x26a>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04b      	beq.n	8001dfa <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2a8>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d113      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d110      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	f7ff fcb8 	bl	80016e8 <LL_RCC_HSI_IsReady>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2be>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e235      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fcbb 	bl	800170a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	e031      	b.n	8001dfa <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d019      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9e:	f7ff fc87 	bl	80016b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe fc61 	bl	8000668 <HAL_GetTick>
 8001da6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7fe fc5d 	bl	8000668 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e21c      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dbc:	f7ff fc94 	bl	80016e8 <LL_RCC_HSI_IsReady>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f1      	beq.n	8001daa <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fc9d 	bl	800170a <LL_RCC_HSI_SetCalibTrimming>
 8001dd0:	e013      	b.n	8001dfa <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	f7ff fc7b 	bl	80016cc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fc47 	bl	8000668 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dde:	f7fe fc43 	bl	8000668 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e202      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001df0:	f7ff fc7a 	bl	80016e8 <LL_RCC_HSI_IsReady>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f1      	bne.n	8001dde <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06f      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d057      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d036      	beq.n	8001e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1db      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d018      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e48:	f7ff fc94 	bl	8001774 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e4c:	f7fe fc0c 	bl	8000668 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e52:	e00d      	b.n	8001e70 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7fe fc08 	bl	8000668 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b11      	cmp	r3, #17
 8001e60:	d906      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1c7      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e70:	f7ff fc90 	bl	8001794 <LL_RCC_LSI_IsReady>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ec      	bne.n	8001e54 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	f023 0210 	bic.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e94:	f7ff fc5e 	bl	8001754 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7fe fbe6 	bl	8000668 <HAL_GetTick>
 8001e9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fbe2 	bl	8000668 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b11      	cmp	r3, #17
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1a1      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001eb2:	f7ff fc6f 	bl	8001794 <LL_RCC_LSI_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f1      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3d4>
 8001ebc:	e013      	b.n	8001ee6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	f7ff fc59 	bl	8001774 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7fe fbd1 	bl	8000668 <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7fe fbcd 	bl	8000668 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e18c      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001edc:	f7ff fc5a 	bl	8001794 <LL_RCC_LSI_IsReady>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f1      	bne.n	8001eca <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80d8 	beq.w	80020a4 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ef4:	f7ff fb70 	bl	80015d8 <LL_PWR_IsEnabledBkUpAccess>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d113      	bne.n	8001f26 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001efe:	f7ff fb27 	bl	8001550 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fbb1 	bl	8000668 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe fbad 	bl	8000668 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e16c      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f1c:	f7ff fb5c 	bl	80015d8 <LL_PWR_IsEnabledBkUpAccess>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f1      	beq.n	8001f0a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d07b      	beq.n	8002026 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b85      	cmp	r3, #133	; 0x85
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7fe fb89 	bl	8000668 <HAL_GetTick>
 8001f56:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fb7b 	bl	8000668 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e138      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f84:	f7ff fbd5 	bl	8001732 <LL_RCC_LSE_IsReady>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0ef      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b81      	cmp	r3, #129	; 0x81
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b85      	cmp	r3, #133	; 0x85
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fb63 	bl	8000668 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fb55 	bl	8000668 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e112      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ec      	beq.n	8001fba <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001fe0:	e060      	b.n	80020a4 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fb41 	bl	8000668 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fb33 	bl	8000668 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0f0      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ec      	bne.n	8001ffe <HAL_RCC_OscConfig+0x532>
 8002024:	e03e      	b.n	80020a4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe fb1f 	bl	8000668 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fb11 	bl	8000668 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0ce      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ec      	bne.n	8002042 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe fafe 	bl	8000668 <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe faf0 	bl	8000668 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0ad      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800209a:	f7ff fb4a 	bl	8001732 <LL_RCC_LSE_IsReady>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ef      	bne.n	8002084 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a3 	beq.w	80021f4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d076      	beq.n	80021a2 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d14b      	bne.n	8002154 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	f7ff fc75 	bl	80019aa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fad2 	bl	8000668 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe face 	bl	8000668 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b0a      	cmp	r3, #10
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e08d      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020da:	f7ff fc74 	bl	80019c6 <LL_RCC_PLL_IsReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f1      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <HAL_RCC_OscConfig+0x734>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020fc:	0212      	lsls	r2, r2, #8
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002110:	430a      	orrs	r2, r1
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002116:	4313      	orrs	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211a:	f7ff fc38 	bl	800198e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fa9b 	bl	8000668 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fa97 	bl	8000668 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b0a      	cmp	r3, #10
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e056      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002148:	f7ff fc3d 	bl	80019c6 <LL_RCC_PLL_IsReady>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f1      	beq.n	8002136 <HAL_RCC_OscConfig+0x66a>
 8002152:	e04f      	b.n	80021f4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	f7ff fc29 	bl	80019aa <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002172:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe fa74 	bl	8000668 <HAL_GetTick>
 8002180:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe fa70 	bl	8000668 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e02f      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002196:	f7ff fc16 	bl	80019c6 <LL_RCC_PLL_IsReady>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f1      	bne.n	8002184 <HAL_RCC_OscConfig+0x6b8>
 80021a0:	e028      	b.n	80021f4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e023      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d10e      	bne.n	80021f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	429a      	cmp	r2, r3
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	11c1808c 	.word	0x11c1808c

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e10f      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d91b      	bls.n	800225e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b86      	ldr	r3, [pc, #536]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4984      	ldr	r1, [pc, #528]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002236:	f7fe fa17 	bl	8000668 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	e008      	b.n	8002250 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800223e:	f7fe fa13 	bl	8000668 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0f3      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d1ef      	bne.n	800223e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d016      	beq.n	8002298 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fb26 	bl	80018c0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002274:	f7fe f9f8 	bl	8000668 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800227c:	f7fe f9f4 	bl	8000668 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0d4      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800228e:	f7ff fbd8 	bl	8001a42 <LL_RCC_IsActiveFlag_HPRE>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f1      	beq.n	800227c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d016      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb1c 	bl	80018e6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ae:	f7fe f9db 	bl	8000668 <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022b6:	f7fe f9d7 	bl	8000668 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0b7      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022c8:	f7ff fbcc 	bl	8001a64 <LL_RCC_IsActiveFlag_SHDHPRE>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f1      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb15 	bl	8001912 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022e8:	f7fe f9be 	bl	8000668 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022f0:	f7fe f9ba 	bl	8000668 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e09a      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002302:	f7ff fbc1 	bl	8001a88 <LL_RCC_IsActiveFlag_PPRE1>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f1      	beq.n	80022f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb0a 	bl	8001938 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002324:	f7fe f9a0 	bl	8000668 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800232c:	f7fe f99c 	bl	8000668 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e07c      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800233e:	f7ff fbb4 	bl	8001aaa <LL_RCC_IsActiveFlag_PPRE2>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d043      	beq.n	80023dc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d106      	bne.n	800236a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800235c:	f7ff f997 	bl	800168e <LL_RCC_HSE_IsReady>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11e      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e066      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d106      	bne.n	8002380 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002372:	f7ff fb28 	bl	80019c6 <LL_RCC_PLL_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d113      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e05b      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002388:	f7ff fa31 	bl	80017ee <LL_RCC_MSI_IsReady>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e050      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002396:	f7ff f9a7 	bl	80016e8 <LL_RCC_HSI_IsReady>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e049      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fa6b 	bl	8001884 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ae:	f7fe f95b 	bl	8000668 <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe f957 	bl	8000668 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e035      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023cc:	f7ff fa6d 	bl	80018aa <LL_RCC_GetSysClkSource>
 80023d0:	4602      	mov	r2, r0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1ec      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d21b      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4913      	ldr	r1, [pc, #76]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7fe f935 	bl	8000668 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	e008      	b.n	8002414 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002402:	f7fe f931 	bl	8000668 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e011      	b.n	8002438 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x23c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d1ef      	bne.n	8002402 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002422:	f000 f8b3 	bl	800258c <HAL_RCC_GetHCLKFreq>
 8002426:	4603      	mov	r3, r0
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_RCC_ClockConfig+0x240>)
 800242a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_ClockConfig+0x244>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f8cd 	bl	80005d0 <HAL_InitTick>
 8002436:	4603      	mov	r3, r0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58004000 	.word	0x58004000
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245a:	f7ff fa26 	bl	80018aa <LL_RCC_GetSysClkSource>
 800245e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	f7ff fae4 	bl	8001a2c <LL_RCC_PLL_GetMainSource>
 8002464:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x2c>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d139      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d136      	bne.n	80024e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002478:	f7ff f9c9 	bl	800180e <LL_RCC_MSI_IsEnabledRangeSelect>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x62>
 8002482:	f7ff f9c4 	bl	800180e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002486:	4603      	mov	r3, r0
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_RCC_GetSysClockFreq+0x4e>
 800248c:	f7ff f9cf 	bl	800182e <LL_RCC_MSI_GetRange>
 8002490:	4603      	mov	r3, r0
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	e005      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800249a:	f7ff f9d3 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 800249e:	4603      	mov	r3, r0
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	4a36      	ldr	r2, [pc, #216]	; (8002580 <HAL_RCC_GetSysClockFreq+0x134>)
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80024ae:	f7ff f9ae 	bl	800180e <LL_RCC_MSI_IsEnabledRangeSelect>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80024b8:	f7ff f9b9 	bl	800182e <LL_RCC_MSI_GetRange>
 80024bc:	4603      	mov	r3, r0
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	e005      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x86>
 80024c6:	f7ff f9bd 	bl	8001844 <LL_RCC_MSI_GetRangeAfterStandby>
 80024ca:	4603      	mov	r3, r0
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_RCC_GetSysClockFreq+0x134>)
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d115      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024e4:	e012      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCC_GetSysClockFreq+0x138>)
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e00c      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d109      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024f8:	f7ff f89c 	bl	8001634 <LL_RCC_HSE_IsEnabledDiv2>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCC_GetSysClockFreq+0x138>)
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e001      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_RCC_GetSysClockFreq+0x13c>)
 800250a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	f7ff f9cd 	bl	80018aa <LL_RCC_GetSysClkSource>
 8002510:	4603      	mov	r3, r0
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d12f      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002516:	f7ff fa89 	bl	8001a2c <LL_RCC_PLL_GetMainSource>
 800251a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0xde>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d003      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xe4>
 8002528:	e00d      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_RCC_GetSysClockFreq+0x138>)
 800252c:	60fb      	str	r3, [r7, #12]
        break;
 800252e:	e00d      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002530:	f7ff f880 	bl	8001634 <LL_RCC_HSE_IsEnabledDiv2>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCC_GetSysClockFreq+0x138>)
 800253c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800253e:	e005      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002542:	60fb      	str	r3, [r7, #12]
        break;
 8002544:	e002      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	60fb      	str	r3, [r7, #12]
        break;
 800254a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800254c:	f7ff fa4c 	bl	80019e8 <LL_RCC_PLL_GetN>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	fb03 f402 	mul.w	r4, r3, r2
 8002558:	f7ff fa5d 	bl	8001a16 <LL_RCC_PLL_GetDivider>
 800255c:	4603      	mov	r3, r0
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	3301      	adds	r3, #1
 8002562:	fbb4 f4f3 	udiv	r4, r4, r3
 8002566:	f7ff fa4b 	bl	8001a00 <LL_RCC_PLL_GetR>
 800256a:	4603      	mov	r3, r0
 800256c:	0f5b      	lsrs	r3, r3, #29
 800256e:	3301      	adds	r3, #1
 8002570:	fbb4 f3f3 	udiv	r3, r4, r3
 8002574:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	08004358 	.word	0x08004358
 8002584:	00f42400 	.word	0x00f42400
 8002588:	01e84800 	.word	0x01e84800

0800258c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b598      	push	{r3, r4, r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002590:	f7ff ff5c 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8002594:	4604      	mov	r4, r0
 8002596:	f7ff f9e2 	bl	800195e <LL_RCC_GetAHBPrescaler>
 800259a:	4603      	mov	r3, r0
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd98      	pop	{r3, r4, r7, pc}
 80025b0:	08004318 	.word	0x08004318

080025b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	4a10      	ldr	r2, [pc, #64]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025cc:	f7ff f9d2 	bl	8001974 <LL_RCC_GetAHB3Prescaler>
 80025d0:	4603      	mov	r3, r0
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a09      	ldr	r2, [pc, #36]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9c      	lsrs	r4, r3, #18
 80025f0:	f7fe ffbc 	bl	800156c <HAL_PWREx_GetVoltageRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4619      	mov	r1, r3
 80025f8:	4620      	mov	r0, r4
 80025fa:	f000 f80b 	bl	8002614 <RCC_SetFlashLatency>
 80025fe:	4603      	mov	r3, r0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	08004358 	.word	0x08004358
 800260c:	08004318 	.word	0x08004318
 8002610:	431bde83 	.word	0x431bde83

08002614 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800261e:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <RCC_SetFlashLatency+0xf4>)
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002628:	6018      	str	r0, [r3, #0]
 800262a:	3304      	adds	r3, #4
 800262c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800262e:	4a37      	ldr	r2, [pc, #220]	; (800270c <RCC_SetFlashLatency+0xf8>)
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002638:	6018      	str	r0, [r3, #0]
 800263a:	3304      	adds	r3, #4
 800263c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <RCC_SetFlashLatency+0xfc>)
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	ca07      	ldmia	r2, {r0, r1, r2}
 8002646:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800264a:	2300      	movs	r3, #0
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d11b      	bne.n	800268e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002656:	2300      	movs	r3, #0
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
 800265a:	e014      	b.n	8002686 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	3338      	adds	r3, #56	; 0x38
 8002662:	443b      	add	r3, r7
 8002664:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	443b      	add	r3, r7
 8002678:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800267e:	e021      	b.n	80026c4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	3301      	adds	r3, #1
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	2b02      	cmp	r3, #2
 800268a:	d9e7      	bls.n	800265c <RCC_SetFlashLatency+0x48>
 800268c:	e01a      	b.n	80026c4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e014      	b.n	80026be <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	3338      	adds	r3, #56	; 0x38
 800269a:	443b      	add	r3, r7
 800269c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d807      	bhi.n	80026b8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	3338      	adds	r3, #56	; 0x38
 80026ae:	443b      	add	r3, r7
 80026b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026b6:	e005      	b.n	80026c4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	3301      	adds	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d9e7      	bls.n	8002694 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <RCC_SetFlashLatency+0x100>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4911      	ldr	r1, [pc, #68]	; (8002714 <RCC_SetFlashLatency+0x100>)
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026d4:	f7fd ffc8 	bl	8000668 <HAL_GetTick>
 80026d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026da:	e008      	b.n	80026ee <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026dc:	f7fd ffc4 	bl	8000668 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e007      	b.n	80026fe <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_SetFlashLatency+0x100>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1ef      	bne.n	80026dc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3738      	adds	r7, #56	; 0x38
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	080042f4 	.word	0x080042f4
 800270c:	080042fc 	.word	0x080042fc
 8002710:	08004304 	.word	0x08004304
 8002714:	58004000 	.word	0x58004000

08002718 <LL_RCC_LSE_IsReady>:
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d101      	bne.n	8002730 <LL_RCC_LSE_IsReady+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_RCC_LSE_IsReady+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <LL_RCC_SetUSARTClockSource>:
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <LL_RCC_SetI2SClockSource>:
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800277e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_RCC_SetLPUARTClockSource>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <LL_RCC_SetI2CClockSource>:
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027d6:	43db      	mvns	r3, r3
 80027d8:	401a      	ands	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_SetLPTIMClockSource>:
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_RCC_SetRNGClockSource>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800283c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_SetADCClockSource>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_RCC_SetRTCClockSource>:
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <LL_RCC_GetRTCClockSource>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_ForceBackupDomainReset>:
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RCC_ReleaseBackupDomainReset>:
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status*/
  #define RCC_PERIPHCLK_RTC              0x00010000U  /*!< RTC Peripheral Clock Selection         */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	volatile uint32_t tmpregister = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;
  volatile HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  volatile HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002910:	2300      	movs	r3, #0
 8002912:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d05c      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xda>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002920:	f7fe fe16 	bl	8001550 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002924:	f7fd fea0 	bl	8000668 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800292a:	e009      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fd fe9c 	bl	8000668 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	73fb      	strb	r3, [r7, #15]
        break;
 800293e:	e006      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d1ee      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13e      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002956:	f7ff ffa6 	bl	80028a6 <LL_RCC_GetRTCClockSource>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	429a      	cmp	r2, r3
 8002962:	d00f      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	613b      	str	r3, [r7, #16]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002972:	f7ff ffa4 	bl	80028be <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	f7ff ffb2 	bl	80028de <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d114      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fd fe6b 	bl	8000668 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002994:	e00b      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fd fe67 	bl	8000668 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d902      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xae>
          {
            ret = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	73fb      	strb	r3, [r7, #15]
            break;
 80029ac:	e004      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        while (LL_RCC_LSE_IsReady() != 1U)
 80029ae:	f7ff feb3 	bl	8002718 <LL_RCC_LSE_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d1ee      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x96>
          }
        }
      }

      if (ret == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff59 	bl	800287c <LL_RCC_SetRTCClockSource>
 80029ca:	e006      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	73bb      	strb	r3, [r7, #14]
 80029d2:	e002      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0xda>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	73bb      	strb	r3, [r7, #14]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fea5 	bl	800273a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fe9a 	bl	800273a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff febc 	bl	8002794 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fee2 	bl	80027f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fed7 	bl	80027f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fecc 	bl	80027f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fea5 	bl	80027be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe9a 	bl	80027be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe8f 	bl	80027be <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d011      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe5a 	bl	800276a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fea1 	bl	8002828 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d011      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fe9f 	bl	8002852 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x22e>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58000400 	.word	0x58000400

08002b40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	2b84      	cmp	r3, #132	; 0x84
 8002b54:	d005      	beq.n	8002b62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3303      	adds	r3, #3
 8002b60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b72:	f000 fad9 	bl	8003128 <vTaskStartScheduler>
  
  return osOK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d020      	beq.n	8002bd0 <osThreadCreate+0x54>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01c      	beq.n	8002bd0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685c      	ldr	r4, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681d      	ldr	r5, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691e      	ldr	r6, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ffc9 	bl	8002b40 <makeFreeRtosPriority>
 8002bae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb8:	9202      	str	r2, [sp, #8]
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	9100      	str	r1, [sp, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4632      	mov	r2, r6
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f000 f8e8 	bl	8002d9a <xTaskCreateStatic>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e01c      	b.n	8002c0a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685c      	ldr	r4, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bdc:	b29e      	uxth	r6, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffab 	bl	8002b40 <makeFreeRtosPriority>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f92a 	bl	8002e54 <xTaskCreate>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <osDelay+0x16>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	e000      	b.n	8002c2c <osDelay+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fa47 	bl	80030c0 <vTaskDelay>
  
  return osOK;
 8002c32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f103 0208 	add.w	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295
 8002c54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f103 0208 	add.w	r2, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0208 	add.w	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d103      	bne.n	8002cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e00c      	b.n	8002d12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e002      	b.n	8002d06 <vListInsert+0x2e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d2f6      	bcs.n	8002d00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	601a      	str	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6892      	ldr	r2, [r2, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6852      	ldr	r2, [r2, #4]
 8002d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d103      	bne.n	8002d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08e      	sub	sp, #56	; 0x38
 8002d9e:	af04      	add	r7, sp, #16
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <xTaskCreateStatic+0x46>
	__asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fb      	str	r3, [r7, #28]
}
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002de0:	2354      	movs	r3, #84	; 0x54
 8002de2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b54      	cmp	r3, #84	; 0x54
 8002de8:	d00a      	beq.n	8002e00 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61bb      	str	r3, [r7, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01e      	beq.n	8002e46 <xTaskCreateStatic+0xac>
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01b      	beq.n	8002e46 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e20:	2300      	movs	r3, #0
 8002e22:	9303      	str	r3, [sp, #12]
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f850 	bl	8002ede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e40:	f000 f8d4 	bl	8002fec <prvAddNewTaskToReadyList>
 8002e44:	e001      	b.n	8002e4a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e4a:	697b      	ldr	r3, [r7, #20]
	}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af04      	add	r7, sp, #16
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f81f 	bl	8003eac <pvPortMalloc>
 8002e6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00e      	beq.n	8002e94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e76:	2054      	movs	r0, #84	; 0x54
 8002e78:	f001 f818 	bl	8003eac <pvPortMalloc>
 8002e7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8a:	e005      	b.n	8002e98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f001 f8d1 	bl	8004034 <vPortFree>
 8002e92:	e001      	b.n	8002e98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d017      	beq.n	8002ece <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9302      	str	r3, [sp, #8]
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f80e 	bl	8002ede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ec2:	69f8      	ldr	r0, [r7, #28]
 8002ec4:	f000 f892 	bl	8002fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	e002      	b.n	8002ed4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b088      	sub	sp, #32
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f023 0307 	bic.w	r3, r3, #7
 8002f04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	617b      	str	r3, [r7, #20]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01f      	beq.n	8002f6c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e012      	b.n	8002f58 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	7819      	ldrb	r1, [r3, #0]
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3334      	adds	r3, #52	; 0x34
 8002f42:	460a      	mov	r2, r1
 8002f44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	d9e9      	bls.n	8002f32 <prvInitialiseNewTask+0x54>
 8002f5e:	e000      	b.n	8002f62 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f6a:	e003      	b.n	8002f74 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d901      	bls.n	8002f7e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f7a:	2306      	movs	r3, #6
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	3304      	adds	r3, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fe70 	bl	8002c7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe6b 	bl	8002c7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f1c3 0207 	rsb	r2, r3, #7
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	69b8      	ldr	r0, [r7, #24]
 8002fce:	f000 fcd7 	bl	8003980 <pxPortInitialiseStack>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ff4:	f000 fdb2 	bl	8003b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <prvAddNewTaskToReadyList+0xb8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <prvAddNewTaskToReadyList+0xb8>)
 8003000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <prvAddNewTaskToReadyList+0xbc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800300a:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <prvAddNewTaskToReadyList+0xbc>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003010:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <prvAddNewTaskToReadyList+0xb8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d110      	bne.n	800303a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003018:	f000 fb70 	bl	80036fc <prvInitialiseTaskLists>
 800301c:	e00d      	b.n	800303a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <prvAddNewTaskToReadyList+0xc0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <prvAddNewTaskToReadyList+0xbc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d802      	bhi.n	800303a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <prvAddNewTaskToReadyList+0xbc>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <prvAddNewTaskToReadyList+0xc4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <prvAddNewTaskToReadyList+0xc4>)
 8003042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <prvAddNewTaskToReadyList+0xc8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <prvAddNewTaskToReadyList+0xc8>)
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <prvAddNewTaskToReadyList+0xcc>)
 8003064:	441a      	add	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7ff fe10 	bl	8002c92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003072:	f000 fda3 	bl	8003bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <prvAddNewTaskToReadyList+0xc0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <prvAddNewTaskToReadyList+0xbc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <prvAddNewTaskToReadyList+0xd0>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200003c4 	.word	0x200003c4
 80030a8:	200002c4 	.word	0x200002c4
 80030ac:	200003d0 	.word	0x200003d0
 80030b0:	200003e0 	.word	0x200003e0
 80030b4:	200003cc 	.word	0x200003cc
 80030b8:	200002c8 	.word	0x200002c8
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <vTaskDelay+0x60>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <vTaskDelay+0x30>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	60bb      	str	r3, [r7, #8]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030f0:	f000 f87a 	bl	80031e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030f4:	2100      	movs	r1, #0
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fbdc 	bl	80038b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030fc:	f000 f8bc 	bl	8003278 <xTaskResumeAll>
 8003100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <vTaskDelay+0x64>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	200003ec 	.word	0x200003ec
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003136:	463a      	mov	r2, r7
 8003138:	1d39      	adds	r1, r7, #4
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f84e 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	460a      	mov	r2, r1
 8003156:	491e      	ldr	r1, [pc, #120]	; (80031d0 <vTaskStartScheduler+0xa8>)
 8003158:	481e      	ldr	r0, [pc, #120]	; (80031d4 <vTaskStartScheduler+0xac>)
 800315a:	f7ff fe1e 	bl	8002d9a <xTaskCreateStatic>
 800315e:	4603      	mov	r3, r0
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <vTaskStartScheduler+0xb0>)
 8003162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <vTaskStartScheduler+0xb0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e001      	b.n	8003176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d116      	bne.n	80031aa <vTaskStartScheduler+0x82>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	613b      	str	r3, [r7, #16]
}
 800318e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <vTaskStartScheduler+0xb4>)
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <vTaskStartScheduler+0xb8>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <vTaskStartScheduler+0xbc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031a4:	f000 fc68 	bl	8003a78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031a8:	e00e      	b.n	80031c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d10a      	bne.n	80031c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <vTaskStartScheduler+0x9e>
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	08004310 	.word	0x08004310
 80031d4:	08003621 	.word	0x08003621
 80031d8:	200003e8 	.word	0x200003e8
 80031dc:	200003e4 	.word	0x200003e4
 80031e0:	200003d0 	.word	0x200003d0
 80031e4:	200003c8 	.word	0x200003c8

080031e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <vTaskSuspendAll+0x18>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a03      	ldr	r2, [pc, #12]	; (8003200 <vTaskSuspendAll+0x18>)
 80031f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200003ec 	.word	0x200003ec

08003204 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800320e:	2301      	movs	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <prvGetExpectedIdleTime+0x60>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d201      	bcs.n	8003220 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <prvGetExpectedIdleTime+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e012      	b.n	8003256 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <prvGetExpectedIdleTime+0x68>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d902      	bls.n	800323e <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e00b      	b.n	8003256 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e005      	b.n	8003256 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <prvGetExpectedIdleTime+0x6c>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <prvGetExpectedIdleTime+0x70>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8003256:	68fb      	ldr	r3, [r7, #12]
	}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	200003cc 	.word	0x200003cc
 8003268:	200002c4 	.word	0x200002c4
 800326c:	200002c8 	.word	0x200002c8
 8003270:	200003e4 	.word	0x200003e4
 8003274:	200003c8 	.word	0x200003c8

08003278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <xTaskResumeAll+0x114>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	603b      	str	r3, [r7, #0]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032a4:	f000 fc5a 	bl	8003b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <xTaskResumeAll+0x114>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4a37      	ldr	r2, [pc, #220]	; (800338c <xTaskResumeAll+0x114>)
 80032b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <xTaskResumeAll+0x114>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d161      	bne.n	800337e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ba:	4b35      	ldr	r3, [pc, #212]	; (8003390 <xTaskResumeAll+0x118>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d05d      	beq.n	800337e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c2:	e02e      	b.n	8003322 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <xTaskResumeAll+0x11c>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3318      	adds	r3, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fd39 	bl	8002d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3304      	adds	r3, #4
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fd34 	bl	8002d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <xTaskResumeAll+0x120>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <xTaskResumeAll+0x120>)
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4a27      	ldr	r2, [pc, #156]	; (800339c <xTaskResumeAll+0x124>)
 8003300:	441a      	add	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7ff fcc2 	bl	8002c92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <xTaskResumeAll+0x128>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <xTaskResumeAll+0x12c>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <xTaskResumeAll+0x11c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1cc      	bne.n	80032c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003330:	f000 fa82 	bl	8003838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <xTaskResumeAll+0x130>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003340:	f000 f85c 	bl	80033fc <xTaskIncrementTick>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <xTaskResumeAll+0x12c>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f1      	bne.n	8003340 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <xTaskResumeAll+0x130>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xTaskResumeAll+0x12c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <xTaskResumeAll+0x134>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800337e:	f000 fc1d 	bl	8003bbc <vPortExitCritical>

	return xAlreadyYielded;
 8003382:	68bb      	ldr	r3, [r7, #8]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200003ec 	.word	0x200003ec
 8003390:	200003c4 	.word	0x200003c4
 8003394:	20000384 	.word	0x20000384
 8003398:	200003cc 	.word	0x200003cc
 800339c:	200002c8 	.word	0x200002c8
 80033a0:	200002c4 	.word	0x200002c4
 80033a4:	200003d8 	.word	0x200003d8
 80033a8:	200003d4 	.word	0x200003d4
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <vTaskStepTick+0x44>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	441a      	add	r2, r3
 80033c0:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <vTaskStepTick+0x48>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d90a      	bls.n	80033de <vTaskStepTick+0x2e>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60fb      	str	r3, [r7, #12]
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <vTaskStepTick+0x44>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <vTaskStepTick+0x44>)
 80033e8:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	200003c8 	.word	0x200003c8
 80033f8:	200003e4 	.word	0x200003e4

080033fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <xTaskIncrementTick+0x144>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 8088 	bne.w	8003520 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003410:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <xTaskIncrementTick+0x148>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003418:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <xTaskIncrementTick+0x148>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d120      	bne.n	8003466 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003424:	4b48      	ldr	r3, [pc, #288]	; (8003548 <xTaskIncrementTick+0x14c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <xTaskIncrementTick+0x48>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	603b      	str	r3, [r7, #0]
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <xTaskIncrementTick+0x46>
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <xTaskIncrementTick+0x14c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <xTaskIncrementTick+0x150>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a3e      	ldr	r2, [pc, #248]	; (8003548 <xTaskIncrementTick+0x14c>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4a3e      	ldr	r2, [pc, #248]	; (800354c <xTaskIncrementTick+0x150>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <xTaskIncrementTick+0x154>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a3c      	ldr	r2, [pc, #240]	; (8003550 <xTaskIncrementTick+0x154>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	f000 f9e9 	bl	8003838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <xTaskIncrementTick+0x158>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d348      	bcc.n	8003502 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <xTaskIncrementTick+0x14c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <xTaskIncrementTick+0x158>)
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	601a      	str	r2, [r3, #0]
					break;
 8003482:	e03e      	b.n	8003502 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003484:	4b30      	ldr	r3, [pc, #192]	; (8003548 <xTaskIncrementTick+0x14c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d203      	bcs.n	80034a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800349c:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <xTaskIncrementTick+0x158>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034a2:	e02e      	b.n	8003502 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fc4d 	bl	8002d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3318      	adds	r3, #24
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fc44 	bl	8002d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2201      	movs	r2, #1
 80034c6:	409a      	lsls	r2, r3
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <xTaskIncrementTick+0x15c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <xTaskIncrementTick+0x15c>)
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4a1f      	ldr	r2, [pc, #124]	; (800355c <xTaskIncrementTick+0x160>)
 80034e0:	441a      	add	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f7ff fbd2 	bl	8002c92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <xTaskIncrementTick+0x164>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d3b9      	bcc.n	8003470 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003500:	e7b6      	b.n	8003470 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <xTaskIncrementTick+0x164>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	4914      	ldr	r1, [pc, #80]	; (800355c <xTaskIncrementTick+0x160>)
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d907      	bls.n	800352a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e004      	b.n	800352a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <xTaskIncrementTick+0x168>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <xTaskIncrementTick+0x168>)
 8003528:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <xTaskIncrementTick+0x16c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003536:	697b      	ldr	r3, [r7, #20]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200003ec 	.word	0x200003ec
 8003544:	200003c8 	.word	0x200003c8
 8003548:	2000037c 	.word	0x2000037c
 800354c:	20000380 	.word	0x20000380
 8003550:	200003dc 	.word	0x200003dc
 8003554:	200003e4 	.word	0x200003e4
 8003558:	200003cc 	.word	0x200003cc
 800355c:	200002c8 	.word	0x200002c8
 8003560:	200002c4 	.word	0x200002c4
 8003564:	200003d4 	.word	0x200003d4
 8003568:	200003d8 	.word	0x200003d8

0800356c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <vTaskSwitchContext+0xa0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <vTaskSwitchContext+0xa4>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003580:	e03f      	b.n	8003602 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <vTaskSwitchContext+0xa4>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <vTaskSwitchContext+0xa8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	f1c3 031f 	rsb	r3, r3, #31
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	491e      	ldr	r1, [pc, #120]	; (8003618 <vTaskSwitchContext+0xac>)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vTaskSwitchContext+0x5a>
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <vTaskSwitchContext+0xac>)
 80035d4:	4413      	add	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3308      	adds	r3, #8
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d104      	bne.n	80035f8 <vTaskSwitchContext+0x8c>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <vTaskSwitchContext+0xb0>)
 8003600:	6013      	str	r3, [r2, #0]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	200003ec 	.word	0x200003ec
 8003610:	200003d8 	.word	0x200003d8
 8003614:	200003cc 	.word	0x200003cc
 8003618:	200002c8 	.word	0x200002c8
 800361c:	200002c4 	.word	0x200002c4

08003620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003628:	f000 f8a8 	bl	800377c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <prvIdleTask+0x70>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d907      	bls.n	8003644 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <prvIdleTask+0x74>)
 8003636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8003644:	f7ff fdde 	bl	8003204 <prvGetExpectedIdleTime>
 8003648:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d9eb      	bls.n	8003628 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8003650:	f7ff fdca 	bl	80031e8 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <prvIdleTask+0x78>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b10      	ldr	r3, [pc, #64]	; (800369c <prvIdleTask+0x7c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d20a      	bcs.n	8003676 <prvIdleTask+0x56>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	60bb      	str	r3, [r7, #8]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8003676:	f7ff fdc5 	bl	8003204 <prvGetExpectedIdleTime>
 800367a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d902      	bls.n	8003688 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fb0a 	bl	8003c9c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8003688:	f7ff fdf6 	bl	8003278 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800368c:	e7cc      	b.n	8003628 <prvIdleTask+0x8>
 800368e:	bf00      	nop
 8003690:	200002c8 	.word	0x200002c8
 8003694:	e000ed04 	.word	0xe000ed04
 8003698:	200003e4 	.word	0x200003e4
 800369c:	200003c8 	.word	0x200003c8

080036a0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80036aa:	2301      	movs	r3, #1
 80036ac:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <eTaskConfirmSleepModeStatus+0x4c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]
 80036ba:	e010      	b.n	80036de <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <eTaskConfirmSleepModeStatus+0x50>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80036c4:	2300      	movs	r3, #0
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	e009      	b.n	80036de <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <eTaskConfirmSleepModeStatus+0x54>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <eTaskConfirmSleepModeStatus+0x58>)
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	1acb      	subs	r3, r1, r3
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d101      	bne.n	80036de <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80036da:	2302      	movs	r3, #2
 80036dc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80036de:	79fb      	ldrb	r3, [r7, #7]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000384 	.word	0x20000384
 80036f0:	200003d8 	.word	0x200003d8
 80036f4:	200003b0 	.word	0x200003b0
 80036f8:	200003c4 	.word	0x200003c4

080036fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	e00c      	b.n	8003722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4a12      	ldr	r2, [pc, #72]	; (800375c <prvInitialiseTaskLists+0x60>)
 8003714:	4413      	add	r3, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa90 	bl	8002c3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3301      	adds	r3, #1
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d9ef      	bls.n	8003708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <prvInitialiseTaskLists+0x64>)
 800372a:	f7ff fa87 	bl	8002c3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800372e:	480d      	ldr	r0, [pc, #52]	; (8003764 <prvInitialiseTaskLists+0x68>)
 8003730:	f7ff fa84 	bl	8002c3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003734:	480c      	ldr	r0, [pc, #48]	; (8003768 <prvInitialiseTaskLists+0x6c>)
 8003736:	f7ff fa81 	bl	8002c3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800373a:	480c      	ldr	r0, [pc, #48]	; (800376c <prvInitialiseTaskLists+0x70>)
 800373c:	f7ff fa7e 	bl	8002c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003740:	480b      	ldr	r0, [pc, #44]	; (8003770 <prvInitialiseTaskLists+0x74>)
 8003742:	f7ff fa7b 	bl	8002c3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <prvInitialiseTaskLists+0x78>)
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <prvInitialiseTaskLists+0x64>)
 800374a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvInitialiseTaskLists+0x7c>)
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <prvInitialiseTaskLists+0x68>)
 8003750:	601a      	str	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200002c8 	.word	0x200002c8
 8003760:	20000354 	.word	0x20000354
 8003764:	20000368 	.word	0x20000368
 8003768:	20000384 	.word	0x20000384
 800376c:	20000398 	.word	0x20000398
 8003770:	200003b0 	.word	0x200003b0
 8003774:	2000037c 	.word	0x2000037c
 8003778:	20000380 	.word	0x20000380

0800377c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003782:	e019      	b.n	80037b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003784:	f000 f9ea 	bl	8003b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <prvCheckTasksWaitingTermination+0x50>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fad7 	bl	8002d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <prvCheckTasksWaitingTermination+0x54>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3b01      	subs	r3, #1
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <prvCheckTasksWaitingTermination+0x54>)
 80037a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <prvCheckTasksWaitingTermination+0x58>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <prvCheckTasksWaitingTermination+0x58>)
 80037ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037ae:	f000 fa05 	bl	8003bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f810 	bl	80037d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <prvCheckTasksWaitingTermination+0x58>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e1      	bne.n	8003784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000398 	.word	0x20000398
 80037d0:	200003c4 	.word	0x200003c4
 80037d4:	200003ac 	.word	0x200003ac

080037d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fc20 	bl	8004034 <vPortFree>
				vPortFree( pxTCB );
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fc1d 	bl	8004034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037fa:	e018      	b.n	800382e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003802:	2b01      	cmp	r3, #1
 8003804:	d103      	bne.n	800380e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fc14 	bl	8004034 <vPortFree>
	}
 800380c:	e00f      	b.n	800382e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003814:	2b02      	cmp	r3, #2
 8003816:	d00a      	beq.n	800382e <prvDeleteTCB+0x56>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60fb      	str	r3, [r7, #12]
}
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <prvDeleteTCB+0x54>
	}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <prvResetNextTaskUnblockTime+0x38>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <prvResetNextTaskUnblockTime+0x3c>)
 800384a:	f04f 32ff 	mov.w	r2, #4294967295
 800384e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003850:	e008      	b.n	8003864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <prvResetNextTaskUnblockTime+0x38>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <prvResetNextTaskUnblockTime+0x3c>)
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	2000037c 	.word	0x2000037c
 8003874:	200003e4 	.word	0x200003e4

08003878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <xTaskGetSchedulerState+0x34>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003886:	2301      	movs	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	e008      	b.n	800389e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <xTaskGetSchedulerState+0x38>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003894:	2302      	movs	r3, #2
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e001      	b.n	800389e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800389e:	687b      	ldr	r3, [r7, #4]
	}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200003d0 	.word	0x200003d0
 80038b0:	200003ec 	.word	0x200003ec

080038b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038be:	4b29      	ldr	r3, [pc, #164]	; (8003964 <prvAddCurrentTaskToDelayedList+0xb0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fa3c 	bl	8002d48 <uxListRemove>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4013      	ands	r3, r2
 80038ea:	4a20      	ldr	r2, [pc, #128]	; (800396c <prvAddCurrentTaskToDelayedList+0xb8>)
 80038ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d10a      	bne.n	800390c <prvAddCurrentTaskToDelayedList+0x58>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	481a      	ldr	r0, [pc, #104]	; (8003970 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003906:	f7ff f9c4 	bl	8002c92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800390a:	e026      	b.n	800395a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d209      	bcs.n	8003938 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7ff f9d1 	bl	8002cd8 <vListInsert>
}
 8003936:	e010      	b.n	800395a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <prvAddCurrentTaskToDelayedList+0xc4>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff f9c7 	bl	8002cd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <prvAddCurrentTaskToDelayedList+0xc8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d202      	bcs.n	800395a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200003c8 	.word	0x200003c8
 8003968:	200002c4 	.word	0x200002c4
 800396c:	200003cc 	.word	0x200003cc
 8003970:	200003b0 	.word	0x200003b0
 8003974:	20000380 	.word	0x20000380
 8003978:	2000037c 	.word	0x2000037c
 800397c:	200003e4 	.word	0x200003e4

08003980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b04      	subs	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b04      	subs	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b04      	subs	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <pxPortInitialiseStack+0x54>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b14      	subs	r3, #20
 80039ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3b20      	subs	r3, #32
 80039c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039c8:	68fb      	ldr	r3, [r7, #12]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	080039d9 	.word	0x080039d9

080039d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <prvTaskExitError+0x54>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d00a      	beq.n	8003a02 <prvTaskExitError+0x2a>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	60fb      	str	r3, [r7, #12]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <prvTaskExitError+0x28>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60bb      	str	r3, [r7, #8]
}
 8003a14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a16:	bf00      	nop
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0fc      	beq.n	8003a18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000000c 	.word	0x2000000c

08003a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <pxCurrentTCBConst2>)
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	6808      	ldr	r0, [r1, #0]
 8003a36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a3a:	f380 8809 	msr	PSP, r0
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f380 8811 	msr	BASEPRI, r0
 8003a4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a4e:	4770      	bx	lr

08003a50 <pxCurrentTCBConst2>:
 8003a50:	200002c4 	.word	0x200002c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a58:	4806      	ldr	r0, [pc, #24]	; (8003a74 <prvPortStartFirstTask+0x1c>)
 8003a5a:	6800      	ldr	r0, [r0, #0]
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f380 8808 	msr	MSP, r0
 8003a62:	b662      	cpsie	i
 8003a64:	b661      	cpsie	f
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	df00      	svc	0
 8003a70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a72:	bf00      	nop
 8003a74:	e000ed08 	.word	0xe000ed08

08003a78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a7e:	4b32      	ldr	r3, [pc, #200]	; (8003b48 <xPortStartScheduler+0xd0>)
 8003a80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	22ff      	movs	r2, #255	; 0xff
 8003a8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <xPortStartScheduler+0xd4>)
 8003aa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aac:	e009      	b.n	8003ac2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003ab6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b80      	cmp	r3, #128	; 0x80
 8003acc:	d0ef      	beq.n	8003aae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1c3 0307 	rsb	r3, r3, #7
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d00a      	beq.n	8003af0 <xPortStartScheduler+0x78>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	60bb      	str	r3, [r7, #8]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003af8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <xPortStartScheduler+0xd8>)
 8003b04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <xPortStartScheduler+0xdc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <xPortStartScheduler+0xdc>)
 8003b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <xPortStartScheduler+0xdc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <xPortStartScheduler+0xdc>)
 8003b20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b26:	f000 f985 	bl	8003e34 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <xPortStartScheduler+0xe0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b30:	f7ff ff92 	bl	8003a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b34:	f7ff fd1a 	bl	800356c <vTaskSwitchContext>
	prvTaskExitError();
 8003b38:	f7ff ff4e 	bl	80039d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000e400 	.word	0xe000e400
 8003b4c:	200003fc 	.word	0x200003fc
 8003b50:	20000400 	.word	0x20000400
 8003b54:	e000ed20 	.word	0xe000ed20
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	607b      	str	r3, [r7, #4]
}
 8003b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <vPortEnterCritical+0x58>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <vPortEnterCritical+0x58>)
 8003b7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <vPortEnterCritical+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10f      	bne.n	8003ba8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <vPortEnterCritical+0x5c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	603b      	str	r3, [r7, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vPortEnterCritical+0x4a>
	}
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <vPortExitCritical+0x4c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <vPortExitCritical+0x24>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	607b      	str	r3, [r7, #4]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <vPortExitCritical+0x4c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <vPortExitCritical+0x4c>)
 8003be8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <vPortExitCritical+0x4c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <vPortExitCritical+0x42>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	00000000 	.word	0x00000000

08003c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c10:	f3ef 8009 	mrs	r0, PSP
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <pxCurrentTCBConst>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c20:	6010      	str	r0, [r2, #0]
 8003c22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c2a:	f380 8811 	msr	BASEPRI, r0
 8003c2e:	f7ff fc9d 	bl	800356c <vTaskSwitchContext>
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8811 	msr	BASEPRI, r0
 8003c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	6808      	ldr	r0, [r1, #0]
 8003c42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c46:	f380 8809 	msr	PSP, r0
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	4770      	bx	lr

08003c50 <pxCurrentTCBConst>:
 8003c50:	200002c4 	.word	0x200002c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop

08003c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	607b      	str	r3, [r7, #4]
}
 8003c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c72:	f7ff fbc3 	bl	80033fc <xTaskIncrementTick>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <xPortSysTickHandler+0x40>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f383 8811 	msr	BASEPRI, r3
}
 8003c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <vPortSuppressTicksAndSleep+0x180>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d902      	bls.n	8003cb4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <vPortSuppressTicksAndSleep+0x180>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8003cb4:	4b5a      	ldr	r3, [pc, #360]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a59      	ldr	r2, [pc, #356]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8003cc0:	4b58      	ldr	r3, [pc, #352]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	4957      	ldr	r1, [pc, #348]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003cca:	6809      	ldr	r1, [r1, #0]
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8003cd4:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <vPortSuppressTicksAndSleep+0x190>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d904      	bls.n	8003ce8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8003cde:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <vPortSuppressTicksAndSleep+0x190>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8003ce8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8003cea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8003cee:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8003cf2:	f7ff fcd5 	bl	80036a0 <eTaskConfirmSleepModeStatus>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d110      	bne.n	8003d1e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003cfc:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003cfe:	4a4c      	ldr	r2, [pc, #304]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8003d04:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a45      	ldr	r2, [pc, #276]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8003d10:	4b45      	ldr	r3, [pc, #276]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8003d1a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8003d1c:	e07a      	b.n	8003e14 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8003d1e:	4a44      	ldr	r2, [pc, #272]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d24:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8003d3a:	f107 030c 	add.w	r3, r7, #12
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fa1e 	bl	8000180 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8003d4a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8003d4e:	bf30      	wfi
				__asm volatile( "isb" );
 8003d50:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fc fa32 	bl	80001c0 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8003d5c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8003d5e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8003d62:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8003d66:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8003d68:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8003d6c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d72:	2206      	movs	r2, #6
 8003d74:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8003d76:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01d      	beq.n	8003dbe <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	1acb      	subs	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3b01      	subs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <vPortSuppressTicksAndSleep+0x190>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d304      	bcc.n	8003da8 <vPortSuppressTicksAndSleep+0x10c>
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d903      	bls.n	8003db0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	e018      	b.n	8003df0 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	fb03 f202 	mul.w	r2, r3, r2
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	fb03 f202 	mul.w	r2, r3, r2
 8003de8:	4911      	ldr	r1, [pc, #68]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <vPortSuppressTicksAndSleep+0x188>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <vPortSuppressTicksAndSleep+0x184>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8003e02:	69b8      	ldr	r0, [r7, #24]
 8003e04:	f7ff fad4 	bl	80033b0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <vPortSuppressTicksAndSleep+0x18c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <vPortSuppressTicksAndSleep+0x194>)
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8003e12:	b662      	cpsie	i
	}
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	200003f4 	.word	0x200003f4
 8003e20:	e000e010 	.word	0xe000e010
 8003e24:	e000e018 	.word	0xe000e018
 8003e28:	200003f0 	.word	0x200003f0
 8003e2c:	200003f8 	.word	0x200003f8
 8003e30:	e000e014 	.word	0xe000e014

08003e34 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <vPortSetupTimerInterrupt+0x58>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <vPortSetupTimerInterrupt+0x5c>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <vPortSetupTimerInterrupt+0x60>)
 8003e46:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <vPortSetupTimerInterrupt+0x60>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <vPortSetupTimerInterrupt+0x64>)
 8003e56:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <vPortSetupTimerInterrupt+0x68>)
 8003e5a:	222d      	movs	r2, #45	; 0x2d
 8003e5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <vPortSetupTimerInterrupt+0x6c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <vPortSetupTimerInterrupt+0x70>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <vPortSetupTimerInterrupt+0x58>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <vPortSetupTimerInterrupt+0x5c>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <vPortSetupTimerInterrupt+0x74>)
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <vPortSetupTimerInterrupt+0x6c>)
 8003e7e:	2207      	movs	r2, #7
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	10624dd3 	.word	0x10624dd3
 8003e94:	200003f0 	.word	0x200003f0
 8003e98:	200003f4 	.word	0x200003f4
 8003e9c:	200003f8 	.word	0x200003f8
 8003ea0:	e000e010 	.word	0xe000e010
 8003ea4:	e000e018 	.word	0xe000e018
 8003ea8:	e000e014 	.word	0xe000e014

08003eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003eb8:	f7ff f996 	bl	80031e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ebc:	4b58      	ldr	r3, [pc, #352]	; (8004020 <pvPortMalloc+0x174>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ec4:	f000 f910 	bl	80040e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ec8:	4b56      	ldr	r3, [pc, #344]	; (8004024 <pvPortMalloc+0x178>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 808e 	bne.w	8003ff2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01d      	beq.n	8003f18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003edc:	2208      	movs	r2, #8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f023 0307 	bic.w	r3, r3, #7
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <pvPortMalloc+0x6c>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	617b      	str	r3, [r7, #20]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d069      	beq.n	8003ff2 <pvPortMalloc+0x146>
 8003f1e:	4b42      	ldr	r3, [pc, #264]	; (8004028 <pvPortMalloc+0x17c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d864      	bhi.n	8003ff2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <pvPortMalloc+0x180>)
 8003f2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	; (800402c <pvPortMalloc+0x180>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f32:	e004      	b.n	8003f3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d903      	bls.n	8003f50 <pvPortMalloc+0xa4>
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f1      	bne.n	8003f34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <pvPortMalloc+0x174>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d04b      	beq.n	8003ff2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	4413      	add	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	2308      	movs	r3, #8
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d91f      	bls.n	8003fbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <pvPortMalloc+0xf8>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	613b      	str	r3, [r7, #16]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fb6:	69b8      	ldr	r0, [r7, #24]
 8003fb8:	f000 f8f8 	bl	80041ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <pvPortMalloc+0x17c>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <pvPortMalloc+0x17c>)
 8003fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <pvPortMalloc+0x17c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <pvPortMalloc+0x184>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <pvPortMalloc+0x17c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <pvPortMalloc+0x184>)
 8003fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <pvPortMalloc+0x178>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ff2:	f7ff f941 	bl	8003278 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <pvPortMalloc+0x16a>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <pvPortMalloc+0x168>
	return pvReturn;
 8004016:	69fb      	ldr	r3, [r7, #28]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000100c 	.word	0x2000100c
 8004024:	20001018 	.word	0x20001018
 8004028:	20001010 	.word	0x20001010
 800402c:	20001004 	.word	0x20001004
 8004030:	20001014 	.word	0x20001014

08004034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d048      	beq.n	80040d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004046:	2308      	movs	r3, #8
 8004048:	425b      	negs	r3, r3
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <vPortFree+0xac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <vPortFree+0x44>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <vPortFree+0x62>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60bb      	str	r3, [r7, #8]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <vPortFree+0xac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d115      	bne.n	80040d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <vPortFree+0xac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040bc:	f7ff f894 	bl	80031e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <vPortFree+0xb0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	4a06      	ldr	r2, [pc, #24]	; (80040e4 <vPortFree+0xb0>)
 80040cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ce:	6938      	ldr	r0, [r7, #16]
 80040d0:	f000 f86c 	bl	80041ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040d4:	f7ff f8d0 	bl	8003278 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20001018 	.word	0x20001018
 80040e4:	20001010 	.word	0x20001010

080040e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <prvHeapInit+0xac>)
 80040f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3307      	adds	r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0307 	bic.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <prvHeapInit+0xac>)
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <prvHeapInit+0xb0>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <prvHeapInit+0xb0>)
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004134:	2208      	movs	r2, #8
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a15      	ldr	r2, [pc, #84]	; (800419c <prvHeapInit+0xb4>)
 8004148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <prvHeapInit+0xb4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <prvHeapInit+0xb4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <prvHeapInit+0xb4>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <prvHeapInit+0xb8>)
 8004176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <prvHeapInit+0xbc>)
 800417e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <prvHeapInit+0xc0>)
 8004182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000404 	.word	0x20000404
 8004198:	20001004 	.word	0x20001004
 800419c:	2000100c 	.word	0x2000100c
 80041a0:	20001014 	.word	0x20001014
 80041a4:	20001010 	.word	0x20001010
 80041a8:	20001018 	.word	0x20001018

080041ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <prvInsertBlockIntoFreeList+0xa8>)
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e002      	b.n	80041c0 <prvInsertBlockIntoFreeList+0x14>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d8f7      	bhi.n	80041ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d108      	bne.n	80041ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	441a      	add	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d118      	bne.n	8004234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <prvInsertBlockIntoFreeList+0xac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d00d      	beq.n	800422a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e008      	b.n	800423c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <prvInsertBlockIntoFreeList+0xac>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e003      	b.n	800423c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d002      	beq.n	800424a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20001004 	.word	0x20001004
 8004258:	2000100c 	.word	0x2000100c

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 f820 	bl	80042b4 <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004398 	.word	0x08004398
 8004298:	08004398 	.word	0x08004398
 800429c:	08004398 	.word	0x08004398
 80042a0:	0800439c 	.word	0x0800439c

080042a4 <memset>:
 80042a4:	4402      	add	r2, r0
 80042a6:	4603      	mov	r3, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
